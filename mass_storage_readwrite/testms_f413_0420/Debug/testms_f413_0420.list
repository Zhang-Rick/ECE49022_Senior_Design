
testms_f413_0420.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd50  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800cf28  0800cf28  0001cf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0a8  0800d0a8  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0a8  0800d0a8  0001d0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0b0  0800d0b0  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0b0  0800d0b0  0001d0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0b4  0800d0b4  0001d0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800d0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b94  200001c8  0800d280  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  20001d5c  0800d280  00021d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020833  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000459e  00000000  00000000  00040a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  00044fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001160  00000000  00000000  00046328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026949  00000000  00000000  00047488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001589b  00000000  00000000  0006ddd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce085  00000000  00000000  0008366c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001516f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000501c  00000000  00000000  0015176c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c8 	.word	0x200001c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cf10 	.word	0x0800cf10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001cc 	.word	0x200001cc
 8000214:	0800cf10 	.word	0x0800cf10

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b972 	b.w	8000cf0 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	4688      	mov	r8, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d14b      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a32:	428a      	cmp	r2, r1
 8000a34:	4615      	mov	r5, r2
 8000a36:	d967      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	b14a      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a3e:	f1c2 0720 	rsb	r7, r2, #32
 8000a42:	fa01 f302 	lsl.w	r3, r1, r2
 8000a46:	fa20 f707 	lsr.w	r7, r0, r7
 8000a4a:	4095      	lsls	r5, r2
 8000a4c:	ea47 0803 	orr.w	r8, r7, r3
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a5c:	fa1f fc85 	uxth.w	ip, r5
 8000a60:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a68:	fb07 f10c 	mul.w	r1, r7, ip
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18eb      	adds	r3, r5, r3
 8000a72:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a76:	f080 811b 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8118 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000a80:	3f02      	subs	r7, #2
 8000a82:	442b      	add	r3, r5
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a98:	45a4      	cmp	ip, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	192c      	adds	r4, r5, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa2:	f080 8107 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	f240 8104 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000aac:	3802      	subs	r0, #2
 8000aae:	442c      	add	r4, r5
 8000ab0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ab4:	eba4 040c 	sub.w	r4, r4, ip
 8000ab8:	2700      	movs	r7, #0
 8000aba:	b11e      	cbz	r6, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d909      	bls.n	8000ae2 <__udivmoddi4+0xbe>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80eb 	beq.w	8000caa <__udivmoddi4+0x286>
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	e9c6 0100 	strd	r0, r1, [r6]
 8000ada:	4638      	mov	r0, r7
 8000adc:	4639      	mov	r1, r7
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	fab3 f783 	clz	r7, r3
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d147      	bne.n	8000b7a <__udivmoddi4+0x156>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xd0>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 80fa 	bhi.w	8000ce8 <__udivmoddi4+0x2c4>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb61 0303 	sbc.w	r3, r1, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	4698      	mov	r8, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d0e0      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b02:	e9c6 4800 	strd	r4, r8, [r6]
 8000b06:	e7dd      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b08:	b902      	cbnz	r2, 8000b0c <__udivmoddi4+0xe8>
 8000b0a:	deff      	udf	#255	; 0xff
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 808f 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b16:	1b49      	subs	r1, r1, r5
 8000b18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1c:	fa1f f885 	uxth.w	r8, r5
 8000b20:	2701      	movs	r7, #1
 8000b22:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb08 f10c 	mul.w	r1, r8, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	f200 80cd 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b46:	4684      	mov	ip, r0
 8000b48:	1a59      	subs	r1, r3, r1
 8000b4a:	b2a3      	uxth	r3, r4
 8000b4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b50:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b58:	fb08 f800 	mul.w	r8, r8, r0
 8000b5c:	45a0      	cmp	r8, r4
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x14c>
 8000b60:	192c      	adds	r4, r5, r4
 8000b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x14a>
 8000b68:	45a0      	cmp	r8, r4
 8000b6a:	f200 80b6 	bhi.w	8000cda <__udivmoddi4+0x2b6>
 8000b6e:	4618      	mov	r0, r3
 8000b70:	eba4 0408 	sub.w	r4, r4, r8
 8000b74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b78:	e79f      	b.n	8000aba <__udivmoddi4+0x96>
 8000b7a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b7e:	40bb      	lsls	r3, r7
 8000b80:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b84:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b88:	fa01 f407 	lsl.w	r4, r1, r7
 8000b8c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b90:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b94:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b98:	4325      	orrs	r5, r4
 8000b9a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b9e:	0c2c      	lsrs	r4, r5, #16
 8000ba0:	fb08 3319 	mls	r3, r8, r9, r3
 8000ba4:	fa1f fa8e 	uxth.w	sl, lr
 8000ba8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bac:	fb09 f40a 	mul.w	r4, r9, sl
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bb6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bc0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bc4:	f080 8087 	bcs.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f240 8084 	bls.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bce:	f1a9 0902 	sub.w	r9, r9, #2
 8000bd2:	4473      	add	r3, lr
 8000bd4:	1b1b      	subs	r3, r3, r4
 8000bd6:	b2ad      	uxth	r5, r5
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000be4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000be8:	45a2      	cmp	sl, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1e 0404 	adds.w	r4, lr, r4
 8000bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf4:	d26b      	bcs.n	8000cce <__udivmoddi4+0x2aa>
 8000bf6:	45a2      	cmp	sl, r4
 8000bf8:	d969      	bls.n	8000cce <__udivmoddi4+0x2aa>
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	4474      	add	r4, lr
 8000bfe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c02:	fba0 8902 	umull	r8, r9, r0, r2
 8000c06:	eba4 040a 	sub.w	r4, r4, sl
 8000c0a:	454c      	cmp	r4, r9
 8000c0c:	46c2      	mov	sl, r8
 8000c0e:	464b      	mov	r3, r9
 8000c10:	d354      	bcc.n	8000cbc <__udivmoddi4+0x298>
 8000c12:	d051      	beq.n	8000cb8 <__udivmoddi4+0x294>
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d069      	beq.n	8000cec <__udivmoddi4+0x2c8>
 8000c18:	ebb1 050a 	subs.w	r5, r1, sl
 8000c1c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c20:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c24:	40fd      	lsrs	r5, r7
 8000c26:	40fc      	lsrs	r4, r7
 8000c28:	ea4c 0505 	orr.w	r5, ip, r5
 8000c2c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c30:	2700      	movs	r7, #0
 8000c32:	e747      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000c34:	f1c2 0320 	rsb	r3, r2, #32
 8000c38:	fa20 f703 	lsr.w	r7, r0, r3
 8000c3c:	4095      	lsls	r5, r2
 8000c3e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c42:	fa21 f303 	lsr.w	r3, r1, r3
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	4338      	orrs	r0, r7
 8000c4c:	0c01      	lsrs	r1, r0, #16
 8000c4e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c52:	fa1f f885 	uxth.w	r8, r5
 8000c56:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5e:	fb07 f308 	mul.w	r3, r7, r8
 8000c62:	428b      	cmp	r3, r1
 8000c64:	fa04 f402 	lsl.w	r4, r4, r2
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x256>
 8000c6a:	1869      	adds	r1, r5, r1
 8000c6c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c70:	d22f      	bcs.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d92d      	bls.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c76:	3f02      	subs	r7, #2
 8000c78:	4429      	add	r1, r5
 8000c7a:	1acb      	subs	r3, r1, r3
 8000c7c:	b281      	uxth	r1, r0
 8000c7e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c82:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c86:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8a:	fb00 f308 	mul.w	r3, r0, r8
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x27e>
 8000c92:	1869      	adds	r1, r5, r1
 8000c94:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c98:	d217      	bcs.n	8000cca <__udivmoddi4+0x2a6>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d915      	bls.n	8000cca <__udivmoddi4+0x2a6>
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	4429      	add	r1, r5
 8000ca2:	1ac9      	subs	r1, r1, r3
 8000ca4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ca8:	e73b      	b.n	8000b22 <__udivmoddi4+0xfe>
 8000caa:	4637      	mov	r7, r6
 8000cac:	4630      	mov	r0, r6
 8000cae:	e709      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cb0:	4607      	mov	r7, r0
 8000cb2:	e6e7      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	e6fb      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb8:	4541      	cmp	r1, r8
 8000cba:	d2ab      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cbc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cc0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	e7a4      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000cca:	4660      	mov	r0, ip
 8000ccc:	e7e9      	b.n	8000ca2 <__udivmoddi4+0x27e>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	e795      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd2:	4667      	mov	r7, ip
 8000cd4:	e7d1      	b.n	8000c7a <__udivmoddi4+0x256>
 8000cd6:	4681      	mov	r9, r0
 8000cd8:	e77c      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	442c      	add	r4, r5
 8000cde:	e747      	b.n	8000b70 <__udivmoddi4+0x14c>
 8000ce0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ce4:	442b      	add	r3, r5
 8000ce6:	e72f      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce8:	4638      	mov	r0, r7
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xda>
 8000cec:	4637      	mov	r7, r6
 8000cee:	e6e9      	b.n	8000ac4 <__udivmoddi4+0xa0>

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <bufclear>:
	}
	return i;
}

void bufclear (void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
	for(int i = 0; i<1024; i++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	e007      	b.n	8000d10 <bufclear+0x1c>
	{
		buffer[i] = '\0';
 8000d00:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <bufclear+0x30>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<1024; i++)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d16:	dbf3      	blt.n	8000d00 <bufclear+0xc>
	}
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	20000464 	.word	0x20000464

08000d28 <main>:

int main(void)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2e:	f000 fb1d 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d32:	f000 f8b7 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d36:	f000 f95d 	bl	8000ff4 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000d3a:	f000 f93b 	bl	8000fb4 <MX_SDIO_SD_Init>
  MX_USB_DEVICE_Init();
 8000d3e:	f00b faf7 	bl	800c330 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8000d42:	f006 f8ef 	bl	8006f24 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_SD_Init(&hsd);
 8000d46:	4849      	ldr	r0, [pc, #292]	; (8000e6c <main+0x144>)
 8000d48:	f002 ff02 	bl	8003b50 <HAL_SD_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2180      	movs	r1, #128	; 0x80
 8000d50:	4847      	ldr	r0, [pc, #284]	; (8000e70 <main+0x148>)
 8000d52:	f000 fe43 	bl	80019dc <HAL_GPIO_WritePin>
  HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B);
 8000d56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d5a:	4844      	ldr	r0, [pc, #272]	; (8000e6c <main+0x144>)
 8000d5c:	f003 fcf0 	bl	8004740 <HAL_SD_ConfigWideBusOperation>
  HAL_Delay(500);
 8000d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d64:	f000 fb74 	bl	8001450 <HAL_Delay>
  /* USER CODE END 2 */
  MX_FATFS_Init();
 8000d68:	f006 f8dc 	bl	8006f24 <MX_FATFS_Init>

  fres = f_mount(&fs, "", 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4941      	ldr	r1, [pc, #260]	; (8000e74 <main+0x14c>)
 8000d70:	4841      	ldr	r0, [pc, #260]	; (8000e78 <main+0x150>)
 8000d72:	f00a fc3b 	bl	800b5ec <f_mount>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b40      	ldr	r3, [pc, #256]	; (8000e7c <main+0x154>)
 8000d7c:	701a      	strb	r2, [r3, #0]
   if(fres != FR_OK) HAL_Delay(10);
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <main+0x154>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <main+0x66>
 8000d86:	200a      	movs	r0, #10
 8000d88:	f000 fb62 	bl	8001450 <HAL_Delay>
 8000d8c:	e002      	b.n	8000d94 <main+0x6c>
   else HAL_Delay(10);//send_uart("SD CARD mounted successfully...\n");
 8000d8e:	200a      	movs	r0, #10
 8000d90:	f000 fb5e 	bl	8001450 <HAL_Delay>

   // check free space
         f_getfree("", &fre_clust, &pfs);
 8000d94:	4a3a      	ldr	r2, [pc, #232]	; (8000e80 <main+0x158>)
 8000d96:	493b      	ldr	r1, [pc, #236]	; (8000e84 <main+0x15c>)
 8000d98:	4836      	ldr	r0, [pc, #216]	; (8000e74 <main+0x14c>)
 8000d9a:	f00b f8df 	bl	800bf5c <f_getfree>
         total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000d9e:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <main+0x158>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	3b02      	subs	r3, #2
 8000da6:	4a36      	ldr	r2, [pc, #216]	; (8000e80 <main+0x158>)
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	8952      	ldrh	r2, [r2, #10]
 8000dac:	fb02 f303 	mul.w	r3, r2, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fb73 	bl	800049c <__aeabi_ui2d>
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <main+0x160>)
 8000dbc:	f7ff fbe8 	bl	8000590 <__aeabi_dmul>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	460c      	mov	r4, r1
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	4621      	mov	r1, r4
 8000dc8:	f7ff fdf4 	bl	80009b4 <__aeabi_d2uiz>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <main+0x164>)
 8000dd0:	601a      	str	r2, [r3, #0]
         //sprintf (buffer, "SD CARD Free Space: \t%lu\n",free1);
         bufclear();
 8000dd2:	f7ff ff8f 	bl	8000cf4 <bufclear>
         free1 = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <main+0x158>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	895b      	ldrh	r3, [r3, #10]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <main+0x15c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	fb03 f302 	mul.w	r3, r3, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fb58 	bl	800049c <__aeabi_ui2d>
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <main+0x160>)
 8000df2:	f7ff fbcd 	bl	8000590 <__aeabi_dmul>
 8000df6:	4603      	mov	r3, r0
 8000df8:	460c      	mov	r4, r1
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	4621      	mov	r1, r4
 8000dfe:	f7ff fdd9 	bl	80009b4 <__aeabi_d2uiz>
 8000e02:	4602      	mov	r2, r0
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <main+0x168>)
 8000e06:	601a      	str	r2, [r3, #0]
         //send_uart(buffer);

       // Open file to write
         fres = f_open(&fil, "hhh.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000e08:	2213      	movs	r2, #19
 8000e0a:	4922      	ldr	r1, [pc, #136]	; (8000e94 <main+0x16c>)
 8000e0c:	4822      	ldr	r0, [pc, #136]	; (8000e98 <main+0x170>)
 8000e0e:	f00a fc33 	bl	800b678 <f_open>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <main+0x154>)
 8000e18:	701a      	strb	r2, [r3, #0]
       // writing text
         fres = f_puts("This data is from the First FILE\n\n", &fil);
 8000e1a:	491f      	ldr	r1, [pc, #124]	; (8000e98 <main+0x170>)
 8000e1c:	481f      	ldr	r0, [pc, #124]	; (8000e9c <main+0x174>)
 8000e1e:	f00b fa07 	bl	800c230 <f_puts>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <main+0x154>)
 8000e28:	701a      	strb	r2, [r3, #0]
         char a;

                  //send_uart(buffe
       // close file
         UINT* br1;
         fres =f_read(&fil,buffer,1024,br1);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e30:	491b      	ldr	r1, [pc, #108]	; (8000ea0 <main+0x178>)
 8000e32:	4819      	ldr	r0, [pc, #100]	; (8000e98 <main+0x170>)
 8000e34:	f00a fdde 	bl	800b9f4 <f_read>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <main+0x154>)
 8000e3e:	701a      	strb	r2, [r3, #0]
       //Read string from the file
         a = buffer[0];
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <main+0x178>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	70fb      	strb	r3, [r7, #3]
         a = buffer[1];
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <main+0x178>)
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	70fb      	strb	r3, [r7, #3]
         a = buffer[2];
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <main+0x178>)
 8000e4e:	789b      	ldrb	r3, [r3, #2]
 8000e50:	70fb      	strb	r3, [r7, #3]
         a = buffer[3];
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <main+0x178>)
 8000e54:	78db      	ldrb	r3, [r3, #3]
 8000e56:	70fb      	strb	r3, [r7, #3]
         f_gets(buffer, sizeof(buffer), &fil);
 8000e58:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <main+0x170>)
 8000e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5e:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <main+0x178>)
 8000e60:	f00b f931 	bl	800c0c6 <f_gets>
         a = buffer;
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <main+0x178>)
 8000e66:	70fb      	strb	r3, [r7, #3]
  //		fresult=f_unlink("stm32.txt");
//  	}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <main+0x140>
 8000e6a:	bf00      	nop
 8000e6c:	200008c8 	.word	0x200008c8
 8000e70:	40020800 	.word	0x40020800
 8000e74:	0800cf28 	.word	0x0800cf28
 8000e78:	20000230 	.word	0x20000230
 8000e7c:	2000097c 	.word	0x2000097c
 8000e80:	20000950 	.word	0x20000950
 8000e84:	20000228 	.word	0x20000228
 8000e88:	3fe00000 	.word	0x3fe00000
 8000e8c:	20000958 	.word	0x20000958
 8000e90:	20000460 	.word	0x20000460
 8000e94:	0800cf2c 	.word	0x0800cf2c
 8000e98:	20000980 	.word	0x20000980
 8000e9c:	0800cf34 	.word	0x0800cf34
 8000ea0:	20000464 	.word	0x20000464

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0aa      	sub	sp, #168	; 0xa8
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000eae:	2234      	movs	r2, #52	; 0x34
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00b ff6a 	bl	800cd8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	2258      	movs	r2, #88	; 0x58
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00b ff5b 	bl	800cd8c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b34      	ldr	r3, [pc, #208]	; (8000fac <SystemClock_Config+0x108>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a33      	ldr	r2, [pc, #204]	; (8000fac <SystemClock_Config+0x108>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <SystemClock_Config+0x108>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <SystemClock_Config+0x10c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a2d      	ldr	r2, [pc, #180]	; (8000fb0 <SystemClock_Config+0x10c>)
 8000efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <SystemClock_Config+0x10c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f16:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f26:	2304      	movs	r3, #4
 8000f28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f2c:	2348      	movs	r3, #72	; 0x48
 8000f2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 fbbf 	bl	80036cc <HAL_RCC_OscConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f54:	f000 f8ac 	bl	80010b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f58:	230f      	movs	r3, #15
 8000f5a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f72:	2102      	movs	r1, #2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 ff53 	bl	8002e20 <HAL_RCC_ClockConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000f80:	f000 f896 	bl	80010b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000f84:	2360      	movs	r3, #96	; 0x60
 8000f86:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 f90d 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000fa0:	f000 f886 	bl	80010b0 <Error_Handler>
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	37a8      	adds	r7, #168	; 0xa8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40007000 	.word	0x40007000

08000fb4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_SDIO_SD_Init+0x38>)
 8000fba:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <MX_SDIO_SD_Init+0x3c>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_SDIO_SD_Init+0x38>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_SDIO_SD_Init+0x38>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_SDIO_SD_Init+0x38>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_SDIO_SD_Init+0x38>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <MX_SDIO_SD_Init+0x38>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 36;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <MX_SDIO_SD_Init+0x38>)
 8000fde:	2224      	movs	r2, #36	; 0x24
 8000fe0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	200008c8 	.word	0x200008c8
 8000ff0:	40012c00 	.word	0x40012c00

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_GPIO_Init+0xb4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <MX_GPIO_Init+0xb4>)
 8001014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <MX_GPIO_Init+0xb4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_GPIO_Init+0xb4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a1e      	ldr	r2, [pc, #120]	; (80010a8 <MX_GPIO_Init+0xb4>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_GPIO_Init+0xb4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_GPIO_Init+0xb4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <MX_GPIO_Init+0xb4>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_GPIO_Init+0xb4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_GPIO_Init+0xb4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <MX_GPIO_Init+0xb4>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_GPIO_Init+0xb4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	480b      	ldr	r0, [pc, #44]	; (80010ac <MX_GPIO_Init+0xb8>)
 8001080:	f000 fcac 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_GPIO_Init+0xb8>)
 800109c:	f000 fb0c 	bl	80016b8 <HAL_GPIO_Init>

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <HAL_MspInit+0x4c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <HAL_MspInit+0x4c>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_MspInit+0x4c>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a38      	ldr	r2, [pc, #224]	; (8001210 <HAL_SD_MspInit+0x100>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d169      	bne.n	8001206 <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	4b37      	ldr	r3, [pc, #220]	; (8001214 <HAL_SD_MspInit+0x104>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a36      	ldr	r2, [pc, #216]	; (8001214 <HAL_SD_MspInit+0x104>)
 800113c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <HAL_SD_MspInit+0x104>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_SD_MspInit+0x104>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a2f      	ldr	r2, [pc, #188]	; (8001214 <HAL_SD_MspInit+0x104>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_SD_MspInit+0x104>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <HAL_SD_MspInit+0x104>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a28      	ldr	r2, [pc, #160]	; (8001214 <HAL_SD_MspInit+0x104>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_SD_MspInit+0x104>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <HAL_SD_MspInit+0x104>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a21      	ldr	r2, [pc, #132]	; (8001214 <HAL_SD_MspInit+0x104>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_SD_MspInit+0x104>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011a2:	2340      	movs	r3, #64	; 0x40
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011b2:	230c      	movs	r3, #12
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4816      	ldr	r0, [pc, #88]	; (8001218 <HAL_SD_MspInit+0x108>)
 80011be:	f000 fa7b 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011d4:	230c      	movs	r3, #12
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <HAL_SD_MspInit+0x10c>)
 80011e0:	f000 fa6a 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80011e4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011f6:	230c      	movs	r3, #12
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <HAL_SD_MspInit+0x110>)
 8001202:	f000 fa59 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	3730      	adds	r7, #48	; 0x30
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40012c00 	.word	0x40012c00
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f8ca 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <OTG_FS_IRQHandler+0x10>)
 8001286:	f000 fd19 	bl	8001cbc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20001950 	.word	0x20001950

08001294 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <_sbrk+0x50>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x16>
		heap_end = &end;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <_sbrk+0x50>)
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <_sbrk+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <_sbrk+0x50>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <_sbrk+0x50>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4413      	add	r3, r2
 80012b8:	466a      	mov	r2, sp
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d907      	bls.n	80012ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012be:	f00b fd2b 	bl	800cd18 <__errno>
 80012c2:	4602      	mov	r2, r0
 80012c4:	230c      	movs	r3, #12
 80012c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	e006      	b.n	80012dc <_sbrk+0x48>
	}

	heap_end += incr;
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <_sbrk+0x50>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <_sbrk+0x50>)
 80012d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200001e4 	.word	0x200001e4
 80012e8:	20001d60 	.word	0x20001d60

080012ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <SystemInit+0x28>)
 80012f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <SystemInit+0x28>)
 80012f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SystemInit+0x28>)
 8001302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001306:	609a      	str	r2, [r3, #8]
#endif
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001350 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800131c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800131e:	e003      	b.n	8001328 <LoopCopyDataInit>

08001320 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001322:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001324:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001326:	3104      	adds	r1, #4

08001328 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800132c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800132e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001330:	d3f6      	bcc.n	8001320 <CopyDataInit>
  ldr  r2, =_sbss
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001334:	e002      	b.n	800133c <LoopFillZerobss>

08001336 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001336:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001338:	f842 3b04 	str.w	r3, [r2], #4

0800133c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800133e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001340:	d3f9      	bcc.n	8001336 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001342:	f7ff ffd3 	bl	80012ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001346:	f00b fced 	bl	800cd24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134a:	f7ff fced 	bl	8000d28 <main>
  bx  lr    
 800134e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001350:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001354:	0800d0b8 	.word	0x0800d0b8
  ldr  r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800135c:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8001360:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8001364:	20001d5c 	.word	0x20001d5c

08001368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <HAL_Init+0x40>)
 8001376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_Init+0x40>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001386:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_Init+0x40>)
 800138e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001394:	2003      	movs	r0, #3
 8001396:	f000 f94d 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f808 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a0:	f7ff fe8e 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023c00 	.word	0x40023c00

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x54>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_InitTick+0x58>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f965 	bl	800169e <HAL_SYSTICK_Config>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e00e      	b.n	80013fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d80a      	bhi.n	80013fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f000 f92d 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4a06      	ldr	r2, [pc, #24]	; (800140c <HAL_InitTick+0x5c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000000 	.word	0x20000000
 8001408:	20000008 	.word	0x20000008
 800140c:	20000004 	.word	0x20000004

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008
 8001434:	20001010 	.word	0x20001010

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20001010 	.word	0x20001010

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_Delay+0x40>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000008 	.word	0x20000008

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff29 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff3e 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff31 	bl	80014f8 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e165      	b.n	80019a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8154 	bne.w	800199a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d00b      	beq.n	8001712 <HAL_GPIO_Init+0x5a>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001706:	2b11      	cmp	r3, #17
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b12      	cmp	r3, #18
 8001710:	d130      	bne.n	8001774 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 0201 	and.w	r2, r3, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0xfc>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b12      	cmp	r3, #18
 80017b2:	d123      	bne.n	80017fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	69b9      	ldr	r1, [r7, #24]
 80017f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0203 	and.w	r2, r3, #3
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80ae 	beq.w	800199a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b5c      	ldr	r3, [pc, #368]	; (80019b4 <HAL_GPIO_Init+0x2fc>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a5b      	ldr	r2, [pc, #364]	; (80019b4 <HAL_GPIO_Init+0x2fc>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <HAL_GPIO_Init+0x2fc>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800185a:	4a57      	ldr	r2, [pc, #348]	; (80019b8 <HAL_GPIO_Init+0x300>)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4e      	ldr	r2, [pc, #312]	; (80019bc <HAL_GPIO_Init+0x304>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d025      	beq.n	80018d2 <HAL_GPIO_Init+0x21a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4d      	ldr	r2, [pc, #308]	; (80019c0 <HAL_GPIO_Init+0x308>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d01f      	beq.n	80018ce <HAL_GPIO_Init+0x216>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4c      	ldr	r2, [pc, #304]	; (80019c4 <HAL_GPIO_Init+0x30c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d019      	beq.n	80018ca <HAL_GPIO_Init+0x212>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4b      	ldr	r2, [pc, #300]	; (80019c8 <HAL_GPIO_Init+0x310>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_GPIO_Init+0x20e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4a      	ldr	r2, [pc, #296]	; (80019cc <HAL_GPIO_Init+0x314>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00d      	beq.n	80018c2 <HAL_GPIO_Init+0x20a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a49      	ldr	r2, [pc, #292]	; (80019d0 <HAL_GPIO_Init+0x318>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d007      	beq.n	80018be <HAL_GPIO_Init+0x206>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <HAL_GPIO_Init+0x31c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_GPIO_Init+0x202>
 80018b6:	2306      	movs	r3, #6
 80018b8:	e00c      	b.n	80018d4 <HAL_GPIO_Init+0x21c>
 80018ba:	2307      	movs	r3, #7
 80018bc:	e00a      	b.n	80018d4 <HAL_GPIO_Init+0x21c>
 80018be:	2305      	movs	r3, #5
 80018c0:	e008      	b.n	80018d4 <HAL_GPIO_Init+0x21c>
 80018c2:	2304      	movs	r3, #4
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x21c>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e004      	b.n	80018d4 <HAL_GPIO_Init+0x21c>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_Init+0x21c>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x21c>
 80018d2:	2300      	movs	r3, #0
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	f002 0203 	and.w	r2, r2, #3
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	4093      	lsls	r3, r2
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e4:	4934      	ldr	r1, [pc, #208]	; (80019b8 <HAL_GPIO_Init+0x300>)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_GPIO_Init+0x320>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001916:	4a30      	ldr	r2, [pc, #192]	; (80019d8 <HAL_GPIO_Init+0x320>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_GPIO_Init+0x320>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001940:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <HAL_GPIO_Init+0x320>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <HAL_GPIO_Init+0x320>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196a:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <HAL_GPIO_Init+0x320>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_GPIO_Init+0x320>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001994:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_GPIO_Init+0x320>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3301      	adds	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	f67f ae96 	bls.w	80016d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a8:	bf00      	nop
 80019aa:	3724      	adds	r7, #36	; 0x24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40013800 	.word	0x40013800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020400 	.word	0x40020400
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40021400 	.word	0x40021400
 80019d4:	40021800 	.word	0x40021800
 80019d8:	40013c00 	.word	0x40013c00

080019dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
 80019e8:	4613      	mov	r3, r2
 80019ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ec:	787b      	ldrb	r3, [r7, #1]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f8:	e003      	b.n	8001a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	041a      	lsls	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	619a      	str	r2, [r3, #24]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a10:	b08f      	sub	sp, #60	; 0x3c
 8001a12:	af0a      	add	r7, sp, #40	; 0x28
 8001a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e116      	b.n	8001c4e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f00a fe56 	bl	800c6ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2203      	movs	r2, #3
 8001a44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 f867 	bl	8005b32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	687e      	ldr	r6, [r7, #4]
 8001a6c:	466d      	mov	r5, sp
 8001a6e:	f106 0410 	add.w	r4, r6, #16
 8001a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a82:	1d33      	adds	r3, r6, #4
 8001a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a86:	6838      	ldr	r0, [r7, #0]
 8001a88:	f003 ff3e 	bl	8005908 <USB_CoreInit>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0d7      	b.n	8001c4e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 f855 	bl	8005b54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	e04a      	b.n	8001b46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	333d      	adds	r3, #61	; 0x3d
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	333c      	adds	r3, #60	; 0x3c
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	b298      	uxth	r0, r3
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3342      	adds	r3, #66	; 0x42
 8001aec:	4602      	mov	r2, r0
 8001aee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001af0:	7bfa      	ldrb	r2, [r7, #15]
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	333f      	adds	r3, #63	; 0x3f
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	3344      	adds	r3, #68	; 0x44
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	3348      	adds	r3, #72	; 0x48
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	3350      	adds	r3, #80	; 0x50
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	3301      	adds	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d3af      	bcc.n	8001ab0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e044      	b.n	8001be0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001b7e:	7bfa      	ldrb	r2, [r7, #15]
 8001b80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	1a9b      	subs	r3, r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d3b5      	bcc.n	8001b56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	687e      	ldr	r6, [r7, #4]
 8001bf2:	466d      	mov	r5, sp
 8001bf4:	f106 0410 	add.w	r4, r6, #16
 8001bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c04:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c08:	1d33      	adds	r3, r6, #4
 8001c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	f003 ffcb 	bl	8005ba8 <USB_DevInit>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e014      	b.n	8001c4e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d102      	bne.n	8001c42 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f001 f8bf 	bl	8002dc0 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 fffd 	bl	8006c46 <USB_DevDisconnect>

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c56 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_PCD_Start+0x1c>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e020      	b.n	8001cb4 <HAL_PCD_Start+0x5e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d109      	bne.n	8001c96 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d005      	beq.n	8001c96 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 ffbb 	bl	8006c16 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 ff33 	bl	8005b10 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b08d      	sub	sp, #52	; 0x34
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f005 f862 	bl	8006d9c <USB_GetMode>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f040 83ca 	bne.w	8002474 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f004 ffc6 	bl	8006c76 <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 83c0 	beq.w	8002472 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 ffbd 	bl	8006c76 <USB_ReadInterrupts>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f002 0202 	and.w	r2, r2, #2
 8001d14:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f004 ffab 	bl	8006c76 <USB_ReadInterrupts>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d161      	bne.n	8001dee <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699a      	ldr	r2, [r3, #24]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0210 	bic.w	r2, r2, #16
 8001d38:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	f003 020f 	and.w	r2, r3, #15
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	3304      	adds	r3, #4
 8001d58:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	0c5b      	lsrs	r3, r3, #17
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d124      	bne.n	8001db0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d035      	beq.n	8001dde <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	6a38      	ldr	r0, [r7, #32]
 8001d86:	f004 fe23 	bl	80069d0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d96:	441a      	add	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001da8:	441a      	add	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	619a      	str	r2, [r3, #24]
 8001dae:	e016      	b.n	8001dde <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	0c5b      	lsrs	r3, r3, #17
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	2b06      	cmp	r3, #6
 8001dba:	d110      	bne.n	8001dde <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6a38      	ldr	r0, [r7, #32]
 8001dc8:	f004 fe02 	bl	80069d0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	699a      	ldr	r2, [r3, #24]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dd8:	441a      	add	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699a      	ldr	r2, [r3, #24]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0210 	orr.w	r2, r2, #16
 8001dec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 ff3f 	bl	8006c76 <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dfe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e02:	d16e      	bne.n	8001ee2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f004 ff45 	bl	8006c9c <USB_ReadDevAllOutEpInterrupt>
 8001e12:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e14:	e062      	b.n	8001edc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d057      	beq.n	8001ed0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 ff6a 	bl	8006d04 <USB_ReadDevOutEPInterrupt>
 8001e30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00c      	beq.n	8001e56 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fe0b 	bl	8002a6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00c      	beq.n	8001e7a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2308      	movs	r3, #8
 8001e70:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 ff05 	bl	8002c84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e90:	461a      	mov	r2, r3
 8001e92:	2310      	movs	r3, #16
 8001e94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eac:	461a      	mov	r2, r3
 8001eae:	2320      	movs	r3, #32
 8001eb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d009      	beq.n	8001ed0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ece:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d199      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 fec5 	bl	8006c76 <USB_ReadInterrupts>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ef6:	f040 80c0 	bne.w	800207a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 fee6 	bl	8006cd0 <USB_ReadDevAllInEpInterrupt>
 8001f04:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f0a:	e0b2      	b.n	8002072 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80a7 	beq.w	8002066 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 ff0c 	bl	8006d40 <USB_ReadDevInEPInterrupt>
 8001f28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d057      	beq.n	8001fe4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69f9      	ldr	r1, [r7, #28]
 8001f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f54:	4013      	ands	r3, r2
 8001f56:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f64:	461a      	mov	r2, r3
 8001f66:	2301      	movs	r3, #1
 8001f68:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d132      	bne.n	8001fd8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	3348      	adds	r3, #72	; 0x48
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4403      	add	r3, r0
 8001f92:	3344      	adds	r3, #68	; 0x44
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4419      	add	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4403      	add	r3, r0
 8001fa6:	3348      	adds	r3, #72	; 0x48
 8001fa8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d113      	bne.n	8001fd8 <HAL_PCD_IRQHandler+0x31c>
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3350      	adds	r3, #80	; 0x50
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d108      	bne.n	8001fd8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	f004 ff14 	bl	8006e00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4619      	mov	r1, r3
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f00a fc05 	bl	800c7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	4413      	add	r3, r2
 8002012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002016:	461a      	mov	r2, r3
 8002018:	2310      	movs	r3, #16
 800201a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	4413      	add	r3, r2
 800202e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002032:	461a      	mov	r2, r3
 8002034:	2340      	movs	r3, #64	; 0x40
 8002036:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800204e:	461a      	mov	r2, r3
 8002050:	2302      	movs	r3, #2
 8002052:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800205e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 fc75 	bl	8002950 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	3301      	adds	r3, #1
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	2b00      	cmp	r3, #0
 8002076:	f47f af49 	bne.w	8001f0c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f004 fdf9 	bl	8006c76 <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800208a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800208e:	d122      	bne.n	80020d6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d108      	bne.n	80020c0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020b6:	2100      	movs	r1, #0
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fea5 	bl	8002e08 <HAL_PCDEx_LPM_Callback>
 80020be:	e002      	b.n	80020c6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f00a fc01 	bl	800c8c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695a      	ldr	r2, [r3, #20]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 fdcb 	bl	8006c76 <USB_ReadInterrupts>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020ea:	d112      	bne.n	8002112 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d102      	bne.n	8002102 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f00a fbbd 	bl	800c87c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002110:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f004 fdad 	bl	8006c76 <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002126:	d121      	bne.n	800216c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002136:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d111      	bne.n	8002166 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	089b      	lsrs	r3, r3, #2
 8002152:	f003 020f 	and.w	r2, r3, #15
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800215c:	2101      	movs	r1, #1
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fe52 	bl	8002e08 <HAL_PCDEx_LPM_Callback>
 8002164:	e002      	b.n	800216c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f00a fb88 	bl	800c87c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f004 fd80 	bl	8006c76 <USB_ReadInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002180:	f040 80c7 	bne.w	8002312 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2110      	movs	r1, #16
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 fe60 	bl	8005e64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a8:	e056      	b.n	8002258 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b6:	461a      	mov	r2, r3
 80021b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ce:	0151      	lsls	r1, r2, #5
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	440a      	add	r2, r1
 80021d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021dc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ee:	0151      	lsls	r1, r2, #5
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	440a      	add	r2, r1
 80021f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220a:	461a      	mov	r2, r3
 800220c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002210:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002222:	0151      	lsls	r1, r2, #5
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	440a      	add	r2, r1
 8002228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800222c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002230:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002242:	0151      	lsls	r1, r2, #5
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	440a      	add	r2, r1
 8002248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800224c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002250:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002254:	3301      	adds	r3, #1
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225e:	429a      	cmp	r2, r3
 8002260:	d3a3      	bcc.n	80021aa <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002270:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002274:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	2b00      	cmp	r3, #0
 800227c:	d016      	beq.n	80022ac <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228e:	f043 030b 	orr.w	r3, r3, #11
 8002292:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a4:	f043 030b 	orr.w	r3, r3, #11
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	e015      	b.n	80022d8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022be:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022d2:	f043 030b 	orr.w	r3, r3, #11
 80022d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80022ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022fc:	461a      	mov	r2, r3
 80022fe:	f004 fd7f 	bl	8006e00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f004 fcad 	bl	8006c76 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002326:	d124      	bne.n	8002372 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f004 fd43 	bl	8006db8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fdf5 	bl	8005f26 <USB_GetDevSpeed>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681c      	ldr	r4, [r3, #0]
 8002348:	f000 ff28 	bl	800319c <HAL_RCC_GetHCLKFreq>
 800234c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	4620      	mov	r0, r4
 8002358:	f003 fb38 	bl	80059cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f00a fa6e 	bl	800c83e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002370:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f004 fc7d 	bl	8006c76 <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b08      	cmp	r3, #8
 8002384:	d10a      	bne.n	800239c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f00a fa4b 	bl	800c822 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f002 0208 	and.w	r2, r2, #8
 800239a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 fc68 	bl	8006c76 <USB_ReadInterrupts>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023b0:	d10f      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4619      	mov	r1, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f00a faa3 	bl	800c908 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80023d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 fc4d 	bl	8006c76 <USB_ReadInterrupts>
 80023dc:	4603      	mov	r3, r0
 80023de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023e6:	d10f      	bne.n	8002408 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4619      	mov	r1, r3
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f00a fa76 	bl	800c8e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002406:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f004 fc32 	bl	8006c76 <USB_ReadInterrupts>
 8002412:	4603      	mov	r3, r0
 8002414:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241c:	d10a      	bne.n	8002434 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f00a fa84 	bl	800c92c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002432:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f004 fc1c 	bl	8006c76 <USB_ReadInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b04      	cmp	r3, #4
 8002446:	d115      	bne.n	8002474 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f00a fa74 	bl	800c948 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	430a      	orrs	r2, r1
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	e000      	b.n	8002474 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002472:	bf00      	nop
    }
  }
}
 8002474:	3734      	adds	r7, #52	; 0x34
 8002476:	46bd      	mov	sp, r7
 8002478:	bd90      	pop	{r4, r7, pc}

0800247a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_PCD_SetAddress+0x1a>
 8002490:	2302      	movs	r3, #2
 8002492:	e013      	b.n	80024bc <HAL_PCD_SetAddress+0x42>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 fb8c 	bl	8006bca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	70fb      	strb	r3, [r7, #3]
 80024d6:	460b      	mov	r3, r1
 80024d8:	803b      	strh	r3, [r7, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	da0f      	bge.n	800250a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	3338      	adds	r3, #56	; 0x38
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	3304      	adds	r3, #4
 8002500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	705a      	strb	r2, [r3, #1]
 8002508:	e00f      	b.n	800252a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	f003 020f 	and.w	r2, r3, #15
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	3304      	adds	r3, #4
 8002522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002536:	883a      	ldrh	r2, [r7, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	78ba      	ldrb	r2, [r7, #2]
 8002540:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002554:	78bb      	ldrb	r3, [r7, #2]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d102      	bne.n	8002560 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_PCD_EP_Open+0xaa>
 800256a:	2302      	movs	r3, #2
 800256c:	e00e      	b.n	800258c <HAL_PCD_EP_Open+0xc8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68f9      	ldr	r1, [r7, #12]
 800257c:	4618      	mov	r0, r3
 800257e:	f003 fcf7 	bl	8005f70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800258a:	7afb      	ldrb	r3, [r7, #11]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da0f      	bge.n	80025c8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 020f 	and.w	r2, r3, #15
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	3338      	adds	r3, #56	; 0x38
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	705a      	strb	r2, [r3, #1]
 80025c6:	e00f      	b.n	80025e8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	f003 020f 	and.w	r2, r3, #15
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	3304      	adds	r3, #4
 80025e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_PCD_EP_Close+0x6e>
 80025fe:	2302      	movs	r3, #2
 8002600:	e00e      	b.n	8002620 <HAL_PCD_EP_Close+0x8c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68f9      	ldr	r1, [r7, #12]
 8002610:	4618      	mov	r0, r3
 8002612:	f003 fd35 	bl	8006080 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	460b      	mov	r3, r1
 8002636:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002638:	7afb      	ldrb	r3, [r7, #11]
 800263a:	f003 020f 	and.w	r2, r3, #15
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4413      	add	r3, r2
 800264e:	3304      	adds	r3, #4
 8002650:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2200      	movs	r2, #0
 8002668:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	b2da      	uxtb	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002684:	7afb      	ldrb	r3, [r7, #11]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	6979      	ldr	r1, [r7, #20]
 800269c:	f004 f810 	bl	80066c0 <USB_EP0StartXfer>
 80026a0:	e008      	b.n	80026b4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	6979      	ldr	r1, [r7, #20]
 80026b0:	f003 fdc2 	bl	8006238 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 020f 	and.w	r2, r3, #15
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80026e0:	681b      	ldr	r3, [r3, #0]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	460b      	mov	r3, r1
 80026fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	f003 020f 	and.w	r2, r3, #15
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	3338      	adds	r3, #56	; 0x38
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4413      	add	r3, r2
 8002712:	3304      	adds	r3, #4
 8002714:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2201      	movs	r2, #1
 800272c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800272e:	7afb      	ldrb	r3, [r7, #11]
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	b2da      	uxtb	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d102      	bne.n	8002748 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002748:	7afb      	ldrb	r3, [r7, #11]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	6979      	ldr	r1, [r7, #20]
 8002760:	f003 ffae 	bl	80066c0 <USB_EP0StartXfer>
 8002764:	e008      	b.n	8002778 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	6979      	ldr	r1, [r7, #20]
 8002774:	f003 fd60 	bl	8006238 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	f003 020f 	and.w	r2, r3, #15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	d901      	bls.n	80027a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e050      	b.n	8002842 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	da0f      	bge.n	80027c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	f003 020f 	and.w	r2, r3, #15
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	1a9b      	subs	r3, r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	3338      	adds	r3, #56	; 0x38
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	3304      	adds	r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	705a      	strb	r2, [r3, #1]
 80027c6:	e00d      	b.n	80027e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	3304      	adds	r3, #4
 80027dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_PCD_EP_SetStall+0x82>
 8002800:	2302      	movs	r3, #2
 8002802:	e01e      	b.n	8002842 <HAL_PCD_EP_SetStall+0xc0>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f004 f905 	bl	8006a22 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10a      	bne.n	8002838 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	b2d9      	uxtb	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002832:	461a      	mov	r2, r3
 8002834:	f004 fae4 	bl	8006e00 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	f003 020f 	and.w	r2, r3, #15
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d901      	bls.n	8002868 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e042      	b.n	80028ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800286c:	2b00      	cmp	r3, #0
 800286e:	da0f      	bge.n	8002890 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 020f 	and.w	r2, r3, #15
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	3338      	adds	r3, #56	; 0x38
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	705a      	strb	r2, [r3, #1]
 800288e:	e00f      	b.n	80028b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	f003 020f 	and.w	r2, r3, #15
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	3304      	adds	r3, #4
 80028a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_PCD_EP_ClrStall+0x86>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e00e      	b.n	80028ee <HAL_PCD_EP_ClrStall+0xa4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68f9      	ldr	r1, [r7, #12]
 80028de:	4618      	mov	r0, r3
 80028e0:	f004 f90d 	bl	8006afe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_PCD_EP_Flush+0x1a>
 800290c:	2302      	movs	r3, #2
 800290e:	e01b      	b.n	8002948 <HAL_PCD_EP_Flush+0x52>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800291c:	2b00      	cmp	r3, #0
 800291e:	da09      	bge.n	8002934 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f003 fa99 	bl	8005e64 <USB_FlushTxFifo>
 8002932:	e004      	b.n	800293e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f003 fab9 	bl	8005eb0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af02      	add	r7, sp, #8
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	3338      	adds	r3, #56	; 0x38
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	3304      	adds	r3, #4
 8002976:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	699a      	ldr	r2, [r3, #24]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	d901      	bls.n	8002988 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e06c      	b.n	8002a62 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	429a      	cmp	r2, r3
 800299c:	d902      	bls.n	80029a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	3303      	adds	r3, #3
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029ac:	e02b      	b.n	8002a06 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d902      	bls.n	80029ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3303      	adds	r3, #3
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	4603      	mov	r3, r0
 80029e8:	6978      	ldr	r0, [r7, #20]
 80029ea:	f003 ffbc 	bl	8006966 <USB_WritePacket>

    ep->xfer_buff  += len;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	441a      	add	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	441a      	add	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d809      	bhi.n	8002a30 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d203      	bcs.n	8002a30 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1be      	bne.n	80029ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	695a      	ldr	r2, [r3, #20]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d811      	bhi.n	8002a60 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	2201      	movs	r2, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	6939      	ldr	r1, [r7, #16]
 8002a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	333c      	adds	r3, #60	; 0x3c
 8002a84:	3304      	adds	r3, #4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	f040 80a0 	bne.w	8002be4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d015      	beq.n	8002ada <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a72      	ldr	r2, [pc, #456]	; (8002c7c <PCD_EP_OutXfrComplete_int+0x210>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f240 80dd 	bls.w	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80d7 	beq.w	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad6:	6093      	str	r3, [r2, #8]
 8002ad8:	e0cb      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d009      	beq.n	8002af8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af0:	461a      	mov	r2, r3
 8002af2:	2320      	movs	r3, #32
 8002af4:	6093      	str	r3, [r2, #8]
 8002af6:	e0bc      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 80b7 	bne.w	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a5d      	ldr	r2, [pc, #372]	; (8002c7c <PCD_EP_OutXfrComplete_int+0x210>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d90f      	bls.n	8002b2c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b22:	461a      	mov	r2, r3
 8002b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b28:	6093      	str	r3, [r2, #8]
 8002b2a:	e0a2      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b3e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	0159      	lsls	r1, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002b52:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4403      	add	r3, r0
 8002b62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b66:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4403      	add	r3, r0
 8002b8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4419      	add	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4403      	add	r3, r0
 8002ba0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ba4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d114      	bne.n	8002bd6 <PCD_EP_OutXfrComplete_int+0x16a>
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d108      	bne.n	8002bd6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	f004 f915 	bl	8006e00 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f009 fdeb 	bl	800c7b8 <HAL_PCD_DataOutStageCallback>
 8002be2:	e046      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <PCD_EP_OutXfrComplete_int+0x214>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d124      	bne.n	8002c36 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c02:	461a      	mov	r2, r3
 8002c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c08:	6093      	str	r3, [r2, #8]
 8002c0a:	e032      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c22:	461a      	mov	r2, r3
 8002c24:	2320      	movs	r3, #32
 8002c26:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f009 fdc2 	bl	800c7b8 <HAL_PCD_DataOutStageCallback>
 8002c34:	e01d      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d114      	bne.n	8002c66 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d108      	bne.n	8002c66 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2100      	movs	r1, #0
 8002c62:	f004 f8cd 	bl	8006e00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f009 fda3 	bl	800c7b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	4f54300a 	.word	0x4f54300a
 8002c80:	4f54310a 	.word	0x4f54310a

08002c84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	333c      	adds	r3, #60	; 0x3c
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <PCD_EP_OutSetupPacket_int+0x88>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d90e      	bls.n	8002cd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f009 fd5b 	bl	800c794 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <PCD_EP_OutSetupPacket_int+0x88>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d90c      	bls.n	8002d00 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	f004 f880 	bl	8006e00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	4f54300a 	.word	0x4f54300a

08002d10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d107      	bne.n	8002d3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d2e:	883b      	ldrh	r3, [r7, #0]
 8002d30:	0419      	lsls	r1, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d3c:	e028      	b.n	8002d90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4413      	add	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
 8002d50:	e00d      	b.n	8002d6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	3340      	adds	r3, #64	; 0x40
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	4413      	add	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d3ec      	bcc.n	8002d52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d78:	883b      	ldrh	r3, [r7, #0]
 8002d7a:	0418      	lsls	r0, r3, #16
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	4302      	orrs	r2, r0
 8002d88:	3340      	adds	r3, #64	; 0x40
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df2:	f043 0303 	orr.w	r3, r3, #3
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0cc      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4b68      	ldr	r3, [pc, #416]	; (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d90c      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b65      	ldr	r3, [pc, #404]	; (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b63      	ldr	r3, [pc, #396]	; (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0b8      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d020      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e74:	4b59      	ldr	r3, [pc, #356]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4a58      	ldr	r2, [pc, #352]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e8c:	4b53      	ldr	r3, [pc, #332]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a52      	ldr	r2, [pc, #328]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e98:	4b50      	ldr	r3, [pc, #320]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	494d      	ldr	r1, [pc, #308]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d044      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d119      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e07f      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d003      	beq.n	8002ede <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e06f      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e067      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002efe:	4b37      	ldr	r3, [pc, #220]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4934      	ldr	r1, [pc, #208]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f10:	f7fe fa92 	bl	8001438 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7fe fa8e 	bl	8001438 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e04f      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 020c 	and.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1eb      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d20c      	bcs.n	8002f68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e032      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4916      	ldr	r1, [pc, #88]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	490e      	ldr	r1, [pc, #56]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fa6:	f000 f821 	bl	8002fec <HAL_RCC_GetSysClockFreq>
 8002faa:	4601      	mov	r1, r0
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	5cd3      	ldrb	r3, [r2, r3]
 8002fba:	fa21 f303 	lsr.w	r3, r1, r3
 8002fbe:	4a09      	ldr	r2, [pc, #36]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe f9f2 	bl	80013b0 <HAL_InitTick>

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023c00 	.word	0x40023c00
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	0800cfe0 	.word	0x0800cfe0
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	20000004 	.word	0x20000004

08002fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b04      	cmp	r3, #4
 800300c:	d007      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x32>
 800300e:	2b08      	cmp	r3, #8
 8003010:	d008      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x38>
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 80b4 	bne.w	8003180 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b5e      	ldr	r3, [pc, #376]	; (8003194 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800301a:	60bb      	str	r3, [r7, #8]
       break;
 800301c:	e0b3      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800301e:	4b5e      	ldr	r3, [pc, #376]	; (8003198 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003020:	60bb      	str	r3, [r7, #8]
      break;
 8003022:	e0b0      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003024:	4b5a      	ldr	r3, [pc, #360]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800302c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800302e:	4b58      	ldr	r3, [pc, #352]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d04a      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303a:	4b55      	ldr	r3, [pc, #340]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	099b      	lsrs	r3, r3, #6
 8003040:	f04f 0400 	mov.w	r4, #0
 8003044:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	ea03 0501 	and.w	r5, r3, r1
 8003050:	ea04 0602 	and.w	r6, r4, r2
 8003054:	4629      	mov	r1, r5
 8003056:	4632      	mov	r2, r6
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	f04f 0400 	mov.w	r4, #0
 8003060:	0154      	lsls	r4, r2, #5
 8003062:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003066:	014b      	lsls	r3, r1, #5
 8003068:	4619      	mov	r1, r3
 800306a:	4622      	mov	r2, r4
 800306c:	1b49      	subs	r1, r1, r5
 800306e:	eb62 0206 	sbc.w	r2, r2, r6
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	f04f 0400 	mov.w	r4, #0
 800307a:	0194      	lsls	r4, r2, #6
 800307c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003080:	018b      	lsls	r3, r1, #6
 8003082:	1a5b      	subs	r3, r3, r1
 8003084:	eb64 0402 	sbc.w	r4, r4, r2
 8003088:	f04f 0100 	mov.w	r1, #0
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	00e2      	lsls	r2, r4, #3
 8003092:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003096:	00d9      	lsls	r1, r3, #3
 8003098:	460b      	mov	r3, r1
 800309a:	4614      	mov	r4, r2
 800309c:	195b      	adds	r3, r3, r5
 800309e:	eb44 0406 	adc.w	r4, r4, r6
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	0262      	lsls	r2, r4, #9
 80030ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030b0:	0259      	lsls	r1, r3, #9
 80030b2:	460b      	mov	r3, r1
 80030b4:	4614      	mov	r4, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	4621      	mov	r1, r4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f04f 0400 	mov.w	r4, #0
 80030c0:	461a      	mov	r2, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	f7fd fc96 	bl	80009f4 <__aeabi_uldivmod>
 80030c8:	4603      	mov	r3, r0
 80030ca:	460c      	mov	r4, r1
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e049      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d0:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	f04f 0400 	mov.w	r4, #0
 80030da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	ea03 0501 	and.w	r5, r3, r1
 80030e6:	ea04 0602 	and.w	r6, r4, r2
 80030ea:	4629      	mov	r1, r5
 80030ec:	4632      	mov	r2, r6
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	f04f 0400 	mov.w	r4, #0
 80030f6:	0154      	lsls	r4, r2, #5
 80030f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030fc:	014b      	lsls	r3, r1, #5
 80030fe:	4619      	mov	r1, r3
 8003100:	4622      	mov	r2, r4
 8003102:	1b49      	subs	r1, r1, r5
 8003104:	eb62 0206 	sbc.w	r2, r2, r6
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f04f 0400 	mov.w	r4, #0
 8003110:	0194      	lsls	r4, r2, #6
 8003112:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003116:	018b      	lsls	r3, r1, #6
 8003118:	1a5b      	subs	r3, r3, r1
 800311a:	eb64 0402 	sbc.w	r4, r4, r2
 800311e:	f04f 0100 	mov.w	r1, #0
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	00e2      	lsls	r2, r4, #3
 8003128:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800312c:	00d9      	lsls	r1, r3, #3
 800312e:	460b      	mov	r3, r1
 8003130:	4614      	mov	r4, r2
 8003132:	195b      	adds	r3, r3, r5
 8003134:	eb44 0406 	adc.w	r4, r4, r6
 8003138:	f04f 0100 	mov.w	r1, #0
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	02a2      	lsls	r2, r4, #10
 8003142:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003146:	0299      	lsls	r1, r3, #10
 8003148:	460b      	mov	r3, r1
 800314a:	4614      	mov	r4, r2
 800314c:	4618      	mov	r0, r3
 800314e:	4621      	mov	r1, r4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f04f 0400 	mov.w	r4, #0
 8003156:	461a      	mov	r2, r3
 8003158:	4623      	mov	r3, r4
 800315a:	f7fd fc4b 	bl	80009f4 <__aeabi_uldivmod>
 800315e:	4603      	mov	r3, r0
 8003160:	460c      	mov	r4, r1
 8003162:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	3301      	adds	r3, #1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	60bb      	str	r3, [r7, #8]
      break;
 800317e:	e002      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003182:	60bb      	str	r3, [r7, #8]
      break;
 8003184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003186:	68bb      	ldr	r3, [r7, #8]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	00f42400 	.word	0x00f42400
 8003198:	007a1200 	.word	0x007a1200

0800319c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000

080031b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80031d8:	4b7a      	ldr	r3, [pc, #488]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80031da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031de:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4977      	ldr	r1, [pc, #476]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80031f6:	2301      	movs	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d010      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003206:	4b6f      	ldr	r3, [pc, #444]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800320c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	496b      	ldr	r1, [pc, #428]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8003224:	2301      	movs	r3, #1
 8003226:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d022      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8003234:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003242:	4960      	ldr	r1, [pc, #384]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8003252:	2301      	movs	r3, #1
 8003254:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800325e:	d10c      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8003260:	4b58      	ldr	r3, [pc, #352]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003266:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	3b01      	subs	r3, #1
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	4954      	ldr	r1, [pc, #336]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d022      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8003286:	4b4f      	ldr	r3, [pc, #316]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003294:	494b      	ldr	r1, [pc, #300]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80032a4:	2301      	movs	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80032b2:	4b44      	ldr	r3, [pc, #272]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	493f      	ldr	r1, [pc, #252]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 808a 	beq.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a38      	ldr	r2, [pc, #224]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032f6:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a33      	ldr	r2, [pc, #204]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003302:	f7fe f899 	bl	8001438 <HAL_GetTick>
 8003306:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800330a:	f7fe f895 	bl	8001438 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1d1      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800331c:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003328:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003330:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d02f      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	429a      	cmp	r2, r3
 8003344:	d028      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003346:	4b1f      	ldr	r3, [pc, #124]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003350:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003356:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800335c:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003362:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d114      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800336e:	f7fe f863 	bl	8001438 <HAL_GetTick>
 8003372:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe f85f 	bl	8001438 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e199      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ee      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a4:	d114      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80033b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ba:	4902      	ldr	r1, [pc, #8]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	608b      	str	r3, [r1, #8]
 80033c0:	e00c      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x228>
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40007000 	.word	0x40007000
 80033cc:	42470e40 	.word	0x42470e40
 80033d0:	4b89      	ldr	r3, [pc, #548]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4a88      	ldr	r2, [pc, #544]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80033d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033da:	6093      	str	r3, [r2, #8]
 80033dc:	4b86      	ldr	r3, [pc, #536]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80033de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	4983      	ldr	r1, [pc, #524]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d004      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8003400:	4b7e      	ldr	r3, [pc, #504]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003402:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003410:	4b79      	ldr	r3, [pc, #484]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003416:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	4976      	ldr	r1, [pc, #472]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d011      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003432:	4b71      	ldr	r3, [pc, #452]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003438:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	496d      	ldr	r1, [pc, #436]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003450:	d101      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8003452:	2301      	movs	r3, #1
 8003454:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003462:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003468:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	4961      	ldr	r1, [pc, #388]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d004      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b80      	cmp	r3, #128	; 0x80
 8003484:	f040 80c6 	bne.w	8003614 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003488:	4b5d      	ldr	r3, [pc, #372]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800348e:	f7fd ffd3 	bl	8001438 <HAL_GetTick>
 8003492:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003496:	f7fd ffcf 	bl	8001438 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e10b      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034a8:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80034b4:	4a53      	ldr	r2, [pc, #332]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ba:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d023      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d019      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f8:	d00e      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003502:	2b00      	cmp	r3, #0
 8003504:	d019      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	2b00      	cmp	r3, #0
 800350c:	d115      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x386>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003516:	d110      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	019b      	lsls	r3, r3, #6
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	071b      	lsls	r3, r3, #28
 8003532:	4931      	ldr	r1, [pc, #196]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8003556:	2b00      	cmp	r3, #0
 8003558:	d026      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d122      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003562:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003568:	0e1b      	lsrs	r3, r3, #24
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	431a      	orrs	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	071b      	lsls	r3, r3, #28
 8003588:	491b      	ldr	r1, [pc, #108]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003596:	f023 021f 	bic.w	r2, r3, #31
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	3b01      	subs	r3, #1
 80035a0:	4915      	ldr	r1, [pc, #84]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	061b      	lsls	r3, r3, #24
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	071b      	lsls	r3, r3, #28
 80035ce:	490a      	ldr	r1, [pc, #40]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035dc:	f7fd ff2c 	bl	8001438 <HAL_GetTick>
 80035e0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035e2:	e011      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80035e4:	f7fd ff28 	bl	8001438 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d90a      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e064      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	424711e0 	.word	0x424711e0
 8003600:	42470068 	.word	0x42470068
 8003604:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003608:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0e7      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003620:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003626:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362e:	4926      	ldr	r1, [pc, #152]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003642:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003648:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	491d      	ldr	r1, [pc, #116]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003664:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	4915      	ldr	r1, [pc, #84]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	490c      	ldr	r1, [pc, #48]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80036aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	4904      	ldr	r1, [pc, #16]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800

080036cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d075      	beq.n	80037d0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036e4:	4ba2      	ldr	r3, [pc, #648]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d00c      	beq.n	800370a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f0:	4b9f      	ldr	r3, [pc, #636]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d112      	bne.n	8003722 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fc:	4b9c      	ldr	r3, [pc, #624]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003708:	d10b      	bne.n	8003722 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370a:	4b99      	ldr	r3, [pc, #612]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d05b      	beq.n	80037ce <HAL_RCC_OscConfig+0x102>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d157      	bne.n	80037ce <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e20b      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x6e>
 800372c:	4b90      	ldr	r3, [pc, #576]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a8f      	ldr	r2, [pc, #572]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	e01d      	b.n	8003776 <HAL_RCC_OscConfig+0xaa>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003742:	d10c      	bne.n	800375e <HAL_RCC_OscConfig+0x92>
 8003744:	4b8a      	ldr	r3, [pc, #552]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a89      	ldr	r2, [pc, #548]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 800374a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4b87      	ldr	r3, [pc, #540]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a86      	ldr	r2, [pc, #536]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	e00b      	b.n	8003776 <HAL_RCC_OscConfig+0xaa>
 800375e:	4b84      	ldr	r3, [pc, #528]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a83      	ldr	r2, [pc, #524]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b81      	ldr	r3, [pc, #516]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a80      	ldr	r2, [pc, #512]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003774:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d013      	beq.n	80037a6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fd fe5b 	bl	8001438 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003786:	f7fd fe57 	bl	8001438 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b64      	cmp	r3, #100	; 0x64
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e1d0      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003798:	4b75      	ldr	r3, [pc, #468]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0xba>
 80037a4:	e014      	b.n	80037d0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fd fe47 	bl	8001438 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ae:	f7fd fe43 	bl	8001438 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b64      	cmp	r3, #100	; 0x64
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e1bc      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c0:	4b6b      	ldr	r3, [pc, #428]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f0      	bne.n	80037ae <HAL_RCC_OscConfig+0xe2>
 80037cc:	e000      	b.n	80037d0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d063      	beq.n	80038a4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037dc:	4b64      	ldr	r3, [pc, #400]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00b      	beq.n	8003800 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e8:	4b61      	ldr	r3, [pc, #388]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d11c      	bne.n	800382e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f4:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d116      	bne.n	800382e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003800:	4b5b      	ldr	r3, [pc, #364]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_OscConfig+0x14c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d001      	beq.n	8003818 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e190      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b55      	ldr	r3, [pc, #340]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4952      	ldr	r1, [pc, #328]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382c:	e03a      	b.n	80038a4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d020      	beq.n	8003878 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003836:	4b4f      	ldr	r3, [pc, #316]	; (8003974 <HAL_RCC_OscConfig+0x2a8>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd fdfc 	bl	8001438 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003844:	f7fd fdf8 	bl	8001438 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e171      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b46      	ldr	r3, [pc, #280]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003862:	4b43      	ldr	r3, [pc, #268]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	493f      	ldr	r1, [pc, #252]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
 8003876:	e015      	b.n	80038a4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003878:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <HAL_RCC_OscConfig+0x2a8>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fd fddb 	bl	8001438 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003886:	f7fd fdd7 	bl	8001438 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e150      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003898:	4b35      	ldr	r3, [pc, #212]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f0      	bne.n	8003886 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d030      	beq.n	8003912 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d016      	beq.n	80038e6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b8:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fd fdbb 	bl	8001438 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c6:	f7fd fdb7 	bl	8001438 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e130      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 80038da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1fa>
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fd fda4 	bl	8001438 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fd fda0 	bl	8001438 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e119      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 809f 	beq.w	8003a5e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003920:	2300      	movs	r3, #0
 8003922:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	4a0d      	ldr	r2, [pc, #52]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393e:	6413      	str	r3, [r2, #64]	; 0x40
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800394c:	2301      	movs	r3, #1
 800394e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <HAL_RCC_OscConfig+0x2b0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d120      	bne.n	800399e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <HAL_RCC_OscConfig+0x2b0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a06      	ldr	r2, [pc, #24]	; (800397c <HAL_RCC_OscConfig+0x2b0>)
 8003962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003966:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003968:	f7fd fd66 	bl	8001438 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396e:	e010      	b.n	8003992 <HAL_RCC_OscConfig+0x2c6>
 8003970:	40023800 	.word	0x40023800
 8003974:	42470000 	.word	0x42470000
 8003978:	42470e80 	.word	0x42470e80
 800397c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003980:	f7fd fd5a 	bl	8001438 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0d3      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b6c      	ldr	r3, [pc, #432]	; (8003b44 <HAL_RCC_OscConfig+0x478>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d106      	bne.n	80039b4 <HAL_RCC_OscConfig+0x2e8>
 80039a6:	4b68      	ldr	r3, [pc, #416]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	4a67      	ldr	r2, [pc, #412]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6713      	str	r3, [r2, #112]	; 0x70
 80039b2:	e01c      	b.n	80039ee <HAL_RCC_OscConfig+0x322>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d10c      	bne.n	80039d6 <HAL_RCC_OscConfig+0x30a>
 80039bc:	4b62      	ldr	r3, [pc, #392]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a61      	ldr	r2, [pc, #388]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 80039c2:	f043 0304 	orr.w	r3, r3, #4
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
 80039c8:	4b5f      	ldr	r3, [pc, #380]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	4a5e      	ldr	r2, [pc, #376]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6713      	str	r3, [r2, #112]	; 0x70
 80039d4:	e00b      	b.n	80039ee <HAL_RCC_OscConfig+0x322>
 80039d6:	4b5c      	ldr	r3, [pc, #368]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a5b      	ldr	r2, [pc, #364]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70
 80039e2:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	4a58      	ldr	r2, [pc, #352]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d015      	beq.n	8003a22 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f6:	f7fd fd1f 	bl	8001438 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fd fd1b 	bl	8001438 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e092      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a14:	4b4c      	ldr	r3, [pc, #304]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ee      	beq.n	80039fe <HAL_RCC_OscConfig+0x332>
 8003a20:	e014      	b.n	8003a4c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a22:	f7fd fd09 	bl	8001438 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f7fd fd05 	bl	8001438 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e07c      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a40:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ee      	bne.n	8003a2a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d105      	bne.n	8003a5e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a52:	4b3d      	ldr	r3, [pc, #244]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 8003a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d068      	beq.n	8003b38 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d060      	beq.n	8003b34 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d145      	bne.n	8003b06 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_RCC_OscConfig+0x480>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fd fcda 	bl	8001438 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a88:	f7fd fcd6 	bl	8001438 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e04f      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	061b      	lsls	r3, r3, #24
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	071b      	lsls	r3, r3, #28
 8003ad2:	491d      	ldr	r1, [pc, #116]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad8:	4b1c      	ldr	r3, [pc, #112]	; (8003b4c <HAL_RCC_OscConfig+0x480>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fd fcab 	bl	8001438 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fd fca7 	bl	8001438 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e020      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af8:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x41a>
 8003b04:	e018      	b.n	8003b38 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_RCC_OscConfig+0x480>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fc94 	bl	8001438 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fd fc90 	bl	8001438 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e009      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_RCC_OscConfig+0x47c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x448>
 8003b32:	e001      	b.n	8003b38 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40007000 	.word	0x40007000
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	42470060 	.word	0x42470060

08003b50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e022      	b.n	8003ba8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d105      	bne.n	8003b7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fd facb 	bl	8001110 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f814 	bl	8003bb0 <HAL_SD_InitCard>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e00a      	b.n	8003ba8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003bb0:	b5b0      	push	{r4, r5, r7, lr}
 8003bb2:	b08e      	sub	sp, #56	; 0x38
 8003bb4:	af04      	add	r7, sp, #16
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003bcc:	2376      	movs	r3, #118	; 0x76
 8003bce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681d      	ldr	r5, [r3, #0]
 8003bd4:	466c      	mov	r4, sp
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003be2:	f107 0308 	add.w	r3, r7, #8
 8003be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be8:	4628      	mov	r0, r5
 8003bea:	f001 f929 	bl	8004e40 <SDIO_Init>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e031      	b.n	8003c64 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_SD_InitCard+0xbc>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 f961 	bl	8004ed2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <HAL_SD_InitCard+0xbc>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fefc 	bl	8004a14 <SD_PowerON>
 8003c1c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e013      	b.n	8003c64 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fe1b 	bl	8004878 <SD_InitCard>
 8003c42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3728      	adds	r7, #40	; 0x28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6c:	422580a0 	.word	0x422580a0

08003c70 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b092      	sub	sp, #72	; 0x48
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003c7e:	f7fd fbdb 	bl	8001438 <HAL_GetTick>
 8003c82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e1d7      	b.n	8004052 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	f040 81ca 	bne.w	8004044 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	441a      	add	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d907      	bls.n	8003cd4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e1be      	b.n	8004052 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d002      	beq.n	8003cf2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	025b      	lsls	r3, r3, #9
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 f97c 	bl	8004ff8 <SDMMC_CmdBlockLength>
 8003d00:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00f      	beq.n	8003d28 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a9a      	ldr	r2, [pc, #616]	; (8003f78 <HAL_SD_ReadBlocks+0x308>)
 8003d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d16:	431a      	orrs	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e194      	b.n	8004052 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	025b      	lsls	r3, r3, #9
 8003d32:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d34:	2390      	movs	r3, #144	; 0x90
 8003d36:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f107 0214 	add.w	r2, r7, #20
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 f926 	bl	8004fa0 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d90a      	bls.n	8003d70 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 f98a 	bl	8005080 <SDMMC_CmdReadMultiBlock>
 8003d6c:	6478      	str	r0, [r7, #68]	; 0x44
 8003d6e:	e009      	b.n	8003d84 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 f95d 	bl	800503c <SDMMC_CmdReadSingleBlock>
 8003d82:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d012      	beq.n	8003db0 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7a      	ldr	r2, [pc, #488]	; (8003f78 <HAL_SD_ReadBlocks+0x308>)
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e150      	b.n	8004052 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003db4:	e061      	b.n	8003e7a <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d03c      	beq.n	8003e3e <HAL_SD_ReadBlocks+0x1ce>
 8003dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d039      	beq.n	8003e3e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003dca:	2300      	movs	r3, #0
 8003dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dce:	e033      	b.n	8003e38 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f001 f85e 	bl	8004e96 <SDIO_ReadFIFO>
 8003dda:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de6:	3301      	adds	r3, #1
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dec:	3b01      	subs	r3, #1
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e02:	3b01      	subs	r3, #1
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e12:	3301      	adds	r3, #1
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	0e1b      	lsrs	r3, r3, #24
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e28:	3301      	adds	r3, #1
 8003e2a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e34:	3301      	adds	r3, #1
 8003e36:	643b      	str	r3, [r7, #64]	; 0x40
 8003e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e3a:	2b07      	cmp	r3, #7
 8003e3c:	d9c8      	bls.n	8003dd0 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e3e:	f7fd fafb 	bl	8001438 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d902      	bls.n	8003e54 <HAL_SD_ReadBlocks+0x1e4>
 8003e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d112      	bne.n	8003e7a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a47      	ldr	r2, [pc, #284]	; (8003f78 <HAL_SD_ReadBlocks+0x308>)
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e0eb      	b.n	8004052 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d096      	beq.n	8003db6 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d022      	beq.n	8003edc <HAL_SD_ReadBlocks+0x26c>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d91f      	bls.n	8003edc <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d01b      	beq.n	8003edc <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 f94f 	bl	800514c <SDMMC_CmdStopTransfer>
 8003eae:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d012      	beq.n	8003edc <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <HAL_SD_ReadBlocks+0x308>)
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0ba      	b.n	8004052 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d012      	beq.n	8003f10 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <HAL_SD_ReadBlocks+0x308>)
 8003ef0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	f043 0208 	orr.w	r2, r3, #8
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0a0      	b.n	8004052 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <HAL_SD_ReadBlocks+0x308>)
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	f043 0202 	orr.w	r2, r3, #2
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e086      	b.n	8004052 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d063      	beq.n	800401a <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <HAL_SD_ReadBlocks+0x308>)
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	f043 0220 	orr.w	r2, r3, #32
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e06c      	b.n	8004052 <HAL_SD_ReadBlocks+0x3e2>
 8003f78:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 ff88 	bl	8004e96 <SDIO_ReadFIFO>
 8003f86:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	3301      	adds	r3, #1
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa8:	3301      	adds	r3, #1
 8003faa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fba:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	0e1b      	lsrs	r3, r3, #24
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003fde:	f7fd fa2b 	bl	8001438 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d902      	bls.n	8003ff4 <HAL_SD_ReadBlocks+0x384>
 8003fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d112      	bne.n	800401a <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	; (800405c <HAL_SD_ReadBlocks+0x3ec>)
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e01b      	b.n	8004052 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_SD_ReadBlocks+0x3be>
 8004028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1a6      	bne.n	8003f7c <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f240 523a 	movw	r2, #1338	; 0x53a
 8004036:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e006      	b.n	8004052 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3748      	adds	r7, #72	; 0x48
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	004005ff 	.word	0x004005ff

08004060 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b092      	sub	sp, #72	; 0x48
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800406e:	f7fd f9e3 	bl	8001438 <HAL_GetTick>
 8004072:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d107      	bne.n	8004092 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e182      	b.n	8004398 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	f040 8175 	bne.w	800438a <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80040a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	441a      	add	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d907      	bls.n	80040c4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e169      	b.n	8004398 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2203      	movs	r2, #3
 80040c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2200      	movs	r2, #0
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d002      	beq.n	80040e2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	025b      	lsls	r3, r3, #9
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 ff84 	bl	8004ff8 <SDMMC_CmdBlockLength>
 80040f0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80040f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00f      	beq.n	8004118 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a9c      	ldr	r2, [pc, #624]	; (8004370 <HAL_SD_WriteBlocks+0x310>)
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004106:	431a      	orrs	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e13f      	b.n	8004398 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004118:	f04f 33ff 	mov.w	r3, #4294967295
 800411c:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	025b      	lsls	r3, r3, #9
 8004122:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004124:	2390      	movs	r3, #144	; 0x90
 8004126:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004128:	2300      	movs	r3, #0
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800412c:	2300      	movs	r3, #0
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004130:	2301      	movs	r3, #1
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f107 0218 	add.w	r2, r7, #24
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f000 ff2e 	bl	8004fa0 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d90a      	bls.n	8004160 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004156:	4618      	mov	r0, r3
 8004158:	f000 ffd6 	bl	8005108 <SDMMC_CmdWriteMultiBlock>
 800415c:	6478      	str	r0, [r7, #68]	; 0x44
 800415e:	e009      	b.n	8004174 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2210      	movs	r2, #16
 8004164:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800416c:	4618      	mov	r0, r3
 800416e:	f000 ffa9 	bl	80050c4 <SDMMC_CmdWriteSingleBlock>
 8004172:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004176:	2b00      	cmp	r3, #0
 8004178:	d012      	beq.n	80041a0 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a7c      	ldr	r2, [pc, #496]	; (8004370 <HAL_SD_WriteBlocks+0x310>)
 8004180:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0fb      	b.n	8004398 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80041a4:	e065      	b.n	8004272 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d040      	beq.n	8004236 <HAL_SD_WriteBlocks+0x1d6>
 80041b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d03d      	beq.n	8004236 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	643b      	str	r3, [r7, #64]	; 0x40
 80041be:	e037      	b.n	8004230 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80041c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c8:	3301      	adds	r3, #1
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80041cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ce:	3b01      	subs	r3, #1
 80041d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	021a      	lsls	r2, r3, #8
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e0:	3301      	adds	r3, #1
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80041e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e6:	3b01      	subs	r3, #1
 80041e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80041ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	041a      	lsls	r2, r3, #16
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f8:	3301      	adds	r3, #1
 80041fa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80041fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fe:	3b01      	subs	r3, #1
 8004200:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	061a      	lsls	r2, r3, #24
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800420e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004210:	3301      	adds	r3, #1
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004216:	3b01      	subs	r3, #1
 8004218:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f107 0214 	add.w	r2, r7, #20
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fe43 	bl	8004eb0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800422a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422c:	3301      	adds	r3, #1
 800422e:	643b      	str	r3, [r7, #64]	; 0x40
 8004230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004232:	2b07      	cmp	r3, #7
 8004234:	d9c4      	bls.n	80041c0 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004236:	f7fd f8ff 	bl	8001438 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004242:	429a      	cmp	r2, r3
 8004244:	d902      	bls.n	800424c <HAL_SD_WriteBlocks+0x1ec>
 8004246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004248:	2b00      	cmp	r3, #0
 800424a:	d112      	bne.n	8004272 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a47      	ldr	r2, [pc, #284]	; (8004370 <HAL_SD_WriteBlocks+0x310>)
 8004252:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800425a:	431a      	orrs	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e092      	b.n	8004398 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800427c:	2b00      	cmp	r3, #0
 800427e:	d092      	beq.n	80041a6 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d022      	beq.n	80042d4 <HAL_SD_WriteBlocks+0x274>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d91f      	bls.n	80042d4 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	2b03      	cmp	r3, #3
 800429a:	d01b      	beq.n	80042d4 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 ff53 	bl	800514c <SDMMC_CmdStopTransfer>
 80042a6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80042a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d012      	beq.n	80042d4 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a2f      	ldr	r2, [pc, #188]	; (8004370 <HAL_SD_WriteBlocks+0x310>)
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e061      	b.n	8004398 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d012      	beq.n	8004308 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a22      	ldr	r2, [pc, #136]	; (8004370 <HAL_SD_WriteBlocks+0x310>)
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	f043 0208 	orr.w	r2, r3, #8
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e047      	b.n	8004398 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d012      	beq.n	800433c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a15      	ldr	r2, [pc, #84]	; (8004370 <HAL_SD_WriteBlocks+0x310>)
 800431c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	f043 0202 	orr.w	r2, r3, #2
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e02d      	b.n	8004398 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b00      	cmp	r3, #0
 8004348:	d014      	beq.n	8004374 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <HAL_SD_WriteBlocks+0x310>)
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	f043 0210 	orr.w	r2, r3, #16
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e013      	b.n	8004398 <HAL_SD_WriteBlocks+0x338>
 8004370:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f240 523a 	movw	r2, #1338	; 0x53a
 800437c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e006      	b.n	8004398 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	3748      	adds	r7, #72	; 0x48
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ae:	0f9b      	lsrs	r3, r3, #30
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ba:	0e9b      	lsrs	r3, r3, #26
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043cc:	0e1b      	lsrs	r3, r3, #24
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004400:	0d1b      	lsrs	r3, r3, #20
 8004402:	b29a      	uxth	r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	b2da      	uxtb	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800441e:	0bdb      	lsrs	r3, r3, #15
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	b2da      	uxtb	r2, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004430:	0b9b      	lsrs	r3, r3, #14
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	b2da      	uxtb	r2, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004442:	0b5b      	lsrs	r3, r3, #13
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	b2da      	uxtb	r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004454:	0b1b      	lsrs	r3, r3, #12
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	b2da      	uxtb	r2, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2200      	movs	r2, #0
 8004466:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	2b00      	cmp	r3, #0
 800446e:	d163      	bne.n	8004538 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004474:	009a      	lsls	r2, r3, #2
 8004476:	f640 73fc 	movw	r3, #4092	; 0xffc
 800447a:	4013      	ands	r3, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004480:	0f92      	lsrs	r2, r2, #30
 8004482:	431a      	orrs	r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800448c:	0edb      	lsrs	r3, r3, #27
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	b2da      	uxtb	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449e:	0e1b      	lsrs	r3, r3, #24
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b0:	0d5b      	lsrs	r3, r3, #21
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c2:	0c9b      	lsrs	r3, r3, #18
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d4:	0bdb      	lsrs	r3, r3, #15
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	7e1b      	ldrb	r3, [r3, #24]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	3302      	adds	r3, #2
 80044f8:	2201      	movs	r2, #1
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004502:	fb02 f203 	mul.w	r2, r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	7a1b      	ldrb	r3, [r3, #8]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	2201      	movs	r2, #1
 8004516:	409a      	lsls	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004524:	0a52      	lsrs	r2, r2, #9
 8004526:	fb02 f203 	mul.w	r2, r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004534:	661a      	str	r2, [r3, #96]	; 0x60
 8004536:	e031      	b.n	800459c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	2b01      	cmp	r3, #1
 800453e:	d11d      	bne.n	800457c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004544:	041b      	lsls	r3, r3, #16
 8004546:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800454e:	0c1b      	lsrs	r3, r3, #16
 8004550:	431a      	orrs	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	3301      	adds	r3, #1
 800455c:	029a      	lsls	r2, r3, #10
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004570:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	661a      	str	r2, [r3, #96]	; 0x60
 800457a:	e00f      	b.n	800459c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a58      	ldr	r2, [pc, #352]	; (80046e4 <HAL_SD_GetCardCSD+0x344>)
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e09d      	b.n	80046d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a0:	0b9b      	lsrs	r3, r3, #14
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b2:	09db      	lsrs	r3, r3, #7
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	0fdb      	lsrs	r3, r3, #31
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	0f5b      	lsrs	r3, r3, #29
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	0e9b      	lsrs	r3, r3, #26
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	0d9b      	lsrs	r3, r3, #22
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	b2da      	uxtb	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	0d5b      	lsrs	r3, r3, #21
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	b2da      	uxtb	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	0c1b      	lsrs	r3, r3, #16
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	b2da      	uxtb	r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	0bdb      	lsrs	r3, r3, #15
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	b2da      	uxtb	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	0b9b      	lsrs	r3, r3, #14
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	b2da      	uxtb	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	0b5b      	lsrs	r3, r3, #13
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	b2da      	uxtb	r2, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	0b1b      	lsrs	r3, r3, #12
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	b2da      	uxtb	r2, r3
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	0a9b      	lsrs	r3, r3, #10
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	004005ff 	.word	0x004005ff

080046e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004740:	b5b0      	push	{r4, r5, r7, lr}
 8004742:	b08e      	sub	sp, #56	; 0x38
 8004744:	af04      	add	r7, sp, #16
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2203      	movs	r2, #3
 800474e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	2b03      	cmp	r3, #3
 8004758:	d02e      	beq.n	80047b8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004760:	d106      	bne.n	8004770 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	639a      	str	r2, [r3, #56]	; 0x38
 800476e:	e029      	b.n	80047c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004776:	d10a      	bne.n	800478e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fa01 	bl	8004b80 <SD_WideBus_Enable>
 800477e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
 800478c:	e01a      	b.n	80047c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fa3e 	bl	8004c16 <SD_WideBus_Disable>
 800479a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38
 80047a8:	e00c      	b.n	80047c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
 80047b6:	e005      	b.n	80047c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a18      	ldr	r2, [pc, #96]	; (8004834 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80047d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e024      	b.n	800482a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681d      	ldr	r5, [r3, #0]
 8004806:	466c      	mov	r4, sp
 8004808:	f107 0318 	add.w	r3, r7, #24
 800480c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004814:	f107 030c 	add.w	r3, r7, #12
 8004818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800481a:	4628      	mov	r0, r5
 800481c:	f000 fb10 	bl	8004e40 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3728      	adds	r7, #40	; 0x28
 800482e:	46bd      	mov	sp, r7
 8004830:	bdb0      	pop	{r4, r5, r7, pc}
 8004832:	bf00      	nop
 8004834:	004005ff 	.word	0x004005ff

08004838 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004844:	f107 030c 	add.w	r3, r7, #12
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f970 	bl	8004b30 <SD_SendStatus>
 8004850:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	0a5b      	lsrs	r3, r3, #9
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800486e:	693b      	ldr	r3, [r7, #16]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004878:	b5b0      	push	{r4, r5, r7, lr}
 800487a:	b094      	sub	sp, #80	; 0x50
 800487c:	af04      	add	r7, sp, #16
 800487e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fb31 	bl	8004ef0 <SDIO_GetPowerState>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004894:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004898:	e0b7      	b.n	8004a0a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d02f      	beq.n	8004902 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fd5a 	bl	8005360 <SDMMC_CmdSendCID>
 80048ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <SD_InitCard+0x40>
    {
      return errorstate;
 80048b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b6:	e0a8      	b.n	8004a0a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fb5b 	bl	8004f7a <SDIO_GetResponse>
 80048c4:	4602      	mov	r2, r0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2104      	movs	r1, #4
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fb52 	bl	8004f7a <SDIO_GetResponse>
 80048d6:	4602      	mov	r2, r0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2108      	movs	r1, #8
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fb49 	bl	8004f7a <SDIO_GetResponse>
 80048e8:	4602      	mov	r2, r0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	210c      	movs	r1, #12
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fb40 	bl	8004f7a <SDIO_GetResponse>
 80048fa:	4602      	mov	r2, r0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	2b03      	cmp	r3, #3
 8004908:	d00d      	beq.n	8004926 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f107 020e 	add.w	r2, r7, #14
 8004912:	4611      	mov	r1, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fd60 	bl	80053da <SDMMC_CmdSetRelAdd>
 800491a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <SD_InitCard+0xae>
    {
      return errorstate;
 8004922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004924:	e071      	b.n	8004a0a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	2b03      	cmp	r3, #3
 800492c:	d036      	beq.n	800499c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800492e:	89fb      	ldrh	r3, [r7, #14]
 8004930:	461a      	mov	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 fd2a 	bl	800539c <SDMMC_CmdSendCSD>
 8004948:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800494a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004952:	e05a      	b.n	8004a0a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fb0d 	bl	8004f7a <SDIO_GetResponse>
 8004960:	4602      	mov	r2, r0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2104      	movs	r1, #4
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fb04 	bl	8004f7a <SDIO_GetResponse>
 8004972:	4602      	mov	r2, r0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2108      	movs	r1, #8
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fafb 	bl	8004f7a <SDIO_GetResponse>
 8004984:	4602      	mov	r2, r0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	210c      	movs	r1, #12
 8004990:	4618      	mov	r0, r3
 8004992:	f000 faf2 	bl	8004f7a <SDIO_GetResponse>
 8004996:	4602      	mov	r2, r0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2104      	movs	r1, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fae9 	bl	8004f7a <SDIO_GetResponse>
 80049a8:	4603      	mov	r3, r0
 80049aa:	0d1a      	lsrs	r2, r3, #20
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80049b0:	f107 0310 	add.w	r3, r7, #16
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff fcf2 	bl	80043a0 <HAL_SD_GetCardCSD>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049c6:	e020      	b.n	8004a0a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6819      	ldr	r1, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d0:	041b      	lsls	r3, r3, #16
 80049d2:	f04f 0400 	mov.w	r4, #0
 80049d6:	461a      	mov	r2, r3
 80049d8:	4623      	mov	r3, r4
 80049da:	4608      	mov	r0, r1
 80049dc:	f000 fbd8 	bl	8005190 <SDMMC_CmdSelDesel>
 80049e0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80049e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <SD_InitCard+0x174>
  {
    return errorstate;
 80049e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ea:	e00e      	b.n	8004a0a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681d      	ldr	r5, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	466c      	mov	r4, sp
 80049f4:	f103 0210 	add.w	r2, r3, #16
 80049f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80049fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049fe:	3304      	adds	r3, #4
 8004a00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a02:	4628      	mov	r0, r5
 8004a04:	f000 fa1c 	bl	8004e40 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3740      	adds	r7, #64	; 0x40
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004a14 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fbd2 	bl	80051d6 <SDMMC_CmdGoIdleState>
 8004a32:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <SD_PowerON+0x2a>
  {
    return errorstate;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	e072      	b.n	8004b24 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fbe5 	bl	8005212 <SDMMC_CmdOperCond>
 8004a48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00d      	beq.n	8004a6c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fbbb 	bl	80051d6 <SDMMC_CmdGoIdleState>
 8004a60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	e05b      	b.n	8004b24 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d137      	bne.n	8004aea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fbe5 	bl	8005250 <SDMMC_CmdAppCommand>
 8004a86:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02d      	beq.n	8004aea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a92:	e047      	b.n	8004b24 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fbd8 	bl	8005250 <SDMMC_CmdAppCommand>
 8004aa0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <SD_PowerON+0x98>
    {
      return errorstate;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	e03b      	b.n	8004b24 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	491e      	ldr	r1, [pc, #120]	; (8004b2c <SD_PowerON+0x118>)
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fbee 	bl	8005294 <SDMMC_CmdAppOperCommand>
 8004ab8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ac0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ac4:	e02e      	b.n	8004b24 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fa54 	bl	8004f7a <SDIO_GetResponse>
 8004ad2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	0fdb      	lsrs	r3, r3, #31
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <SD_PowerON+0xcc>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <SD_PowerON+0xce>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]

    count++;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d802      	bhi.n	8004afa <SD_PowerON+0xe6>
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0cc      	beq.n	8004a94 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d902      	bls.n	8004b0a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b08:	e00c      	b.n	8004b24 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	645a      	str	r2, [r3, #68]	; 0x44
 8004b1a:	e002      	b.n	8004b22 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	c1100000 	.word	0xc1100000

08004b30 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004b40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b44:	e018      	b.n	8004b78 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f000 fc62 	bl	800541c <SDMMC_CmdSendStatus>
 8004b58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	e009      	b.n	8004b78 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fa05 	bl	8004f7a <SDIO_GetResponse>
 8004b70:	4602      	mov	r2, r0
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 f9ef 	bl	8004f7a <SDIO_GetResponse>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ba6:	d102      	bne.n	8004bae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bac:	e02f      	b.n	8004c0e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004bae:	f107 030c 	add.w	r3, r7, #12
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f879 	bl	8004cac <SD_FindSCR>
 8004bba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	e023      	b.n	8004c0e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01c      	beq.n	8004c0a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f000 fb37 	bl	8005250 <SDMMC_CmdAppCommand>
 8004be2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	e00f      	b.n	8004c0e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fb70 	bl	80052da <SDMMC_CmdBusWidth>
 8004bfa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	e003      	b.n	8004c0e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e001      	b.n	8004c0e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 f9a4 	bl	8004f7a <SDIO_GetResponse>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c3c:	d102      	bne.n	8004c44 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c42:	e02f      	b.n	8004ca4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c44:	f107 030c 	add.w	r3, r7, #12
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f82e 	bl	8004cac <SD_FindSCR>
 8004c50:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	e023      	b.n	8004ca4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01c      	beq.n	8004ca0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6e:	041b      	lsls	r3, r3, #16
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 faec 	bl	8005250 <SDMMC_CmdAppCommand>
 8004c78:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	e00f      	b.n	8004ca4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fb25 	bl	80052da <SDMMC_CmdBusWidth>
 8004c90:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	e003      	b.n	8004ca4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e001      	b.n	8004ca4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ca0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b08f      	sub	sp, #60	; 0x3c
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004cb6:	f7fc fbbf 	bl	8001438 <HAL_GetTick>
 8004cba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2108      	movs	r1, #8
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f990 	bl	8004ff8 <SDMMC_CmdBlockLength>
 8004cd8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	e0a9      	b.n	8004e38 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cec:	041b      	lsls	r3, r3, #16
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f000 faad 	bl	8005250 <SDMMC_CmdAppCommand>
 8004cf6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	e09a      	b.n	8004e38 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295
 8004d06:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004d08:	2308      	movs	r3, #8
 8004d0a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004d0c:	2330      	movs	r3, #48	; 0x30
 8004d0e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d10:	2302      	movs	r3, #2
 8004d12:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f107 0210 	add.w	r2, r7, #16
 8004d24:	4611      	mov	r1, r2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f93a 	bl	8004fa0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 faf4 	bl	800531e <SDMMC_CmdSendSCR>
 8004d36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d022      	beq.n	8004d84 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	e07a      	b.n	8004e38 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00e      	beq.n	8004d6e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6819      	ldr	r1, [r3, #0]
 8004d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	f107 0208 	add.w	r2, r7, #8
 8004d5c:	18d4      	adds	r4, r2, r3
 8004d5e:	4608      	mov	r0, r1
 8004d60:	f000 f899 	bl	8004e96 <SDIO_ReadFIFO>
 8004d64:	4603      	mov	r3, r0
 8004d66:	6023      	str	r3, [r4, #0]
      index++;
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004d6e:	f7fc fb63 	bl	8001438 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d102      	bne.n	8004d84 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004d7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d82:	e059      	b.n	8004e38 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8a:	f240 432a 	movw	r3, #1066	; 0x42a
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0d6      	beq.n	8004d42 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2208      	movs	r2, #8
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004daa:	2308      	movs	r3, #8
 8004dac:	e044      	b.n	8004e38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e037      	b.n	8004e38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004dde:	2320      	movs	r3, #32
 8004de0:	e02a      	b.n	8004e38 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f240 523a 	movw	r2, #1338	; 0x53a
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	061a      	lsls	r2, r3, #24
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004df8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	0a1b      	lsrs	r3, r3, #8
 8004dfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	0e1b      	lsrs	r3, r3, #24
 8004e08:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	601a      	str	r2, [r3, #0]
    scr++;
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	3304      	adds	r3, #4
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	061a      	lsls	r2, r3, #24
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	0a1b      	lsrs	r3, r3, #8
 8004e26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	0e1b      	lsrs	r3, r3, #24
 8004e30:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	373c      	adds	r7, #60	; 0x3c
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd90      	pop	{r4, r7, pc}

08004e40 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004e40:	b084      	sub	sp, #16
 8004e42:	b480      	push	{r7}
 8004e44:	b085      	sub	sp, #20
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	f107 001c 	add.w	r0, r7, #28
 8004e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004e56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004e58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004e5a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004e5e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004e62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004e66:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004e6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004e7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	b004      	add	sp, #16
 8004e94:	4770      	bx	lr

08004e96 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2203      	movs	r2, #3
 8004ede:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004ee0:	2002      	movs	r0, #2
 8004ee2:	f7fc fab5 	bl	8001450 <HAL_Delay>
  
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0303 	and.w	r3, r3, #3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f30:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004f36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004f46:	f023 030f 	bic.w	r3, r3, #15
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	b2db      	uxtb	r3, r3
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3314      	adds	r3, #20
 8004f88:	461a      	mov	r2, r3
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
}  
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fc6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004fcc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004fd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0

}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005006:	2310      	movs	r3, #16
 8005008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800500a:	2340      	movs	r3, #64	; 0x40
 800500c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005016:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff ff74 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005024:	f241 3288 	movw	r2, #5000	; 0x1388
 8005028:	2110      	movs	r1, #16
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa40 	bl	80054b0 <SDMMC_GetCmdResp1>
 8005030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005032:	69fb      	ldr	r3, [r7, #28]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3720      	adds	r7, #32
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800504a:	2311      	movs	r3, #17
 800504c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800504e:	2340      	movs	r3, #64	; 0x40
 8005050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800505a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800505c:	f107 0308 	add.w	r3, r7, #8
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff ff52 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005068:	f241 3288 	movw	r2, #5000	; 0x1388
 800506c:	2111      	movs	r1, #17
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa1e 	bl	80054b0 <SDMMC_GetCmdResp1>
 8005074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005076:	69fb      	ldr	r3, [r7, #28]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3720      	adds	r7, #32
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800508e:	2312      	movs	r3, #18
 8005090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800509a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800509e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050a0:	f107 0308 	add.w	r3, r7, #8
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff ff30 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80050ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b0:	2112      	movs	r1, #18
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f9fc 	bl	80054b0 <SDMMC_GetCmdResp1>
 80050b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050ba:	69fb      	ldr	r3, [r7, #28]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80050d2:	2318      	movs	r3, #24
 80050d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050d6:	2340      	movs	r3, #64	; 0x40
 80050d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050e4:	f107 0308 	add.w	r3, r7, #8
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ff0e 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80050f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f4:	2118      	movs	r1, #24
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f9da 	bl	80054b0 <SDMMC_GetCmdResp1>
 80050fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050fe:	69fb      	ldr	r3, [r7, #28]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005116:	2319      	movs	r3, #25
 8005118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800511a:	2340      	movs	r3, #64	; 0x40
 800511c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005126:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005128:	f107 0308 	add.w	r3, r7, #8
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff feec 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005134:	f241 3288 	movw	r2, #5000	; 0x1388
 8005138:	2119      	movs	r1, #25
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f9b8 	bl	80054b0 <SDMMC_GetCmdResp1>
 8005140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005142:	69fb      	ldr	r3, [r7, #28]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3720      	adds	r7, #32
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005158:	230c      	movs	r3, #12
 800515a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800515c:	2340      	movs	r3, #64	; 0x40
 800515e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005168:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800516a:	f107 0308 	add.w	r3, r7, #8
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff fecb 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005176:	4a05      	ldr	r2, [pc, #20]	; (800518c <SDMMC_CmdStopTransfer+0x40>)
 8005178:	210c      	movs	r1, #12
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f998 	bl	80054b0 <SDMMC_GetCmdResp1>
 8005180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005182:	69fb      	ldr	r3, [r7, #28]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	05f5e100 	.word	0x05f5e100

08005190 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80051a0:	2307      	movs	r3, #7
 80051a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051a4:	2340      	movs	r3, #64	; 0x40
 80051a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051b2:	f107 0310 	add.w	r3, r7, #16
 80051b6:	4619      	mov	r1, r3
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff fea7 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80051be:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c2:	2107      	movs	r1, #7
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f973 	bl	80054b0 <SDMMC_GetCmdResp1>
 80051ca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3728      	adds	r7, #40	; 0x28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b088      	sub	sp, #32
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80051e6:	2300      	movs	r3, #0
 80051e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051f4:	f107 0308 	add.w	r3, r7, #8
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff fe86 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f92d 	bl	8005460 <SDMMC_GetCmdError>
 8005206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005208:	69fb      	ldr	r3, [r7, #28]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b088      	sub	sp, #32
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800521a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800521e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005220:	2308      	movs	r3, #8
 8005222:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005224:	2340      	movs	r3, #64	; 0x40
 8005226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800522c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005230:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005232:	f107 0308 	add.w	r3, r7, #8
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fe67 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fb16 	bl	8005870 <SDMMC_GetCmdResp7>
 8005244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005246:	69fb      	ldr	r3, [r7, #28]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800525e:	2337      	movs	r3, #55	; 0x37
 8005260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005262:	2340      	movs	r3, #64	; 0x40
 8005264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800526a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800526e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005270:	f107 0308 	add.w	r3, r7, #8
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fe48 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800527c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005280:	2137      	movs	r1, #55	; 0x37
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f914 	bl	80054b0 <SDMMC_GetCmdResp1>
 8005288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800528a:	69fb      	ldr	r3, [r7, #28]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80052aa:	2329      	movs	r3, #41	; 0x29
 80052ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052ae:	2340      	movs	r3, #64	; 0x40
 80052b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052bc:	f107 0308 	add.w	r3, r7, #8
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff fe22 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fa23 	bl	8005714 <SDMMC_GetCmdResp3>
 80052ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052d0:	69fb      	ldr	r3, [r7, #28]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b088      	sub	sp, #32
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80052e8:	2306      	movs	r3, #6
 80052ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052ec:	2340      	movs	r3, #64	; 0x40
 80052ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052fa:	f107 0308 	add.w	r3, r7, #8
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff fe03 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005306:	f241 3288 	movw	r2, #5000	; 0x1388
 800530a:	2106      	movs	r1, #6
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f8cf 	bl	80054b0 <SDMMC_GetCmdResp1>
 8005312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005314:	69fb      	ldr	r3, [r7, #28]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b088      	sub	sp, #32
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800532a:	2333      	movs	r3, #51	; 0x33
 800532c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800532e:	2340      	movs	r3, #64	; 0x40
 8005330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800533c:	f107 0308 	add.w	r3, r7, #8
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff fde2 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005348:	f241 3288 	movw	r2, #5000	; 0x1388
 800534c:	2133      	movs	r1, #51	; 0x33
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f8ae 	bl	80054b0 <SDMMC_GetCmdResp1>
 8005354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005356:	69fb      	ldr	r3, [r7, #28]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800536c:	2302      	movs	r3, #2
 800536e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005370:	23c0      	movs	r3, #192	; 0xc0
 8005372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800537c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800537e:	f107 0308 	add.w	r3, r7, #8
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff fdc1 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f97c 	bl	8005688 <SDMMC_GetCmdResp2>
 8005390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005392:	69fb      	ldr	r3, [r7, #28]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3720      	adds	r7, #32
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80053aa:	2309      	movs	r3, #9
 80053ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80053ae:	23c0      	movs	r3, #192	; 0xc0
 80053b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053bc:	f107 0308 	add.w	r3, r7, #8
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fda2 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f95d 	bl	8005688 <SDMMC_GetCmdResp2>
 80053ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053d0:	69fb      	ldr	r3, [r7, #28]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b088      	sub	sp, #32
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80053e8:	2303      	movs	r3, #3
 80053ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053ec:	2340      	movs	r3, #64	; 0x40
 80053ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053fa:	f107 0308 	add.w	r3, r7, #8
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff fd83 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	2103      	movs	r1, #3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9bc 	bl	8005788 <SDMMC_GetCmdResp6>
 8005410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005412:	69fb      	ldr	r3, [r7, #28]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800542a:	230d      	movs	r3, #13
 800542c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800542e:	2340      	movs	r3, #64	; 0x40
 8005430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800543a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800543c:	f107 0308 	add.w	r3, r7, #8
 8005440:	4619      	mov	r1, r3
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff fd62 	bl	8004f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005448:	f241 3288 	movw	r2, #5000	; 0x1388
 800544c:	210d      	movs	r1, #13
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f82e 	bl	80054b0 <SDMMC_GetCmdResp1>
 8005454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005456:	69fb      	ldr	r3, [r7, #28]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005460:	b490      	push	{r4, r7}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005468:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <SDMMC_GetCmdError+0x48>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a0f      	ldr	r2, [pc, #60]	; (80054ac <SDMMC_GetCmdError+0x4c>)
 800546e:	fba2 2303 	umull	r2, r3, r2, r3
 8005472:	0a5b      	lsrs	r3, r3, #9
 8005474:	f241 3288 	movw	r2, #5000	; 0x1388
 8005478:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800547c:	4623      	mov	r3, r4
 800547e:	1e5c      	subs	r4, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005484:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005488:	e009      	b.n	800549e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f2      	beq.n	800547c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	22c5      	movs	r2, #197	; 0xc5
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc90      	pop	{r4, r7}
 80054a6:	4770      	bx	lr
 80054a8:	20000000 	.word	0x20000000
 80054ac:	10624dd3 	.word	0x10624dd3

080054b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	460b      	mov	r3, r1
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80054be:	4b6f      	ldr	r3, [pc, #444]	; (800567c <SDMMC_GetCmdResp1+0x1cc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a6f      	ldr	r2, [pc, #444]	; (8005680 <SDMMC_GetCmdResp1+0x1d0>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	0a5b      	lsrs	r3, r3, #9
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80054d0:	4623      	mov	r3, r4
 80054d2:	1e5c      	subs	r4, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054dc:	e0c9      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <SDMMC_GetCmdResp1+0x20>
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1eb      	bne.n	80054d0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2204      	movs	r2, #4
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800550a:	2304      	movs	r3, #4
 800550c:	e0b1      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005520:	2301      	movs	r3, #1
 8005522:	e0a6      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	22c5      	movs	r2, #197	; 0xc5
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff fd18 	bl	8004f60 <SDIO_GetCommandResponse>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	7afb      	ldrb	r3, [r7, #11]
 8005536:	4293      	cmp	r3, r2
 8005538:	d001      	beq.n	800553e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800553a:	2301      	movs	r3, #1
 800553c:	e099      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800553e:	2100      	movs	r1, #0
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f7ff fd1a 	bl	8004f7a <SDIO_GetResponse>
 8005546:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4b4e      	ldr	r3, [pc, #312]	; (8005684 <SDMMC_GetCmdResp1+0x1d4>)
 800554c:	4013      	ands	r3, r2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005552:	2300      	movs	r3, #0
 8005554:	e08d      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	da02      	bge.n	8005562 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800555c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005560:	e087      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800556c:	2340      	movs	r3, #64	; 0x40
 800556e:	e080      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800557a:	2380      	movs	r3, #128	; 0x80
 800557c:	e079      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800558c:	e071      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800559c:	e069      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80055a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ac:	e061      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80055b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055bc:	e059      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80055c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055cc:	e051      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80055d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055dc:	e049      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80055e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055ec:	e041      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80055f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fc:	e039      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800560c:	e031      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005618:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800561c:	e029      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005628:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800562c:	e021      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005638:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800563c:	e019      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005648:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800564c:	e011      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800565c:	e009      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005668:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800566c:	e001      	b.n	8005672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800566e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005672:	4618      	mov	r0, r3
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	bd90      	pop	{r4, r7, pc}
 800567a:	bf00      	nop
 800567c:	20000000 	.word	0x20000000
 8005680:	10624dd3 	.word	0x10624dd3
 8005684:	fdffe008 	.word	0xfdffe008

08005688 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005688:	b490      	push	{r4, r7}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005690:	4b1e      	ldr	r3, [pc, #120]	; (800570c <SDMMC_GetCmdResp2+0x84>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <SDMMC_GetCmdResp2+0x88>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	0a5b      	lsrs	r3, r3, #9
 800569c:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80056a4:	4623      	mov	r3, r4
 80056a6:	1e5c      	subs	r4, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056b0:	e026      	b.n	8005700 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <SDMMC_GetCmdResp2+0x1c>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1eb      	bne.n	80056a4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2204      	movs	r2, #4
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056de:	2304      	movs	r3, #4
 80056e0:	e00e      	b.n	8005700 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e003      	b.n	8005700 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	22c5      	movs	r2, #197	; 0xc5
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bc90      	pop	{r4, r7}
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	20000000 	.word	0x20000000
 8005710:	10624dd3 	.word	0x10624dd3

08005714 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005714:	b490      	push	{r4, r7}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800571c:	4b18      	ldr	r3, [pc, #96]	; (8005780 <SDMMC_GetCmdResp3+0x6c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a18      	ldr	r2, [pc, #96]	; (8005784 <SDMMC_GetCmdResp3+0x70>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	0a5b      	lsrs	r3, r3, #9
 8005728:	f241 3288 	movw	r2, #5000	; 0x1388
 800572c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005730:	4623      	mov	r3, r4
 8005732:	1e5c      	subs	r4, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800573c:	e01b      	b.n	8005776 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <SDMMC_GetCmdResp3+0x1c>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1eb      	bne.n	8005730 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2204      	movs	r2, #4
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800576a:	2304      	movs	r3, #4
 800576c:	e003      	b.n	8005776 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	22c5      	movs	r2, #197	; 0xc5
 8005772:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bc90      	pop	{r4, r7}
 800577e:	4770      	bx	lr
 8005780:	20000000 	.word	0x20000000
 8005784:	10624dd3 	.word	0x10624dd3

08005788 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	460b      	mov	r3, r1
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005796:	4b34      	ldr	r3, [pc, #208]	; (8005868 <SDMMC_GetCmdResp6+0xe0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a34      	ldr	r2, [pc, #208]	; (800586c <SDMMC_GetCmdResp6+0xe4>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	0a5b      	lsrs	r3, r3, #9
 80057a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80057aa:	4623      	mov	r3, r4
 80057ac:	1e5c      	subs	r4, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d102      	bne.n	80057b8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057b6:	e052      	b.n	800585e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <SDMMC_GetCmdResp6+0x22>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1eb      	bne.n	80057aa <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d004      	beq.n	80057e8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2204      	movs	r2, #4
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057e4:	2304      	movs	r3, #4
 80057e6:	e03a      	b.n	800585e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e02f      	b.n	800585e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff fbae 	bl	8004f60 <SDIO_GetCommandResponse>
 8005804:	4603      	mov	r3, r0
 8005806:	461a      	mov	r2, r3
 8005808:	7afb      	ldrb	r3, [r7, #11]
 800580a:	4293      	cmp	r3, r2
 800580c:	d001      	beq.n	8005812 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800580e:	2301      	movs	r3, #1
 8005810:	e025      	b.n	800585e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	22c5      	movs	r2, #197	; 0xc5
 8005816:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005818:	2100      	movs	r1, #0
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f7ff fbad 	bl	8004f7a <SDIO_GetResponse>
 8005820:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d106      	bne.n	800583a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	0c1b      	lsrs	r3, r3, #16
 8005830:	b29a      	uxth	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005836:	2300      	movs	r3, #0
 8005838:	e011      	b.n	800585e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005848:	e009      	b.n	800585e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005858:	e001      	b.n	800585e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800585a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd90      	pop	{r4, r7, pc}
 8005866:	bf00      	nop
 8005868:	20000000 	.word	0x20000000
 800586c:	10624dd3 	.word	0x10624dd3

08005870 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005870:	b490      	push	{r4, r7}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005878:	4b21      	ldr	r3, [pc, #132]	; (8005900 <SDMMC_GetCmdResp7+0x90>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a21      	ldr	r2, [pc, #132]	; (8005904 <SDMMC_GetCmdResp7+0x94>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	0a5b      	lsrs	r3, r3, #9
 8005884:	f241 3288 	movw	r2, #5000	; 0x1388
 8005888:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800588c:	4623      	mov	r3, r4
 800588e:	1e5c      	subs	r4, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005898:	e02c      	b.n	80058f4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <SDMMC_GetCmdResp7+0x1c>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1eb      	bne.n	800588c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2204      	movs	r2, #4
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058c6:	2304      	movs	r3, #4
 80058c8:	e014      	b.n	80058f4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058dc:	2301      	movs	r3, #1
 80058de:	e009      	b.n	80058f4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2240      	movs	r2, #64	; 0x40
 80058f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80058f2:	2300      	movs	r3, #0
  
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc90      	pop	{r4, r7}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000000 	.word	0x20000000
 8005904:	10624dd3 	.word	0x10624dd3

08005908 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005908:	b084      	sub	sp, #16
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	f107 001c 	add.w	r0, r7, #28
 8005916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	2b01      	cmp	r3, #1
 800591e:	d122      	bne.n	8005966 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d105      	bne.n	800595a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 faae 	bl	8006ebc <USB_CoreReset>
 8005960:	4603      	mov	r3, r0
 8005962:	73fb      	strb	r3, [r7, #15]
 8005964:	e01a      	b.n	800599c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 faa2 	bl	8006ebc <USB_CoreReset>
 8005978:	4603      	mov	r3, r0
 800597a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800597c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	639a      	str	r2, [r3, #56]	; 0x38
 800598e:	e005      	b.n	800599c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d10b      	bne.n	80059ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f043 0206 	orr.w	r2, r3, #6
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f043 0220 	orr.w	r2, r3, #32
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059c6:	b004      	add	sp, #16
 80059c8:	4770      	bx	lr
	...

080059cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	4613      	mov	r3, r2
 80059d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d165      	bne.n	8005aac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4a41      	ldr	r2, [pc, #260]	; (8005ae8 <USB_SetTurnaroundTime+0x11c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d906      	bls.n	80059f6 <USB_SetTurnaroundTime+0x2a>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4a40      	ldr	r2, [pc, #256]	; (8005aec <USB_SetTurnaroundTime+0x120>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d802      	bhi.n	80059f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80059f0:	230f      	movs	r3, #15
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	e062      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4a3c      	ldr	r2, [pc, #240]	; (8005aec <USB_SetTurnaroundTime+0x120>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d906      	bls.n	8005a0c <USB_SetTurnaroundTime+0x40>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4a3b      	ldr	r2, [pc, #236]	; (8005af0 <USB_SetTurnaroundTime+0x124>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d802      	bhi.n	8005a0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a06:	230e      	movs	r3, #14
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e057      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4a38      	ldr	r2, [pc, #224]	; (8005af0 <USB_SetTurnaroundTime+0x124>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d906      	bls.n	8005a22 <USB_SetTurnaroundTime+0x56>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4a37      	ldr	r2, [pc, #220]	; (8005af4 <USB_SetTurnaroundTime+0x128>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d802      	bhi.n	8005a22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a1c:	230d      	movs	r3, #13
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e04c      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4a33      	ldr	r2, [pc, #204]	; (8005af4 <USB_SetTurnaroundTime+0x128>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d906      	bls.n	8005a38 <USB_SetTurnaroundTime+0x6c>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4a32      	ldr	r2, [pc, #200]	; (8005af8 <USB_SetTurnaroundTime+0x12c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d802      	bhi.n	8005a38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a32:	230c      	movs	r3, #12
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e041      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4a2f      	ldr	r2, [pc, #188]	; (8005af8 <USB_SetTurnaroundTime+0x12c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d906      	bls.n	8005a4e <USB_SetTurnaroundTime+0x82>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4a2e      	ldr	r2, [pc, #184]	; (8005afc <USB_SetTurnaroundTime+0x130>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d802      	bhi.n	8005a4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a48:	230b      	movs	r3, #11
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e036      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <USB_SetTurnaroundTime+0x130>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d906      	bls.n	8005a64 <USB_SetTurnaroundTime+0x98>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4a29      	ldr	r2, [pc, #164]	; (8005b00 <USB_SetTurnaroundTime+0x134>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d802      	bhi.n	8005a64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a5e:	230a      	movs	r3, #10
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e02b      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4a26      	ldr	r2, [pc, #152]	; (8005b00 <USB_SetTurnaroundTime+0x134>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d906      	bls.n	8005a7a <USB_SetTurnaroundTime+0xae>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4a25      	ldr	r2, [pc, #148]	; (8005b04 <USB_SetTurnaroundTime+0x138>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d802      	bhi.n	8005a7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a74:	2309      	movs	r3, #9
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	e020      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4a21      	ldr	r2, [pc, #132]	; (8005b04 <USB_SetTurnaroundTime+0x138>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d906      	bls.n	8005a90 <USB_SetTurnaroundTime+0xc4>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4a20      	ldr	r2, [pc, #128]	; (8005b08 <USB_SetTurnaroundTime+0x13c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d802      	bhi.n	8005a90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	e015      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4a1d      	ldr	r2, [pc, #116]	; (8005b08 <USB_SetTurnaroundTime+0x13c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d906      	bls.n	8005aa6 <USB_SetTurnaroundTime+0xda>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <USB_SetTurnaroundTime+0x140>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d802      	bhi.n	8005aa6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005aa0:	2307      	movs	r3, #7
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e00a      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005aa6:	2306      	movs	r3, #6
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e007      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ab2:	2309      	movs	r3, #9
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	e001      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ab8:	2309      	movs	r3, #9
 8005aba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	029b      	lsls	r3, r3, #10
 8005ad0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	00d8acbf 	.word	0x00d8acbf
 8005aec:	00e4e1bf 	.word	0x00e4e1bf
 8005af0:	00f423ff 	.word	0x00f423ff
 8005af4:	0106737f 	.word	0x0106737f
 8005af8:	011a499f 	.word	0x011a499f
 8005afc:	01312cff 	.word	0x01312cff
 8005b00:	014ca43f 	.word	0x014ca43f
 8005b04:	016e35ff 	.word	0x016e35ff
 8005b08:	01a6ab1f 	.word	0x01a6ab1f
 8005b0c:	01e847ff 	.word	0x01e847ff

08005b10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f043 0201 	orr.w	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f023 0201 	bic.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d106      	bne.n	8005b80 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	e00b      	b.n	8005b98 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	e001      	b.n	8005b98 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e003      	b.n	8005ba0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005b98:	2032      	movs	r0, #50	; 0x32
 8005b9a:	f7fb fc59 	bl	8001450 <HAL_Delay>

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ba8:	b084      	sub	sp, #16
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	e009      	b.n	8005bdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	3340      	adds	r3, #64	; 0x40
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	613b      	str	r3, [r7, #16]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b0e      	cmp	r3, #14
 8005be0:	d9f2      	bls.n	8005bc8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d11c      	bne.n	8005c22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf6:	f043 0302 	orr.w	r3, r3, #2
 8005bfa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e005      	b.n	8005c2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c34:	461a      	mov	r2, r3
 8005c36:	2300      	movs	r3, #0
 8005c38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c40:	4619      	mov	r1, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c48:	461a      	mov	r2, r3
 8005c4a:	680b      	ldr	r3, [r1, #0]
 8005c4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d10c      	bne.n	8005c6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f949 	bl	8005ef4 <USB_SetDevSpeed>
 8005c62:	e008      	b.n	8005c76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c64:	2101      	movs	r1, #1
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f944 	bl	8005ef4 <USB_SetDevSpeed>
 8005c6c:	e003      	b.n	8005c76 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c6e:	2103      	movs	r1, #3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f93f 	bl	8005ef4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c76:	2110      	movs	r1, #16
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f8f3 	bl	8005e64 <USB_FlushTxFifo>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f911 	bl	8005eb0 <USB_FlushRxFifo>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005caa:	461a      	mov	r2, r3
 8005cac:	2300      	movs	r3, #0
 8005cae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	e043      	b.n	8005d4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd8:	d118      	bne.n	8005d0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cec:	461a      	mov	r2, r3
 8005cee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	e013      	b.n	8005d1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	461a      	mov	r2, r3
 8005d04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e008      	b.n	8005d1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	461a      	mov	r2, r3
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	3301      	adds	r3, #1
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d3b7      	bcc.n	8005cc2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	e043      	b.n	8005de0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d6e:	d118      	bne.n	8005da2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d82:	461a      	mov	r2, r3
 8005d84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	e013      	b.n	8005db4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e008      	b.n	8005db4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dae:	461a      	mov	r2, r3
 8005db0:	2300      	movs	r3, #0
 8005db2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d3b7      	bcc.n	8005d58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dfa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d105      	bne.n	8005e1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	f043 0210 	orr.w	r2, r3, #16
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <USB_DevInit+0x2b8>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f043 0208 	orr.w	r2, r3, #8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d107      	bne.n	8005e50 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e48:	f043 0304 	orr.w	r3, r3, #4
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e5c:	b004      	add	sp, #16
 8005e5e:	4770      	bx	lr
 8005e60:	803c3800 	.word	0x803c3800

08005e64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	019b      	lsls	r3, r3, #6
 8005e76:	f043 0220 	orr.w	r2, r3, #32
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a09      	ldr	r2, [pc, #36]	; (8005eac <USB_FlushTxFifo+0x48>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d901      	bls.n	8005e90 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e006      	b.n	8005e9e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d0f0      	beq.n	8005e7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	00030d40 	.word	0x00030d40

08005eb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2210      	movs	r2, #16
 8005ec0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <USB_FlushRxFifo+0x40>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d901      	bls.n	8005ed4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e006      	b.n	8005ee2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d0f0      	beq.n	8005ec2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	00030d40 	.word	0x00030d40

08005ef4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f14:	4313      	orrs	r3, r2
 8005f16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b087      	sub	sp, #28
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0306 	and.w	r3, r3, #6
 8005f3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d102      	bne.n	8005f4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f46:	2300      	movs	r3, #0
 8005f48:	75fb      	strb	r3, [r7, #23]
 8005f4a:	e00a      	b.n	8005f62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d002      	beq.n	8005f58 <USB_GetDevSpeed+0x32>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b06      	cmp	r3, #6
 8005f56:	d102      	bne.n	8005f5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	75fb      	strb	r3, [r7, #23]
 8005f5c:	e001      	b.n	8005f62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f5e:	230f      	movs	r3, #15
 8005f60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	371c      	adds	r7, #28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d13a      	bne.n	8006002 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	68f9      	ldr	r1, [r7, #12]
 8005fa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005faa:	4313      	orrs	r3, r2
 8005fac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d155      	bne.n	8006070 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	78db      	ldrb	r3, [r3, #3]
 8005fde:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fe0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	059b      	lsls	r3, r3, #22
 8005fe6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e036      	b.n	8006070 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006008:	69da      	ldr	r2, [r3, #28]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	2101      	movs	r1, #1
 8006014:	fa01 f303 	lsl.w	r3, r1, r3
 8006018:	041b      	lsls	r3, r3, #16
 800601a:	68f9      	ldr	r1, [r7, #12]
 800601c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006020:	4313      	orrs	r3, r2
 8006022:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d11a      	bne.n	8006070 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	78db      	ldrb	r3, [r3, #3]
 8006054:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006056:	430b      	orrs	r3, r1
 8006058:	4313      	orrs	r3, r2
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	440a      	add	r2, r1
 8006062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800606e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
	...

08006080 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d161      	bne.n	8006160 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060b2:	d11f      	bne.n	80060f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	2101      	movs	r1, #1
 8006106:	fa01 f303 	lsl.w	r3, r1, r3
 800610a:	b29b      	uxth	r3, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	68f9      	ldr	r1, [r7, #12]
 8006110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006114:	4013      	ands	r3, r2
 8006116:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	2101      	movs	r1, #1
 800612a:	fa01 f303 	lsl.w	r3, r1, r3
 800612e:	b29b      	uxth	r3, r3
 8006130:	43db      	mvns	r3, r3
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006138:	4013      	ands	r3, r2
 800613a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	0159      	lsls	r1, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	440b      	add	r3, r1
 8006152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006156:	4619      	mov	r1, r3
 8006158:	4b35      	ldr	r3, [pc, #212]	; (8006230 <USB_DeactivateEndpoint+0x1b0>)
 800615a:	4013      	ands	r3, r2
 800615c:	600b      	str	r3, [r1, #0]
 800615e:	e060      	b.n	8006222 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006176:	d11f      	bne.n	80061b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006192:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006196:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	2101      	movs	r1, #1
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	041b      	lsls	r3, r3, #16
 80061d0:	43db      	mvns	r3, r3
 80061d2:	68f9      	ldr	r1, [r7, #12]
 80061d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061d8:	4013      	ands	r3, r2
 80061da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	2101      	movs	r1, #1
 80061ee:	fa01 f303 	lsl.w	r3, r1, r3
 80061f2:	041b      	lsls	r3, r3, #16
 80061f4:	43db      	mvns	r3, r3
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061fc:	4013      	ands	r3, r2
 80061fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	0159      	lsls	r1, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	440b      	add	r3, r1
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	4619      	mov	r1, r3
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <USB_DeactivateEndpoint+0x1b4>)
 800621e:	4013      	ands	r3, r2
 8006220:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	ec337800 	.word	0xec337800
 8006234:	eff37800 	.word	0xeff37800

08006238 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b01      	cmp	r3, #1
 8006256:	f040 815c 	bne.w	8006512 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d132      	bne.n	80062c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	440a      	add	r2, r1
 8006278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006280:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006284:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c0:	0cdb      	lsrs	r3, r3, #19
 80062c2:	04db      	lsls	r3, r3, #19
 80062c4:	6113      	str	r3, [r2, #16]
 80062c6:	e074      	b.n	80063b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	0151      	lsls	r1, r2, #5
 80062da:	69fa      	ldr	r2, [r7, #28]
 80062dc:	440a      	add	r2, r1
 80062de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e2:	0cdb      	lsrs	r3, r3, #19
 80062e4:	04db      	lsls	r3, r3, #19
 80062e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	0151      	lsls	r1, r2, #5
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	440a      	add	r2, r1
 80062fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006302:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006306:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800630a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	6959      	ldr	r1, [r3, #20]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	440b      	add	r3, r1
 8006324:	1e59      	subs	r1, r3, #1
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	fbb1 f3f3 	udiv	r3, r1, r3
 800632e:	04d9      	lsls	r1, r3, #19
 8006330:	4b9d      	ldr	r3, [pc, #628]	; (80065a8 <USB_EPStartXfer+0x370>)
 8006332:	400b      	ands	r3, r1
 8006334:	69b9      	ldr	r1, [r7, #24]
 8006336:	0148      	lsls	r0, r1, #5
 8006338:	69f9      	ldr	r1, [r7, #28]
 800633a:	4401      	add	r1, r0
 800633c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006340:	4313      	orrs	r3, r2
 8006342:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800635a:	69b9      	ldr	r1, [r7, #24]
 800635c:	0148      	lsls	r0, r1, #5
 800635e:	69f9      	ldr	r1, [r7, #28]
 8006360:	4401      	add	r1, r0
 8006362:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006366:	4313      	orrs	r3, r2
 8006368:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	78db      	ldrb	r3, [r3, #3]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d11f      	bne.n	80063b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	440a      	add	r2, r1
 8006388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006390:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d14b      	bne.n	8006450 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063cc:	461a      	mov	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	78db      	ldrb	r3, [r3, #3]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d128      	bne.n	800642e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d110      	bne.n	800640e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	440a      	add	r2, r1
 8006402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	e00f      	b.n	800642e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800642c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006448:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e12f      	b.n	80066b0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800646e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	78db      	ldrb	r3, [r3, #3]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d015      	beq.n	80064a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8117 	beq.w	80066b0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	2101      	movs	r1, #1
 8006494:	fa01 f303 	lsl.w	r3, r1, r3
 8006498:	69f9      	ldr	r1, [r7, #28]
 800649a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800649e:	4313      	orrs	r3, r2
 80064a0:	634b      	str	r3, [r1, #52]	; 0x34
 80064a2:	e105      	b.n	80066b0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d110      	bne.n	80064d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	e00f      	b.n	80064f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	68d9      	ldr	r1, [r3, #12]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	b298      	uxth	r0, r3
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4603      	mov	r3, r0
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fa2b 	bl	8006966 <USB_WritePacket>
 8006510:	e0ce      	b.n	80066b0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	0151      	lsls	r1, r2, #5
 8006524:	69fa      	ldr	r2, [r7, #28]
 8006526:	440a      	add	r2, r1
 8006528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652c:	0cdb      	lsrs	r3, r3, #19
 800652e:	04db      	lsls	r3, r3, #19
 8006530:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006550:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006554:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d126      	bne.n	80065ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006574:	69b9      	ldr	r1, [r7, #24]
 8006576:	0148      	lsls	r0, r1, #5
 8006578:	69f9      	ldr	r1, [r7, #28]
 800657a:	4401      	add	r1, r0
 800657c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006580:	4313      	orrs	r3, r2
 8006582:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	440a      	add	r2, r1
 800659a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065a2:	6113      	str	r3, [r2, #16]
 80065a4:	e036      	b.n	8006614 <USB_EPStartXfer+0x3dc>
 80065a6:	bf00      	nop
 80065a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	695a      	ldr	r2, [r3, #20]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	4413      	add	r3, r2
 80065b6:	1e5a      	subs	r2, r3, #1
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	8afb      	ldrh	r3, [r7, #22]
 80065d2:	04d9      	lsls	r1, r3, #19
 80065d4:	4b39      	ldr	r3, [pc, #228]	; (80066bc <USB_EPStartXfer+0x484>)
 80065d6:	400b      	ands	r3, r1
 80065d8:	69b9      	ldr	r1, [r7, #24]
 80065da:	0148      	lsls	r0, r1, #5
 80065dc:	69f9      	ldr	r1, [r7, #28]
 80065de:	4401      	add	r1, r0
 80065e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065e4:	4313      	orrs	r3, r2
 80065e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	8af9      	ldrh	r1, [r7, #22]
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006604:	69b9      	ldr	r1, [r7, #24]
 8006606:	0148      	lsls	r0, r1, #5
 8006608:	69f9      	ldr	r1, [r7, #28]
 800660a:	4401      	add	r1, r0
 800660c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006610:	4313      	orrs	r3, r2
 8006612:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d10d      	bne.n	8006636 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	68d9      	ldr	r1, [r3, #12]
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	460a      	mov	r2, r1
 8006634:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	78db      	ldrb	r3, [r3, #3]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d128      	bne.n	8006690 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664a:	2b00      	cmp	r3, #0
 800664c:	d110      	bne.n	8006670 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	440a      	add	r2, r1
 8006664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e00f      	b.n	8006690 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	440a      	add	r2, r1
 8006686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800668a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800668e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3720      	adds	r7, #32
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	1ff80000 	.word	0x1ff80000

080066c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	f040 80cd 	bne.w	800687c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d132      	bne.n	8006750 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006704:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006708:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800670c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	440a      	add	r2, r1
 8006724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800672c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	440a      	add	r2, r1
 8006744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006748:	0cdb      	lsrs	r3, r3, #19
 800674a:	04db      	lsls	r3, r3, #19
 800674c:	6113      	str	r3, [r2, #16]
 800674e:	e04e      	b.n	80067ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676a:	0cdb      	lsrs	r3, r3, #19
 800676c:	04db      	lsls	r3, r3, #19
 800676e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800678e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006792:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	695a      	ldr	r2, [r3, #20]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	429a      	cmp	r2, r3
 800679e:	d903      	bls.n	80067a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067de:	6939      	ldr	r1, [r7, #16]
 80067e0:	0148      	lsls	r0, r1, #5
 80067e2:	6979      	ldr	r1, [r7, #20]
 80067e4:	4401      	add	r1, r0
 80067e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067ea:	4313      	orrs	r3, r2
 80067ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d11e      	bne.n	8006832 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d009      	beq.n	8006810 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006808:	461a      	mov	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	440a      	add	r2, r1
 8006826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	e092      	b.n	8006958 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	440a      	add	r2, r1
 8006848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006850:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d07e      	beq.n	8006958 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	2101      	movs	r1, #1
 800686c:	fa01 f303 	lsl.w	r3, r1, r3
 8006870:	6979      	ldr	r1, [r7, #20]
 8006872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006876:	4313      	orrs	r3, r2
 8006878:	634b      	str	r3, [r1, #52]	; 0x34
 800687a:	e06d      	b.n	8006958 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	440a      	add	r2, r1
 8006892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006896:	0cdb      	lsrs	r3, r3, #19
 8006898:	04db      	lsls	r3, r3, #19
 800689a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068be:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006906:	6939      	ldr	r1, [r7, #16]
 8006908:	0148      	lsls	r0, r1, #5
 800690a:	6979      	ldr	r1, [r7, #20]
 800690c:	4401      	add	r1, r0
 800690e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006912:	4313      	orrs	r3, r2
 8006914:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d10d      	bne.n	8006938 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d009      	beq.n	8006938 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	68d9      	ldr	r1, [r3, #12]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	460a      	mov	r2, r1
 8006936:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006966:	b480      	push	{r7}
 8006968:	b089      	sub	sp, #36	; 0x24
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	4611      	mov	r1, r2
 8006972:	461a      	mov	r2, r3
 8006974:	460b      	mov	r3, r1
 8006976:	71fb      	strb	r3, [r7, #7]
 8006978:	4613      	mov	r3, r2
 800697a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006984:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006988:	2b00      	cmp	r3, #0
 800698a:	d11a      	bne.n	80069c2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800698c:	88bb      	ldrh	r3, [r7, #4]
 800698e:	3303      	adds	r3, #3
 8006990:	089b      	lsrs	r3, r3, #2
 8006992:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006994:	2300      	movs	r3, #0
 8006996:	61bb      	str	r3, [r7, #24]
 8006998:	e00f      	b.n	80069ba <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	031a      	lsls	r2, r3, #12
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a6:	461a      	mov	r2, r3
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6013      	str	r3, [r2, #0]
      pSrc++;
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	3304      	adds	r3, #4
 80069b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	3301      	adds	r3, #1
 80069b8:	61bb      	str	r3, [r7, #24]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d3eb      	bcc.n	800699a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3724      	adds	r7, #36	; 0x24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b089      	sub	sp, #36	; 0x24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	3303      	adds	r3, #3
 80069ea:	089b      	lsrs	r3, r3, #2
 80069ec:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80069ee:	2300      	movs	r3, #0
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	e00b      	b.n	8006a0c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	3304      	adds	r3, #4
 8006a04:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d3ef      	bcc.n	80069f4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006a14:	69fb      	ldr	r3, [r7, #28]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3724      	adds	r7, #36	; 0x24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	785b      	ldrb	r3, [r3, #1]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d12c      	bne.n	8006a98 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	db12      	blt.n	8006a76 <USB_EPSetStall+0x54>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00f      	beq.n	8006a76 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	0151      	lsls	r1, r2, #5
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	440a      	add	r2, r1
 8006a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a74:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e02b      	b.n	8006af0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	db12      	blt.n	8006ad0 <USB_EPSetStall+0xae>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00f      	beq.n	8006ad0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ace:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006aee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d128      	bne.n	8006b6c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	78db      	ldrb	r3, [r3, #3]
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d003      	beq.n	8006b4a <USB_EPClearStall+0x4c>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	78db      	ldrb	r3, [r3, #3]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d138      	bne.n	8006bbc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	0151      	lsls	r1, r2, #5
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	440a      	add	r2, r1
 8006b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e027      	b.n	8006bbc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	0151      	lsls	r1, r2, #5
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	440a      	add	r2, r1
 8006b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	78db      	ldrb	r3, [r3, #3]
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d003      	beq.n	8006b9c <USB_EPClearStall+0x9e>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	78db      	ldrb	r3, [r3, #3]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d10f      	bne.n	8006bbc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006be8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006bec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c04:	4313      	orrs	r3, r2
 8006c06:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c30:	f023 0302 	bic.w	r3, r3, #2
 8006c34:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006c36:	2003      	movs	r0, #3
 8006c38:	f7fa fc0a 	bl	8001450 <HAL_Delay>

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c60:	f043 0302 	orr.w	r3, r3, #2
 8006c64:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006c66:	2003      	movs	r0, #3
 8006c68:	f7fa fbf2 	bl	8001450 <HAL_Delay>

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	0c1b      	lsrs	r3, r3, #16
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	b29b      	uxth	r3, r3
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d32:	68bb      	ldr	r3, [r7, #8]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d62:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	f003 030f 	and.w	r3, r3, #15
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d70:	01db      	lsls	r3, r3, #7
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	f003 0301 	and.w	r3, r3, #1
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006dd6:	f023 0307 	bic.w	r3, r3, #7
 8006dda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	333c      	adds	r3, #60	; 0x3c
 8006e16:	3304      	adds	r3, #4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4a26      	ldr	r2, [pc, #152]	; (8006eb8 <USB_EP0_OutStart+0xb8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d90a      	bls.n	8006e3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e34:	d101      	bne.n	8006e3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e037      	b.n	8006eaa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e40:	461a      	mov	r2, r3
 8006e42:	2300      	movs	r3, #0
 8006e44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e68:	f043 0318 	orr.w	r3, r3, #24
 8006e6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006e80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e82:	7afb      	ldrb	r3, [r7, #11]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10f      	bne.n	8006ea8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8e:	461a      	mov	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ea6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	4f54300a 	.word	0x4f54300a

08006ebc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a13      	ldr	r2, [pc, #76]	; (8006f20 <USB_CoreReset+0x64>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e01b      	b.n	8006f12 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	daf2      	bge.n	8006ec8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f043 0201 	orr.w	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <USB_CoreReset+0x64>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d901      	bls.n	8006f04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e006      	b.n	8006f12 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d0f0      	beq.n	8006ef2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	00030d40 	.word	0x00030d40

08006f24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006f28:	4904      	ldr	r1, [pc, #16]	; (8006f3c <MX_FATFS_Init+0x18>)
 8006f2a:	4805      	ldr	r0, [pc, #20]	; (8006f40 <MX_FATFS_Init+0x1c>)
 8006f2c:	f005 f9f0 	bl	800c310 <FATFS_LinkDriver>
 8006f30:	4603      	mov	r3, r0
 8006f32:	461a      	mov	r2, r3
 8006f34:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <MX_FATFS_Init+0x20>)
 8006f36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006f38:	bf00      	nop
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	20001018 	.word	0x20001018
 8006f40:	0800cff0 	.word	0x0800cff0
 8006f44:	20001014 	.word	0x20001014

08006f48 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006f4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006f62:	f000 f877 	bl	8007054 <BSP_SD_IsDetected>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d001      	beq.n	8006f70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e011      	b.n	8006f94 <BSP_SD_Init+0x3c>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006f70:	480a      	ldr	r0, [pc, #40]	; (8006f9c <BSP_SD_Init+0x44>)
 8006f72:	f7fc fded 	bl	8003b50 <HAL_SD_Init>
 8006f76:	4603      	mov	r3, r0
 8006f78:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d108      	bne.n	8006f92 <BSP_SD_Init+0x3a>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_1B) != HAL_OK)
 8006f80:	2100      	movs	r1, #0
 8006f82:	4806      	ldr	r0, [pc, #24]	; (8006f9c <BSP_SD_Init+0x44>)
 8006f84:	f7fd fbdc 	bl	8004740 <HAL_SD_ConfigWideBusOperation>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <BSP_SD_Init+0x3a>
    {
      sd_state = MSD_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006f92:	79fb      	ldrb	r3, [r7, #7]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	200008c8 	.word	0x200008c8

08006fa0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	68f9      	ldr	r1, [r7, #12]
 8006fbc:	4806      	ldr	r0, [pc, #24]	; (8006fd8 <BSP_SD_ReadBlocks+0x38>)
 8006fbe:	f7fc fe57 	bl	8003c70 <HAL_SD_ReadBlocks>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200008c8 	.word	0x200008c8

08006fdc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	68f9      	ldr	r1, [r7, #12]
 8006ff8:	4806      	ldr	r0, [pc, #24]	; (8007014 <BSP_SD_WriteBlocks+0x38>)
 8006ffa:	f7fd f831 	bl	8004060 <HAL_SD_WriteBlocks>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8007008:	7dfb      	ldrb	r3, [r7, #23]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	200008c8 	.word	0x200008c8

08007018 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800701c:	4805      	ldr	r0, [pc, #20]	; (8007034 <BSP_SD_GetCardState+0x1c>)
 800701e:	f7fd fc0b 	bl	8004838 <HAL_SD_GetCardState>
 8007022:	4603      	mov	r3, r0
 8007024:	2b04      	cmp	r3, #4
 8007026:	bf14      	ite	ne
 8007028:	2301      	movne	r3, #1
 800702a:	2300      	moveq	r3, #0
 800702c:	b2db      	uxtb	r3, r3
}
 800702e:	4618      	mov	r0, r3
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	200008c8 	.word	0x200008c8

08007038 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4803      	ldr	r0, [pc, #12]	; (8007050 <BSP_SD_GetCardInfo+0x18>)
 8007044:	f7fd fb50 	bl	80046e8 <HAL_SD_GetCardInfo>
}
 8007048:	bf00      	nop
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	200008c8 	.word	0x200008c8

08007054 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800705a:	2301      	movs	r3, #1
 800705c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	b2db      	uxtb	r3, r3
}
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
	...

08007070 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800707a:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <SD_CheckStatus+0x38>)
 800707c:	2201      	movs	r2, #1
 800707e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007080:	f7ff ffca 	bl	8007018 <BSP_SD_GetCardState>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d107      	bne.n	800709a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <SD_CheckStatus+0x38>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f023 0301 	bic.w	r3, r3, #1
 8007094:	b2da      	uxtb	r2, r3
 8007096:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <SD_CheckStatus+0x38>)
 8007098:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800709a:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <SD_CheckStatus+0x38>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b2db      	uxtb	r3, r3
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20000009 	.word	0x20000009

080070ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <SD_initialize+0x38>)
 80070b8:	2201      	movs	r2, #1
 80070ba:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80070bc:	f7ff ff4c 	bl	8006f58 <BSP_SD_Init>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d107      	bne.n	80070d6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff ffd1 	bl	8007070 <SD_CheckStatus>
 80070ce:	4603      	mov	r3, r0
 80070d0:	461a      	mov	r2, r3
 80070d2:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <SD_initialize+0x38>)
 80070d4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80070d6:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <SD_initialize+0x38>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	b2db      	uxtb	r3, r3
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20000009 	.word	0x20000009

080070e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff ffbb 	bl	8007070 <SD_CheckStatus>
 80070fa:	4603      	mov	r3, r0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007118:	f04f 33ff 	mov.w	r3, #4294967295
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	68b8      	ldr	r0, [r7, #8]
 8007122:	f7ff ff3d 	bl	8006fa0 <BSP_SD_ReadBlocks>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d107      	bne.n	800713c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800712c:	bf00      	nop
 800712e:	f7ff ff73 	bl	8007018 <BSP_SD_GetCardState>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1fa      	bne.n	800712e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800715a:	f04f 33ff 	mov.w	r3, #4294967295
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	68b8      	ldr	r0, [r7, #8]
 8007164:	f7ff ff3a 	bl	8006fdc <BSP_SD_WriteBlocks>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d107      	bne.n	800717e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800716e:	bf00      	nop
 8007170:	f7ff ff52 	bl	8007018 <BSP_SD_GetCardState>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1fa      	bne.n	8007170 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08c      	sub	sp, #48	; 0x30
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	603a      	str	r2, [r7, #0]
 8007192:	71fb      	strb	r3, [r7, #7]
 8007194:	460b      	mov	r3, r1
 8007196:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800719e:	4b25      	ldr	r3, [pc, #148]	; (8007234 <SD_ioctl+0xac>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <SD_ioctl+0x28>
 80071ac:	2303      	movs	r3, #3
 80071ae:	e03c      	b.n	800722a <SD_ioctl+0xa2>

  switch (cmd)
 80071b0:	79bb      	ldrb	r3, [r7, #6]
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d834      	bhi.n	8007220 <SD_ioctl+0x98>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <SD_ioctl+0x34>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071cd 	.word	0x080071cd
 80071c0:	080071d5 	.word	0x080071d5
 80071c4:	080071ed 	.word	0x080071ed
 80071c8:	08007207 	.word	0x08007207
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071d2:	e028      	b.n	8007226 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80071d4:	f107 030c 	add.w	r3, r7, #12
 80071d8:	4618      	mov	r0, r3
 80071da:	f7ff ff2d 	bl	8007038 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80071de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071ea:	e01c      	b.n	8007226 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80071ec:	f107 030c 	add.w	r3, r7, #12
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff ff21 	bl	8007038 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007204:	e00f      	b.n	8007226 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007206:	f107 030c 	add.w	r3, r7, #12
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff ff14 	bl	8007038 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	0a5a      	lsrs	r2, r3, #9
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800721e:	e002      	b.n	8007226 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007220:	2304      	movs	r3, #4
 8007222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800722a:	4618      	mov	r0, r3
 800722c:	3730      	adds	r7, #48	; 0x30
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000009 	.word	0x20000009

08007238 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8007244:	f44f 701d 	mov.w	r0, #628	; 0x274
 8007248:	f005 fd90 	bl	800cd6c <malloc>
 800724c:	4603      	mov	r3, r0
 800724e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d105      	bne.n	8007262 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800725e:	2302      	movs	r3, #2
 8007260:	e034      	b.n	80072cc <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	7c1b      	ldrb	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d115      	bne.n	800729e <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007276:	2202      	movs	r2, #2
 8007278:	2101      	movs	r1, #1
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f005 fbdd 	bl	800ca3a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800728c:	2202      	movs	r2, #2
 800728e:	2181      	movs	r1, #129	; 0x81
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f005 fbd2 	bl	800ca3a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	871a      	strh	r2, [r3, #56]	; 0x38
 800729c:	e012      	b.n	80072c4 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800729e:	2340      	movs	r3, #64	; 0x40
 80072a0:	2202      	movs	r2, #2
 80072a2:	2101      	movs	r1, #1
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f005 fbc8 	bl	800ca3a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80072b2:	2340      	movs	r3, #64	; 0x40
 80072b4:	2202      	movs	r2, #2
 80072b6:	2181      	movs	r1, #129	; 0x81
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f005 fbbe 	bl	800ca3a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f98e 	bl	80075e6 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80072e0:	2101      	movs	r1, #1
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f005 fbcf 	bl	800ca86 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80072f0:	2181      	movs	r1, #129	; 0x81
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f005 fbc7 	bl	800ca86 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f9c7 	bl	8007692 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800730a:	2b00      	cmp	r3, #0
 800730c:	d009      	beq.n	8007322 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007314:	4618      	mov	r0, r3
 8007316:	f005 fd31 	bl	800cd7c <free>
    pdev->pClassData = NULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800733c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800734e:	2b00      	cmp	r3, #0
 8007350:	d04d      	beq.n	80073ee <USBD_MSC_Setup+0xc2>
 8007352:	2b20      	cmp	r3, #32
 8007354:	f040 80c6 	bne.w	80074e4 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2bfe      	cmp	r3, #254	; 0xfe
 800735e:	d002      	beq.n	8007366 <USBD_MSC_Setup+0x3a>
 8007360:	2bff      	cmp	r3, #255	; 0xff
 8007362:	d024      	beq.n	80073ae <USBD_MSC_Setup+0x82>
 8007364:	e03b      	b.n	80073de <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	885b      	ldrh	r3, [r3, #2]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d118      	bne.n	80073a0 <USBD_MSC_Setup+0x74>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	88db      	ldrh	r3, [r3, #6]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d114      	bne.n	80073a0 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800737c:	2b00      	cmp	r3, #0
 800737e:	da0f      	bge.n	80073a0 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	4798      	blx	r3
 800738a:	4603      	mov	r3, r0
 800738c:	461a      	mov	r2, r3
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	2201      	movs	r2, #1
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f002 fc58 	bl	8009c4e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800739e:	e025      	b.n	80073ec <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f002 fbe2 	bl	8009b6c <USBD_CtlError>
        ret = USBD_FAIL;
 80073a8:	2303      	movs	r3, #3
 80073aa:	75fb      	strb	r3, [r7, #23]
      break;
 80073ac:	e01e      	b.n	80073ec <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	885b      	ldrh	r3, [r3, #2]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10c      	bne.n	80073d0 <USBD_MSC_Setup+0xa4>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	88db      	ldrh	r3, [r3, #6]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d108      	bne.n	80073d0 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	db03      	blt.n	80073d0 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f940 	bl	800764e <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80073ce:	e00d      	b.n	80073ec <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f002 fbca 	bl	8009b6c <USBD_CtlError>
        ret = USBD_FAIL;
 80073d8:	2303      	movs	r3, #3
 80073da:	75fb      	strb	r3, [r7, #23]
      break;
 80073dc:	e006      	b.n	80073ec <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f002 fbc3 	bl	8009b6c <USBD_CtlError>
      ret = USBD_FAIL;
 80073e6:	2303      	movs	r3, #3
 80073e8:	75fb      	strb	r3, [r7, #23]
      break;
 80073ea:	bf00      	nop
    }
    break;
 80073ec:	e081      	b.n	80074f2 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	785b      	ldrb	r3, [r3, #1]
 80073f2:	2b0b      	cmp	r3, #11
 80073f4:	d86d      	bhi.n	80074d2 <USBD_MSC_Setup+0x1a6>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <USBD_MSC_Setup+0xd0>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	0800742d 	.word	0x0800742d
 8007400:	080074a3 	.word	0x080074a3
 8007404:	080074d3 	.word	0x080074d3
 8007408:	080074d3 	.word	0x080074d3
 800740c:	080074d3 	.word	0x080074d3
 8007410:	080074d3 	.word	0x080074d3
 8007414:	080074d3 	.word	0x080074d3
 8007418:	080074d3 	.word	0x080074d3
 800741c:	080074d3 	.word	0x080074d3
 8007420:	080074d3 	.word	0x080074d3
 8007424:	08007455 	.word	0x08007455
 8007428:	0800747d 	.word	0x0800747d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007432:	2b03      	cmp	r3, #3
 8007434:	d107      	bne.n	8007446 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007436:	f107 030e 	add.w	r3, r7, #14
 800743a:	2202      	movs	r2, #2
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f002 fc05 	bl	8009c4e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007444:	e04d      	b.n	80074e2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f002 fb8f 	bl	8009b6c <USBD_CtlError>
        ret = USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	75fb      	strb	r3, [r7, #23]
      break;
 8007452:	e046      	b.n	80074e2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745a:	2b03      	cmp	r3, #3
 800745c:	d107      	bne.n	800746e <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	3304      	adds	r3, #4
 8007462:	2201      	movs	r2, #1
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f002 fbf1 	bl	8009c4e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800746c:	e039      	b.n	80074e2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f002 fb7b 	bl	8009b6c <USBD_CtlError>
        ret = USBD_FAIL;
 8007476:	2303      	movs	r3, #3
 8007478:	75fb      	strb	r3, [r7, #23]
      break;
 800747a:	e032      	b.n	80074e2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007482:	2b03      	cmp	r3, #3
 8007484:	d106      	bne.n	8007494 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	885b      	ldrh	r3, [r3, #2]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007492:	e026      	b.n	80074e2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f002 fb68 	bl	8009b6c <USBD_CtlError>
        ret = USBD_FAIL;
 800749c:	2303      	movs	r3, #3
 800749e:	75fb      	strb	r3, [r7, #23]
      break;
 80074a0:	e01f      	b.n	80074e2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d119      	bne.n	80074e0 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	885b      	ldrh	r3, [r3, #2]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d115      	bne.n	80074e0 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	889b      	ldrh	r3, [r3, #4]
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f005 fb01 	bl	800cac4 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	889b      	ldrh	r3, [r3, #4]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa5a 	bl	8007984 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 80074d0:	e006      	b.n	80074e0 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f002 fb49 	bl	8009b6c <USBD_CtlError>
      ret = USBD_FAIL;
 80074da:	2303      	movs	r3, #3
 80074dc:	75fb      	strb	r3, [r7, #23]
      break;
 80074de:	e000      	b.n	80074e2 <USBD_MSC_Setup+0x1b6>
      break;
 80074e0:	bf00      	nop
    }
    break;
 80074e2:	e006      	b.n	80074f2 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f002 fb40 	bl	8009b6c <USBD_CtlError>
    ret = USBD_FAIL;
 80074ec:	2303      	movs	r3, #3
 80074ee:	75fb      	strb	r3, [r7, #23]
    break;
 80074f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8d1 	bl	80076b4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f8f2 	bl	8007716 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800754a:	4b03      	ldr	r3, [pc, #12]	; (8007558 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	20000044 	.word	0x20000044

0800755c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2220      	movs	r2, #32
 8007568:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800756a:	4b03      	ldr	r3, [pc, #12]	; (8007578 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800756c:	4618      	mov	r0, r3
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	20000064 	.word	0x20000064

0800757c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800758a:	4b03      	ldr	r3, [pc, #12]	; (8007598 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	20000084 	.word	0x20000084

0800759c <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	220a      	movs	r2, #10
 80075a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80075aa:	4b03      	ldr	r3, [pc, #12]	; (80075b8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	200000a4 	.word	0x200000a4

080075bc <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e004      	b.n	80075da <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075f4:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2000      	movs	r0, #0
 8007624:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007626:	2101      	movs	r1, #1
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f005 fa4b 	bl	800cac4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800762e:	2181      	movs	r1, #129	; 0x81
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f005 fa47 	bl	800cac4 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800763c:	231f      	movs	r3, #31
 800763e:	2101      	movs	r1, #1
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f005 fb08 	bl	800cc56 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8007646:	bf00      	nop
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800765c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800766a:	2181      	movs	r1, #129	; 0x81
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f005 fa67 	bl	800cb40 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8007672:	2101      	movs	r1, #1
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f005 fa63 	bl	800cb40 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8007680:	231f      	movs	r3, #31
 8007682:	2101      	movs	r1, #1
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f005 fae6 	bl	800cc56 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076a0:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	721a      	strb	r2, [r3, #8]
}
 80076a8:	bf00      	nop
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	7a1b      	ldrb	r3, [r3, #8]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d004      	beq.n	80076da <MSC_BOT_DataIn+0x26>
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	db19      	blt.n	8007708 <MSC_BOT_DataIn+0x54>
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	dc17      	bgt.n	8007708 <MSC_BOT_DataIn+0x54>
 80076d8:	e011      	b.n	80076fe <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80076e6:	461a      	mov	r2, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f973 	bl	80079d4 <SCSI_ProcessCmd>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	da0b      	bge.n	800770c <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80076f4:	2101      	movs	r1, #1
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f8ea 	bl	80078d0 <MSC_BOT_SendCSW>
    }
    break;
 80076fc:	e006      	b.n	800770c <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80076fe:	2100      	movs	r1, #0
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f8e5 	bl	80078d0 <MSC_BOT_SendCSW>
    break;
 8007706:	e002      	b.n	800770e <MSC_BOT_DataIn+0x5a>

  default:
    break;
 8007708:	bf00      	nop
 800770a:	e000      	b.n	800770e <MSC_BOT_DataIn+0x5a>
    break;
 800770c:	bf00      	nop
  }
}
 800770e:	bf00      	nop
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007728:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	7a1b      	ldrb	r3, [r3, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <MSC_BOT_DataOut+0x22>
 8007732:	2b01      	cmp	r3, #1
 8007734:	d004      	beq.n	8007740 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8007736:	e015      	b.n	8007764 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f817 	bl	800776c <MSC_BOT_CBW_Decode>
      break;
 800773e:	e011      	b.n	8007764 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800774c:	461a      	mov	r2, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f940 	bl	80079d4 <SCSI_ProcessCmd>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	da03      	bge.n	8007762 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800775a:	2101      	movs	r1, #1
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f8b7 	bl	80078d0 <MSC_BOT_SendCSW>
      break;
 8007762:	bf00      	nop
  }
}
 8007764:	bf00      	nop
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800777a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007794:	2101      	movs	r1, #1
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f005 fa7e 	bl	800cc98 <USBD_LL_GetRxDataSize>
 800779c:	4603      	mov	r3, r0
 800779e:	2b1f      	cmp	r3, #31
 80077a0:	d114      	bne.n	80077cc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80077a8:	4a32      	ldr	r2, [pc, #200]	; (8007874 <MSC_BOT_CBW_Decode+0x108>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d10e      	bne.n	80077cc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d809      	bhi.n	80077cc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d004      	beq.n	80077cc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d90e      	bls.n	80077ea <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80077d2:	2320      	movs	r3, #32
 80077d4:	2205      	movs	r2, #5
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fcc9 	bl	800816e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2202      	movs	r2, #2
 80077e0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f8a0 	bl	8007928 <MSC_BOT_Abort>
 80077e8:	e041      	b.n	800786e <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80077f6:	461a      	mov	r2, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f8eb 	bl	80079d4 <SCSI_ProcessCmd>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	da0c      	bge.n	800781e <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	7a1b      	ldrb	r3, [r3, #8]
 8007808:	2b05      	cmp	r3, #5
 800780a:	d104      	bne.n	8007816 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800780c:	2101      	movs	r1, #1
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f85e 	bl	80078d0 <MSC_BOT_SendCSW>
 8007814:	e02b      	b.n	800786e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f886 	bl	8007928 <MSC_BOT_Abort>
 800781c:	e027      	b.n	800786e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	7a1b      	ldrb	r3, [r3, #8]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d022      	beq.n	800786c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800782a:	2b01      	cmp	r3, #1
 800782c:	d01e      	beq.n	800786c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007832:	2b03      	cmp	r3, #3
 8007834:	d01a      	beq.n	800786c <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f103 0110 	add.w	r1, r3, #16
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	461a      	mov	r2, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f814 	bl	8007878 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007850:	e00d      	b.n	800786e <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d104      	bne.n	8007864 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800785a:	2100      	movs	r1, #0
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f837 	bl	80078d0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007862:	e004      	b.n	800786e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f85f 	bl	8007928 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800786a:	e000      	b.n	800786e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800786c:	bf00      	nop
    }
  }
}
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	43425355 	.word	0x43425355

08007878 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800788a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	4293      	cmp	r3, r2
 8007896:	bf28      	it	cs
 8007898:	4613      	movcs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	1ad2      	subs	r2, r2, r3
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2204      	movs	r2, #4
 80078b8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	2181      	movs	r1, #129	; 0x81
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f005 f9a7 	bl	800cc14 <USBD_LL_Transmit>
}
 80078c6:	bf00      	nop
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078e2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4a0f      	ldr	r2, [pc, #60]	; (8007924 <MSC_BOT_SendCSW+0x54>)
 80078e8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	78fa      	ldrb	r2, [r7, #3]
 80078f0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8007900:	230d      	movs	r3, #13
 8007902:	2181      	movs	r1, #129	; 0x81
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f005 f985 	bl	800cc14 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8007910:	231f      	movs	r3, #31
 8007912:	2101      	movs	r1, #1
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f005 f99e 	bl	800cc56 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800791a:	bf00      	nop
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	53425355 	.word	0x53425355

08007928 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007936:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10c      	bne.n	800795c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007948:	2b00      	cmp	r3, #0
 800794a:	d007      	beq.n	800795c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007950:	2b00      	cmp	r3, #0
 8007952:	d103      	bne.n	800795c <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007954:	2101      	movs	r1, #1
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f005 f8d3 	bl	800cb02 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800795c:	2181      	movs	r1, #129	; 0x81
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f005 f8cf 	bl	800cb02 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	7a5b      	ldrb	r3, [r3, #9]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d107      	bne.n	800797c <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800796c:	2181      	movs	r1, #129	; 0x81
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f005 f8c7 	bl	800cb02 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007974:	2101      	movs	r1, #1
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f005 f8c3 	bl	800cb02 <USBD_LL_StallEP>
  }
}
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007996:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	7a5b      	ldrb	r3, [r3, #9]
 800799c:	2b02      	cmp	r3, #2
 800799e:	d108      	bne.n	80079b2 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80079a0:	2181      	movs	r1, #129	; 0x81
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f005 f8ad 	bl	800cb02 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80079a8:	2101      	movs	r1, #1
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f005 f8a9 	bl	800cb02 <USBD_LL_StallEP>
 80079b0:	e00d      	b.n	80079ce <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80079b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	da08      	bge.n	80079cc <MSC_BOT_CplClrFeature+0x48>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	7a5b      	ldrb	r3, [r3, #9]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d004      	beq.n	80079cc <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80079c2:	2101      	movs	r1, #1
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff ff83 	bl	80078d0 <MSC_BOT_SendCSW>
 80079ca:	e000      	b.n	80079ce <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 80079cc:	bf00      	nop
  }
}
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	460b      	mov	r3, r1
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e8:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b25      	cmp	r3, #37	; 0x25
 80079f0:	d06e      	beq.n	8007ad0 <SCSI_ProcessCmd+0xfc>
 80079f2:	2b25      	cmp	r3, #37	; 0x25
 80079f4:	dc11      	bgt.n	8007a1a <SCSI_ProcessCmd+0x46>
 80079f6:	2b1a      	cmp	r3, #26
 80079f8:	d04f      	beq.n	8007a9a <SCSI_ProcessCmd+0xc6>
 80079fa:	2b1a      	cmp	r3, #26
 80079fc:	dc06      	bgt.n	8007a0c <SCSI_ProcessCmd+0x38>
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d027      	beq.n	8007a52 <SCSI_ProcessCmd+0x7e>
 8007a02:	2b12      	cmp	r3, #18
 8007a04:	d02e      	beq.n	8007a64 <SCSI_ProcessCmd+0x90>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d01a      	beq.n	8007a40 <SCSI_ProcessCmd+0x6c>
 8007a0a:	e0a0      	b.n	8007b4e <SCSI_ProcessCmd+0x17a>
 8007a0c:	2b1e      	cmp	r3, #30
 8007a0e:	d03b      	beq.n	8007a88 <SCSI_ProcessCmd+0xb4>
 8007a10:	2b23      	cmp	r3, #35	; 0x23
 8007a12:	d054      	beq.n	8007abe <SCSI_ProcessCmd+0xea>
 8007a14:	2b1b      	cmp	r3, #27
 8007a16:	d02e      	beq.n	8007a76 <SCSI_ProcessCmd+0xa2>
 8007a18:	e099      	b.n	8007b4e <SCSI_ProcessCmd+0x17a>
 8007a1a:	2b5a      	cmp	r3, #90	; 0x5a
 8007a1c:	d046      	beq.n	8007aac <SCSI_ProcessCmd+0xd8>
 8007a1e:	2b5a      	cmp	r3, #90	; 0x5a
 8007a20:	dc07      	bgt.n	8007a32 <SCSI_ProcessCmd+0x5e>
 8007a22:	2b2a      	cmp	r3, #42	; 0x2a
 8007a24:	d078      	beq.n	8007b18 <SCSI_ProcessCmd+0x144>
 8007a26:	2b2f      	cmp	r3, #47	; 0x2f
 8007a28:	f000 8088 	beq.w	8007b3c <SCSI_ProcessCmd+0x168>
 8007a2c:	2b28      	cmp	r3, #40	; 0x28
 8007a2e:	d061      	beq.n	8007af4 <SCSI_ProcessCmd+0x120>
 8007a30:	e08d      	b.n	8007b4e <SCSI_ProcessCmd+0x17a>
 8007a32:	2ba8      	cmp	r3, #168	; 0xa8
 8007a34:	d067      	beq.n	8007b06 <SCSI_ProcessCmd+0x132>
 8007a36:	2baa      	cmp	r3, #170	; 0xaa
 8007a38:	d077      	beq.n	8007b2a <SCSI_ProcessCmd+0x156>
 8007a3a:	2b9e      	cmp	r3, #158	; 0x9e
 8007a3c:	d051      	beq.n	8007ae2 <SCSI_ProcessCmd+0x10e>
 8007a3e:	e086      	b.n	8007b4e <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	4619      	mov	r1, r3
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 f893 	bl	8007b72 <SCSI_TestUnitReady>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	75fb      	strb	r3, [r7, #23]
    break;
 8007a50:	e089      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8007a52:	7afb      	ldrb	r3, [r7, #11]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 fb0f 	bl	800807c <SCSI_RequestSense>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75fb      	strb	r3, [r7, #23]
    break;
 8007a62:	e080      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8007a64:	7afb      	ldrb	r3, [r7, #11]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f8cc 	bl	8007c08 <SCSI_Inquiry>
 8007a70:	4603      	mov	r3, r0
 8007a72:	75fb      	strb	r3, [r7, #23]
    break;
 8007a74:	e077      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fbb9 	bl	80081f4 <SCSI_StartStopUnit>
 8007a82:	4603      	mov	r3, r0
 8007a84:	75fb      	strb	r3, [r7, #23]
    break;
 8007a86:	e06e      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fbfb 	bl	800828a <SCSI_AllowPreventRemovable>
 8007a94:	4603      	mov	r3, r0
 8007a96:	75fb      	strb	r3, [r7, #23]
    break;
 8007a98:	e065      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 fa9f 	bl	8007fe4 <SCSI_ModeSense6>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75fb      	strb	r3, [r7, #23]
    break;
 8007aaa:	e05c      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fabc 	bl	8008030 <SCSI_ModeSense10>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	75fb      	strb	r3, [r7, #23]
    break;
 8007abc:	e053      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007abe:	7afb      	ldrb	r3, [r7, #11]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 fa20 	bl	8007f0a <SCSI_ReadFormatCapacity>
 8007aca:	4603      	mov	r3, r0
 8007acc:	75fb      	strb	r3, [r7, #23]
    break;
 8007ace:	e04a      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8007ad0:	7afb      	ldrb	r3, [r7, #11]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f904 	bl	8007ce4 <SCSI_ReadCapacity10>
 8007adc:	4603      	mov	r3, r0
 8007ade:	75fb      	strb	r3, [r7, #23]
    break;
 8007ae0:	e041      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007ae2:	7afb      	ldrb	r3, [r7, #11]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f96a 	bl	8007dc2 <SCSI_ReadCapacity16>
 8007aee:	4603      	mov	r3, r0
 8007af0:	75fb      	strb	r3, [r7, #23]
    break;
 8007af2:	e038      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8007af4:	7afb      	ldrb	r3, [r7, #11]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	4619      	mov	r1, r3
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 fbe8 	bl	80082d0 <SCSI_Read10>
 8007b00:	4603      	mov	r3, r0
 8007b02:	75fb      	strb	r3, [r7, #23]
    break;
 8007b04:	e02f      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8007b06:	7afb      	ldrb	r3, [r7, #11]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 fc79 	bl	8008404 <SCSI_Read12>
 8007b12:	4603      	mov	r3, r0
 8007b14:	75fb      	strb	r3, [r7, #23]
    break;
 8007b16:	e026      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8007b18:	7afb      	ldrb	r3, [r7, #11]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 fd15 	bl	800854e <SCSI_Write10>
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]
    break;
 8007b28:	e01d      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 fdcb 	bl	80086cc <SCSI_Write12>
 8007b36:	4603      	mov	r3, r0
 8007b38:	75fb      	strb	r3, [r7, #23]
    break;
 8007b3a:	e014      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	4619      	mov	r1, r3
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 fe91 	bl	800886a <SCSI_Verify10>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]
    break;
 8007b4c:	e00b      	b.n	8007b66 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007b4e:	7af9      	ldrb	r1, [r7, #11]
 8007b50:	2320      	movs	r3, #32
 8007b52:	2205      	movs	r2, #5
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 fb0a 	bl	800816e <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8007b60:	23ff      	movs	r3, #255	; 0xff
 8007b62:	75fb      	strb	r3, [r7, #23]
    break;
 8007b64:	bf00      	nop
  }

  return ret;
 8007b66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b086      	sub	sp, #24
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	607a      	str	r2, [r7, #4]
 8007b7e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b86:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007b98:	2320      	movs	r3, #32
 8007b9a:	2205      	movs	r2, #5
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 fae6 	bl	800816e <SCSI_SenseCode>

    return -1;
 8007ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba6:	e02a      	b.n	8007bfe <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d10b      	bne.n	8007bca <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007bb2:	7af9      	ldrb	r1, [r7, #11]
 8007bb4:	233a      	movs	r3, #58	; 0x3a
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 fad8 	bl	800816e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2205      	movs	r2, #5
 8007bc2:	721a      	strb	r2, [r3, #8]
    return -1;
 8007bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc8:	e019      	b.n	8007bfe <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	7afa      	ldrb	r2, [r7, #11]
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4798      	blx	r3
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007bde:	7af9      	ldrb	r1, [r7, #11]
 8007be0:	233a      	movs	r3, #58	; 0x3a
 8007be2:	2202      	movs	r2, #2
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fac2 	bl	800816e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2205      	movs	r2, #5
 8007bee:	721a      	strb	r2, [r3, #8]

    return -1;
 8007bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf4:	e003      	b.n	8007bfe <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	60da      	str	r2, [r3, #12]

  return 0;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	460b      	mov	r3, r1
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c1c:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007c2e:	2320      	movs	r3, #32
 8007c30:	2205      	movs	r2, #5
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fa9b 	bl	800816e <SCSI_SenseCode>
    return -1;
 8007c38:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3c:	e04a      	b.n	8007cd4 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3301      	adds	r3, #1
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d020      	beq.n	8007c8e <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3302      	adds	r3, #2
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d105      	bne.n	8007c62 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007c56:	2206      	movs	r2, #6
 8007c58:	4920      	ldr	r1, [pc, #128]	; (8007cdc <SCSI_Inquiry+0xd4>)
 8007c5a:	69b8      	ldr	r0, [r7, #24]
 8007c5c:	f000 ff50 	bl	8008b00 <SCSI_UpdateBotData>
 8007c60:	e037      	b.n	8007cd2 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3302      	adds	r3, #2
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b80      	cmp	r3, #128	; 0x80
 8007c6a:	d105      	bne.n	8007c78 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	491c      	ldr	r1, [pc, #112]	; (8007ce0 <SCSI_Inquiry+0xd8>)
 8007c70:	69b8      	ldr	r0, [r7, #24]
 8007c72:	f000 ff45 	bl	8008b00 <SCSI_UpdateBotData>
 8007c76:	e02c      	b.n	8007cd2 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007c7e:	2324      	movs	r3, #36	; 0x24
 8007c80:	2205      	movs	r2, #5
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fa73 	bl	800816e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8007c88:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8c:	e022      	b.n	8007cd4 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c94:	69d9      	ldr	r1, [r3, #28]
 8007c96:	7afa      	ldrb	r2, [r7, #11]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	3305      	adds	r3, #5
 8007cae:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	8bfa      	ldrh	r2, [r7, #30]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d303      	bcc.n	8007cc6 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007cc6:	8bfb      	ldrh	r3, [r7, #30]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6979      	ldr	r1, [r7, #20]
 8007ccc:	69b8      	ldr	r0, [r7, #24]
 8007cce:	f000 ff17 	bl	8008b00 <SCSI_UpdateBotData>
  }

  return 0;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	200000b0 	.word	0x200000b0
 8007ce0:	200000b8 	.word	0x200000b8

08007ce4 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	460b      	mov	r3, r1
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf8:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8007d0e:	7af8      	ldrb	r0, [r7, #11]
 8007d10:	4798      	blx	r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007d16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d104      	bne.n	8007d28 <SCSI_ReadCapacity10+0x44>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d108      	bne.n	8007d3a <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007d28:	7af9      	ldrb	r1, [r7, #11]
 8007d2a:	233a      	movs	r3, #58	; 0x3a
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 fa1d 	bl	800816e <SCSI_SenseCode>
    return -1;
 8007d34:	f04f 33ff 	mov.w	r3, #4294967295
 8007d38:	e03f      	b.n	8007dba <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d40:	3b01      	subs	r3, #1
 8007d42:	0e1b      	lsrs	r3, r3, #24
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d50:	3b01      	subs	r3, #1
 8007d52:	0c1b      	lsrs	r3, r3, #16
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d60:	3b01      	subs	r3, #1
 8007d62:	0a1b      	lsrs	r3, r3, #8
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007d80:	161b      	asrs	r3, r3, #24
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007d8e:	141b      	asrs	r3, r3, #16
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007d9c:	0a1b      	lsrs	r3, r3, #8
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2208      	movs	r2, #8
 8007db6:	60da      	str	r2, [r3, #12]

  return 0;
 8007db8:	2300      	movs	r3, #0

}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b088      	sub	sp, #32
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	607a      	str	r2, [r7, #4]
 8007dce:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd6:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8007dec:	7af8      	ldrb	r0, [r7, #11]
 8007dee:	4798      	blx	r3
 8007df0:	4603      	mov	r3, r0
 8007df2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <SCSI_ReadCapacity16+0x44>
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d108      	bne.n	8007e18 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007e06:	7af9      	ldrb	r1, [r7, #11]
 8007e08:	233a      	movs	r3, #58	; 0x3a
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f9ae 	bl	800816e <SCSI_SenseCode>
    return -1;
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295
 8007e16:	e074      	b.n	8007f02 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	330a      	adds	r3, #10
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	330b      	adds	r3, #11
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007e28:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	330c      	adds	r3, #12
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007e32:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	320d      	adds	r2, #13
 8007e38:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007e3a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007e40:	2300      	movs	r3, #0
 8007e42:	77fb      	strb	r3, [r7, #31]
 8007e44:	e007      	b.n	8007e56 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 8007e46:	7ffb      	ldrb	r3, [r7, #31]
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007e50:	7ffb      	ldrb	r3, [r7, #31]
 8007e52:	3301      	adds	r3, #1
 8007e54:	77fb      	strb	r3, [r7, #31]
 8007e56:	7ffa      	ldrb	r2, [r7, #31]
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d3f2      	bcc.n	8007e46 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e66:	3b01      	subs	r3, #1
 8007e68:	0e1b      	lsrs	r3, r3, #24
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e76:	3b01      	subs	r3, #1
 8007e78:	0c1b      	lsrs	r3, r3, #16
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e86:	3b01      	subs	r3, #1
 8007e88:	0a1b      	lsrs	r3, r3, #8
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007ea6:	161b      	asrs	r3, r3, #24
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007eb4:	141b      	asrs	r3, r3, #16
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007ec2:	0a1b      	lsrs	r3, r3, #8
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	330a      	adds	r3, #10
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	330b      	adds	r3, #11
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007ee8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	330c      	adds	r3, #12
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007ef2:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	320d      	adds	r2, #13
 8007ef8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007efa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	60da      	str	r2, [r3, #12]

  return 0;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3720      	adds	r7, #32
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b088      	sub	sp, #32
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	460b      	mov	r3, r1
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f1e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f107 0214 	add.w	r2, r7, #20
 8007f2c:	f107 0110 	add.w	r1, r7, #16
 8007f30:	7af8      	ldrb	r0, [r7, #11]
 8007f32:	4798      	blx	r3
 8007f34:	4603      	mov	r3, r0
 8007f36:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007f38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <SCSI_ReadFormatCapacity+0x40>
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d108      	bne.n	8007f5c <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f4a:	7af9      	ldrb	r1, [r7, #11]
 8007f4c:	233a      	movs	r3, #58	; 0x3a
 8007f4e:	2202      	movs	r2, #2
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f90c 	bl	800816e <SCSI_SenseCode>
    return -1;
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5a:	e03e      	b.n	8007fda <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	83fb      	strh	r3, [r7, #30]
 8007f60:	e007      	b.n	8007f72 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 8007f62:	8bfb      	ldrh	r3, [r7, #30]
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	4413      	add	r3, r2
 8007f68:	2200      	movs	r2, #0
 8007f6a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8007f6c:	8bfb      	ldrh	r3, [r7, #30]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	83fb      	strh	r3, [r7, #30]
 8007f72:	8bfb      	ldrh	r3, [r7, #30]
 8007f74:	2b0b      	cmp	r3, #11
 8007f76:	d9f4      	bls.n	8007f62 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	0e1b      	lsrs	r3, r3, #24
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	0c1b      	lsrs	r3, r3, #16
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	0a1b      	lsrs	r3, r3, #8
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007fb4:	8abb      	ldrh	r3, [r7, #20]
 8007fb6:	141b      	asrs	r3, r3, #16
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007fbe:	8abb      	ldrh	r3, [r7, #20]
 8007fc0:	0a1b      	lsrs	r3, r3, #8
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007fca:	8abb      	ldrh	r3, [r7, #20]
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	220c      	movs	r2, #12
 8007fd6:	60da      	str	r2, [r3, #12]

  return 0;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3720      	adds	r7, #32
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
	...

08007fe4 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	460b      	mov	r3, r1
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8007ffa:	2317      	movs	r3, #23
 8007ffc:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3304      	adds	r3, #4
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	8afa      	ldrh	r2, [r7, #22]
 8008008:	429a      	cmp	r2, r3
 800800a:	d303      	bcc.n	8008014 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8008014:	8afb      	ldrh	r3, [r7, #22]
 8008016:	461a      	mov	r2, r3
 8008018:	4904      	ldr	r1, [pc, #16]	; (800802c <SCSI_ModeSense6+0x48>)
 800801a:	6938      	ldr	r0, [r7, #16]
 800801c:	f000 fd70 	bl	8008b00 <SCSI_UpdateBotData>

  return 0;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	200000c0 	.word	0x200000c0

08008030 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	460b      	mov	r3, r1
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008044:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8008046:	231b      	movs	r3, #27
 8008048:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3308      	adds	r3, #8
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	b29b      	uxth	r3, r3
 8008052:	8afa      	ldrh	r2, [r7, #22]
 8008054:	429a      	cmp	r2, r3
 8008056:	d303      	bcc.n	8008060 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3308      	adds	r3, #8
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8008060:	8afb      	ldrh	r3, [r7, #22]
 8008062:	461a      	mov	r2, r3
 8008064:	4904      	ldr	r1, [pc, #16]	; (8008078 <SCSI_ModeSense10+0x48>)
 8008066:	6938      	ldr	r0, [r7, #16]
 8008068:	f000 fd4a 	bl	8008b00 <SCSI_UpdateBotData>

  return 0;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	200000d8 	.word	0x200000d8

0800807c <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	460b      	mov	r3, r1
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008090:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10a      	bne.n	80080b2 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80080a2:	2320      	movs	r3, #32
 80080a4:	2205      	movs	r2, #5
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 f861 	bl	800816e <SCSI_SenseCode>
    return -1;
 80080ac:	f04f 33ff 	mov.w	r3, #4294967295
 80080b0:	e059      	b.n	8008166 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80080b2:	2300      	movs	r3, #0
 80080b4:	75fb      	strb	r3, [r7, #23]
 80080b6:	e007      	b.n	80080c8 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4413      	add	r3, r2
 80080be:	2200      	movs	r2, #0
 80080c0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	3301      	adds	r3, #1
 80080c6:	75fb      	strb	r3, [r7, #23]
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	2b11      	cmp	r3, #17
 80080cc:	d9f4      	bls.n	80080b8 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	2270      	movs	r2, #112	; 0x70
 80080d2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	220c      	movs	r2, #12
 80080d8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d02e      	beq.n	8008148 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80080f0:	461a      	mov	r2, r3
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	3248      	adds	r2, #72	; 0x48
 80080f6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	3348      	adds	r3, #72	; 0x48
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	4413      	add	r3, r2
 800810c:	791a      	ldrb	r2, [r3, #4]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	3348      	adds	r3, #72	; 0x48
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	4413      	add	r3, r2
 8008120:	795a      	ldrb	r2, [r3, #5]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800812c:	3301      	adds	r3, #1
 800812e:	b2da      	uxtb	r2, r3
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800813c:	2b04      	cmp	r3, #4
 800813e:	d103      	bne.n	8008148 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2212      	movs	r2, #18
 800814c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3304      	adds	r3, #4
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b12      	cmp	r3, #18
 8008156:	d805      	bhi.n	8008164 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3304      	adds	r3, #4
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800816e:	b480      	push	{r7}
 8008170:	b085      	sub	sp, #20
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	4608      	mov	r0, r1
 8008178:	4611      	mov	r1, r2
 800817a:	461a      	mov	r2, r3
 800817c:	4603      	mov	r3, r0
 800817e:	70fb      	strb	r3, [r7, #3]
 8008180:	460b      	mov	r3, r1
 8008182:	70bb      	strb	r3, [r7, #2]
 8008184:	4613      	mov	r3, r2
 8008186:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800818e:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008196:	461a      	mov	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3248      	adds	r2, #72	; 0x48
 800819c:	78b9      	ldrb	r1, [r7, #2]
 800819e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	3348      	adds	r3, #72	; 0x48
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	4413      	add	r3, r2
 80081b0:	787a      	ldrb	r2, [r7, #1]
 80081b2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	3348      	adds	r3, #72	; 0x48
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	4413      	add	r3, r2
 80081c2:	2200      	movs	r2, #0
 80081c4:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80081cc:	3301      	adds	r3, #1
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d103      	bne.n	80081e8 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 80081e8:	bf00      	nop
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	460b      	mov	r3, r1
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008208:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008210:	2b01      	cmp	r3, #1
 8008212:	d10f      	bne.n	8008234 <SCSI_StartStopUnit+0x40>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3304      	adds	r3, #4
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d108      	bne.n	8008234 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008222:	7af9      	ldrb	r1, [r7, #11]
 8008224:	2324      	movs	r3, #36	; 0x24
 8008226:	2205      	movs	r2, #5
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7ff ffa0 	bl	800816e <SCSI_SenseCode>

    return -1;
 800822e:	f04f 33ff 	mov.w	r3, #4294967295
 8008232:	e026      	b.n	8008282 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3304      	adds	r3, #4
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	2b01      	cmp	r3, #1
 8008240:	d104      	bne.n	800824c <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800824a:	e016      	b.n	800827a <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3304      	adds	r3, #4
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d104      	bne.n	8008264 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2202      	movs	r2, #2
 800825e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8008262:	e00a      	b.n	800827a <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3304      	adds	r3, #4
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	f003 0303 	and.w	r3, r3, #3
 800826e:	2b03      	cmp	r3, #3
 8008270:	d103      	bne.n	800827a <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2200      	movs	r2, #0
 800827e:	60da      	str	r2, [r3, #12]

  return 0;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800828a:	b480      	push	{r7}
 800828c:	b087      	sub	sp, #28
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	460b      	mov	r3, r1
 8008294:	607a      	str	r2, [r7, #4]
 8008296:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800829e:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3304      	adds	r3, #4
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d104      	bne.n	80082b4 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80082b2:	e003      	b.n	80082bc <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2200      	movs	r2, #0
 80082c0:	60da      	str	r2, [r3, #12]

  return 0;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	460b      	mov	r3, r1
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	7a1b      	ldrb	r3, [r3, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d17c      	bne.n	80083e8 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80082f4:	b25b      	sxtb	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	db0a      	blt.n	8008310 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008300:	2320      	movs	r3, #32
 8008302:	2205      	movs	r2, #5
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f7ff ff32 	bl	800816e <SCSI_SenseCode>
      return -1;
 800830a:	f04f 33ff 	mov.w	r3, #4294967295
 800830e:	e075      	b.n	80083fc <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008316:	2b02      	cmp	r3, #2
 8008318:	d108      	bne.n	800832c <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800831a:	7af9      	ldrb	r1, [r7, #11]
 800831c:	233a      	movs	r3, #58	; 0x3a
 800831e:	2202      	movs	r2, #2
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff ff24 	bl	800816e <SCSI_SenseCode>

      return -1;
 8008326:	f04f 33ff 	mov.w	r3, #4294967295
 800832a:	e067      	b.n	80083fc <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	7afa      	ldrb	r2, [r7, #11]
 8008336:	4610      	mov	r0, r2
 8008338:	4798      	blx	r3
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d008      	beq.n	8008352 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008340:	7af9      	ldrb	r1, [r7, #11]
 8008342:	233a      	movs	r3, #58	; 0x3a
 8008344:	2202      	movs	r2, #2
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff ff11 	bl	800816e <SCSI_SenseCode>
      return -1;
 800834c:	f04f 33ff 	mov.w	r3, #4294967295
 8008350:	e054      	b.n	80083fc <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3302      	adds	r3, #2
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	3303      	adds	r3, #3
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008362:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3304      	adds	r3, #4
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800836c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	3205      	adds	r2, #5
 8008372:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008374:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3307      	adds	r3, #7
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	021b      	lsls	r3, r3, #8
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	3208      	adds	r2, #8
 8008388:	7812      	ldrb	r2, [r2, #0]
 800838a:	431a      	orrs	r2, r3
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800839e:	7af9      	ldrb	r1, [r7, #11]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 fa95 	bl	80088d0 <SCSI_CheckAddressRange>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	da02      	bge.n	80083b2 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295
 80083b0:	e024      	b.n	80083fc <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80083be:	6979      	ldr	r1, [r7, #20]
 80083c0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d00a      	beq.n	80083e2 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80083d2:	2320      	movs	r3, #32
 80083d4:	2205      	movs	r2, #5
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f7ff fec9 	bl	800816e <SCSI_SenseCode>
      return -1;
 80083dc:	f04f 33ff 	mov.w	r3, #4294967295
 80083e0:	e00c      	b.n	80083fc <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2202      	movs	r2, #2
 80083e6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083ee:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80083f0:	7afb      	ldrb	r3, [r7, #11]
 80083f2:	4619      	mov	r1, r3
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fa8d 	bl	8008914 <SCSI_ProcessRead>
 80083fa:	4603      	mov	r3, r0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	460b      	mov	r3, r1
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008418:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	7a1b      	ldrb	r3, [r3, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	f040 8087 	bne.w	8008532 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800842a:	b25b      	sxtb	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	db0a      	blt.n	8008446 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008436:	2320      	movs	r3, #32
 8008438:	2205      	movs	r2, #5
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f7ff fe97 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008440:	f04f 33ff 	mov.w	r3, #4294967295
 8008444:	e07f      	b.n	8008546 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800844c:	2b02      	cmp	r3, #2
 800844e:	d108      	bne.n	8008462 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008450:	7af9      	ldrb	r1, [r7, #11]
 8008452:	233a      	movs	r3, #58	; 0x3a
 8008454:	2202      	movs	r2, #2
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7ff fe89 	bl	800816e <SCSI_SenseCode>
      return -1;
 800845c:	f04f 33ff 	mov.w	r3, #4294967295
 8008460:	e071      	b.n	8008546 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	7afa      	ldrb	r2, [r7, #11]
 800846c:	4610      	mov	r0, r2
 800846e:	4798      	blx	r3
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d008      	beq.n	8008488 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008476:	7af9      	ldrb	r1, [r7, #11]
 8008478:	233a      	movs	r3, #58	; 0x3a
 800847a:	2202      	movs	r2, #2
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7ff fe76 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008482:	f04f 33ff 	mov.w	r3, #4294967295
 8008486:	e05e      	b.n	8008546 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3302      	adds	r3, #2
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3303      	adds	r3, #3
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008498:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3304      	adds	r3, #4
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80084a2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	3205      	adds	r2, #5
 80084a8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80084aa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	3306      	adds	r3, #6
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3307      	adds	r3, #7
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80084c2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3308      	adds	r3, #8
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80084cc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	3209      	adds	r2, #9
 80084d2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80084d4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80084e8:	7af9      	ldrb	r1, [r7, #11]
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 f9f0 	bl	80088d0 <SCSI_CheckAddressRange>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da02      	bge.n	80084fc <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80084f6:	f04f 33ff 	mov.w	r3, #4294967295
 80084fa:	e024      	b.n	8008546 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008508:	6979      	ldr	r1, [r7, #20]
 800850a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800850e:	fb01 f303 	mul.w	r3, r1, r3
 8008512:	429a      	cmp	r2, r3
 8008514:	d00a      	beq.n	800852c <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800851c:	2320      	movs	r3, #32
 800851e:	2205      	movs	r2, #5
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7ff fe24 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008526:	f04f 33ff 	mov.w	r3, #4294967295
 800852a:	e00c      	b.n	8008546 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2202      	movs	r2, #2
 8008530:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008538:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800853a:	7afb      	ldrb	r3, [r7, #11]
 800853c:	4619      	mov	r1, r3
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 f9e8 	bl	8008914 <SCSI_ProcessRead>
 8008544:	4603      	mov	r3, r0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b086      	sub	sp, #24
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	460b      	mov	r3, r1
 8008558:	607a      	str	r2, [r7, #4]
 800855a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008562:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	7a1b      	ldrb	r3, [r3, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f040 80a5 	bne.w	80086b8 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10a      	bne.n	800858e <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800857e:	2320      	movs	r3, #32
 8008580:	2205      	movs	r2, #5
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f7ff fdf3 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008588:	f04f 33ff 	mov.w	r3, #4294967295
 800858c:	e09a      	b.n	80086c4 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008594:	b25b      	sxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	da0a      	bge.n	80085b0 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80085a0:	2320      	movs	r3, #32
 80085a2:	2205      	movs	r2, #5
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff fde2 	bl	800816e <SCSI_SenseCode>
      return -1;
 80085aa:	f04f 33ff 	mov.w	r3, #4294967295
 80085ae:	e089      	b.n	80086c4 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	7afa      	ldrb	r2, [r7, #11]
 80085ba:	4610      	mov	r0, r2
 80085bc:	4798      	blx	r3
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d008      	beq.n	80085d6 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80085c4:	7af9      	ldrb	r1, [r7, #11]
 80085c6:	233a      	movs	r3, #58	; 0x3a
 80085c8:	2202      	movs	r2, #2
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff fdcf 	bl	800816e <SCSI_SenseCode>
      return -1;
 80085d0:	f04f 33ff 	mov.w	r3, #4294967295
 80085d4:	e076      	b.n	80086c4 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	7afa      	ldrb	r2, [r7, #11]
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d008      	beq.n	80085fc <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80085ea:	7af9      	ldrb	r1, [r7, #11]
 80085ec:	2327      	movs	r3, #39	; 0x27
 80085ee:	2202      	movs	r2, #2
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f7ff fdbc 	bl	800816e <SCSI_SenseCode>
      return -1;
 80085f6:	f04f 33ff 	mov.w	r3, #4294967295
 80085fa:	e063      	b.n	80086c4 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3302      	adds	r3, #2
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3303      	adds	r3, #3
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800860c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3304      	adds	r3, #4
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008616:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	3205      	adds	r2, #5
 800861c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800861e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3307      	adds	r3, #7
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	3208      	adds	r2, #8
 8008632:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008634:	431a      	orrs	r2, r3
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008648:	7af9      	ldrb	r1, [r7, #11]
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 f940 	bl	80088d0 <SCSI_CheckAddressRange>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	da02      	bge.n	800865c <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008656:	f04f 33ff 	mov.w	r3, #4294967295
 800865a:	e033      	b.n	80086c4 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008668:	fb02 f303 	mul.w	r3, r2, r3
 800866c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	429a      	cmp	r2, r3
 8008678:	d00a      	beq.n	8008690 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008680:	2320      	movs	r3, #32
 8008682:	2205      	movs	r2, #5
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7ff fd72 	bl	800816e <SCSI_SenseCode>
      return -1;
 800868a:	f04f 33ff 	mov.w	r3, #4294967295
 800868e:	e019      	b.n	80086c4 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008696:	bf28      	it	cs
 8008698:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800869c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2201      	movs	r2, #1
 80086a2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f103 0210 	add.w	r2, r3, #16
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	2101      	movs	r1, #1
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f004 fad1 	bl	800cc56 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	e005      	b.n	80086c4 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	4619      	mov	r1, r3
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 f99c 	bl	80089fa <SCSI_ProcessWrite>
 80086c2:	4603      	mov	r3, r0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	460b      	mov	r3, r1
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086e0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	7a1b      	ldrb	r3, [r3, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f040 80b5 	bne.w	8008856 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10a      	bne.n	800870c <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80086fc:	2320      	movs	r3, #32
 80086fe:	2205      	movs	r2, #5
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff fd34 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008706:	f04f 33ff 	mov.w	r3, #4294967295
 800870a:	e0aa      	b.n	8008862 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008712:	b25b      	sxtb	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	da0a      	bge.n	800872e <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800871e:	2320      	movs	r3, #32
 8008720:	2205      	movs	r2, #5
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7ff fd23 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008728:	f04f 33ff 	mov.w	r3, #4294967295
 800872c:	e099      	b.n	8008862 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	7afa      	ldrb	r2, [r7, #11]
 8008738:	4610      	mov	r0, r2
 800873a:	4798      	blx	r3
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008742:	7af9      	ldrb	r1, [r7, #11]
 8008744:	233a      	movs	r3, #58	; 0x3a
 8008746:	2202      	movs	r2, #2
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f7ff fd10 	bl	800816e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2205      	movs	r2, #5
 8008752:	721a      	strb	r2, [r3, #8]
      return -1;
 8008754:	f04f 33ff 	mov.w	r3, #4294967295
 8008758:	e083      	b.n	8008862 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	7afa      	ldrb	r2, [r7, #11]
 8008764:	4610      	mov	r0, r2
 8008766:	4798      	blx	r3
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00b      	beq.n	8008786 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800876e:	7af9      	ldrb	r1, [r7, #11]
 8008770:	2327      	movs	r3, #39	; 0x27
 8008772:	2202      	movs	r2, #2
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7ff fcfa 	bl	800816e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2205      	movs	r2, #5
 800877e:	721a      	strb	r2, [r3, #8]
      return -1;
 8008780:	f04f 33ff 	mov.w	r3, #4294967295
 8008784:	e06d      	b.n	8008862 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3302      	adds	r3, #2
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3303      	adds	r3, #3
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008796:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3304      	adds	r3, #4
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80087a0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	3205      	adds	r2, #5
 80087a6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80087a8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3306      	adds	r3, #6
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3307      	adds	r3, #7
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80087c0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3308      	adds	r3, #8
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80087ca:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	3209      	adds	r2, #9
 80087d0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80087d2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80087e6:	7af9      	ldrb	r1, [r7, #11]
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 f871 	bl	80088d0 <SCSI_CheckAddressRange>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	da02      	bge.n	80087fa <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80087f4:	f04f 33ff 	mov.w	r3, #4294967295
 80087f8:	e033      	b.n	8008862 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008806:	fb02 f303 	mul.w	r3, r2, r3
 800880a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	429a      	cmp	r2, r3
 8008816:	d00a      	beq.n	800882e <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800881e:	2320      	movs	r3, #32
 8008820:	2205      	movs	r2, #5
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f7ff fca3 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008828:	f04f 33ff 	mov.w	r3, #4294967295
 800882c:	e019      	b.n	8008862 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008834:	bf28      	it	cs
 8008836:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800883a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2201      	movs	r2, #1
 8008840:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f103 0210 	add.w	r2, r3, #16
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	2101      	movs	r1, #1
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f004 fa02 	bl	800cc56 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008852:	2300      	movs	r3, #0
 8008854:	e005      	b.n	8008862 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 8008856:	7afb      	ldrb	r3, [r7, #11]
 8008858:	4619      	mov	r1, r3
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 f8cd 	bl	80089fa <SCSI_ProcessWrite>
 8008860:	4603      	mov	r3, r0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b086      	sub	sp, #24
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	460b      	mov	r3, r1
 8008874:	607a      	str	r2, [r7, #4]
 8008876:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800887e:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3301      	adds	r3, #1
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d008      	beq.n	80088a0 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800888e:	7af9      	ldrb	r1, [r7, #11]
 8008890:	2324      	movs	r3, #36	; 0x24
 8008892:	2205      	movs	r2, #5
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7ff fc6a 	bl	800816e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800889a:	f04f 33ff 	mov.w	r3, #4294967295
 800889e:	e013      	b.n	80088c8 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80088ac:	7af9      	ldrb	r1, [r7, #11]
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f000 f80e 	bl	80088d0 <SCSI_CheckAddressRange>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	da02      	bge.n	80088c0 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 80088ba:	f04f 33ff 	mov.w	r3, #4294967295
 80088be:	e003      	b.n	80088c8 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2200      	movs	r2, #0
 80088c4:	60da      	str	r2, [r3, #12]

  return 0;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	607a      	str	r2, [r7, #4]
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	460b      	mov	r3, r1
 80088de:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088e6:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	441a      	add	r2, r3
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d908      	bls.n	800890a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80088f8:	7af9      	ldrb	r1, [r7, #11]
 80088fa:	2321      	movs	r3, #33	; 0x21
 80088fc:	2205      	movs	r2, #5
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff fc35 	bl	800816e <SCSI_SenseCode>
    return -1;
 8008904:	f04f 33ff 	mov.w	r3, #4294967295
 8008908:	e000      	b.n	800890c <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008914:	b590      	push	{r4, r7, lr}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008926:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008934:	fb02 f303 	mul.w	r3, r2, r3
 8008938:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008940:	bf28      	it	cs
 8008942:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008946:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800894e:	691c      	ldr	r4, [r3, #16]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f103 0110 	add.w	r1, r3, #16
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008962:	4618      	mov	r0, r3
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800896a:	b29b      	uxth	r3, r3
 800896c:	78f8      	ldrb	r0, [r7, #3]
 800896e:	47a0      	blx	r4
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	da08      	bge.n	8008988 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008976:	78f9      	ldrb	r1, [r7, #3]
 8008978:	2311      	movs	r3, #17
 800897a:	2204      	movs	r2, #4
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff fbf6 	bl	800816e <SCSI_SenseCode>
    return -1;
 8008982:	f04f 33ff 	mov.w	r3, #4294967295
 8008986:	e034      	b.n	80089f2 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f103 0210 	add.w	r2, r3, #16
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	2181      	movs	r1, #129	; 0x81
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f004 f93e 	bl	800cc14 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80089a4:	4619      	mov	r1, r3
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80089ac:	441a      	add	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80089c0:	4619      	mov	r1, r3
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80089c8:	1ad2      	subs	r2, r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	1ad2      	subs	r2, r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d102      	bne.n	80089f0 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2203      	movs	r2, #3
 80089ee:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd90      	pop	{r4, r7, pc}

080089fa <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80089fa:	b590      	push	{r4, r7, lr}
 80089fc:	b085      	sub	sp, #20
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	460b      	mov	r3, r1
 8008a04:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a0c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008a1a:	fb02 f303 	mul.w	r3, r2, r3
 8008a1e:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a26:	bf28      	it	cs
 8008a28:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008a2c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a34:	695c      	ldr	r4, [r3, #20]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f103 0110 	add.w	r1, r3, #16
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008a48:	4618      	mov	r0, r3
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	78f8      	ldrb	r0, [r7, #3]
 8008a54:	47a0      	blx	r4
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	da08      	bge.n	8008a6e <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008a5c:	78f9      	ldrb	r1, [r7, #3]
 8008a5e:	2303      	movs	r3, #3
 8008a60:	2204      	movs	r2, #4
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7ff fb83 	bl	800816e <SCSI_SenseCode>
    return -1;
 8008a68:	f04f 33ff 	mov.w	r3, #4294967295
 8008a6c:	e044      	b.n	8008af8 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a82:	441a      	add	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008a96:	4619      	mov	r1, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a9e:	1ad2      	subs	r2, r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	1ad2      	subs	r2, r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d104      	bne.n	8008aca <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7fe ff04 	bl	80078d0 <MSC_BOT_SendCSW>
 8008ac8:	e015      	b.n	8008af6 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008ad6:	fb02 f303 	mul.w	r3, r2, r3
 8008ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ade:	bf28      	it	cs
 8008ae0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008ae4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f103 0210 	add.w	r2, r3, #16
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2101      	movs	r1, #1
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f004 f8b0 	bl	800cc56 <USBD_LL_PrepareReceive>
  }

  return 0;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd90      	pop	{r4, r7, pc}

08008b00 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8008b0e:	88fb      	ldrh	r3, [r7, #6]
 8008b10:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8008b12:	8afa      	ldrh	r2, [r7, #22]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8008b18:	e00b      	b.n	8008b32 <SCSI_UpdateBotData+0x32>
  {
    len--;
 8008b1a:	8afb      	ldrh	r3, [r7, #22]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8008b20:	8afb      	ldrh	r3, [r7, #22]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	441a      	add	r2, r3
 8008b26:	8afb      	ldrh	r3, [r7, #22]
 8008b28:	7811      	ldrb	r1, [r2, #0]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	460a      	mov	r2, r1
 8008b30:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8008b32:	8afb      	ldrh	r3, [r7, #22]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1f0      	bne.n	8008b1a <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b086      	sub	sp, #24
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	4613      	mov	r3, r2
 8008b52:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e025      	b.n	8008baa <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	79fa      	ldrb	r2, [r7, #7]
 8008b9c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f003 fee0 	bl	800c964 <USBD_LL_Init>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e010      	b.n	8008bec <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bda:	f107 020e 	add.w	r2, r7, #14
 8008bde:	4610      	mov	r0, r2
 8008be0:	4798      	blx	r3
 8008be2:	4602      	mov	r2, r0
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f003 ff01 	bl	800ca04 <USBD_LL_Start>
 8008c02:	4603      	mov	r3, r0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b084      	sub	sp, #16
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d009      	beq.n	8008c50 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	78fa      	ldrb	r2, [r7, #3]
 8008c46:	4611      	mov	r1, r2
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	4798      	blx	r3
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	460b      	mov	r3, r1
 8008c64:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	78fa      	ldrb	r2, [r7, #3]
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	4798      	blx	r3
  }

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 ff2b 	bl	8009af8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008cbe:	f003 031f 	and.w	r3, r3, #31
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d00e      	beq.n	8008ce4 <USBD_LL_SetupStage+0x5a>
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d302      	bcc.n	8008cd0 <USBD_LL_SetupStage+0x46>
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d014      	beq.n	8008cf8 <USBD_LL_SetupStage+0x6e>
 8008cce:	e01d      	b.n	8008d0c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fa17 	bl	800910c <USBD_StdDevReq>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce2:	e020      	b.n	8008d26 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fa7b 	bl	80091e8 <USBD_StdItfReq>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf6:	e016      	b.n	8008d26 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fab7 	bl	8009274 <USBD_StdEPReq>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73fb      	strb	r3, [r7, #15]
      break;
 8008d0a:	e00c      	b.n	8008d26 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f003 fef1 	bl	800cb02 <USBD_LL_StallEP>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]
      break;
 8008d24:	bf00      	nop
  }

  return ret;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d3e:	7afb      	ldrb	r3, [r7, #11]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d137      	bne.n	8008db4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	d14a      	bne.n	8008dec <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d913      	bls.n	8008d8a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	689a      	ldr	r2, [r3, #8]
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	1ad2      	subs	r2, r2, r3
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	68da      	ldr	r2, [r3, #12]
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	bf28      	it	cs
 8008d7c:	4613      	movcs	r3, r2
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 ff8f 	bl	8009ca6 <USBD_CtlContinueRx>
 8008d88:	e030      	b.n	8008dec <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d105      	bne.n	8008dac <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 ff8b 	bl	8009cc8 <USBD_CtlSendStatus>
 8008db2:	e01b      	b.n	8008dec <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d013      	beq.n	8008de8 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d10e      	bne.n	8008de8 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	7afa      	ldrb	r2, [r7, #11]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	4798      	blx	r3
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	e002      	b.n	8008dee <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e000      	b.n	8008dee <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b086      	sub	sp, #24
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	607a      	str	r2, [r7, #4]
 8008e02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e04:	7afb      	ldrb	r3, [r7, #11]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d16a      	bne.n	8008ee0 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3314      	adds	r3, #20
 8008e0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d155      	bne.n	8008ec6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	689a      	ldr	r2, [r3, #8]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d914      	bls.n	8008e50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	689a      	ldr	r2, [r3, #8]
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 ff21 	bl	8009c84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e42:	2300      	movs	r3, #0
 8008e44:	2200      	movs	r2, #0
 8008e46:	2100      	movs	r1, #0
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f003 ff04 	bl	800cc56 <USBD_LL_PrepareReceive>
 8008e4e:	e03a      	b.n	8008ec6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d11c      	bne.n	8008e96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d316      	bcc.n	8008e96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d20f      	bcs.n	8008e96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e76:	2200      	movs	r2, #0
 8008e78:	2100      	movs	r1, #0
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 ff02 	bl	8009c84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e88:	2300      	movs	r3, #0
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f003 fee1 	bl	800cc56 <USBD_LL_PrepareReceive>
 8008e94:	e017      	b.n	8008ec6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d105      	bne.n	8008eb8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eb8:	2180      	movs	r1, #128	; 0x80
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f003 fe21 	bl	800cb02 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 ff14 	bl	8009cee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d123      	bne.n	8008f18 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f7ff fe9b 	bl	8008c0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ede:	e01b      	b.n	8008f18 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d013      	beq.n	8008f14 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d10e      	bne.n	8008f14 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	7afa      	ldrb	r2, [r7, #11]
 8008f00:	4611      	mov	r1, r2
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	4798      	blx	r3
 8008f06:	4603      	mov	r3, r0
 8008f08:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	e002      	b.n	8008f1a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e000      	b.n	8008f1a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d009      	beq.n	8008f66 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6852      	ldr	r2, [r2, #4]
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	4611      	mov	r1, r2
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f66:	2340      	movs	r3, #64	; 0x40
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f003 fd64 	bl	800ca3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2240      	movs	r2, #64	; 0x40
 8008f7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f82:	2340      	movs	r3, #64	; 0x40
 8008f84:	2200      	movs	r2, #0
 8008f86:	2180      	movs	r1, #128	; 0x80
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f003 fd56 	bl	800ca3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2240      	movs	r2, #64	; 0x40
 8008f98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	d105      	bne.n	800900c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009028:	2b03      	cmp	r3, #3
 800902a:	d10b      	bne.n	8009044 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d005      	beq.n	8009044 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d009      	beq.n	80090c6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	6852      	ldr	r2, [r2, #4]
 80090be:	b2d2      	uxtb	r2, r2
 80090c0:	4611      	mov	r1, r2
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4798      	blx	r3
  }

  return USBD_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	3301      	adds	r3, #1
 80090e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090ee:	8a3b      	ldrh	r3, [r7, #16]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	b21a      	sxth	r2, r3
 80090f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	b21b      	sxth	r3, r3
 80090fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090fe:	89fb      	ldrh	r3, [r7, #14]
}
 8009100:	4618      	mov	r0, r3
 8009102:	371c      	adds	r7, #28
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009122:	2b20      	cmp	r3, #32
 8009124:	d004      	beq.n	8009130 <USBD_StdDevReq+0x24>
 8009126:	2b40      	cmp	r3, #64	; 0x40
 8009128:	d002      	beq.n	8009130 <USBD_StdDevReq+0x24>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00a      	beq.n	8009144 <USBD_StdDevReq+0x38>
 800912e:	e050      	b.n	80091d2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	4798      	blx	r3
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
    break;
 8009142:	e04b      	b.n	80091dc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	785b      	ldrb	r3, [r3, #1]
 8009148:	2b09      	cmp	r3, #9
 800914a:	d83c      	bhi.n	80091c6 <USBD_StdDevReq+0xba>
 800914c:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <USBD_StdDevReq+0x48>)
 800914e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009152:	bf00      	nop
 8009154:	080091a9 	.word	0x080091a9
 8009158:	080091bd 	.word	0x080091bd
 800915c:	080091c7 	.word	0x080091c7
 8009160:	080091b3 	.word	0x080091b3
 8009164:	080091c7 	.word	0x080091c7
 8009168:	08009187 	.word	0x08009187
 800916c:	0800917d 	.word	0x0800917d
 8009170:	080091c7 	.word	0x080091c7
 8009174:	0800919f 	.word	0x0800919f
 8009178:	08009191 	.word	0x08009191
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f9ce 	bl	8009520 <USBD_GetDescriptor>
      break;
 8009184:	e024      	b.n	80091d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fb33 	bl	80097f4 <USBD_SetAddress>
      break;
 800918e:	e01f      	b.n	80091d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fb70 	bl	8009878 <USBD_SetConfig>
 8009198:	4603      	mov	r3, r0
 800919a:	73fb      	strb	r3, [r7, #15]
      break;
 800919c:	e018      	b.n	80091d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fc0d 	bl	80099c0 <USBD_GetConfig>
      break;
 80091a6:	e013      	b.n	80091d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fc3c 	bl	8009a28 <USBD_GetStatus>
      break;
 80091b0:	e00e      	b.n	80091d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fc6a 	bl	8009a8e <USBD_SetFeature>
      break;
 80091ba:	e009      	b.n	80091d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fc79 	bl	8009ab6 <USBD_ClrFeature>
      break;
 80091c4:	e004      	b.n	80091d0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fccf 	bl	8009b6c <USBD_CtlError>
      break;
 80091ce:	bf00      	nop
    }
    break;
 80091d0:	e004      	b.n	80091dc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fcc9 	bl	8009b6c <USBD_CtlError>
    break;
 80091da:	bf00      	nop
  }

  return ret;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop

080091e8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091fe:	2b20      	cmp	r3, #32
 8009200:	d003      	beq.n	800920a <USBD_StdItfReq+0x22>
 8009202:	2b40      	cmp	r3, #64	; 0x40
 8009204:	d001      	beq.n	800920a <USBD_StdItfReq+0x22>
 8009206:	2b00      	cmp	r3, #0
 8009208:	d12a      	bne.n	8009260 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009210:	3b01      	subs	r3, #1
 8009212:	2b02      	cmp	r3, #2
 8009214:	d81d      	bhi.n	8009252 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	889b      	ldrh	r3, [r3, #4]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b01      	cmp	r3, #1
 800921e:	d813      	bhi.n	8009248 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	4798      	blx	r3
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	88db      	ldrh	r3, [r3, #6]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d110      	bne.n	800925c <USBD_StdItfReq+0x74>
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10d      	bne.n	800925c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fd41 	bl	8009cc8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009246:	e009      	b.n	800925c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fc8e 	bl	8009b6c <USBD_CtlError>
      break;
 8009250:	e004      	b.n	800925c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fc89 	bl	8009b6c <USBD_CtlError>
      break;
 800925a:	e000      	b.n	800925e <USBD_StdItfReq+0x76>
      break;
 800925c:	bf00      	nop
    }
    break;
 800925e:	e004      	b.n	800926a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fc82 	bl	8009b6c <USBD_CtlError>
    break;
 8009268:	bf00      	nop
  }

  return ret;
 800926a:	7bfb      	ldrb	r3, [r7, #15]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	889b      	ldrh	r3, [r3, #4]
 8009286:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009290:	2b20      	cmp	r3, #32
 8009292:	d004      	beq.n	800929e <USBD_StdEPReq+0x2a>
 8009294:	2b40      	cmp	r3, #64	; 0x40
 8009296:	d002      	beq.n	800929e <USBD_StdEPReq+0x2a>
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <USBD_StdEPReq+0x3e>
 800929c:	e135      	b.n	800950a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	4798      	blx	r3
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]
    break;
 80092b0:	e130      	b.n	8009514 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	785b      	ldrb	r3, [r3, #1]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d03e      	beq.n	8009338 <USBD_StdEPReq+0xc4>
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d002      	beq.n	80092c4 <USBD_StdEPReq+0x50>
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d077      	beq.n	80093b2 <USBD_StdEPReq+0x13e>
 80092c2:	e11c      	b.n	80094fe <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d002      	beq.n	80092d4 <USBD_StdEPReq+0x60>
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d015      	beq.n	80092fe <USBD_StdEPReq+0x8a>
 80092d2:	e02b      	b.n	800932c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00c      	beq.n	80092f4 <USBD_StdEPReq+0x80>
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	2b80      	cmp	r3, #128	; 0x80
 80092de:	d009      	beq.n	80092f4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f003 fc0c 	bl	800cb02 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092ea:	2180      	movs	r1, #128	; 0x80
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f003 fc08 	bl	800cb02 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80092f2:	e020      	b.n	8009336 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fc38 	bl	8009b6c <USBD_CtlError>
        break;
 80092fc:	e01b      	b.n	8009336 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	885b      	ldrh	r3, [r3, #2]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10e      	bne.n	8009324 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <USBD_StdEPReq+0xb0>
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	2b80      	cmp	r3, #128	; 0x80
 8009310:	d008      	beq.n	8009324 <USBD_StdEPReq+0xb0>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	88db      	ldrh	r3, [r3, #6]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f003 fbef 	bl	800cb02 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fccf 	bl	8009cc8 <USBD_CtlSendStatus>

        break;
 800932a:	e004      	b.n	8009336 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fc1c 	bl	8009b6c <USBD_CtlError>
        break;
 8009334:	bf00      	nop
      }
      break;
 8009336:	e0e7      	b.n	8009508 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800933e:	2b02      	cmp	r3, #2
 8009340:	d002      	beq.n	8009348 <USBD_StdEPReq+0xd4>
 8009342:	2b03      	cmp	r3, #3
 8009344:	d015      	beq.n	8009372 <USBD_StdEPReq+0xfe>
 8009346:	e02d      	b.n	80093a4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00c      	beq.n	8009368 <USBD_StdEPReq+0xf4>
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	2b80      	cmp	r3, #128	; 0x80
 8009352:	d009      	beq.n	8009368 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f003 fbd2 	bl	800cb02 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800935e:	2180      	movs	r1, #128	; 0x80
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f003 fbce 	bl	800cb02 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009366:	e023      	b.n	80093b0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fbfe 	bl	8009b6c <USBD_CtlError>
        break;
 8009370:	e01e      	b.n	80093b0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	885b      	ldrh	r3, [r3, #2]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d119      	bne.n	80093ae <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009380:	2b00      	cmp	r3, #0
 8009382:	d004      	beq.n	800938e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f003 fbd9 	bl	800cb40 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fc9a 	bl	8009cc8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	4798      	blx	r3
        }
        break;
 80093a2:	e004      	b.n	80093ae <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fbe0 	bl	8009b6c <USBD_CtlError>
        break;
 80093ac:	e000      	b.n	80093b0 <USBD_StdEPReq+0x13c>
        break;
 80093ae:	bf00      	nop
      }
      break;
 80093b0:	e0aa      	b.n	8009508 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d002      	beq.n	80093c2 <USBD_StdEPReq+0x14e>
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d032      	beq.n	8009426 <USBD_StdEPReq+0x1b2>
 80093c0:	e097      	b.n	80094f2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d007      	beq.n	80093d8 <USBD_StdEPReq+0x164>
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	2b80      	cmp	r3, #128	; 0x80
 80093cc:	d004      	beq.n	80093d8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fbcb 	bl	8009b6c <USBD_CtlError>
          break;
 80093d6:	e091      	b.n	80094fc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	da0b      	bge.n	80093f8 <USBD_StdEPReq+0x184>
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093e6:	4613      	mov	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	3310      	adds	r3, #16
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	4413      	add	r3, r2
 80093f4:	3304      	adds	r3, #4
 80093f6:	e00b      	b.n	8009410 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	4413      	add	r3, r2
 800940e:	3304      	adds	r3, #4
 8009410:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2202      	movs	r2, #2
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fc15 	bl	8009c4e <USBD_CtlSendData>
        break;
 8009424:	e06a      	b.n	80094fc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800942a:	2b00      	cmp	r3, #0
 800942c:	da11      	bge.n	8009452 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	f003 020f 	and.w	r2, r3, #15
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	440b      	add	r3, r1
 8009440:	3324      	adds	r3, #36	; 0x24
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d117      	bne.n	8009478 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fb8e 	bl	8009b6c <USBD_CtlError>
            break;
 8009450:	e054      	b.n	80094fc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	f003 020f 	and.w	r2, r3, #15
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	440b      	add	r3, r1
 8009464:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d104      	bne.n	8009478 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fb7b 	bl	8009b6c <USBD_CtlError>
            break;
 8009476:	e041      	b.n	80094fc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800947c:	2b00      	cmp	r3, #0
 800947e:	da0b      	bge.n	8009498 <USBD_StdEPReq+0x224>
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009486:	4613      	mov	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	3310      	adds	r3, #16
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	4413      	add	r3, r2
 8009494:	3304      	adds	r3, #4
 8009496:	e00b      	b.n	80094b0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	4413      	add	r3, r2
 80094ae:	3304      	adds	r3, #4
 80094b0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <USBD_StdEPReq+0x24a>
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	2b80      	cmp	r3, #128	; 0x80
 80094bc:	d103      	bne.n	80094c6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	e00e      	b.n	80094e4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	4619      	mov	r1, r3
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f003 fb57 	bl	800cb7e <USBD_LL_IsStallEP>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	2201      	movs	r2, #1
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	e002      	b.n	80094e4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2202      	movs	r2, #2
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fbaf 	bl	8009c4e <USBD_CtlSendData>
          break;
 80094f0:	e004      	b.n	80094fc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fb39 	bl	8009b6c <USBD_CtlError>
        break;
 80094fa:	bf00      	nop
      }
      break;
 80094fc:	e004      	b.n	8009508 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fb33 	bl	8009b6c <USBD_CtlError>
      break;
 8009506:	bf00      	nop
    }
    break;
 8009508:	e004      	b.n	8009514 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fb2d 	bl	8009b6c <USBD_CtlError>
    break;
 8009512:	bf00      	nop
  }

  return ret;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800952e:	2300      	movs	r3, #0
 8009530:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	885b      	ldrh	r3, [r3, #2]
 800953a:	0a1b      	lsrs	r3, r3, #8
 800953c:	b29b      	uxth	r3, r3
 800953e:	3b01      	subs	r3, #1
 8009540:	2b06      	cmp	r3, #6
 8009542:	f200 8128 	bhi.w	8009796 <USBD_GetDescriptor+0x276>
 8009546:	a201      	add	r2, pc, #4	; (adr r2, 800954c <USBD_GetDescriptor+0x2c>)
 8009548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954c:	08009569 	.word	0x08009569
 8009550:	08009581 	.word	0x08009581
 8009554:	080095c1 	.word	0x080095c1
 8009558:	08009797 	.word	0x08009797
 800955c:	08009797 	.word	0x08009797
 8009560:	08009737 	.word	0x08009737
 8009564:	08009763 	.word	0x08009763
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	7c12      	ldrb	r2, [r2, #16]
 8009574:	f107 0108 	add.w	r1, r7, #8
 8009578:	4610      	mov	r0, r2
 800957a:	4798      	blx	r3
 800957c:	60f8      	str	r0, [r7, #12]
    break;
 800957e:	e112      	b.n	80097a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7c1b      	ldrb	r3, [r3, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10d      	bne.n	80095a4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800958e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009590:	f107 0208 	add.w	r2, r7, #8
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	2202      	movs	r2, #2
 80095a0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80095a2:	e100      	b.n	80097a6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ac:	f107 0208 	add.w	r2, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3301      	adds	r3, #1
 80095ba:	2202      	movs	r2, #2
 80095bc:	701a      	strb	r2, [r3, #0]
    break;
 80095be:	e0f2      	b.n	80097a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	885b      	ldrh	r3, [r3, #2]
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b05      	cmp	r3, #5
 80095c8:	f200 80ac 	bhi.w	8009724 <USBD_GetDescriptor+0x204>
 80095cc:	a201      	add	r2, pc, #4	; (adr r2, 80095d4 <USBD_GetDescriptor+0xb4>)
 80095ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d2:	bf00      	nop
 80095d4:	080095ed 	.word	0x080095ed
 80095d8:	08009621 	.word	0x08009621
 80095dc:	08009655 	.word	0x08009655
 80095e0:	08009689 	.word	0x08009689
 80095e4:	080096bd 	.word	0x080096bd
 80095e8:	080096f1 	.word	0x080096f1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00b      	beq.n	8009610 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	7c12      	ldrb	r2, [r2, #16]
 8009604:	f107 0108 	add.w	r1, r7, #8
 8009608:	4610      	mov	r0, r2
 800960a:	4798      	blx	r3
 800960c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800960e:	e091      	b.n	8009734 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 faaa 	bl	8009b6c <USBD_CtlError>
        err++;
 8009618:	7afb      	ldrb	r3, [r7, #11]
 800961a:	3301      	adds	r3, #1
 800961c:	72fb      	strb	r3, [r7, #11]
      break;
 800961e:	e089      	b.n	8009734 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00b      	beq.n	8009644 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	7c12      	ldrb	r2, [r2, #16]
 8009638:	f107 0108 	add.w	r1, r7, #8
 800963c:	4610      	mov	r0, r2
 800963e:	4798      	blx	r3
 8009640:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009642:	e077      	b.n	8009734 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fa90 	bl	8009b6c <USBD_CtlError>
        err++;
 800964c:	7afb      	ldrb	r3, [r7, #11]
 800964e:	3301      	adds	r3, #1
 8009650:	72fb      	strb	r3, [r7, #11]
      break;
 8009652:	e06f      	b.n	8009734 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00b      	beq.n	8009678 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	7c12      	ldrb	r2, [r2, #16]
 800966c:	f107 0108 	add.w	r1, r7, #8
 8009670:	4610      	mov	r0, r2
 8009672:	4798      	blx	r3
 8009674:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009676:	e05d      	b.n	8009734 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fa76 	bl	8009b6c <USBD_CtlError>
        err++;
 8009680:	7afb      	ldrb	r3, [r7, #11]
 8009682:	3301      	adds	r3, #1
 8009684:	72fb      	strb	r3, [r7, #11]
      break;
 8009686:	e055      	b.n	8009734 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00b      	beq.n	80096ac <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	7c12      	ldrb	r2, [r2, #16]
 80096a0:	f107 0108 	add.w	r1, r7, #8
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096aa:	e043      	b.n	8009734 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fa5c 	bl	8009b6c <USBD_CtlError>
        err++;
 80096b4:	7afb      	ldrb	r3, [r7, #11]
 80096b6:	3301      	adds	r3, #1
 80096b8:	72fb      	strb	r3, [r7, #11]
      break;
 80096ba:	e03b      	b.n	8009734 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7c12      	ldrb	r2, [r2, #16]
 80096d4:	f107 0108 	add.w	r1, r7, #8
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096de:	e029      	b.n	8009734 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fa42 	bl	8009b6c <USBD_CtlError>
        err++;
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	3301      	adds	r3, #1
 80096ec:	72fb      	strb	r3, [r7, #11]
      break;
 80096ee:	e021      	b.n	8009734 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	7c12      	ldrb	r2, [r2, #16]
 8009708:	f107 0108 	add.w	r1, r7, #8
 800970c:	4610      	mov	r0, r2
 800970e:	4798      	blx	r3
 8009710:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009712:	e00f      	b.n	8009734 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fa28 	bl	8009b6c <USBD_CtlError>
        err++;
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	3301      	adds	r3, #1
 8009720:	72fb      	strb	r3, [r7, #11]
      break;
 8009722:	e007      	b.n	8009734 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fa20 	bl	8009b6c <USBD_CtlError>
      err++;
 800972c:	7afb      	ldrb	r3, [r7, #11]
 800972e:	3301      	adds	r3, #1
 8009730:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009732:	bf00      	nop
    }
    break;
 8009734:	e037      	b.n	80097a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	7c1b      	ldrb	r3, [r3, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d109      	bne.n	8009752 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009746:	f107 0208 	add.w	r2, r7, #8
 800974a:	4610      	mov	r0, r2
 800974c:	4798      	blx	r3
 800974e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009750:	e029      	b.n	80097a6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fa09 	bl	8009b6c <USBD_CtlError>
      err++;
 800975a:	7afb      	ldrb	r3, [r7, #11]
 800975c:	3301      	adds	r3, #1
 800975e:	72fb      	strb	r3, [r7, #11]
    break;
 8009760:	e021      	b.n	80097a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	7c1b      	ldrb	r3, [r3, #16]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10d      	bne.n	8009786 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009772:	f107 0208 	add.w	r2, r7, #8
 8009776:	4610      	mov	r0, r2
 8009778:	4798      	blx	r3
 800977a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	3301      	adds	r3, #1
 8009780:	2207      	movs	r2, #7
 8009782:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009784:	e00f      	b.n	80097a6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f9ef 	bl	8009b6c <USBD_CtlError>
      err++;
 800978e:	7afb      	ldrb	r3, [r7, #11]
 8009790:	3301      	adds	r3, #1
 8009792:	72fb      	strb	r3, [r7, #11]
    break;
 8009794:	e007      	b.n	80097a6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f9e7 	bl	8009b6c <USBD_CtlError>
    err++;
 800979e:	7afb      	ldrb	r3, [r7, #11]
 80097a0:	3301      	adds	r3, #1
 80097a2:	72fb      	strb	r3, [r7, #11]
    break;
 80097a4:	bf00      	nop
  }

  if (err != 0U)
 80097a6:	7afb      	ldrb	r3, [r7, #11]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d11e      	bne.n	80097ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	88db      	ldrh	r3, [r3, #6]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d016      	beq.n	80097e2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80097b4:	893b      	ldrh	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00e      	beq.n	80097d8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	88da      	ldrh	r2, [r3, #6]
 80097be:	893b      	ldrh	r3, [r7, #8]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	bf28      	it	cs
 80097c4:	4613      	movcs	r3, r2
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80097ca:	893b      	ldrh	r3, [r7, #8]
 80097cc:	461a      	mov	r2, r3
 80097ce:	68f9      	ldr	r1, [r7, #12]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fa3c 	bl	8009c4e <USBD_CtlSendData>
 80097d6:	e009      	b.n	80097ec <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9c6 	bl	8009b6c <USBD_CtlError>
 80097e0:	e004      	b.n	80097ec <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fa70 	bl	8009cc8 <USBD_CtlSendStatus>
 80097e8:	e000      	b.n	80097ec <USBD_GetDescriptor+0x2cc>
    return;
 80097ea:	bf00      	nop
    }
  }
}
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop

080097f4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	889b      	ldrh	r3, [r3, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d130      	bne.n	8009868 <USBD_SetAddress+0x74>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	88db      	ldrh	r3, [r3, #6]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d12c      	bne.n	8009868 <USBD_SetAddress+0x74>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	885b      	ldrh	r3, [r3, #2]
 8009812:	2b7f      	cmp	r3, #127	; 0x7f
 8009814:	d828      	bhi.n	8009868 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	885b      	ldrh	r3, [r3, #2]
 800981a:	b2db      	uxtb	r3, r3
 800981c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009820:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009828:	2b03      	cmp	r3, #3
 800982a:	d104      	bne.n	8009836 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f99c 	bl	8009b6c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009834:	e01c      	b.n	8009870 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	7bfa      	ldrb	r2, [r7, #15]
 800983a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800983e:	7bfb      	ldrb	r3, [r7, #15]
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f003 f9c7 	bl	800cbd6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fa3d 	bl	8009cc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d004      	beq.n	800985e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2202      	movs	r2, #2
 8009858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985c:	e008      	b.n	8009870 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009866:	e003      	b.n	8009870 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f97e 	bl	8009b6c <USBD_CtlError>
  }
}
 8009870:	bf00      	nop
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	885b      	ldrh	r3, [r3, #2]
 800988a:	b2da      	uxtb	r2, r3
 800988c:	4b4b      	ldr	r3, [pc, #300]	; (80099bc <USBD_SetConfig+0x144>)
 800988e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009890:	4b4a      	ldr	r3, [pc, #296]	; (80099bc <USBD_SetConfig+0x144>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d905      	bls.n	80098a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f966 	bl	8009b6c <USBD_CtlError>
    return USBD_FAIL;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e087      	b.n	80099b4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d002      	beq.n	80098b4 <USBD_SetConfig+0x3c>
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d025      	beq.n	80098fe <USBD_SetConfig+0x86>
 80098b2:	e071      	b.n	8009998 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80098b4:	4b41      	ldr	r3, [pc, #260]	; (80099bc <USBD_SetConfig+0x144>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01c      	beq.n	80098f6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80098bc:	4b3f      	ldr	r3, [pc, #252]	; (80099bc <USBD_SetConfig+0x144>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	461a      	mov	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80098c6:	4b3d      	ldr	r3, [pc, #244]	; (80099bc <USBD_SetConfig+0x144>)
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7ff f9a8 	bl	8008c22 <USBD_SetClassConfig>
 80098d2:	4603      	mov	r3, r0
 80098d4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d004      	beq.n	80098e6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f944 	bl	8009b6c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80098e4:	e065      	b.n	80099b2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f9ee 	bl	8009cc8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2203      	movs	r2, #3
 80098f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80098f4:	e05d      	b.n	80099b2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f9e6 	bl	8009cc8 <USBD_CtlSendStatus>
    break;
 80098fc:	e059      	b.n	80099b2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80098fe:	4b2f      	ldr	r3, [pc, #188]	; (80099bc <USBD_SetConfig+0x144>)
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d112      	bne.n	800992c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2202      	movs	r2, #2
 800990a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800990e:	4b2b      	ldr	r3, [pc, #172]	; (80099bc <USBD_SetConfig+0x144>)
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009918:	4b28      	ldr	r3, [pc, #160]	; (80099bc <USBD_SetConfig+0x144>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7ff f99b 	bl	8008c5a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f9cf 	bl	8009cc8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800992a:	e042      	b.n	80099b2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800992c:	4b23      	ldr	r3, [pc, #140]	; (80099bc <USBD_SetConfig+0x144>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	461a      	mov	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	429a      	cmp	r2, r3
 8009938:	d02a      	beq.n	8009990 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	b2db      	uxtb	r3, r3
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7ff f989 	bl	8008c5a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009948:	4b1c      	ldr	r3, [pc, #112]	; (80099bc <USBD_SetConfig+0x144>)
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	461a      	mov	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009952:	4b1a      	ldr	r3, [pc, #104]	; (80099bc <USBD_SetConfig+0x144>)
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7ff f962 	bl	8008c22 <USBD_SetClassConfig>
 800995e:	4603      	mov	r3, r0
 8009960:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009962:	7bfb      	ldrb	r3, [r7, #15]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00f      	beq.n	8009988 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f8fe 	bl	8009b6c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	b2db      	uxtb	r3, r3
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff f96e 	bl	8008c5a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2202      	movs	r2, #2
 8009982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009986:	e014      	b.n	80099b2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f99d 	bl	8009cc8 <USBD_CtlSendStatus>
    break;
 800998e:	e010      	b.n	80099b2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f999 	bl	8009cc8 <USBD_CtlSendStatus>
    break;
 8009996:	e00c      	b.n	80099b2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f8e6 	bl	8009b6c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099a0:	4b06      	ldr	r3, [pc, #24]	; (80099bc <USBD_SetConfig+0x144>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7ff f957 	bl	8008c5a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80099ac:	2303      	movs	r3, #3
 80099ae:	73fb      	strb	r3, [r7, #15]
    break;
 80099b0:	bf00      	nop
  }

  return ret;
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	200001e8 	.word	0x200001e8

080099c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	88db      	ldrh	r3, [r3, #6]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d004      	beq.n	80099dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f8c9 	bl	8009b6c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80099da:	e021      	b.n	8009a20 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	db17      	blt.n	8009a16 <USBD_GetConfig+0x56>
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	dd02      	ble.n	80099f0 <USBD_GetConfig+0x30>
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d00b      	beq.n	8009a06 <USBD_GetConfig+0x46>
 80099ee:	e012      	b.n	8009a16 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3308      	adds	r3, #8
 80099fa:	2201      	movs	r2, #1
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f925 	bl	8009c4e <USBD_CtlSendData>
      break;
 8009a04:	e00c      	b.n	8009a20 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f91d 	bl	8009c4e <USBD_CtlSendData>
      break;
 8009a14:	e004      	b.n	8009a20 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f8a7 	bl	8009b6c <USBD_CtlError>
      break;
 8009a1e:	bf00      	nop
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d81e      	bhi.n	8009a7c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	88db      	ldrh	r3, [r3, #6]
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d004      	beq.n	8009a50 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f88f 	bl	8009b6c <USBD_CtlError>
      break;
 8009a4e:	e01a      	b.n	8009a86 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d005      	beq.n	8009a6c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	f043 0202 	orr.w	r2, r3, #2
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	330c      	adds	r3, #12
 8009a70:	2202      	movs	r2, #2
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f8ea 	bl	8009c4e <USBD_CtlSendData>
    break;
 8009a7a:	e004      	b.n	8009a86 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f874 	bl	8009b6c <USBD_CtlError>
    break;
 8009a84:	bf00      	nop
  }
}
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b082      	sub	sp, #8
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	885b      	ldrh	r3, [r3, #2]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d106      	bne.n	8009aae <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f90d 	bl	8009cc8 <USBD_CtlSendStatus>
  }
}
 8009aae:	bf00      	nop
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b082      	sub	sp, #8
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d80b      	bhi.n	8009ae4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	885b      	ldrh	r3, [r3, #2]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d10c      	bne.n	8009aee <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f8f3 	bl	8009cc8 <USBD_CtlSendStatus>
      }
      break;
 8009ae2:	e004      	b.n	8009aee <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f840 	bl	8009b6c <USBD_CtlError>
      break;
 8009aec:	e000      	b.n	8009af0 <USBD_ClrFeature+0x3a>
      break;
 8009aee:	bf00      	nop
  }
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	781a      	ldrb	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3301      	adds	r3, #1
 8009b12:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	781a      	ldrb	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f7ff fad4 	bl	80090d0 <SWAPBYTE>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	3301      	adds	r3, #1
 8009b34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f7ff fac7 	bl	80090d0 <SWAPBYTE>
 8009b42:	4603      	mov	r3, r0
 8009b44:	461a      	mov	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3301      	adds	r3, #1
 8009b54:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff faba 	bl	80090d0 <SWAPBYTE>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	461a      	mov	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	80da      	strh	r2, [r3, #6]
}
 8009b64:	bf00      	nop
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b76:	2180      	movs	r1, #128	; 0x80
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f002 ffc2 	bl	800cb02 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b7e:	2100      	movs	r1, #0
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f002 ffbe 	bl	800cb02 <USBD_LL_StallEP>
}
 8009b86:	bf00      	nop
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b086      	sub	sp, #24
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	60b9      	str	r1, [r7, #8]
 8009b98:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d036      	beq.n	8009c12 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009ba8:	6938      	ldr	r0, [r7, #16]
 8009baa:	f000 f836 	bl	8009c1a <USBD_GetLen>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	005b      	lsls	r3, r3, #1
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	7812      	ldrb	r2, [r2, #0]
 8009bc6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	2203      	movs	r2, #3
 8009bd6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009bde:	e013      	b.n	8009c08 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	4413      	add	r3, r2
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	7812      	ldrb	r2, [r2, #0]
 8009bea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	613b      	str	r3, [r7, #16]
    idx++;
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	2200      	movs	r2, #0
 8009c00:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
 8009c04:	3301      	adds	r3, #1
 8009c06:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e7      	bne.n	8009be0 <USBD_GetString+0x52>
 8009c10:	e000      	b.n	8009c14 <USBD_GetString+0x86>
    return;
 8009c12:	bf00      	nop
  }
}
 8009c14:	3718      	adds	r7, #24
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b085      	sub	sp, #20
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c2a:	e005      	b.n	8009c38 <USBD_GetLen+0x1e>
  {
    len++;
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	3301      	adds	r3, #1
 8009c36:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1f5      	bne.n	8009c2c <USBD_GetLen+0x12>
  }

  return len;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	60f8      	str	r0, [r7, #12]
 8009c56:	60b9      	str	r1, [r7, #8]
 8009c58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	2100      	movs	r1, #0
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f002 ffcd 	bl	800cc14 <USBD_LL_Transmit>

  return USBD_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	2100      	movs	r1, #0
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f002 ffbc 	bl	800cc14 <USBD_LL_Transmit>

  return USBD_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f002 ffcc 	bl	800cc56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2204      	movs	r2, #4
 8009cd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cd8:	2300      	movs	r3, #0
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2100      	movs	r1, #0
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f002 ff98 	bl	800cc14 <USBD_LL_Transmit>

  return USBD_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2205      	movs	r2, #5
 8009cfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cfe:	2300      	movs	r3, #0
 8009d00:	2200      	movs	r2, #0
 8009d02:	2100      	movs	r1, #0
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f002 ffa6 	bl	800cc56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	4a08      	ldr	r2, [pc, #32]	; (8009d44 <disk_status+0x30>)
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	79fa      	ldrb	r2, [r7, #7]
 8009d2c:	4905      	ldr	r1, [pc, #20]	; (8009d44 <disk_status+0x30>)
 8009d2e:	440a      	add	r2, r1
 8009d30:	7a12      	ldrb	r2, [r2, #8]
 8009d32:	4610      	mov	r0, r2
 8009d34:	4798      	blx	r3
 8009d36:	4603      	mov	r3, r0
 8009d38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	20000214 	.word	0x20000214

08009d48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009d56:	79fb      	ldrb	r3, [r7, #7]
 8009d58:	4a0d      	ldr	r2, [pc, #52]	; (8009d90 <disk_initialize+0x48>)
 8009d5a:	5cd3      	ldrb	r3, [r2, r3]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d111      	bne.n	8009d84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	4a0b      	ldr	r2, [pc, #44]	; (8009d90 <disk_initialize+0x48>)
 8009d64:	2101      	movs	r1, #1
 8009d66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d68:	79fb      	ldrb	r3, [r7, #7]
 8009d6a:	4a09      	ldr	r2, [pc, #36]	; (8009d90 <disk_initialize+0x48>)
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	79fa      	ldrb	r2, [r7, #7]
 8009d76:	4906      	ldr	r1, [pc, #24]	; (8009d90 <disk_initialize+0x48>)
 8009d78:	440a      	add	r2, r1
 8009d7a:	7a12      	ldrb	r2, [r2, #8]
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	4798      	blx	r3
 8009d80:	4603      	mov	r3, r0
 8009d82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20000214 	.word	0x20000214

08009d94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009d94:	b590      	push	{r4, r7, lr}
 8009d96:	b087      	sub	sp, #28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60b9      	str	r1, [r7, #8]
 8009d9c:	607a      	str	r2, [r7, #4]
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	4603      	mov	r3, r0
 8009da2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
 8009da6:	4a0a      	ldr	r2, [pc, #40]	; (8009dd0 <disk_read+0x3c>)
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	689c      	ldr	r4, [r3, #8]
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	4a07      	ldr	r2, [pc, #28]	; (8009dd0 <disk_read+0x3c>)
 8009db4:	4413      	add	r3, r2
 8009db6:	7a18      	ldrb	r0, [r3, #8]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	68b9      	ldr	r1, [r7, #8]
 8009dbe:	47a0      	blx	r4
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	75fb      	strb	r3, [r7, #23]
  return res;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd90      	pop	{r4, r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20000214 	.word	0x20000214

08009dd4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009dd4:	b590      	push	{r4, r7, lr}
 8009dd6:	b087      	sub	sp, #28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60b9      	str	r1, [r7, #8]
 8009ddc:	607a      	str	r2, [r7, #4]
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	4603      	mov	r3, r0
 8009de2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
 8009de6:	4a0a      	ldr	r2, [pc, #40]	; (8009e10 <disk_write+0x3c>)
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	68dc      	ldr	r4, [r3, #12]
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	4a07      	ldr	r2, [pc, #28]	; (8009e10 <disk_write+0x3c>)
 8009df4:	4413      	add	r3, r2
 8009df6:	7a18      	ldrb	r0, [r3, #8]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	47a0      	blx	r4
 8009e00:	4603      	mov	r3, r0
 8009e02:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	371c      	adds	r7, #28
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd90      	pop	{r4, r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	20000214 	.word	0x20000214

08009e14 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009e24:	89fb      	ldrh	r3, [r7, #14]
 8009e26:	021b      	lsls	r3, r3, #8
 8009e28:	b21a      	sxth	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	b21b      	sxth	r3, r3
 8009e30:	4313      	orrs	r3, r2
 8009e32:	b21b      	sxth	r3, r3
 8009e34:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009e36:	89fb      	ldrh	r3, [r7, #14]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	3303      	adds	r3, #3
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	021b      	lsls	r3, r3, #8
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	3202      	adds	r2, #2
 8009e5c:	7812      	ldrb	r2, [r2, #0]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	021b      	lsls	r3, r3, #8
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	3201      	adds	r2, #1
 8009e6a:	7812      	ldrb	r2, [r2, #0]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	021b      	lsls	r3, r3, #8
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	7812      	ldrb	r2, [r2, #0]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	460b      	mov	r3, r1
 8009e94:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	887a      	ldrh	r2, [r7, #2]
 8009e9e:	b2d2      	uxtb	r2, r2
 8009ea0:	701a      	strb	r2, [r3, #0]
 8009ea2:	887b      	ldrh	r3, [r7, #2]
 8009ea4:	0a1b      	lsrs	r3, r3, #8
 8009ea6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	607a      	str	r2, [r7, #4]
 8009eae:	887a      	ldrh	r2, [r7, #2]
 8009eb0:	b2d2      	uxtb	r2, r2
 8009eb2:	701a      	strb	r2, [r3, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	b2d2      	uxtb	r2, r2
 8009ed4:	701a      	strb	r2, [r3, #0]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	0a1b      	lsrs	r3, r3, #8
 8009eda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	1c5a      	adds	r2, r3, #1
 8009ee0:	607a      	str	r2, [r7, #4]
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	b2d2      	uxtb	r2, r2
 8009ee6:	701a      	strb	r2, [r3, #0]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	b2d2      	uxtb	r2, r2
 8009ef8:	701a      	strb	r2, [r3, #0]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	0a1b      	lsrs	r3, r3, #8
 8009efe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	607a      	str	r2, [r7, #4]
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	b2d2      	uxtb	r2, r2
 8009f0a:	701a      	strb	r2, [r3, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009f18:	b480      	push	{r7}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00d      	beq.n	8009f4e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	1c53      	adds	r3, r2, #1
 8009f36:	613b      	str	r3, [r7, #16]
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	1c59      	adds	r1, r3, #1
 8009f3c:	6179      	str	r1, [r7, #20]
 8009f3e:	7812      	ldrb	r2, [r2, #0]
 8009f40:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	607b      	str	r3, [r7, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1f1      	bne.n	8009f32 <mem_cpy+0x1a>
	}
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009f5a:	b480      	push	{r7}
 8009f5c:	b087      	sub	sp, #28
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	60b9      	str	r1, [r7, #8]
 8009f64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	617a      	str	r2, [r7, #20]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	607b      	str	r3, [r7, #4]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1f3      	bne.n	8009f6a <mem_set+0x10>
}
 8009f82:	bf00      	nop
 8009f84:	371c      	adds	r7, #28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009f8e:	b480      	push	{r7}
 8009f90:	b089      	sub	sp, #36	; 0x24
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	60f8      	str	r0, [r7, #12]
 8009f96:	60b9      	str	r1, [r7, #8]
 8009f98:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	61fb      	str	r3, [r7, #28]
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	1c5a      	adds	r2, r3, #1
 8009faa:	61fa      	str	r2, [r7, #28]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	1c5a      	adds	r2, r3, #1
 8009fb4:	61ba      	str	r2, [r7, #24]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	1acb      	subs	r3, r1, r3
 8009fba:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	607b      	str	r3, [r7, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <mem_cmp+0x40>
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0eb      	beq.n	8009fa6 <mem_cmp+0x18>

	return r;
 8009fce:	697b      	ldr	r3, [r7, #20]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3724      	adds	r7, #36	; 0x24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009fe6:	e002      	b.n	8009fee <chk_chr+0x12>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3301      	adds	r3, #1
 8009fec:	607b      	str	r3, [r7, #4]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <chk_chr+0x26>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d1f2      	bne.n	8009fe8 <chk_chr+0xc>
	return *str;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	781b      	ldrb	r3, [r3, #0]
}
 800a006:	4618      	mov	r0, r3
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
	...

0800a014 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a01e:	2300      	movs	r3, #0
 800a020:	60bb      	str	r3, [r7, #8]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	e029      	b.n	800a07c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a028:	4a27      	ldr	r2, [pc, #156]	; (800a0c8 <chk_lock+0xb4>)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	011b      	lsls	r3, r3, #4
 800a02e:	4413      	add	r3, r2
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d01d      	beq.n	800a072 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a036:	4a24      	ldr	r2, [pc, #144]	; (800a0c8 <chk_lock+0xb4>)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	4413      	add	r3, r2
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	429a      	cmp	r2, r3
 800a046:	d116      	bne.n	800a076 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a048:	4a1f      	ldr	r2, [pc, #124]	; (800a0c8 <chk_lock+0xb4>)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	011b      	lsls	r3, r3, #4
 800a04e:	4413      	add	r3, r2
 800a050:	3304      	adds	r3, #4
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a058:	429a      	cmp	r2, r3
 800a05a:	d10c      	bne.n	800a076 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a05c:	4a1a      	ldr	r2, [pc, #104]	; (800a0c8 <chk_lock+0xb4>)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	011b      	lsls	r3, r3, #4
 800a062:	4413      	add	r3, r2
 800a064:	3308      	adds	r3, #8
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d102      	bne.n	800a076 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a070:	e007      	b.n	800a082 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a072:	2301      	movs	r3, #1
 800a074:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d9d2      	bls.n	800a028 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d109      	bne.n	800a09c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <chk_lock+0x80>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d101      	bne.n	800a098 <chk_lock+0x84>
 800a094:	2300      	movs	r3, #0
 800a096:	e010      	b.n	800a0ba <chk_lock+0xa6>
 800a098:	2312      	movs	r3, #18
 800a09a:	e00e      	b.n	800a0ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d108      	bne.n	800a0b4 <chk_lock+0xa0>
 800a0a2:	4a09      	ldr	r2, [pc, #36]	; (800a0c8 <chk_lock+0xb4>)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	4413      	add	r3, r2
 800a0aa:	330c      	adds	r3, #12
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0b2:	d101      	bne.n	800a0b8 <chk_lock+0xa4>
 800a0b4:	2310      	movs	r3, #16
 800a0b6:	e000      	b.n	800a0ba <chk_lock+0xa6>
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	200001f4 	.word	0x200001f4

0800a0cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	607b      	str	r3, [r7, #4]
 800a0d6:	e002      	b.n	800a0de <enq_lock+0x12>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	607b      	str	r3, [r7, #4]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d806      	bhi.n	800a0f2 <enq_lock+0x26>
 800a0e4:	4a09      	ldr	r2, [pc, #36]	; (800a10c <enq_lock+0x40>)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	011b      	lsls	r3, r3, #4
 800a0ea:	4413      	add	r3, r2
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1f2      	bne.n	800a0d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	bf14      	ite	ne
 800a0f8:	2301      	movne	r3, #1
 800a0fa:	2300      	moveq	r3, #0
 800a0fc:	b2db      	uxtb	r3, r3
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	200001f4 	.word	0x200001f4

0800a110 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
 800a11e:	e01f      	b.n	800a160 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a120:	4a41      	ldr	r2, [pc, #260]	; (800a228 <inc_lock+0x118>)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	011b      	lsls	r3, r3, #4
 800a126:	4413      	add	r3, r2
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d113      	bne.n	800a15a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a132:	4a3d      	ldr	r2, [pc, #244]	; (800a228 <inc_lock+0x118>)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	011b      	lsls	r3, r3, #4
 800a138:	4413      	add	r3, r2
 800a13a:	3304      	adds	r3, #4
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a142:	429a      	cmp	r2, r3
 800a144:	d109      	bne.n	800a15a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a146:	4a38      	ldr	r2, [pc, #224]	; (800a228 <inc_lock+0x118>)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	4413      	add	r3, r2
 800a14e:	3308      	adds	r3, #8
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a156:	429a      	cmp	r2, r3
 800a158:	d006      	beq.n	800a168 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3301      	adds	r3, #1
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d9dc      	bls.n	800a120 <inc_lock+0x10>
 800a166:	e000      	b.n	800a16a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a168:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d132      	bne.n	800a1d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	e002      	b.n	800a17c <inc_lock+0x6c>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	3301      	adds	r3, #1
 800a17a:	60fb      	str	r3, [r7, #12]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d806      	bhi.n	800a190 <inc_lock+0x80>
 800a182:	4a29      	ldr	r2, [pc, #164]	; (800a228 <inc_lock+0x118>)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	011b      	lsls	r3, r3, #4
 800a188:	4413      	add	r3, r2
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1f2      	bne.n	800a176 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b02      	cmp	r3, #2
 800a194:	d101      	bne.n	800a19a <inc_lock+0x8a>
 800a196:	2300      	movs	r3, #0
 800a198:	e040      	b.n	800a21c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	4922      	ldr	r1, [pc, #136]	; (800a228 <inc_lock+0x118>)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	440b      	add	r3, r1
 800a1a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	689a      	ldr	r2, [r3, #8]
 800a1ac:	491e      	ldr	r1, [pc, #120]	; (800a228 <inc_lock+0x118>)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	011b      	lsls	r3, r3, #4
 800a1b2:	440b      	add	r3, r1
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	695a      	ldr	r2, [r3, #20]
 800a1bc:	491a      	ldr	r1, [pc, #104]	; (800a228 <inc_lock+0x118>)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	011b      	lsls	r3, r3, #4
 800a1c2:	440b      	add	r3, r1
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a1c8:	4a17      	ldr	r2, [pc, #92]	; (800a228 <inc_lock+0x118>)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	011b      	lsls	r3, r3, #4
 800a1ce:	4413      	add	r3, r2
 800a1d0:	330c      	adds	r3, #12
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d009      	beq.n	800a1f0 <inc_lock+0xe0>
 800a1dc:	4a12      	ldr	r2, [pc, #72]	; (800a228 <inc_lock+0x118>)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	4413      	add	r3, r2
 800a1e4:	330c      	adds	r3, #12
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <inc_lock+0xe0>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	e015      	b.n	800a21c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d108      	bne.n	800a208 <inc_lock+0xf8>
 800a1f6:	4a0c      	ldr	r2, [pc, #48]	; (800a228 <inc_lock+0x118>)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	011b      	lsls	r3, r3, #4
 800a1fc:	4413      	add	r3, r2
 800a1fe:	330c      	adds	r3, #12
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	3301      	adds	r3, #1
 800a204:	b29a      	uxth	r2, r3
 800a206:	e001      	b.n	800a20c <inc_lock+0xfc>
 800a208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a20c:	4906      	ldr	r1, [pc, #24]	; (800a228 <inc_lock+0x118>)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	011b      	lsls	r3, r3, #4
 800a212:	440b      	add	r3, r1
 800a214:	330c      	adds	r3, #12
 800a216:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3301      	adds	r3, #1
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	200001f4 	.word	0x200001f4

0800a22c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	e010      	b.n	800a25c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a23a:	4a0d      	ldr	r2, [pc, #52]	; (800a270 <clear_lock+0x44>)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	011b      	lsls	r3, r3, #4
 800a240:	4413      	add	r3, r2
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	429a      	cmp	r2, r3
 800a248:	d105      	bne.n	800a256 <clear_lock+0x2a>
 800a24a:	4a09      	ldr	r2, [pc, #36]	; (800a270 <clear_lock+0x44>)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	4413      	add	r3, r2
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3301      	adds	r3, #1
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d9eb      	bls.n	800a23a <clear_lock+0xe>
	}
}
 800a262:	bf00      	nop
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	200001f4 	.word	0x200001f4

0800a274 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	78db      	ldrb	r3, [r3, #3]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d034      	beq.n	800a2f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	7858      	ldrb	r0, [r3, #1]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a298:	2301      	movs	r3, #1
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	f7ff fd9a 	bl	8009dd4 <disk_write>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d002      	beq.n	800a2ac <sync_window+0x38>
			res = FR_DISK_ERR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]
 800a2aa:	e022      	b.n	800a2f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	1ad2      	subs	r2, r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d217      	bcs.n	800a2f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	789b      	ldrb	r3, [r3, #2]
 800a2c6:	613b      	str	r3, [r7, #16]
 800a2c8:	e010      	b.n	800a2ec <sync_window+0x78>
					wsect += fs->fsize;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	7858      	ldrb	r0, [r3, #1]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2de:	2301      	movs	r3, #1
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	f7ff fd77 	bl	8009dd4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	613b      	str	r3, [r7, #16]
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d8eb      	bhi.n	800a2ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	429a      	cmp	r2, r3
 800a312:	d01b      	beq.n	800a34c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7ff ffad 	bl	800a274 <sync_window>
 800a31a:	4603      	mov	r3, r0
 800a31c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d113      	bne.n	800a34c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	7858      	ldrb	r0, [r3, #1]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a32e:	2301      	movs	r3, #1
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	f7ff fd2f 	bl	8009d94 <disk_read>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d004      	beq.n	800a346 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a33c:	f04f 33ff 	mov.w	r3, #4294967295
 800a340:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a342:	2301      	movs	r3, #1
 800a344:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	3b02      	subs	r3, #2
 800a364:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	3b02      	subs	r3, #2
 800a36c:	683a      	ldr	r2, [r7, #0]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d301      	bcc.n	800a376 <clust2sect+0x20>
 800a372:	2300      	movs	r3, #0
 800a374:	e008      	b.n	800a388 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	895b      	ldrh	r3, [r3, #10]
 800a37a:	461a      	mov	r2, r3
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	fb03 f202 	mul.w	r2, r3, r2
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a386:	4413      	add	r3, r2
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d904      	bls.n	800a3b4 <get_fat+0x20>
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d302      	bcc.n	800a3ba <get_fat+0x26>
		val = 1;	/* Internal error */
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	617b      	str	r3, [r7, #20]
 800a3b8:	e08c      	b.n	800a4d4 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a3be:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d045      	beq.n	800a454 <get_fat+0xc0>
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d05d      	beq.n	800a488 <get_fat+0xf4>
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d177      	bne.n	800a4c0 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	085b      	lsrs	r3, r3, #1
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	4413      	add	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	6a1a      	ldr	r2, [r3, #32]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	0a5b      	lsrs	r3, r3, #9
 800a3e6:	4413      	add	r3, r2
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	6938      	ldr	r0, [r7, #16]
 800a3ec:	f7ff ff86 	bl	800a2fc <move_window>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d167      	bne.n	800a4c6 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	60fa      	str	r2, [r7, #12]
 800a3fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	4413      	add	r3, r2
 800a404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a408:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	6a1a      	ldr	r2, [r3, #32]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	0a5b      	lsrs	r3, r3, #9
 800a412:	4413      	add	r3, r2
 800a414:	4619      	mov	r1, r3
 800a416:	6938      	ldr	r0, [r7, #16]
 800a418:	f7ff ff70 	bl	800a2fc <move_window>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d153      	bne.n	800a4ca <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	4413      	add	r3, r2
 800a42c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a430:	021b      	lsls	r3, r3, #8
 800a432:	461a      	mov	r2, r3
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	4313      	orrs	r3, r2
 800a438:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <get_fat+0xb6>
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	091b      	lsrs	r3, r3, #4
 800a448:	e002      	b.n	800a450 <get_fat+0xbc>
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a450:	617b      	str	r3, [r7, #20]
			break;
 800a452:	e03f      	b.n	800a4d4 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	6a1a      	ldr	r2, [r3, #32]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	0a1b      	lsrs	r3, r3, #8
 800a45c:	4413      	add	r3, r2
 800a45e:	4619      	mov	r1, r3
 800a460:	6938      	ldr	r0, [r7, #16]
 800a462:	f7ff ff4b 	bl	800a2fc <move_window>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d130      	bne.n	800a4ce <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	005b      	lsls	r3, r3, #1
 800a476:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a47a:	4413      	add	r3, r2
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7ff fcc9 	bl	8009e14 <ld_word>
 800a482:	4603      	mov	r3, r0
 800a484:	617b      	str	r3, [r7, #20]
			break;
 800a486:	e025      	b.n	800a4d4 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	6a1a      	ldr	r2, [r3, #32]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	09db      	lsrs	r3, r3, #7
 800a490:	4413      	add	r3, r2
 800a492:	4619      	mov	r1, r3
 800a494:	6938      	ldr	r0, [r7, #16]
 800a496:	f7ff ff31 	bl	800a2fc <move_window>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d118      	bne.n	800a4d2 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a4ae:	4413      	add	r3, r2
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7ff fcc7 	bl	8009e44 <ld_dword>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a4bc:	617b      	str	r3, [r7, #20]
			break;
 800a4be:	e009      	b.n	800a4d4 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	617b      	str	r3, [r7, #20]
 800a4c4:	e006      	b.n	800a4d4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4c6:	bf00      	nop
 800a4c8:	e004      	b.n	800a4d4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4ca:	bf00      	nop
 800a4cc:	e002      	b.n	800a4d4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a4ce:	bf00      	nop
 800a4d0:	e000      	b.n	800a4d4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a4d2:	bf00      	nop
		}
	}

	return val;
 800a4d4:	697b      	ldr	r3, [r7, #20]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3718      	adds	r7, #24
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a4de:	b590      	push	{r4, r7, lr}
 800a4e0:	b089      	sub	sp, #36	; 0x24
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	60f8      	str	r0, [r7, #12]
 800a4e6:	60b9      	str	r1, [r7, #8]
 800a4e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	f240 80d6 	bls.w	800a6a2 <put_fat+0x1c4>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	f080 80d0 	bcs.w	800a6a2 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b02      	cmp	r3, #2
 800a508:	d073      	beq.n	800a5f2 <put_fat+0x114>
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	f000 8091 	beq.w	800a632 <put_fat+0x154>
 800a510:	2b01      	cmp	r3, #1
 800a512:	f040 80c6 	bne.w	800a6a2 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	61bb      	str	r3, [r7, #24]
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	085b      	lsrs	r3, r3, #1
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	4413      	add	r3, r2
 800a522:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6a1a      	ldr	r2, [r3, #32]
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	0a5b      	lsrs	r3, r3, #9
 800a52c:	4413      	add	r3, r2
 800a52e:	4619      	mov	r1, r3
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f7ff fee3 	bl	800a2fc <move_window>
 800a536:	4603      	mov	r3, r0
 800a538:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a53a:	7ffb      	ldrb	r3, [r7, #31]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f040 80a9 	bne.w	800a694 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	1c59      	adds	r1, r3, #1
 800a54c:	61b9      	str	r1, [r7, #24]
 800a54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a552:	4413      	add	r3, r2
 800a554:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	f003 0301 	and.w	r3, r3, #1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00d      	beq.n	800a57c <put_fat+0x9e>
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	b25b      	sxtb	r3, r3
 800a566:	f003 030f 	and.w	r3, r3, #15
 800a56a:	b25a      	sxtb	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	011b      	lsls	r3, r3, #4
 800a572:	b25b      	sxtb	r3, r3
 800a574:	4313      	orrs	r3, r2
 800a576:	b25b      	sxtb	r3, r3
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	e001      	b.n	800a580 <put_fat+0xa2>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2201      	movs	r2, #1
 800a588:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6a1a      	ldr	r2, [r3, #32]
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	0a5b      	lsrs	r3, r3, #9
 800a592:	4413      	add	r3, r2
 800a594:	4619      	mov	r1, r3
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7ff feb0 	bl	800a2fc <move_window>
 800a59c:	4603      	mov	r3, r0
 800a59e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5a0:	7ffb      	ldrb	r3, [r7, #31]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d178      	bne.n	800a698 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b2:	4413      	add	r3, r2
 800a5b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d003      	beq.n	800a5c8 <put_fat+0xea>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	091b      	lsrs	r3, r3, #4
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	e00e      	b.n	800a5e6 <put_fat+0x108>
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	b25b      	sxtb	r3, r3
 800a5ce:	f023 030f 	bic.w	r3, r3, #15
 800a5d2:	b25a      	sxtb	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	0a1b      	lsrs	r3, r3, #8
 800a5d8:	b25b      	sxtb	r3, r3
 800a5da:	f003 030f 	and.w	r3, r3, #15
 800a5de:	b25b      	sxtb	r3, r3
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	b25b      	sxtb	r3, r3
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	70da      	strb	r2, [r3, #3]
			break;
 800a5f0:	e057      	b.n	800a6a2 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6a1a      	ldr	r2, [r3, #32]
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	0a1b      	lsrs	r3, r3, #8
 800a5fa:	4413      	add	r3, r2
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7ff fe7c 	bl	800a2fc <move_window>
 800a604:	4603      	mov	r3, r0
 800a606:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a608:	7ffb      	ldrb	r3, [r7, #31]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d146      	bne.n	800a69c <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a61c:	4413      	add	r3, r2
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	b292      	uxth	r2, r2
 800a622:	4611      	mov	r1, r2
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff fc30 	bl	8009e8a <st_word>
			fs->wflag = 1;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2201      	movs	r2, #1
 800a62e:	70da      	strb	r2, [r3, #3]
			break;
 800a630:	e037      	b.n	800a6a2 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6a1a      	ldr	r2, [r3, #32]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	09db      	lsrs	r3, r3, #7
 800a63a:	4413      	add	r3, r2
 800a63c:	4619      	mov	r1, r3
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f7ff fe5c 	bl	800a2fc <move_window>
 800a644:	4603      	mov	r3, r0
 800a646:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a648:	7ffb      	ldrb	r3, [r7, #31]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d128      	bne.n	800a6a0 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a662:	4413      	add	r3, r2
 800a664:	4618      	mov	r0, r3
 800a666:	f7ff fbed 	bl	8009e44 <ld_dword>
 800a66a:	4603      	mov	r3, r0
 800a66c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a670:	4323      	orrs	r3, r4
 800a672:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a682:	4413      	add	r3, r2
 800a684:	6879      	ldr	r1, [r7, #4]
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff fc1a 	bl	8009ec0 <st_dword>
			fs->wflag = 1;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2201      	movs	r2, #1
 800a690:	70da      	strb	r2, [r3, #3]
			break;
 800a692:	e006      	b.n	800a6a2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a694:	bf00      	nop
 800a696:	e004      	b.n	800a6a2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a698:	bf00      	nop
 800a69a:	e002      	b.n	800a6a2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a69c:	bf00      	nop
 800a69e:	e000      	b.n	800a6a2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a6a0:	bf00      	nop
		}
	}
	return res;
 800a6a2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3724      	adds	r7, #36	; 0x24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd90      	pop	{r4, r7, pc}

0800a6ac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b088      	sub	sp, #32
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d904      	bls.n	800a6d2 <remove_chain+0x26>
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d301      	bcc.n	800a6d6 <remove_chain+0x2a>
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	e04b      	b.n	800a76e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00c      	beq.n	800a6f6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e0:	6879      	ldr	r1, [r7, #4]
 800a6e2:	69b8      	ldr	r0, [r7, #24]
 800a6e4:	f7ff fefb 	bl	800a4de <put_fat>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a6ec:	7ffb      	ldrb	r3, [r7, #31]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <remove_chain+0x4a>
 800a6f2:	7ffb      	ldrb	r3, [r7, #31]
 800a6f4:	e03b      	b.n	800a76e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a6f6:	68b9      	ldr	r1, [r7, #8]
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7ff fe4b 	bl	800a394 <get_fat>
 800a6fe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d031      	beq.n	800a76a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d101      	bne.n	800a710 <remove_chain+0x64>
 800a70c:	2302      	movs	r3, #2
 800a70e:	e02e      	b.n	800a76e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a716:	d101      	bne.n	800a71c <remove_chain+0x70>
 800a718:	2301      	movs	r3, #1
 800a71a:	e028      	b.n	800a76e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a71c:	2200      	movs	r2, #0
 800a71e:	68b9      	ldr	r1, [r7, #8]
 800a720:	69b8      	ldr	r0, [r7, #24]
 800a722:	f7ff fedc 	bl	800a4de <put_fat>
 800a726:	4603      	mov	r3, r0
 800a728:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a72a:	7ffb      	ldrb	r3, [r7, #31]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <remove_chain+0x88>
 800a730:	7ffb      	ldrb	r3, [r7, #31]
 800a732:	e01c      	b.n	800a76e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	3b02      	subs	r3, #2
 800a73e:	429a      	cmp	r2, r3
 800a740:	d20b      	bcs.n	800a75a <remove_chain+0xae>
			fs->free_clst++;
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	791b      	ldrb	r3, [r3, #4]
 800a750:	f043 0301 	orr.w	r3, r3, #1
 800a754:	b2da      	uxtb	r2, r3
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	429a      	cmp	r2, r3
 800a766:	d3c6      	bcc.n	800a6f6 <remove_chain+0x4a>
 800a768:	e000      	b.n	800a76c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a76a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3720      	adds	r7, #32
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b088      	sub	sp, #32
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10d      	bne.n	800a7a8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d004      	beq.n	800a7a2 <create_chain+0x2c>
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	695b      	ldr	r3, [r3, #20]
 800a79c:	69ba      	ldr	r2, [r7, #24]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d31b      	bcc.n	800a7da <create_chain+0x64>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	61bb      	str	r3, [r7, #24]
 800a7a6:	e018      	b.n	800a7da <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff fdf2 	bl	800a394 <get_fat>
 800a7b0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d801      	bhi.n	800a7bc <create_chain+0x46>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e070      	b.n	800a89e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c2:	d101      	bne.n	800a7c8 <create_chain+0x52>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	e06a      	b.n	800a89e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d201      	bcs.n	800a7d6 <create_chain+0x60>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	e063      	b.n	800a89e <create_chain+0x128>
		scl = clst;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	695b      	ldr	r3, [r3, #20]
 800a7e8:	69fa      	ldr	r2, [r7, #28]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d307      	bcc.n	800a7fe <create_chain+0x88>
				ncl = 2;
 800a7ee:	2302      	movs	r3, #2
 800a7f0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a7f2:	69fa      	ldr	r2, [r7, #28]
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d901      	bls.n	800a7fe <create_chain+0x88>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	e04f      	b.n	800a89e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a7fe:	69f9      	ldr	r1, [r7, #28]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7ff fdc7 	bl	800a394 <get_fat>
 800a806:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00e      	beq.n	800a82c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d003      	beq.n	800a81c <create_chain+0xa6>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81a:	d101      	bne.n	800a820 <create_chain+0xaa>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	e03e      	b.n	800a89e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a820:	69fa      	ldr	r2, [r7, #28]
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	429a      	cmp	r2, r3
 800a826:	d1da      	bne.n	800a7de <create_chain+0x68>
 800a828:	2300      	movs	r3, #0
 800a82a:	e038      	b.n	800a89e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a82c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a82e:	f04f 32ff 	mov.w	r2, #4294967295
 800a832:	69f9      	ldr	r1, [r7, #28]
 800a834:	6938      	ldr	r0, [r7, #16]
 800a836:	f7ff fe52 	bl	800a4de <put_fat>
 800a83a:	4603      	mov	r3, r0
 800a83c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d109      	bne.n	800a858 <create_chain+0xe2>
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d006      	beq.n	800a858 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a84a:	69fa      	ldr	r2, [r7, #28]
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6938      	ldr	r0, [r7, #16]
 800a850:	f7ff fe45 	bl	800a4de <put_fat>
 800a854:	4603      	mov	r3, r0
 800a856:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d116      	bne.n	800a88c <create_chain+0x116>
		fs->last_clst = ncl;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	69fa      	ldr	r2, [r7, #28]
 800a862:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	691a      	ldr	r2, [r3, #16]
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	3b02      	subs	r3, #2
 800a86e:	429a      	cmp	r2, r3
 800a870:	d804      	bhi.n	800a87c <create_chain+0x106>
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	1e5a      	subs	r2, r3, #1
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	791b      	ldrb	r3, [r3, #4]
 800a880:	f043 0301 	orr.w	r3, r3, #1
 800a884:	b2da      	uxtb	r2, r3
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	711a      	strb	r2, [r3, #4]
 800a88a:	e007      	b.n	800a89c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d102      	bne.n	800a898 <create_chain+0x122>
 800a892:	f04f 33ff 	mov.w	r3, #4294967295
 800a896:	e000      	b.n	800a89a <create_chain+0x124>
 800a898:	2301      	movs	r3, #1
 800a89a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a89c:	69fb      	ldr	r3, [r7, #28]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b087      	sub	sp, #28
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	0a5b      	lsrs	r3, r3, #9
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	8952      	ldrh	r2, [r2, #10]
 800a8c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	1d1a      	adds	r2, r3, #4
 800a8d0:	613a      	str	r2, [r7, #16]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <clmt_clust+0x3a>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	e010      	b.n	800a902 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d307      	bcc.n	800a8f8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	617b      	str	r3, [r7, #20]
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a8f6:	e7e9      	b.n	800a8cc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a8f8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	4413      	add	r3, r2
}
 800a902:	4618      	mov	r0, r3
 800a904:	371c      	adds	r7, #28
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b086      	sub	sp, #24
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a924:	d204      	bcs.n	800a930 <dir_sdi+0x22>
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	f003 031f 	and.w	r3, r3, #31
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d001      	beq.n	800a934 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a930:	2302      	movs	r3, #2
 800a932:	e063      	b.n	800a9fc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d106      	bne.n	800a954 <dir_sdi+0x46>
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d902      	bls.n	800a954 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a952:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10c      	bne.n	800a974 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	095b      	lsrs	r3, r3, #5
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	8912      	ldrh	r2, [r2, #8]
 800a962:	4293      	cmp	r3, r2
 800a964:	d301      	bcc.n	800a96a <dir_sdi+0x5c>
 800a966:	2302      	movs	r3, #2
 800a968:	e048      	b.n	800a9fc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	61da      	str	r2, [r3, #28]
 800a972:	e029      	b.n	800a9c8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	895b      	ldrh	r3, [r3, #10]
 800a978:	025b      	lsls	r3, r3, #9
 800a97a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a97c:	e019      	b.n	800a9b2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6979      	ldr	r1, [r7, #20]
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff fd06 	bl	800a394 <get_fat>
 800a988:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a990:	d101      	bne.n	800a996 <dir_sdi+0x88>
 800a992:	2301      	movs	r3, #1
 800a994:	e032      	b.n	800a9fc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d904      	bls.n	800a9a6 <dir_sdi+0x98>
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	695b      	ldr	r3, [r3, #20]
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d301      	bcc.n	800a9aa <dir_sdi+0x9c>
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	e028      	b.n	800a9fc <dir_sdi+0xee>
			ofs -= csz;
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d2e1      	bcs.n	800a97e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a9ba:	6979      	ldr	r1, [r7, #20]
 800a9bc:	6938      	ldr	r0, [r7, #16]
 800a9be:	f7ff fcca 	bl	800a356 <clust2sect>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	69db      	ldr	r3, [r3, #28]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <dir_sdi+0xcc>
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	e010      	b.n	800a9fc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	69da      	ldr	r2, [r3, #28]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	0a5b      	lsrs	r3, r3, #9
 800a9e2:	441a      	add	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f4:	441a      	add	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3718      	adds	r7, #24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	695b      	ldr	r3, [r3, #20]
 800aa18:	3320      	adds	r3, #32
 800aa1a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d003      	beq.n	800aa2c <dir_next+0x28>
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa2a:	d301      	bcc.n	800aa30 <dir_next+0x2c>
 800aa2c:	2304      	movs	r3, #4
 800aa2e:	e0aa      	b.n	800ab86 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f040 8098 	bne.w	800ab6c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	69db      	ldr	r3, [r3, #28]
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10b      	bne.n	800aa66 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	095b      	lsrs	r3, r3, #5
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	8912      	ldrh	r2, [r2, #8]
 800aa56:	4293      	cmp	r3, r2
 800aa58:	f0c0 8088 	bcc.w	800ab6c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	61da      	str	r2, [r3, #28]
 800aa62:	2304      	movs	r3, #4
 800aa64:	e08f      	b.n	800ab86 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	0a5b      	lsrs	r3, r3, #9
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	8952      	ldrh	r2, [r2, #10]
 800aa6e:	3a01      	subs	r2, #1
 800aa70:	4013      	ands	r3, r2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d17a      	bne.n	800ab6c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4610      	mov	r0, r2
 800aa80:	f7ff fc88 	bl	800a394 <get_fat>
 800aa84:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d801      	bhi.n	800aa90 <dir_next+0x8c>
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	e07a      	b.n	800ab86 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa96:	d101      	bne.n	800aa9c <dir_next+0x98>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e074      	b.n	800ab86 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d358      	bcc.n	800ab58 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d104      	bne.n	800aab6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	61da      	str	r2, [r3, #28]
 800aab2:	2304      	movs	r3, #4
 800aab4:	e067      	b.n	800ab86 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	4619      	mov	r1, r3
 800aabe:	4610      	mov	r0, r2
 800aac0:	f7ff fe59 	bl	800a776 <create_chain>
 800aac4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <dir_next+0xcc>
 800aacc:	2307      	movs	r3, #7
 800aace:	e05a      	b.n	800ab86 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d101      	bne.n	800aada <dir_next+0xd6>
 800aad6:	2302      	movs	r3, #2
 800aad8:	e055      	b.n	800ab86 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae0:	d101      	bne.n	800aae6 <dir_next+0xe2>
 800aae2:	2301      	movs	r3, #1
 800aae4:	e04f      	b.n	800ab86 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7ff fbc4 	bl	800a274 <sync_window>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <dir_next+0xf2>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e047      	b.n	800ab86 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3330      	adds	r3, #48	; 0x30
 800aafa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aafe:	2100      	movs	r1, #0
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff fa2a 	bl	8009f5a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab06:	2300      	movs	r3, #0
 800ab08:	613b      	str	r3, [r7, #16]
 800ab0a:	6979      	ldr	r1, [r7, #20]
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f7ff fc22 	bl	800a356 <clust2sect>
 800ab12:	4602      	mov	r2, r0
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	62da      	str	r2, [r3, #44]	; 0x2c
 800ab18:	e012      	b.n	800ab40 <dir_next+0x13c>
						fs->wflag = 1;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f7ff fba7 	bl	800a274 <sync_window>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <dir_next+0x12c>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e02a      	b.n	800ab86 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	3301      	adds	r3, #1
 800ab34:	613b      	str	r3, [r7, #16]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3a:	1c5a      	adds	r2, r3, #1
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	62da      	str	r2, [r3, #44]	; 0x2c
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	895b      	ldrh	r3, [r3, #10]
 800ab44:	461a      	mov	r2, r3
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d3e6      	bcc.n	800ab1a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	1ad2      	subs	r2, r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ab5e:	6979      	ldr	r1, [r7, #20]
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f7ff fbf8 	bl	800a356 <clust2sect>
 800ab66:	4602      	mov	r2, r0
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7e:	441a      	add	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3718      	adds	r7, #24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b086      	sub	sp, #24
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ab9e:	2100      	movs	r1, #0
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff feb4 	bl	800a90e <dir_sdi>
 800aba6:	4603      	mov	r3, r0
 800aba8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800abaa:	7dfb      	ldrb	r3, [r7, #23]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d12b      	bne.n	800ac08 <dir_alloc+0x7a>
		n = 0;
 800abb0:	2300      	movs	r3, #0
 800abb2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	69db      	ldr	r3, [r3, #28]
 800abb8:	4619      	mov	r1, r3
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7ff fb9e 	bl	800a2fc <move_window>
 800abc0:	4603      	mov	r3, r0
 800abc2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d11d      	bne.n	800ac06 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2be5      	cmp	r3, #229	; 0xe5
 800abd2:	d004      	beq.n	800abde <dir_alloc+0x50>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d107      	bne.n	800abee <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	3301      	adds	r3, #1
 800abe2:	613b      	str	r3, [r7, #16]
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d102      	bne.n	800abf2 <dir_alloc+0x64>
 800abec:	e00c      	b.n	800ac08 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800abee:	2300      	movs	r3, #0
 800abf0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800abf2:	2101      	movs	r1, #1
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7ff ff05 	bl	800aa04 <dir_next>
 800abfa:	4603      	mov	r3, r0
 800abfc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d0d7      	beq.n	800abb4 <dir_alloc+0x26>
 800ac04:	e000      	b.n	800ac08 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ac06:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ac08:	7dfb      	ldrb	r3, [r7, #23]
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	d101      	bne.n	800ac12 <dir_alloc+0x84>
 800ac0e:	2307      	movs	r3, #7
 800ac10:	75fb      	strb	r3, [r7, #23]
	return res;
 800ac12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3718      	adds	r7, #24
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	331a      	adds	r3, #26
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff f8f2 	bl	8009e14 <ld_word>
 800ac30:	4603      	mov	r3, r0
 800ac32:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d109      	bne.n	800ac50 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	3314      	adds	r3, #20
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7ff f8e7 	bl	8009e14 <ld_word>
 800ac46:	4603      	mov	r3, r0
 800ac48:	041b      	lsls	r3, r3, #16
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ac50:	68fb      	ldr	r3, [r7, #12]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	331a      	adds	r3, #26
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	b292      	uxth	r2, r2
 800ac6e:	4611      	mov	r1, r2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff f90a 	bl	8009e8a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d109      	bne.n	800ac92 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f103 0214 	add.w	r2, r3, #20
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	0c1b      	lsrs	r3, r3, #16
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	f7ff f8fc 	bl	8009e8a <st_word>
	}
}
 800ac92:	bf00      	nop
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b086      	sub	sp, #24
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aca8:	2100      	movs	r1, #0
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff fe2f 	bl	800a90e <dir_sdi>
 800acb0:	4603      	mov	r3, r0
 800acb2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800acb4:	7dfb      	ldrb	r3, [r7, #23]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <dir_find+0x24>
 800acba:	7dfb      	ldrb	r3, [r7, #23]
 800acbc:	e03e      	b.n	800ad3c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	69db      	ldr	r3, [r3, #28]
 800acc2:	4619      	mov	r1, r3
 800acc4:	6938      	ldr	r0, [r7, #16]
 800acc6:	f7ff fb19 	bl	800a2fc <move_window>
 800acca:	4603      	mov	r3, r0
 800accc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800acce:	7dfb      	ldrb	r3, [r7, #23]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d12f      	bne.n	800ad34 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800acdc:	7bfb      	ldrb	r3, [r7, #15]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d102      	bne.n	800ace8 <dir_find+0x4e>
 800ace2:	2304      	movs	r3, #4
 800ace4:	75fb      	strb	r3, [r7, #23]
 800ace6:	e028      	b.n	800ad3a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a1b      	ldr	r3, [r3, #32]
 800acec:	330b      	adds	r3, #11
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	330b      	adds	r3, #11
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	f003 0308 	and.w	r3, r3, #8
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10a      	bne.n	800ad20 <dir_find+0x86>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a18      	ldr	r0, [r3, #32]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3324      	adds	r3, #36	; 0x24
 800ad12:	220b      	movs	r2, #11
 800ad14:	4619      	mov	r1, r3
 800ad16:	f7ff f93a 	bl	8009f8e <mem_cmp>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00b      	beq.n	800ad38 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ad20:	2100      	movs	r1, #0
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff fe6e 	bl	800aa04 <dir_next>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0c5      	beq.n	800acbe <dir_find+0x24>
 800ad32:	e002      	b.n	800ad3a <dir_find+0xa0>
		if (res != FR_OK) break;
 800ad34:	bf00      	nop
 800ad36:	e000      	b.n	800ad3a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ad38:	bf00      	nop

	return res;
 800ad3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ad52:	2101      	movs	r1, #1
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff ff1a 	bl	800ab8e <dir_alloc>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ad5e:	7bfb      	ldrb	r3, [r7, #15]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d11c      	bne.n	800ad9e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	69db      	ldr	r3, [r3, #28]
 800ad68:	4619      	mov	r1, r3
 800ad6a:	68b8      	ldr	r0, [r7, #8]
 800ad6c:	f7ff fac6 	bl	800a2fc <move_window>
 800ad70:	4603      	mov	r3, r0
 800ad72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d111      	bne.n	800ad9e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	2220      	movs	r2, #32
 800ad80:	2100      	movs	r1, #0
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7ff f8e9 	bl	8009f5a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a18      	ldr	r0, [r3, #32]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3324      	adds	r3, #36	; 0x24
 800ad90:	220b      	movs	r2, #11
 800ad92:	4619      	mov	r1, r3
 800ad94:	f7ff f8c0 	bl	8009f18 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ad9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b088      	sub	sp, #32
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	60fb      	str	r3, [r7, #12]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	3324      	adds	r3, #36	; 0x24
 800adbc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800adbe:	220b      	movs	r2, #11
 800adc0:	2120      	movs	r1, #32
 800adc2:	68b8      	ldr	r0, [r7, #8]
 800adc4:	f7ff f8c9 	bl	8009f5a <mem_set>
	si = i = 0; ni = 8;
 800adc8:	2300      	movs	r3, #0
 800adca:	613b      	str	r3, [r7, #16]
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	617b      	str	r3, [r7, #20]
 800add0:	2308      	movs	r3, #8
 800add2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	1c5a      	adds	r2, r3, #1
 800add8:	617a      	str	r2, [r7, #20]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	4413      	add	r3, r2
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ade2:	7ffb      	ldrb	r3, [r7, #31]
 800ade4:	2b20      	cmp	r3, #32
 800ade6:	d94e      	bls.n	800ae86 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ade8:	7ffb      	ldrb	r3, [r7, #31]
 800adea:	2b2f      	cmp	r3, #47	; 0x2f
 800adec:	d006      	beq.n	800adfc <create_name+0x54>
 800adee:	7ffb      	ldrb	r3, [r7, #31]
 800adf0:	2b5c      	cmp	r3, #92	; 0x5c
 800adf2:	d110      	bne.n	800ae16 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800adf4:	e002      	b.n	800adfc <create_name+0x54>
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	3301      	adds	r3, #1
 800adfa:	617b      	str	r3, [r7, #20]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	4413      	add	r3, r2
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	2b2f      	cmp	r3, #47	; 0x2f
 800ae06:	d0f6      	beq.n	800adf6 <create_name+0x4e>
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	2b5c      	cmp	r3, #92	; 0x5c
 800ae12:	d0f0      	beq.n	800adf6 <create_name+0x4e>
			break;
 800ae14:	e038      	b.n	800ae88 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ae16:	7ffb      	ldrb	r3, [r7, #31]
 800ae18:	2b2e      	cmp	r3, #46	; 0x2e
 800ae1a:	d003      	beq.n	800ae24 <create_name+0x7c>
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d30c      	bcc.n	800ae3e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	2b0b      	cmp	r3, #11
 800ae28:	d002      	beq.n	800ae30 <create_name+0x88>
 800ae2a:	7ffb      	ldrb	r3, [r7, #31]
 800ae2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae2e:	d001      	beq.n	800ae34 <create_name+0x8c>
 800ae30:	2306      	movs	r3, #6
 800ae32:	e044      	b.n	800aebe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ae34:	2308      	movs	r3, #8
 800ae36:	613b      	str	r3, [r7, #16]
 800ae38:	230b      	movs	r3, #11
 800ae3a:	61bb      	str	r3, [r7, #24]
			continue;
 800ae3c:	e022      	b.n	800ae84 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ae3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	da04      	bge.n	800ae50 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ae46:	7ffb      	ldrb	r3, [r7, #31]
 800ae48:	3b80      	subs	r3, #128	; 0x80
 800ae4a:	4a1f      	ldr	r2, [pc, #124]	; (800aec8 <create_name+0x120>)
 800ae4c:	5cd3      	ldrb	r3, [r2, r3]
 800ae4e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ae50:	7ffb      	ldrb	r3, [r7, #31]
 800ae52:	4619      	mov	r1, r3
 800ae54:	481d      	ldr	r0, [pc, #116]	; (800aecc <create_name+0x124>)
 800ae56:	f7ff f8c1 	bl	8009fdc <chk_chr>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d001      	beq.n	800ae64 <create_name+0xbc>
 800ae60:	2306      	movs	r3, #6
 800ae62:	e02c      	b.n	800aebe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ae64:	7ffb      	ldrb	r3, [r7, #31]
 800ae66:	2b60      	cmp	r3, #96	; 0x60
 800ae68:	d905      	bls.n	800ae76 <create_name+0xce>
 800ae6a:	7ffb      	ldrb	r3, [r7, #31]
 800ae6c:	2b7a      	cmp	r3, #122	; 0x7a
 800ae6e:	d802      	bhi.n	800ae76 <create_name+0xce>
 800ae70:	7ffb      	ldrb	r3, [r7, #31]
 800ae72:	3b20      	subs	r3, #32
 800ae74:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	613a      	str	r2, [r7, #16]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	4413      	add	r3, r2
 800ae80:	7ffa      	ldrb	r2, [r7, #31]
 800ae82:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ae84:	e7a6      	b.n	800add4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ae86:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	441a      	add	r2, r3
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <create_name+0xf4>
 800ae98:	2306      	movs	r3, #6
 800ae9a:	e010      	b.n	800aebe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2be5      	cmp	r3, #229	; 0xe5
 800aea2:	d102      	bne.n	800aeaa <create_name+0x102>
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2205      	movs	r2, #5
 800aea8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aeaa:	7ffb      	ldrb	r3, [r7, #31]
 800aeac:	2b20      	cmp	r3, #32
 800aeae:	d801      	bhi.n	800aeb4 <create_name+0x10c>
 800aeb0:	2204      	movs	r2, #4
 800aeb2:	e000      	b.n	800aeb6 <create_name+0x10e>
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	330b      	adds	r3, #11
 800aeba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800aebc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3720      	adds	r7, #32
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	0800d004 	.word	0x0800d004
 800aecc:	0800cf58 	.word	0x0800cf58

0800aed0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aee4:	e002      	b.n	800aeec <follow_path+0x1c>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	3301      	adds	r3, #1
 800aeea:	603b      	str	r3, [r7, #0]
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b2f      	cmp	r3, #47	; 0x2f
 800aef2:	d0f8      	beq.n	800aee6 <follow_path+0x16>
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b5c      	cmp	r3, #92	; 0x5c
 800aefa:	d0f4      	beq.n	800aee6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	2200      	movs	r2, #0
 800af00:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2b1f      	cmp	r3, #31
 800af08:	d80a      	bhi.n	800af20 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2280      	movs	r2, #128	; 0x80
 800af0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800af12:	2100      	movs	r1, #0
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff fcfa 	bl	800a90e <dir_sdi>
 800af1a:	4603      	mov	r3, r0
 800af1c:	75fb      	strb	r3, [r7, #23]
 800af1e:	e043      	b.n	800afa8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af20:	463b      	mov	r3, r7
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff ff3f 	bl	800ada8 <create_name>
 800af2a:	4603      	mov	r3, r0
 800af2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800af2e:	7dfb      	ldrb	r3, [r7, #23]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d134      	bne.n	800af9e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7ff feb0 	bl	800ac9a <dir_find>
 800af3a:	4603      	mov	r3, r0
 800af3c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af44:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800af46:	7dfb      	ldrb	r3, [r7, #23]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
 800af4e:	2b04      	cmp	r3, #4
 800af50:	d127      	bne.n	800afa2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800af52:	7afb      	ldrb	r3, [r7, #11]
 800af54:	f003 0304 	and.w	r3, r3, #4
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d122      	bne.n	800afa2 <follow_path+0xd2>
 800af5c:	2305      	movs	r3, #5
 800af5e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800af60:	e01f      	b.n	800afa2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af62:	7afb      	ldrb	r3, [r7, #11]
 800af64:	f003 0304 	and.w	r3, r3, #4
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d11c      	bne.n	800afa6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	799b      	ldrb	r3, [r3, #6]
 800af70:	f003 0310 	and.w	r3, r3, #16
 800af74:	2b00      	cmp	r3, #0
 800af76:	d102      	bne.n	800af7e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800af78:	2305      	movs	r3, #5
 800af7a:	75fb      	strb	r3, [r7, #23]
 800af7c:	e014      	b.n	800afa8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	695b      	ldr	r3, [r3, #20]
 800af88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8c:	4413      	add	r3, r2
 800af8e:	4619      	mov	r1, r3
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f7ff fe43 	bl	800ac1c <ld_clust>
 800af96:	4602      	mov	r2, r0
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af9c:	e7c0      	b.n	800af20 <follow_path+0x50>
			if (res != FR_OK) break;
 800af9e:	bf00      	nop
 800afa0:	e002      	b.n	800afa8 <follow_path+0xd8>
				break;
 800afa2:	bf00      	nop
 800afa4:	e000      	b.n	800afa8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800afa6:	bf00      	nop
			}
		}
	}

	return res;
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800afb2:	b480      	push	{r7}
 800afb4:	b087      	sub	sp, #28
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800afba:	f04f 33ff 	mov.w	r3, #4294967295
 800afbe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d031      	beq.n	800b02c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	617b      	str	r3, [r7, #20]
 800afce:	e002      	b.n	800afd6 <get_ldnumber+0x24>
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	3301      	adds	r3, #1
 800afd4:	617b      	str	r3, [r7, #20]
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	2b20      	cmp	r3, #32
 800afdc:	d903      	bls.n	800afe6 <get_ldnumber+0x34>
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	2b3a      	cmp	r3, #58	; 0x3a
 800afe4:	d1f4      	bne.n	800afd0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2b3a      	cmp	r3, #58	; 0x3a
 800afec:	d11c      	bne.n	800b028 <get_ldnumber+0x76>
			tp = *path;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	1c5a      	adds	r2, r3, #1
 800aff8:	60fa      	str	r2, [r7, #12]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	3b30      	subs	r3, #48	; 0x30
 800affe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2b09      	cmp	r3, #9
 800b004:	d80e      	bhi.n	800b024 <get_ldnumber+0x72>
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d10a      	bne.n	800b024 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d107      	bne.n	800b024 <get_ldnumber+0x72>
					vol = (int)i;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	3301      	adds	r3, #1
 800b01c:	617b      	str	r3, [r7, #20]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	e002      	b.n	800b02e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b028:	2300      	movs	r3, #0
 800b02a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b02c:	693b      	ldr	r3, [r7, #16]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	371c      	adds	r7, #28
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
	...

0800b03c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	70da      	strb	r2, [r3, #3]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f04f 32ff 	mov.w	r2, #4294967295
 800b052:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7ff f950 	bl	800a2fc <move_window>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <check_fs+0x2a>
 800b062:	2304      	movs	r3, #4
 800b064:	e038      	b.n	800b0d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	3330      	adds	r3, #48	; 0x30
 800b06a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe fed0 	bl	8009e14 <ld_word>
 800b074:	4603      	mov	r3, r0
 800b076:	461a      	mov	r2, r3
 800b078:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d001      	beq.n	800b084 <check_fs+0x48>
 800b080:	2303      	movs	r3, #3
 800b082:	e029      	b.n	800b0d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b08a:	2be9      	cmp	r3, #233	; 0xe9
 800b08c:	d009      	beq.n	800b0a2 <check_fs+0x66>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b094:	2beb      	cmp	r3, #235	; 0xeb
 800b096:	d11e      	bne.n	800b0d6 <check_fs+0x9a>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b09e:	2b90      	cmp	r3, #144	; 0x90
 800b0a0:	d119      	bne.n	800b0d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	3330      	adds	r3, #48	; 0x30
 800b0a6:	3336      	adds	r3, #54	; 0x36
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fe fecb 	bl	8009e44 <ld_dword>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b0b4:	4a0a      	ldr	r2, [pc, #40]	; (800b0e0 <check_fs+0xa4>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d101      	bne.n	800b0be <check_fs+0x82>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	e00c      	b.n	800b0d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	3330      	adds	r3, #48	; 0x30
 800b0c2:	3352      	adds	r3, #82	; 0x52
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fe febd 	bl	8009e44 <ld_dword>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	4b05      	ldr	r3, [pc, #20]	; (800b0e4 <check_fs+0xa8>)
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d101      	bne.n	800b0d6 <check_fs+0x9a>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e000      	b.n	800b0d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b0d6:	2302      	movs	r3, #2
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	00544146 	.word	0x00544146
 800b0e4:	33544146 	.word	0x33544146

0800b0e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b096      	sub	sp, #88	; 0x58
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f7ff ff58 	bl	800afb2 <get_ldnumber>
 800b102:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b106:	2b00      	cmp	r3, #0
 800b108:	da01      	bge.n	800b10e <find_volume+0x26>
 800b10a:	230b      	movs	r3, #11
 800b10c:	e22e      	b.n	800b56c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b10e:	4aa8      	ldr	r2, [pc, #672]	; (800b3b0 <find_volume+0x2c8>)
 800b110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b116:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <find_volume+0x3a>
 800b11e:	230c      	movs	r3, #12
 800b120:	e224      	b.n	800b56c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b126:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b128:	79fb      	ldrb	r3, [r7, #7]
 800b12a:	f023 0301 	bic.w	r3, r3, #1
 800b12e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d01a      	beq.n	800b16e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	785b      	ldrb	r3, [r3, #1]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fe fde9 	bl	8009d14 <disk_status>
 800b142:	4603      	mov	r3, r0
 800b144:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b14c:	f003 0301 	and.w	r3, r3, #1
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10c      	bne.n	800b16e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d007      	beq.n	800b16a <find_volume+0x82>
 800b15a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b15e:	f003 0304 	and.w	r3, r3, #4
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b166:	230a      	movs	r3, #10
 800b168:	e200      	b.n	800b56c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b16a:	2300      	movs	r3, #0
 800b16c:	e1fe      	b.n	800b56c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	2200      	movs	r2, #0
 800b172:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b176:	b2da      	uxtb	r2, r3
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	785b      	ldrb	r3, [r3, #1]
 800b180:	4618      	mov	r0, r3
 800b182:	f7fe fde1 	bl	8009d48 <disk_initialize>
 800b186:	4603      	mov	r3, r0
 800b188:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b18c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b190:	f003 0301 	and.w	r3, r3, #1
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b198:	2303      	movs	r3, #3
 800b19a:	e1e7      	b.n	800b56c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b19c:	79fb      	ldrb	r3, [r7, #7]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d007      	beq.n	800b1b2 <find_volume+0xca>
 800b1a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1a6:	f003 0304 	and.w	r3, r3, #4
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b1ae:	230a      	movs	r3, #10
 800b1b0:	e1dc      	b.n	800b56c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b1b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b1ba:	f7ff ff3f 	bl	800b03c <check_fs>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b1c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d14b      	bne.n	800b264 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	643b      	str	r3, [r7, #64]	; 0x40
 800b1d0:	e01f      	b.n	800b212 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1da:	011b      	lsls	r3, r3, #4
 800b1dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b1e0:	4413      	add	r3, r2
 800b1e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d006      	beq.n	800b1fc <find_volume+0x114>
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	3308      	adds	r3, #8
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe fe26 	bl	8009e44 <ld_dword>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	e000      	b.n	800b1fe <find_volume+0x116>
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b206:	440b      	add	r3, r1
 800b208:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b20c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b20e:	3301      	adds	r3, #1
 800b210:	643b      	str	r3, [r7, #64]	; 0x40
 800b212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b214:	2b03      	cmp	r3, #3
 800b216:	d9dc      	bls.n	800b1d2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b218:	2300      	movs	r3, #0
 800b21a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b21c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d002      	beq.n	800b228 <find_volume+0x140>
 800b222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b224:	3b01      	subs	r3, #1
 800b226:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b230:	4413      	add	r3, r2
 800b232:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b236:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d005      	beq.n	800b24a <find_volume+0x162>
 800b23e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b240:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b242:	f7ff fefb 	bl	800b03c <check_fs>
 800b246:	4603      	mov	r3, r0
 800b248:	e000      	b.n	800b24c <find_volume+0x164>
 800b24a:	2303      	movs	r3, #3
 800b24c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b254:	2b01      	cmp	r3, #1
 800b256:	d905      	bls.n	800b264 <find_volume+0x17c>
 800b258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b25a:	3301      	adds	r3, #1
 800b25c:	643b      	str	r3, [r7, #64]	; 0x40
 800b25e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b260:	2b03      	cmp	r3, #3
 800b262:	d9e1      	bls.n	800b228 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b268:	2b04      	cmp	r3, #4
 800b26a:	d101      	bne.n	800b270 <find_volume+0x188>
 800b26c:	2301      	movs	r3, #1
 800b26e:	e17d      	b.n	800b56c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b270:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b274:	2b01      	cmp	r3, #1
 800b276:	d901      	bls.n	800b27c <find_volume+0x194>
 800b278:	230d      	movs	r3, #13
 800b27a:	e177      	b.n	800b56c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27e:	3330      	adds	r3, #48	; 0x30
 800b280:	330b      	adds	r3, #11
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe fdc6 	bl	8009e14 <ld_word>
 800b288:	4603      	mov	r3, r0
 800b28a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b28e:	d001      	beq.n	800b294 <find_volume+0x1ac>
 800b290:	230d      	movs	r3, #13
 800b292:	e16b      	b.n	800b56c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b296:	3330      	adds	r3, #48	; 0x30
 800b298:	3316      	adds	r3, #22
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe fdba 	bl	8009e14 <ld_word>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d106      	bne.n	800b2b8 <find_volume+0x1d0>
 800b2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ac:	3330      	adds	r3, #48	; 0x30
 800b2ae:	3324      	adds	r3, #36	; 0x24
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7fe fdc7 	bl	8009e44 <ld_dword>
 800b2b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2bc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	789b      	ldrb	r3, [r3, #2]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d005      	beq.n	800b2dc <find_volume+0x1f4>
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	789b      	ldrb	r3, [r3, #2]
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d001      	beq.n	800b2dc <find_volume+0x1f4>
 800b2d8:	230d      	movs	r3, #13
 800b2da:	e147      	b.n	800b56c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	789b      	ldrb	r3, [r3, #2]
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2e4:	fb02 f303 	mul.w	r3, r2, r3
 800b2e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f8:	895b      	ldrh	r3, [r3, #10]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d008      	beq.n	800b310 <find_volume+0x228>
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b300:	895b      	ldrh	r3, [r3, #10]
 800b302:	461a      	mov	r2, r3
 800b304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b306:	895b      	ldrh	r3, [r3, #10]
 800b308:	3b01      	subs	r3, #1
 800b30a:	4013      	ands	r3, r2
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <find_volume+0x22c>
 800b310:	230d      	movs	r3, #13
 800b312:	e12b      	b.n	800b56c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b316:	3330      	adds	r3, #48	; 0x30
 800b318:	3311      	adds	r3, #17
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe fd7a 	bl	8009e14 <ld_word>
 800b320:	4603      	mov	r3, r0
 800b322:	461a      	mov	r2, r3
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	891b      	ldrh	r3, [r3, #8]
 800b32c:	f003 030f 	and.w	r3, r3, #15
 800b330:	b29b      	uxth	r3, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <find_volume+0x252>
 800b336:	230d      	movs	r3, #13
 800b338:	e118      	b.n	800b56c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	3330      	adds	r3, #48	; 0x30
 800b33e:	3313      	adds	r3, #19
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe fd67 	bl	8009e14 <ld_word>
 800b346:	4603      	mov	r3, r0
 800b348:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b34a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d106      	bne.n	800b35e <find_volume+0x276>
 800b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b352:	3330      	adds	r3, #48	; 0x30
 800b354:	3320      	adds	r3, #32
 800b356:	4618      	mov	r0, r3
 800b358:	f7fe fd74 	bl	8009e44 <ld_dword>
 800b35c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b360:	3330      	adds	r3, #48	; 0x30
 800b362:	330e      	adds	r3, #14
 800b364:	4618      	mov	r0, r3
 800b366:	f7fe fd55 	bl	8009e14 <ld_word>
 800b36a:	4603      	mov	r3, r0
 800b36c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b36e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <find_volume+0x290>
 800b374:	230d      	movs	r3, #13
 800b376:	e0f9      	b.n	800b56c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b378:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b37c:	4413      	add	r3, r2
 800b37e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b380:	8912      	ldrh	r2, [r2, #8]
 800b382:	0912      	lsrs	r2, r2, #4
 800b384:	b292      	uxth	r2, r2
 800b386:	4413      	add	r3, r2
 800b388:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b38a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38e:	429a      	cmp	r2, r3
 800b390:	d201      	bcs.n	800b396 <find_volume+0x2ae>
 800b392:	230d      	movs	r3, #13
 800b394:	e0ea      	b.n	800b56c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b39e:	8952      	ldrh	r2, [r2, #10]
 800b3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d103      	bne.n	800b3b4 <find_volume+0x2cc>
 800b3ac:	230d      	movs	r3, #13
 800b3ae:	e0dd      	b.n	800b56c <find_volume+0x484>
 800b3b0:	200001ec 	.word	0x200001ec
		fmt = FS_FAT32;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d802      	bhi.n	800b3ca <find_volume+0x2e2>
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d802      	bhi.n	800b3da <find_volume+0x2f2>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	1c9a      	adds	r2, r3, #2
 800b3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3e6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b3e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3ec:	441a      	add	r2, r3
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b3f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f6:	441a      	add	r2, r3
 800b3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fa:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b3fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b400:	2b03      	cmp	r3, #3
 800b402:	d11e      	bne.n	800b442 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	3330      	adds	r3, #48	; 0x30
 800b408:	332a      	adds	r3, #42	; 0x2a
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fe fd02 	bl	8009e14 <ld_word>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d001      	beq.n	800b41a <find_volume+0x332>
 800b416:	230d      	movs	r3, #13
 800b418:	e0a8      	b.n	800b56c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	891b      	ldrh	r3, [r3, #8]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <find_volume+0x33e>
 800b422:	230d      	movs	r3, #13
 800b424:	e0a2      	b.n	800b56c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	3330      	adds	r3, #48	; 0x30
 800b42a:	332c      	adds	r3, #44	; 0x2c
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fe fd09 	bl	8009e44 <ld_dword>
 800b432:	4602      	mov	r2, r0
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	695b      	ldr	r3, [r3, #20]
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	647b      	str	r3, [r7, #68]	; 0x44
 800b440:	e01f      	b.n	800b482 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b444:	891b      	ldrh	r3, [r3, #8]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <find_volume+0x366>
 800b44a:	230d      	movs	r3, #13
 800b44c:	e08e      	b.n	800b56c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b450:	6a1a      	ldr	r2, [r3, #32]
 800b452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b454:	441a      	add	r2, r3
 800b456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b458:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b45a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d103      	bne.n	800b46a <find_volume+0x382>
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	005b      	lsls	r3, r3, #1
 800b468:	e00a      	b.n	800b480 <find_volume+0x398>
 800b46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46c:	695a      	ldr	r2, [r3, #20]
 800b46e:	4613      	mov	r3, r2
 800b470:	005b      	lsls	r3, r3, #1
 800b472:	4413      	add	r3, r2
 800b474:	085a      	lsrs	r2, r3, #1
 800b476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	f003 0301 	and.w	r3, r3, #1
 800b47e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b480:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b484:	699a      	ldr	r2, [r3, #24]
 800b486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b488:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b48c:	0a5b      	lsrs	r3, r3, #9
 800b48e:	429a      	cmp	r2, r3
 800b490:	d201      	bcs.n	800b496 <find_volume+0x3ae>
 800b492:	230d      	movs	r3, #13
 800b494:	e06a      	b.n	800b56c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b498:	f04f 32ff 	mov.w	r2, #4294967295
 800b49c:	611a      	str	r2, [r3, #16]
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	691a      	ldr	r2, [r3, #16]
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	2280      	movs	r2, #128	; 0x80
 800b4aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b4ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	d149      	bne.n	800b548 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	3330      	adds	r3, #48	; 0x30
 800b4b8:	3330      	adds	r3, #48	; 0x30
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fe fcaa 	bl	8009e14 <ld_word>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d140      	bne.n	800b548 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4ce:	f7fe ff15 	bl	800a2fc <move_window>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d137      	bne.n	800b548 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4da:	2200      	movs	r2, #0
 800b4dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e0:	3330      	adds	r3, #48	; 0x30
 800b4e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fe fc94 	bl	8009e14 <ld_word>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d127      	bne.n	800b548 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fa:	3330      	adds	r3, #48	; 0x30
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fe fca1 	bl	8009e44 <ld_dword>
 800b502:	4602      	mov	r2, r0
 800b504:	4b1b      	ldr	r3, [pc, #108]	; (800b574 <find_volume+0x48c>)
 800b506:	429a      	cmp	r2, r3
 800b508:	d11e      	bne.n	800b548 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50c:	3330      	adds	r3, #48	; 0x30
 800b50e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b512:	4618      	mov	r0, r3
 800b514:	f7fe fc96 	bl	8009e44 <ld_dword>
 800b518:	4602      	mov	r2, r0
 800b51a:	4b17      	ldr	r3, [pc, #92]	; (800b578 <find_volume+0x490>)
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d113      	bne.n	800b548 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b522:	3330      	adds	r3, #48	; 0x30
 800b524:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe fc8b 	bl	8009e44 <ld_dword>
 800b52e:	4602      	mov	r2, r0
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b536:	3330      	adds	r3, #48	; 0x30
 800b538:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fe fc81 	bl	8009e44 <ld_dword>
 800b542:	4602      	mov	r2, r0
 800b544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b546:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b54e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b550:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <find_volume+0x494>)
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	b29a      	uxth	r2, r3
 800b558:	4b08      	ldr	r3, [pc, #32]	; (800b57c <find_volume+0x494>)
 800b55a:	801a      	strh	r2, [r3, #0]
 800b55c:	4b07      	ldr	r3, [pc, #28]	; (800b57c <find_volume+0x494>)
 800b55e:	881a      	ldrh	r2, [r3, #0]
 800b560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b562:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b564:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b566:	f7fe fe61 	bl	800a22c <clear_lock>
#endif
	return FR_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3758      	adds	r7, #88	; 0x58
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	41615252 	.word	0x41615252
 800b578:	61417272 	.word	0x61417272
 800b57c:	200001f0 	.word	0x200001f0

0800b580 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b58a:	2309      	movs	r3, #9
 800b58c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d01c      	beq.n	800b5ce <validate+0x4e>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d018      	beq.n	800b5ce <validate+0x4e>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d013      	beq.n	800b5ce <validate+0x4e>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	889a      	ldrh	r2, [r3, #4]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	88db      	ldrh	r3, [r3, #6]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d10c      	bne.n	800b5ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	785b      	ldrb	r3, [r3, #1]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe fbaa 	bl	8009d14 <disk_status>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <validate+0x4e>
			res = FR_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <validate+0x5a>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	e000      	b.n	800b5dc <validate+0x5c>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	6013      	str	r3, [r2, #0]
	return res;
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
	...

0800b5ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b088      	sub	sp, #32
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b5fe:	f107 0310 	add.w	r3, r7, #16
 800b602:	4618      	mov	r0, r3
 800b604:	f7ff fcd5 	bl	800afb2 <get_ldnumber>
 800b608:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	da01      	bge.n	800b614 <f_mount+0x28>
 800b610:	230b      	movs	r3, #11
 800b612:	e02b      	b.n	800b66c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b614:	4a17      	ldr	r2, [pc, #92]	; (800b674 <f_mount+0x88>)
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b61c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d005      	beq.n	800b630 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b624:	69b8      	ldr	r0, [r7, #24]
 800b626:	f7fe fe01 	bl	800a22c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	2200      	movs	r2, #0
 800b62e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d002      	beq.n	800b63c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	490d      	ldr	r1, [pc, #52]	; (800b674 <f_mount+0x88>)
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <f_mount+0x66>
 800b64c:	79fb      	ldrb	r3, [r7, #7]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d001      	beq.n	800b656 <f_mount+0x6a>
 800b652:	2300      	movs	r3, #0
 800b654:	e00a      	b.n	800b66c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b656:	f107 010c 	add.w	r1, r7, #12
 800b65a:	f107 0308 	add.w	r3, r7, #8
 800b65e:	2200      	movs	r2, #0
 800b660:	4618      	mov	r0, r3
 800b662:	f7ff fd41 	bl	800b0e8 <find_volume>
 800b666:	4603      	mov	r3, r0
 800b668:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b66a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3720      	adds	r7, #32
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	200001ec 	.word	0x200001ec

0800b678 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b098      	sub	sp, #96	; 0x60
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	4613      	mov	r3, r2
 800b684:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d101      	bne.n	800b690 <f_open+0x18>
 800b68c:	2309      	movs	r3, #9
 800b68e:	e1ad      	b.n	800b9ec <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b690:	79fb      	ldrb	r3, [r7, #7]
 800b692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b696:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b698:	79fa      	ldrb	r2, [r7, #7]
 800b69a:	f107 0110 	add.w	r1, r7, #16
 800b69e:	f107 0308 	add.w	r3, r7, #8
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7ff fd20 	bl	800b0e8 <find_volume>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b6ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f040 8191 	bne.w	800b9da <f_open+0x362>
		dj.obj.fs = fs;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	f107 0314 	add.w	r3, r7, #20
 800b6c2:	4611      	mov	r1, r2
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff fc03 	bl	800aed0 <follow_path>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b6d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d11a      	bne.n	800b70e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b6d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b6dc:	b25b      	sxtb	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	da03      	bge.n	800b6ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800b6e2:	2306      	movs	r3, #6
 800b6e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b6e8:	e011      	b.n	800b70e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b6ea:	79fb      	ldrb	r3, [r7, #7]
 800b6ec:	f023 0301 	bic.w	r3, r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	bf14      	ite	ne
 800b6f4:	2301      	movne	r3, #1
 800b6f6:	2300      	moveq	r3, #0
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	f107 0314 	add.w	r3, r7, #20
 800b700:	4611      	mov	r1, r2
 800b702:	4618      	mov	r0, r3
 800b704:	f7fe fc86 	bl	800a014 <chk_lock>
 800b708:	4603      	mov	r3, r0
 800b70a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b70e:	79fb      	ldrb	r3, [r7, #7]
 800b710:	f003 031c 	and.w	r3, r3, #28
 800b714:	2b00      	cmp	r3, #0
 800b716:	d07f      	beq.n	800b818 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b718:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d017      	beq.n	800b750 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b724:	2b04      	cmp	r3, #4
 800b726:	d10e      	bne.n	800b746 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b728:	f7fe fcd0 	bl	800a0cc <enq_lock>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d006      	beq.n	800b740 <f_open+0xc8>
 800b732:	f107 0314 	add.w	r3, r7, #20
 800b736:	4618      	mov	r0, r3
 800b738:	f7ff fb04 	bl	800ad44 <dir_register>
 800b73c:	4603      	mov	r3, r0
 800b73e:	e000      	b.n	800b742 <f_open+0xca>
 800b740:	2312      	movs	r3, #18
 800b742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b746:	79fb      	ldrb	r3, [r7, #7]
 800b748:	f043 0308 	orr.w	r3, r3, #8
 800b74c:	71fb      	strb	r3, [r7, #7]
 800b74e:	e010      	b.n	800b772 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b750:	7ebb      	ldrb	r3, [r7, #26]
 800b752:	f003 0311 	and.w	r3, r3, #17
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <f_open+0xea>
					res = FR_DENIED;
 800b75a:	2307      	movs	r3, #7
 800b75c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b760:	e007      	b.n	800b772 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b762:	79fb      	ldrb	r3, [r7, #7]
 800b764:	f003 0304 	and.w	r3, r3, #4
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d002      	beq.n	800b772 <f_open+0xfa>
 800b76c:	2308      	movs	r3, #8
 800b76e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b772:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b776:	2b00      	cmp	r3, #0
 800b778:	d168      	bne.n	800b84c <f_open+0x1d4>
 800b77a:	79fb      	ldrb	r3, [r7, #7]
 800b77c:	f003 0308 	and.w	r3, r3, #8
 800b780:	2b00      	cmp	r3, #0
 800b782:	d063      	beq.n	800b84c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b784:	f7fb fbe0 	bl	8006f48 <get_fattime>
 800b788:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b78c:	330e      	adds	r3, #14
 800b78e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b790:	4618      	mov	r0, r3
 800b792:	f7fe fb95 	bl	8009ec0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b798:	3316      	adds	r3, #22
 800b79a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fe fb8f 	bl	8009ec0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a4:	330b      	adds	r3, #11
 800b7a6:	2220      	movs	r2, #32
 800b7a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7ff fa33 	bl	800ac1c <ld_clust>
 800b7b6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b7bc:	2200      	movs	r2, #0
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7ff fa4b 	bl	800ac5a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c6:	331c      	adds	r3, #28
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fe fb78 	bl	8009ec0 <st_dword>
					fs->wflag = 1;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b7d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d037      	beq.n	800b84c <f_open+0x1d4>
						dw = fs->winsect;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b7e2:	f107 0314 	add.w	r3, r7, #20
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fe ff5e 	bl	800a6ac <remove_chain>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b7f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d126      	bne.n	800b84c <f_open+0x1d4>
							res = move_window(fs, dw);
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b802:	4618      	mov	r0, r3
 800b804:	f7fe fd7a 	bl	800a2fc <move_window>
 800b808:	4603      	mov	r3, r0
 800b80a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b812:	3a01      	subs	r2, #1
 800b814:	60da      	str	r2, [r3, #12]
 800b816:	e019      	b.n	800b84c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b818:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d115      	bne.n	800b84c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b820:	7ebb      	ldrb	r3, [r7, #26]
 800b822:	f003 0310 	and.w	r3, r3, #16
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b82a:	2304      	movs	r3, #4
 800b82c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b830:	e00c      	b.n	800b84c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b832:	79fb      	ldrb	r3, [r7, #7]
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d007      	beq.n	800b84c <f_open+0x1d4>
 800b83c:	7ebb      	ldrb	r3, [r7, #26]
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d002      	beq.n	800b84c <f_open+0x1d4>
						res = FR_DENIED;
 800b846:	2307      	movs	r3, #7
 800b848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b84c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b850:	2b00      	cmp	r3, #0
 800b852:	d128      	bne.n	800b8a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	f003 0308 	and.w	r3, r3, #8
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d003      	beq.n	800b866 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b85e:	79fb      	ldrb	r3, [r7, #7]
 800b860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b864:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b86e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b874:	79fb      	ldrb	r3, [r7, #7]
 800b876:	f023 0301 	bic.w	r3, r3, #1
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	bf14      	ite	ne
 800b87e:	2301      	movne	r3, #1
 800b880:	2300      	moveq	r3, #0
 800b882:	b2db      	uxtb	r3, r3
 800b884:	461a      	mov	r2, r3
 800b886:	f107 0314 	add.w	r3, r7, #20
 800b88a:	4611      	mov	r1, r2
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fe fc3f 	bl	800a110 <inc_lock>
 800b892:	4602      	mov	r2, r0
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d102      	bne.n	800b8a6 <f_open+0x22e>
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b8a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f040 8095 	bne.w	800b9da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7ff f9b0 	bl	800ac1c <ld_clust>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c4:	331c      	adds	r3, #28
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe fabc 	bl	8009e44 <ld_dword>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	88da      	ldrh	r2, [r3, #6]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	79fa      	ldrb	r2, [r7, #7]
 800b8ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3330      	adds	r3, #48	; 0x30
 800b902:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b906:	2100      	movs	r1, #0
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fe fb26 	bl	8009f5a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	f003 0320 	and.w	r3, r3, #32
 800b914:	2b00      	cmp	r3, #0
 800b916:	d060      	beq.n	800b9da <f_open+0x362>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d05c      	beq.n	800b9da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	68da      	ldr	r2, [r3, #12]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	895b      	ldrh	r3, [r3, #10]
 800b92c:	025b      	lsls	r3, r3, #9
 800b92e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	657b      	str	r3, [r7, #84]	; 0x54
 800b93c:	e016      	b.n	800b96c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b942:	4618      	mov	r0, r3
 800b944:	f7fe fd26 	bl	800a394 <get_fat>
 800b948:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b94a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d802      	bhi.n	800b956 <f_open+0x2de>
 800b950:	2302      	movs	r3, #2
 800b952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95c:	d102      	bne.n	800b964 <f_open+0x2ec>
 800b95e:	2301      	movs	r3, #1
 800b960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	657b      	str	r3, [r7, #84]	; 0x54
 800b96c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b970:	2b00      	cmp	r3, #0
 800b972:	d103      	bne.n	800b97c <f_open+0x304>
 800b974:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b978:	429a      	cmp	r2, r3
 800b97a:	d8e0      	bhi.n	800b93e <f_open+0x2c6>
				}
				fp->clust = clst;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b980:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b986:	2b00      	cmp	r3, #0
 800b988:	d127      	bne.n	800b9da <f_open+0x362>
 800b98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b98c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b990:	2b00      	cmp	r3, #0
 800b992:	d022      	beq.n	800b9da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fe fcdc 	bl	800a356 <clust2sect>
 800b99e:	6478      	str	r0, [r7, #68]	; 0x44
 800b9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d103      	bne.n	800b9ae <f_open+0x336>
						res = FR_INT_ERR;
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b9ac:	e015      	b.n	800b9da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b9ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9b0:	0a5a      	lsrs	r2, r3, #9
 800b9b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9b4:	441a      	add	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	7858      	ldrb	r0, [r3, #1]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6a1a      	ldr	r2, [r3, #32]
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	f7fe f9e3 	bl	8009d94 <disk_read>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <f_open+0x362>
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b9da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d002      	beq.n	800b9e8 <f_open+0x370>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b9e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3760      	adds	r7, #96	; 0x60
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b08e      	sub	sp, #56	; 0x38
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
 800ba00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f107 0214 	add.w	r2, r7, #20
 800ba12:	4611      	mov	r1, r2
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7ff fdb3 	bl	800b580 <validate>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ba20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d107      	bne.n	800ba38 <f_read+0x44>
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	7d5b      	ldrb	r3, [r3, #21]
 800ba2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ba30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <f_read+0x4a>
 800ba38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba3c:	e115      	b.n	800bc6a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	7d1b      	ldrb	r3, [r3, #20]
 800ba42:	f003 0301 	and.w	r3, r3, #1
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d101      	bne.n	800ba4e <f_read+0x5a>
 800ba4a:	2307      	movs	r3, #7
 800ba4c:	e10d      	b.n	800bc6a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	68da      	ldr	r2, [r3, #12]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	699b      	ldr	r3, [r3, #24]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	6a3b      	ldr	r3, [r7, #32]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	f240 80fe 	bls.w	800bc60 <f_read+0x26c>
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ba68:	e0fa      	b.n	800bc60 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f040 80c6 	bne.w	800bc04 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	0a5b      	lsrs	r3, r3, #9
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	8952      	ldrh	r2, [r2, #10]
 800ba82:	3a01      	subs	r2, #1
 800ba84:	4013      	ands	r3, r2
 800ba86:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d12f      	bne.n	800baee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d103      	bne.n	800ba9e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	633b      	str	r3, [r7, #48]	; 0x30
 800ba9c:	e013      	b.n	800bac6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d007      	beq.n	800bab6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	699b      	ldr	r3, [r3, #24]
 800baaa:	4619      	mov	r1, r3
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f7fe fefa 	bl	800a8a6 <clmt_clust>
 800bab2:	6338      	str	r0, [r7, #48]	; 0x30
 800bab4:	e007      	b.n	800bac6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	69db      	ldr	r3, [r3, #28]
 800babc:	4619      	mov	r1, r3
 800babe:	4610      	mov	r0, r2
 800bac0:	f7fe fc68 	bl	800a394 <get_fat>
 800bac4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d804      	bhi.n	800bad6 <f_read+0xe2>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2202      	movs	r2, #2
 800bad0:	755a      	strb	r2, [r3, #21]
 800bad2:	2302      	movs	r3, #2
 800bad4:	e0c9      	b.n	800bc6a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800badc:	d104      	bne.n	800bae8 <f_read+0xf4>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2201      	movs	r2, #1
 800bae2:	755a      	strb	r2, [r3, #21]
 800bae4:	2301      	movs	r3, #1
 800bae6:	e0c0      	b.n	800bc6a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	69db      	ldr	r3, [r3, #28]
 800baf4:	4619      	mov	r1, r3
 800baf6:	4610      	mov	r0, r2
 800baf8:	f7fe fc2d 	bl	800a356 <clust2sect>
 800bafc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d104      	bne.n	800bb0e <f_read+0x11a>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2202      	movs	r2, #2
 800bb08:	755a      	strb	r2, [r3, #21]
 800bb0a:	2302      	movs	r3, #2
 800bb0c:	e0ad      	b.n	800bc6a <f_read+0x276>
			sect += csect;
 800bb0e:	69ba      	ldr	r2, [r7, #24]
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	4413      	add	r3, r2
 800bb14:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	0a5b      	lsrs	r3, r3, #9
 800bb1a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d039      	beq.n	800bb96 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bb22:	69fa      	ldr	r2, [r7, #28]
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	4413      	add	r3, r2
 800bb28:	697a      	ldr	r2, [r7, #20]
 800bb2a:	8952      	ldrh	r2, [r2, #10]
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d905      	bls.n	800bb3c <f_read+0x148>
					cc = fs->csize - csect;
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	895b      	ldrh	r3, [r3, #10]
 800bb34:	461a      	mov	r2, r3
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	7858      	ldrb	r0, [r3, #1]
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	69ba      	ldr	r2, [r7, #24]
 800bb44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb46:	f7fe f925 	bl	8009d94 <disk_read>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d004      	beq.n	800bb5a <f_read+0x166>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2201      	movs	r2, #1
 800bb54:	755a      	strb	r2, [r3, #21]
 800bb56:	2301      	movs	r3, #1
 800bb58:	e087      	b.n	800bc6a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	7d1b      	ldrb	r3, [r3, #20]
 800bb5e:	b25b      	sxtb	r3, r3
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	da14      	bge.n	800bb8e <f_read+0x19a>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6a1a      	ldr	r2, [r3, #32]
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d90d      	bls.n	800bb8e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6a1a      	ldr	r2, [r3, #32]
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	025b      	lsls	r3, r3, #9
 800bb7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb7e:	18d0      	adds	r0, r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	3330      	adds	r3, #48	; 0x30
 800bb84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb88:	4619      	mov	r1, r3
 800bb8a:	f7fe f9c5 	bl	8009f18 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	025b      	lsls	r3, r3, #9
 800bb92:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bb94:	e050      	b.n	800bc38 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6a1b      	ldr	r3, [r3, #32]
 800bb9a:	69ba      	ldr	r2, [r7, #24]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d02e      	beq.n	800bbfe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	7d1b      	ldrb	r3, [r3, #20]
 800bba4:	b25b      	sxtb	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	da18      	bge.n	800bbdc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	7858      	ldrb	r0, [r3, #1]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6a1a      	ldr	r2, [r3, #32]
 800bbb8:	2301      	movs	r3, #1
 800bbba:	f7fe f90b 	bl	8009dd4 <disk_write>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d004      	beq.n	800bbce <f_read+0x1da>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	755a      	strb	r2, [r3, #21]
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e04d      	b.n	800bc6a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	7d1b      	ldrb	r3, [r3, #20]
 800bbd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbd6:	b2da      	uxtb	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	7858      	ldrb	r0, [r3, #1]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	69ba      	ldr	r2, [r7, #24]
 800bbea:	f7fe f8d3 	bl	8009d94 <disk_read>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d004      	beq.n	800bbfe <f_read+0x20a>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	755a      	strb	r2, [r3, #21]
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e035      	b.n	800bc6a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	69ba      	ldr	r2, [r7, #24]
 800bc02:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	699b      	ldr	r3, [r3, #24]
 800bc08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc0c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bc10:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bc12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d901      	bls.n	800bc1e <f_read+0x22a>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc2c:	4413      	add	r3, r2
 800bc2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc30:	4619      	mov	r1, r3
 800bc32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc34:	f7fe f970 	bl	8009f18 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bc38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3c:	4413      	add	r3, r2
 800bc3e:	627b      	str	r3, [r7, #36]	; 0x24
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	699a      	ldr	r2, [r3, #24]
 800bc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc46:	441a      	add	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	619a      	str	r2, [r3, #24]
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc52:	441a      	add	r2, r3
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f47f af01 	bne.w	800ba6a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3738      	adds	r7, #56	; 0x38
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b08c      	sub	sp, #48	; 0x30
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	60f8      	str	r0, [r7, #12]
 800bc7a:	60b9      	str	r1, [r7, #8]
 800bc7c:	607a      	str	r2, [r7, #4]
 800bc7e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	2200      	movs	r2, #0
 800bc88:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f107 0210 	add.w	r2, r7, #16
 800bc90:	4611      	mov	r1, r2
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff fc74 	bl	800b580 <validate>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bc9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d107      	bne.n	800bcb6 <f_write+0x44>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	7d5b      	ldrb	r3, [r3, #21]
 800bcaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bcae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <f_write+0x4a>
 800bcb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcba:	e14b      	b.n	800bf54 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	7d1b      	ldrb	r3, [r3, #20]
 800bcc0:	f003 0302 	and.w	r3, r3, #2
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <f_write+0x5a>
 800bcc8:	2307      	movs	r3, #7
 800bcca:	e143      	b.n	800bf54 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	699a      	ldr	r2, [r3, #24]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	441a      	add	r2, r3
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	f080 812d 	bcs.w	800bf38 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	43db      	mvns	r3, r3
 800bce4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bce6:	e127      	b.n	800bf38 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f040 80e3 	bne.w	800bebc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	0a5b      	lsrs	r3, r3, #9
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	8952      	ldrh	r2, [r2, #10]
 800bd00:	3a01      	subs	r2, #1
 800bd02:	4013      	ands	r3, r2
 800bd04:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d143      	bne.n	800bd94 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10c      	bne.n	800bd2e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d11a      	bne.n	800bd56 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2100      	movs	r1, #0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fe fd26 	bl	800a776 <create_chain>
 800bd2a:	62b8      	str	r0, [r7, #40]	; 0x28
 800bd2c:	e013      	b.n	800bd56 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d007      	beq.n	800bd46 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	699b      	ldr	r3, [r3, #24]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f7fe fdb2 	bl	800a8a6 <clmt_clust>
 800bd42:	62b8      	str	r0, [r7, #40]	; 0x28
 800bd44:	e007      	b.n	800bd56 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	69db      	ldr	r3, [r3, #28]
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4610      	mov	r0, r2
 800bd50:	f7fe fd11 	bl	800a776 <create_chain>
 800bd54:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f000 80f2 	beq.w	800bf42 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d104      	bne.n	800bd6e <f_write+0xfc>
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2202      	movs	r2, #2
 800bd68:	755a      	strb	r2, [r3, #21]
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e0f2      	b.n	800bf54 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd74:	d104      	bne.n	800bd80 <f_write+0x10e>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	755a      	strb	r2, [r3, #21]
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e0e9      	b.n	800bf54 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd84:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d102      	bne.n	800bd94 <f_write+0x122>
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd92:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	7d1b      	ldrb	r3, [r3, #20]
 800bd98:	b25b      	sxtb	r3, r3
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	da18      	bge.n	800bdd0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	7858      	ldrb	r0, [r3, #1]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6a1a      	ldr	r2, [r3, #32]
 800bdac:	2301      	movs	r3, #1
 800bdae:	f7fe f811 	bl	8009dd4 <disk_write>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d004      	beq.n	800bdc2 <f_write+0x150>
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	755a      	strb	r2, [r3, #21]
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e0c8      	b.n	800bf54 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	7d1b      	ldrb	r3, [r3, #20]
 800bdc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bdd0:	693a      	ldr	r2, [r7, #16]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	69db      	ldr	r3, [r3, #28]
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	4610      	mov	r0, r2
 800bdda:	f7fe fabc 	bl	800a356 <clust2sect>
 800bdde:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d104      	bne.n	800bdf0 <f_write+0x17e>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2202      	movs	r2, #2
 800bdea:	755a      	strb	r2, [r3, #21]
 800bdec:	2302      	movs	r3, #2
 800bdee:	e0b1      	b.n	800bf54 <f_write+0x2e2>
			sect += csect;
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	0a5b      	lsrs	r3, r3, #9
 800bdfc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bdfe:	6a3b      	ldr	r3, [r7, #32]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d03c      	beq.n	800be7e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800be04:	69ba      	ldr	r2, [r7, #24]
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	4413      	add	r3, r2
 800be0a:	693a      	ldr	r2, [r7, #16]
 800be0c:	8952      	ldrh	r2, [r2, #10]
 800be0e:	4293      	cmp	r3, r2
 800be10:	d905      	bls.n	800be1e <f_write+0x1ac>
					cc = fs->csize - csect;
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	895b      	ldrh	r3, [r3, #10]
 800be16:	461a      	mov	r2, r3
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	7858      	ldrb	r0, [r3, #1]
 800be22:	6a3b      	ldr	r3, [r7, #32]
 800be24:	697a      	ldr	r2, [r7, #20]
 800be26:	69f9      	ldr	r1, [r7, #28]
 800be28:	f7fd ffd4 	bl	8009dd4 <disk_write>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d004      	beq.n	800be3c <f_write+0x1ca>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	755a      	strb	r2, [r3, #21]
 800be38:	2301      	movs	r3, #1
 800be3a:	e08b      	b.n	800bf54 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6a1a      	ldr	r2, [r3, #32]
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	6a3a      	ldr	r2, [r7, #32]
 800be46:	429a      	cmp	r2, r3
 800be48:	d915      	bls.n	800be76 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6a1a      	ldr	r2, [r3, #32]
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	025b      	lsls	r3, r3, #9
 800be5a:	69fa      	ldr	r2, [r7, #28]
 800be5c:	4413      	add	r3, r2
 800be5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be62:	4619      	mov	r1, r3
 800be64:	f7fe f858 	bl	8009f18 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	7d1b      	ldrb	r3, [r3, #20]
 800be6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be70:	b2da      	uxtb	r2, r3
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800be76:	6a3b      	ldr	r3, [r7, #32]
 800be78:	025b      	lsls	r3, r3, #9
 800be7a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800be7c:	e03f      	b.n	800befe <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	429a      	cmp	r2, r3
 800be86:	d016      	beq.n	800beb6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	699a      	ldr	r2, [r3, #24]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be90:	429a      	cmp	r2, r3
 800be92:	d210      	bcs.n	800beb6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	7858      	ldrb	r0, [r3, #1]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be9e:	2301      	movs	r3, #1
 800bea0:	697a      	ldr	r2, [r7, #20]
 800bea2:	f7fd ff77 	bl	8009d94 <disk_read>
 800bea6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d004      	beq.n	800beb6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2201      	movs	r2, #1
 800beb0:	755a      	strb	r2, [r3, #21]
 800beb2:	2301      	movs	r3, #1
 800beb4:	e04e      	b.n	800bf54 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	699b      	ldr	r3, [r3, #24]
 800bec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800beca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d901      	bls.n	800bed6 <f_write+0x264>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	699b      	ldr	r3, [r3, #24]
 800bee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bee4:	4413      	add	r3, r2
 800bee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee8:	69f9      	ldr	r1, [r7, #28]
 800beea:	4618      	mov	r0, r3
 800beec:	f7fe f814 	bl	8009f18 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	7d1b      	ldrb	r3, [r3, #20]
 800bef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800befe:	69fa      	ldr	r2, [r7, #28]
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	4413      	add	r3, r2
 800bf04:	61fb      	str	r3, [r7, #28]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	699a      	ldr	r2, [r3, #24]
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0c:	441a      	add	r2, r3
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	619a      	str	r2, [r3, #24]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	68da      	ldr	r2, [r3, #12]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	bf38      	it	cc
 800bf1e:	461a      	movcc	r2, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	60da      	str	r2, [r3, #12]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2a:	441a      	add	r2, r3
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	601a      	str	r2, [r3, #0]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f47f aed4 	bne.w	800bce8 <f_write+0x76>
 800bf40:	e000      	b.n	800bf44 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bf42:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	7d1b      	ldrb	r3, [r3, #20]
 800bf48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3730      	adds	r7, #48	; 0x30
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b092      	sub	sp, #72	; 0x48
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800bf68:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bf6c:	f107 030c 	add.w	r3, r7, #12
 800bf70:	2200      	movs	r2, #0
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7ff f8b8 	bl	800b0e8 <find_volume>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800bf7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f040 8099 	bne.w	800c0ba <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800bf88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800bf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf90:	691a      	ldr	r2, [r3, #16]
 800bf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	3b02      	subs	r3, #2
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d804      	bhi.n	800bfa6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9e:	691a      	ldr	r2, [r3, #16]
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	601a      	str	r2, [r3, #0]
 800bfa4:	e089      	b.n	800c0ba <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d128      	bne.n	800c004 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800bfb2:	2302      	movs	r3, #2
 800bfb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800bfba:	f107 0314 	add.w	r3, r7, #20
 800bfbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fe f9e7 	bl	800a394 <get_fat>
 800bfc6:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfce:	d103      	bne.n	800bfd8 <f_getfree+0x7c>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bfd6:	e063      	b.n	800c0a0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d103      	bne.n	800bfe6 <f_getfree+0x8a>
 800bfde:	2302      	movs	r3, #2
 800bfe0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bfe4:	e05c      	b.n	800c0a0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800bfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d102      	bne.n	800bff2 <f_getfree+0x96>
 800bfec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfee:	3301      	adds	r3, #1
 800bff0:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800bff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff4:	3301      	adds	r3, #1
 800bff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	695b      	ldr	r3, [r3, #20]
 800bffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bffe:	429a      	cmp	r2, r3
 800c000:	d3db      	bcc.n	800bfba <f_getfree+0x5e>
 800c002:	e04d      	b.n	800c0a0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	637b      	str	r3, [r7, #52]	; 0x34
 800c014:	2300      	movs	r3, #0
 800c016:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800c018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d113      	bne.n	800c046 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c01e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c022:	1c5a      	adds	r2, r3, #1
 800c024:	63ba      	str	r2, [r7, #56]	; 0x38
 800c026:	4619      	mov	r1, r3
 800c028:	f7fe f968 	bl	800a2fc <move_window>
 800c02c:	4603      	mov	r3, r0
 800c02e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800c032:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c036:	2b00      	cmp	r3, #0
 800c038:	d131      	bne.n	800c09e <f_getfree+0x142>
							p = fs->win;
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	3330      	adds	r3, #48	; 0x30
 800c03e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800c040:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c044:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d10f      	bne.n	800c06e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c04e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c050:	f7fd fee0 	bl	8009e14 <ld_word>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d102      	bne.n	800c060 <f_getfree+0x104>
 800c05a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c05c:	3301      	adds	r3, #1
 800c05e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	3302      	adds	r3, #2
 800c064:	633b      	str	r3, [r7, #48]	; 0x30
 800c066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c068:	3b02      	subs	r3, #2
 800c06a:	637b      	str	r3, [r7, #52]	; 0x34
 800c06c:	e010      	b.n	800c090 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c06e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c070:	f7fd fee8 	bl	8009e44 <ld_dword>
 800c074:	4603      	mov	r3, r0
 800c076:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d102      	bne.n	800c084 <f_getfree+0x128>
 800c07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c080:	3301      	adds	r3, #1
 800c082:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	3304      	adds	r3, #4
 800c088:	633b      	str	r3, [r7, #48]	; 0x30
 800c08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08c:	3b04      	subs	r3, #4
 800c08e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800c090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c092:	3b01      	subs	r3, #1
 800c094:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1bd      	bne.n	800c018 <f_getfree+0xbc>
 800c09c:	e000      	b.n	800c0a0 <f_getfree+0x144>
							if (res != FR_OK) break;
 800c09e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0a4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0aa:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	791a      	ldrb	r2, [r3, #4]
 800c0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b2:	f042 0201 	orr.w	r2, r2, #1
 800c0b6:	b2d2      	uxtb	r2, r2
 800c0b8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c0ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3748      	adds	r7, #72	; 0x48
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b088      	sub	sp, #32
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	60b9      	str	r1, [r7, #8]
 800c0d0:	607a      	str	r2, [r7, #4]
	int n = 0;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c0da:	e01b      	b.n	800c114 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800c0dc:	f107 0310 	add.w	r3, r7, #16
 800c0e0:	f107 0114 	add.w	r1, r7, #20
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7ff fc84 	bl	800b9f4 <f_read>
		if (rc != 1) break;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d116      	bne.n	800c120 <f_gets+0x5a>
		c = s[0];
 800c0f2:	7d3b      	ldrb	r3, [r7, #20]
 800c0f4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
 800c0f8:	2b0d      	cmp	r3, #13
 800c0fa:	d100      	bne.n	800c0fe <f_gets+0x38>
 800c0fc:	e00a      	b.n	800c114 <f_gets+0x4e>
		*p++ = c;
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	1c5a      	adds	r2, r3, #1
 800c102:	61ba      	str	r2, [r7, #24]
 800c104:	7dfa      	ldrb	r2, [r7, #23]
 800c106:	701a      	strb	r2, [r3, #0]
		n++;
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	3301      	adds	r3, #1
 800c10c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800c10e:	7dfb      	ldrb	r3, [r7, #23]
 800c110:	2b0a      	cmp	r3, #10
 800c112:	d007      	beq.n	800c124 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	3b01      	subs	r3, #1
 800c118:	69fa      	ldr	r2, [r7, #28]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	dbde      	blt.n	800c0dc <f_gets+0x16>
 800c11e:	e002      	b.n	800c126 <f_gets+0x60>
		if (rc != 1) break;
 800c120:	bf00      	nop
 800c122:	e000      	b.n	800c126 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800c124:	bf00      	nop
	}
	*p = 0;
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	2200      	movs	r2, #0
 800c12a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d001      	beq.n	800c136 <f_gets+0x70>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	e000      	b.n	800c138 <f_gets+0x72>
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3720      	adds	r7, #32
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c14c:	78fb      	ldrb	r3, [r7, #3]
 800c14e:	2b0a      	cmp	r3, #10
 800c150:	d103      	bne.n	800c15a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c152:	210d      	movs	r1, #13
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f7ff fff3 	bl	800c140 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	db25      	blt.n	800c1b2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	1c5a      	adds	r2, r3, #1
 800c16a:	60fa      	str	r2, [r7, #12]
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	4413      	add	r3, r2
 800c170:	78fa      	ldrb	r2, [r7, #3]
 800c172:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b3c      	cmp	r3, #60	; 0x3c
 800c178:	dd12      	ble.n	800c1a0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6818      	ldr	r0, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f103 010c 	add.w	r1, r3, #12
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	f107 0308 	add.w	r3, r7, #8
 800c18a:	f7ff fd72 	bl	800bc72 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	429a      	cmp	r2, r3
 800c194:	d101      	bne.n	800c19a <putc_bfd+0x5a>
 800c196:	2300      	movs	r3, #0
 800c198:	e001      	b.n	800c19e <putc_bfd+0x5e>
 800c19a:	f04f 33ff 	mov.w	r3, #4294967295
 800c19e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	1c5a      	adds	r2, r3, #1
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	609a      	str	r2, [r3, #8]
 800c1b0:	e000      	b.n	800c1b4 <putc_bfd+0x74>
	if (i < 0) return;
 800c1b2:	bf00      	nop
}
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b084      	sub	sp, #16
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	db17      	blt.n	800c1fa <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6818      	ldr	r0, [r3, #0]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f103 010c 	add.w	r1, r3, #12
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	f107 030c 	add.w	r3, r7, #12
 800c1de:	f7ff fd48 	bl	800bc72 <f_write>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d108      	bne.n	800c1fa <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d102      	bne.n	800c1fa <putc_flush+0x40>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	e001      	b.n	800c1fe <putc_flush+0x44>
	return EOF;
 800c1fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	605a      	str	r2, [r3, #4]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685a      	ldr	r2, [r3, #4]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	609a      	str	r2, [r3, #8]
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b096      	sub	sp, #88	; 0x58
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c23a:	f107 030c 	add.w	r3, r7, #12
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff ffe0 	bl	800c206 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c246:	e009      	b.n	800c25c <f_puts+0x2c>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	607a      	str	r2, [r7, #4]
 800c24e:	781a      	ldrb	r2, [r3, #0]
 800c250:	f107 030c 	add.w	r3, r7, #12
 800c254:	4611      	mov	r1, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f7ff ff72 	bl	800c140 <putc_bfd>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d1f1      	bne.n	800c248 <f_puts+0x18>
	return putc_flush(&pb);
 800c264:	f107 030c 	add.w	r3, r7, #12
 800c268:	4618      	mov	r0, r3
 800c26a:	f7ff ffa6 	bl	800c1ba <putc_flush>
 800c26e:	4603      	mov	r3, r0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3758      	adds	r7, #88	; 0x58
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c278:	b480      	push	{r7}
 800c27a:	b087      	sub	sp, #28
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	4613      	mov	r3, r2
 800c284:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c286:	2301      	movs	r3, #1
 800c288:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c28e:	4b1f      	ldr	r3, [pc, #124]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c290:	7a5b      	ldrb	r3, [r3, #9]
 800c292:	b2db      	uxtb	r3, r3
 800c294:	2b00      	cmp	r3, #0
 800c296:	d131      	bne.n	800c2fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c298:	4b1c      	ldr	r3, [pc, #112]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c29a:	7a5b      	ldrb	r3, [r3, #9]
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	461a      	mov	r2, r3
 800c2a0:	4b1a      	ldr	r3, [pc, #104]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c2a6:	4b19      	ldr	r3, [pc, #100]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2a8:	7a5b      	ldrb	r3, [r3, #9]
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	4a17      	ldr	r2, [pc, #92]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c2b6:	4b15      	ldr	r3, [pc, #84]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2b8:	7a5b      	ldrb	r3, [r3, #9]
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	461a      	mov	r2, r3
 800c2be:	4b13      	ldr	r3, [pc, #76]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2c0:	4413      	add	r3, r2
 800c2c2:	79fa      	ldrb	r2, [r7, #7]
 800c2c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c2c6:	4b11      	ldr	r3, [pc, #68]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2c8:	7a5b      	ldrb	r3, [r3, #9]
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	b2d1      	uxtb	r1, r2
 800c2d0:	4a0e      	ldr	r2, [pc, #56]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2d2:	7251      	strb	r1, [r2, #9]
 800c2d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c2d6:	7dbb      	ldrb	r3, [r7, #22]
 800c2d8:	3330      	adds	r3, #48	; 0x30
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	223a      	movs	r2, #58	; 0x3a
 800c2e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	3302      	adds	r3, #2
 800c2ec:	222f      	movs	r2, #47	; 0x2f
 800c2ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	3303      	adds	r3, #3
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	371c      	adds	r7, #28
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	20000214 	.word	0x20000214

0800c310 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c31a:	2200      	movs	r2, #0
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff ffaa 	bl	800c278 <FATFS_LinkDriverEx>
 800c324:	4603      	mov	r3, r0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
	...

0800c330 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c334:	2200      	movs	r2, #0
 800c336:	4912      	ldr	r1, [pc, #72]	; (800c380 <MX_USB_DEVICE_Init+0x50>)
 800c338:	4812      	ldr	r0, [pc, #72]	; (800c384 <MX_USB_DEVICE_Init+0x54>)
 800c33a:	f7fc fc04 	bl	8008b46 <USBD_Init>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d001      	beq.n	800c348 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c344:	f7f4 feb4 	bl	80010b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800c348:	490f      	ldr	r1, [pc, #60]	; (800c388 <MX_USB_DEVICE_Init+0x58>)
 800c34a:	480e      	ldr	r0, [pc, #56]	; (800c384 <MX_USB_DEVICE_Init+0x54>)
 800c34c:	f7fc fc31 	bl	8008bb2 <USBD_RegisterClass>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d001      	beq.n	800c35a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c356:	f7f4 feab 	bl	80010b0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c35a:	490c      	ldr	r1, [pc, #48]	; (800c38c <MX_USB_DEVICE_Init+0x5c>)
 800c35c:	4809      	ldr	r0, [pc, #36]	; (800c384 <MX_USB_DEVICE_Init+0x54>)
 800c35e:	f7fb f92d 	bl	80075bc <USBD_MSC_RegisterStorage>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c368:	f7f4 fea2 	bl	80010b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c36c:	4805      	ldr	r0, [pc, #20]	; (800c384 <MX_USB_DEVICE_Init+0x54>)
 800c36e:	f7fc fc41 	bl	8008bf4 <USBD_Start>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d001      	beq.n	800c37c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c378:	f7f4 fe9a 	bl	80010b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c37c:	bf00      	nop
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	200000f4 	.word	0x200000f4
 800c384:	2000147c 	.word	0x2000147c
 800c388:	2000000c 	.word	0x2000000c
 800c38c:	20000144 	.word	0x20000144

0800c390 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	4603      	mov	r3, r0
 800c398:	6039      	str	r1, [r7, #0]
 800c39a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2212      	movs	r2, #18
 800c3a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c3a2:	4b03      	ldr	r3, [pc, #12]	; (800c3b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	20000110 	.word	0x20000110

0800c3b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	6039      	str	r1, [r7, #0]
 800c3be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	2204      	movs	r2, #4
 800c3c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c3c6:	4b03      	ldr	r3, [pc, #12]	; (800c3d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr
 800c3d4:	20000124 	.word	0x20000124

0800c3d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	6039      	str	r1, [r7, #0]
 800c3e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3e4:	79fb      	ldrb	r3, [r7, #7]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d105      	bne.n	800c3f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	4907      	ldr	r1, [pc, #28]	; (800c40c <USBD_FS_ProductStrDescriptor+0x34>)
 800c3ee:	4808      	ldr	r0, [pc, #32]	; (800c410 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3f0:	f7fd fbcd 	bl	8009b8e <USBD_GetString>
 800c3f4:	e004      	b.n	800c400 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	4904      	ldr	r1, [pc, #16]	; (800c40c <USBD_FS_ProductStrDescriptor+0x34>)
 800c3fa:	4805      	ldr	r0, [pc, #20]	; (800c410 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3fc:	f7fd fbc7 	bl	8009b8e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c400:	4b02      	ldr	r3, [pc, #8]	; (800c40c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c402:	4618      	mov	r0, r3
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	2000174c 	.word	0x2000174c
 800c410:	0800cf9c 	.word	0x0800cf9c

0800c414 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	6039      	str	r1, [r7, #0]
 800c41e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c420:	683a      	ldr	r2, [r7, #0]
 800c422:	4904      	ldr	r1, [pc, #16]	; (800c434 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c424:	4804      	ldr	r0, [pc, #16]	; (800c438 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c426:	f7fd fbb2 	bl	8009b8e <USBD_GetString>
  return USBD_StrDesc;
 800c42a:	4b02      	ldr	r3, [pc, #8]	; (800c434 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	2000174c 	.word	0x2000174c
 800c438:	0800cfb0 	.word	0x0800cfb0

0800c43c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	4603      	mov	r3, r0
 800c444:	6039      	str	r1, [r7, #0]
 800c446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	221a      	movs	r2, #26
 800c44c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c44e:	f000 f843 	bl	800c4d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c452:	4b02      	ldr	r3, [pc, #8]	; (800c45c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c454:	4618      	mov	r0, r3
 800c456:	3708      	adds	r7, #8
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	20000128 	.word	0x20000128

0800c460 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	4603      	mov	r3, r0
 800c468:	6039      	str	r1, [r7, #0]
 800c46a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c46c:	79fb      	ldrb	r3, [r7, #7]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d105      	bne.n	800c47e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	4907      	ldr	r1, [pc, #28]	; (800c494 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c476:	4808      	ldr	r0, [pc, #32]	; (800c498 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c478:	f7fd fb89 	bl	8009b8e <USBD_GetString>
 800c47c:	e004      	b.n	800c488 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c47e:	683a      	ldr	r2, [r7, #0]
 800c480:	4904      	ldr	r1, [pc, #16]	; (800c494 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c482:	4805      	ldr	r0, [pc, #20]	; (800c498 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c484:	f7fd fb83 	bl	8009b8e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c488:	4b02      	ldr	r3, [pc, #8]	; (800c494 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	2000174c 	.word	0x2000174c
 800c498:	0800cfc4 	.word	0x0800cfc4

0800c49c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	6039      	str	r1, [r7, #0]
 800c4a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d105      	bne.n	800c4ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	4907      	ldr	r1, [pc, #28]	; (800c4d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4b2:	4808      	ldr	r0, [pc, #32]	; (800c4d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4b4:	f7fd fb6b 	bl	8009b8e <USBD_GetString>
 800c4b8:	e004      	b.n	800c4c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	4904      	ldr	r1, [pc, #16]	; (800c4d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4be:	4805      	ldr	r0, [pc, #20]	; (800c4d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4c0:	f7fd fb65 	bl	8009b8e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4c4:	4b02      	ldr	r3, [pc, #8]	; (800c4d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	2000174c 	.word	0x2000174c
 800c4d4:	0800cfd0 	.word	0x0800cfd0

0800c4d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c4de:	4b0f      	ldr	r3, [pc, #60]	; (800c51c <Get_SerialNum+0x44>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c4e4:	4b0e      	ldr	r3, [pc, #56]	; (800c520 <Get_SerialNum+0x48>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c4ea:	4b0e      	ldr	r3, [pc, #56]	; (800c524 <Get_SerialNum+0x4c>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d009      	beq.n	800c512 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c4fe:	2208      	movs	r2, #8
 800c500:	4909      	ldr	r1, [pc, #36]	; (800c528 <Get_SerialNum+0x50>)
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f000 f814 	bl	800c530 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c508:	2204      	movs	r2, #4
 800c50a:	4908      	ldr	r1, [pc, #32]	; (800c52c <Get_SerialNum+0x54>)
 800c50c:	68b8      	ldr	r0, [r7, #8]
 800c50e:	f000 f80f 	bl	800c530 <IntToUnicode>
  }
}
 800c512:	bf00      	nop
 800c514:	3710      	adds	r7, #16
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	1fff7a10 	.word	0x1fff7a10
 800c520:	1fff7a14 	.word	0x1fff7a14
 800c524:	1fff7a18 	.word	0x1fff7a18
 800c528:	2000012a 	.word	0x2000012a
 800c52c:	2000013a 	.word	0x2000013a

0800c530 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	4613      	mov	r3, r2
 800c53c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c542:	2300      	movs	r3, #0
 800c544:	75fb      	strb	r3, [r7, #23]
 800c546:	e027      	b.n	800c598 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	0f1b      	lsrs	r3, r3, #28
 800c54c:	2b09      	cmp	r3, #9
 800c54e:	d80b      	bhi.n	800c568 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	0f1b      	lsrs	r3, r3, #28
 800c554:	b2da      	uxtb	r2, r3
 800c556:	7dfb      	ldrb	r3, [r7, #23]
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	4619      	mov	r1, r3
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	440b      	add	r3, r1
 800c560:	3230      	adds	r2, #48	; 0x30
 800c562:	b2d2      	uxtb	r2, r2
 800c564:	701a      	strb	r2, [r3, #0]
 800c566:	e00a      	b.n	800c57e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	0f1b      	lsrs	r3, r3, #28
 800c56c:	b2da      	uxtb	r2, r3
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	005b      	lsls	r3, r3, #1
 800c572:	4619      	mov	r1, r3
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	440b      	add	r3, r1
 800c578:	3237      	adds	r2, #55	; 0x37
 800c57a:	b2d2      	uxtb	r2, r2
 800c57c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	011b      	lsls	r3, r3, #4
 800c582:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c584:	7dfb      	ldrb	r3, [r7, #23]
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	3301      	adds	r3, #1
 800c58a:	68ba      	ldr	r2, [r7, #8]
 800c58c:	4413      	add	r3, r2
 800c58e:	2200      	movs	r2, #0
 800c590:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c592:	7dfb      	ldrb	r3, [r7, #23]
 800c594:	3301      	adds	r3, #1
 800c596:	75fb      	strb	r3, [r7, #23]
 800c598:	7dfa      	ldrb	r2, [r7, #23]
 800c59a:	79fb      	ldrb	r3, [r7, #7]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d3d3      	bcc.n	800c548 <IntToUnicode+0x18>
  }
}
 800c5a0:	bf00      	nop
 800c5a2:	371c      	adds	r7, #28
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c5b6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  HAL_SD_GetCardInfo(&hsd, &SdCard);
 800c5d2:	490b      	ldr	r1, [pc, #44]	; (800c600 <STORAGE_GetCapacity_FS+0x3c>)
 800c5d4:	480b      	ldr	r0, [pc, #44]	; (800c604 <STORAGE_GetCapacity_FS+0x40>)
 800c5d6:	f7f8 f887 	bl	80046e8 <HAL_SD_GetCardInfo>
//SDCardInfo.CardCapacity / BLOCK_SIZE
	  *block_num  = SdCard.LogBlockNbr;
 800c5da:	4b09      	ldr	r3, [pc, #36]	; (800c600 <STORAGE_GetCapacity_FS+0x3c>)
 800c5dc:	699a      	ldr	r2, [r3, #24]
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	601a      	str	r2, [r3, #0]
	  uint32_t a = SdCard.LogBlockNbr;
 800c5e2:	4b07      	ldr	r3, [pc, #28]	; (800c600 <STORAGE_GetCapacity_FS+0x3c>)
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	617b      	str	r3, [r7, #20]
	  *block_size = (uint16_t)BLOCK_SIZE;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5ee:	801a      	strh	r2, [r3, #0]
	  uint16_t b = BLOCK_SIZE;
 800c5f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5f4:	827b      	strh	r3, [r7, #18]
  return (USBD_OK);
 800c5f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3718      	adds	r7, #24
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	2000095c 	.word	0x2000095c
 800c604:	200008c8 	.word	0x200008c8

0800c608 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c612:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c62a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b086      	sub	sp, #24
 800c63c:	af02      	add	r7, sp, #8
 800c63e:	60b9      	str	r1, [r7, #8]
 800c640:	607a      	str	r2, [r7, #4]
 800c642:	461a      	mov	r2, r3
 800c644:	4603      	mov	r3, r0
 800c646:	73fb      	strb	r3, [r7, #15]
 800c648:	4613      	mov	r3, r2
 800c64a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	//memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
	//HAL_SD_ReadBlocks(&hsd, (uint32_t*)buf, (uint64_t)(blk_addr * BLOCK_SIZE), BLOCK_SIZE, blk_len);
	HAL_SD_ReadBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
 800c64c:	89ba      	ldrh	r2, [r7, #12]
 800c64e:	230a      	movs	r3, #10
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	4613      	mov	r3, r2
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	68b9      	ldr	r1, [r7, #8]
 800c658:	4803      	ldr	r0, [pc, #12]	; (800c668 <STORAGE_Read_FS+0x30>)
 800c65a:	f7f7 fb09 	bl	8003c70 <HAL_SD_ReadBlocks>
  return (USBD_OK);
 800c65e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c660:	4618      	mov	r0, r3
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	200008c8 	.word	0x200008c8

0800c66c <STORAGE_Write_FS>:
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int timeout;
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af02      	add	r7, sp, #8
 800c672:	60b9      	str	r1, [r7, #8]
 800c674:	607a      	str	r2, [r7, #4]
 800c676:	461a      	mov	r2, r3
 800c678:	4603      	mov	r3, r0
 800c67a:	73fb      	strb	r3, [r7, #15]
 800c67c:	4613      	mov	r3, r2
 800c67e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	//memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
	//HAL_SD_WriteBlocks(&hsd, (uint32_t*)buf, (uint64_t)(blk_addr * BLOCK_SIZE), BLOCK_SIZE, blk_len);
	//HAL_SD_WriteBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
	if (HAL_SD_WriteBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10) == HAL_OK)
 800c680:	89ba      	ldrh	r2, [r7, #12]
 800c682:	230a      	movs	r3, #10
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	4613      	mov	r3, r2
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	68b9      	ldr	r1, [r7, #8]
 800c68c:	4811      	ldr	r0, [pc, #68]	; (800c6d4 <STORAGE_Write_FS+0x68>)
 800c68e:	f7f7 fce7 	bl	8004060 <HAL_SD_WriteBlocks>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d117      	bne.n	800c6c8 <STORAGE_Write_FS+0x5c>
	{
	/* Wait that writing process is completed or a timeout occurs */

	timeout = HAL_GetTick();
 800c698:	f7f4 fece 	bl	8001438 <HAL_GetTick>
 800c69c:	4603      	mov	r3, r0
 800c69e:	461a      	mov	r2, r3
 800c6a0:	4b0d      	ldr	r3, [pc, #52]	; (800c6d8 <STORAGE_Write_FS+0x6c>)
 800c6a2:	601a      	str	r2, [r3, #0]

		while (HAL_GetTick() - timeout < 30000)
 800c6a4:	e004      	b.n	800c6b0 <STORAGE_Write_FS+0x44>
		{
			if (BSP_SD_GetCardState() == 0)
 800c6a6:	f7fa fcb7 	bl	8007018 <BSP_SD_GetCardState>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00a      	beq.n	800c6c6 <STORAGE_Write_FS+0x5a>
		while (HAL_GetTick() - timeout < 30000)
 800c6b0:	f7f4 fec2 	bl	8001438 <HAL_GetTick>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	4b08      	ldr	r3, [pc, #32]	; (800c6d8 <STORAGE_Write_FS+0x6c>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	f247 522f 	movw	r2, #29999	; 0x752f
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d9f0      	bls.n	800c6a6 <STORAGE_Write_FS+0x3a>
 800c6c4:	e000      	b.n	800c6c8 <STORAGE_Write_FS+0x5c>
			{

				break;
 800c6c6:	bf00      	nop
			}
		}
	}
  return (USBD_OK);
 800c6c8:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	200008c8 	.word	0x200008c8
 800c6d8:	2000194c 	.word	0x2000194c

0800c6dc <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c6e0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08a      	sub	sp, #40	; 0x28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6f4:	f107 0314 	add.w	r3, r7, #20
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	601a      	str	r2, [r3, #0]
 800c6fc:	605a      	str	r2, [r3, #4]
 800c6fe:	609a      	str	r2, [r3, #8]
 800c700:	60da      	str	r2, [r3, #12]
 800c702:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c70c:	d13a      	bne.n	800c784 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c70e:	2300      	movs	r3, #0
 800c710:	613b      	str	r3, [r7, #16]
 800c712:	4b1e      	ldr	r3, [pc, #120]	; (800c78c <HAL_PCD_MspInit+0xa0>)
 800c714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c716:	4a1d      	ldr	r2, [pc, #116]	; (800c78c <HAL_PCD_MspInit+0xa0>)
 800c718:	f043 0301 	orr.w	r3, r3, #1
 800c71c:	6313      	str	r3, [r2, #48]	; 0x30
 800c71e:	4b1b      	ldr	r3, [pc, #108]	; (800c78c <HAL_PCD_MspInit+0xa0>)
 800c720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	613b      	str	r3, [r7, #16]
 800c728:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c72a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c72e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c730:	2302      	movs	r3, #2
 800c732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c734:	2300      	movs	r3, #0
 800c736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c738:	2303      	movs	r3, #3
 800c73a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c73c:	230a      	movs	r3, #10
 800c73e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c740:	f107 0314 	add.w	r3, r7, #20
 800c744:	4619      	mov	r1, r3
 800c746:	4812      	ldr	r0, [pc, #72]	; (800c790 <HAL_PCD_MspInit+0xa4>)
 800c748:	f7f4 ffb6 	bl	80016b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c74c:	4b0f      	ldr	r3, [pc, #60]	; (800c78c <HAL_PCD_MspInit+0xa0>)
 800c74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c750:	4a0e      	ldr	r2, [pc, #56]	; (800c78c <HAL_PCD_MspInit+0xa0>)
 800c752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c756:	6353      	str	r3, [r2, #52]	; 0x34
 800c758:	2300      	movs	r3, #0
 800c75a:	60fb      	str	r3, [r7, #12]
 800c75c:	4b0b      	ldr	r3, [pc, #44]	; (800c78c <HAL_PCD_MspInit+0xa0>)
 800c75e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c760:	4a0a      	ldr	r2, [pc, #40]	; (800c78c <HAL_PCD_MspInit+0xa0>)
 800c762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c766:	6453      	str	r3, [r2, #68]	; 0x44
 800c768:	4b08      	ldr	r3, [pc, #32]	; (800c78c <HAL_PCD_MspInit+0xa0>)
 800c76a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c76c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c770:	60fb      	str	r3, [r7, #12]
 800c772:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c774:	2200      	movs	r2, #0
 800c776:	2100      	movs	r1, #0
 800c778:	2043      	movs	r0, #67	; 0x43
 800c77a:	f7f4 ff66 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c77e:	2043      	movs	r0, #67	; 0x43
 800c780:	f7f4 ff7f 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c784:	bf00      	nop
 800c786:	3728      	adds	r7, #40	; 0x28
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	40023800 	.word	0x40023800
 800c790:	40020000 	.word	0x40020000

0800c794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	4610      	mov	r0, r2
 800c7ac:	f7fc fa6d 	bl	8008c8a <USBD_LL_SetupStage>
}
 800c7b0:	bf00      	nop
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c7ca:	78fa      	ldrb	r2, [r7, #3]
 800c7cc:	6879      	ldr	r1, [r7, #4]
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	00db      	lsls	r3, r3, #3
 800c7d2:	1a9b      	subs	r3, r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	440b      	add	r3, r1
 800c7d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	78fb      	ldrb	r3, [r7, #3]
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	f7fc faa5 	bl	8008d30 <USBD_LL_DataOutStage>
}
 800c7e6:	bf00      	nop
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b082      	sub	sp, #8
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c800:	78fa      	ldrb	r2, [r7, #3]
 800c802:	6879      	ldr	r1, [r7, #4]
 800c804:	4613      	mov	r3, r2
 800c806:	00db      	lsls	r3, r3, #3
 800c808:	1a9b      	subs	r3, r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	440b      	add	r3, r1
 800c80e:	3348      	adds	r3, #72	; 0x48
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	78fb      	ldrb	r3, [r7, #3]
 800c814:	4619      	mov	r1, r3
 800c816:	f7fc faee 	bl	8008df6 <USBD_LL_DataInStage>
}
 800c81a:	bf00      	nop
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c830:	4618      	mov	r0, r3
 800c832:	f7fc fbf2 	bl	800901a <USBD_LL_SOF>
}
 800c836:	bf00      	nop
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800c83e:	b580      	push	{r7, lr}
 800c840:	b084      	sub	sp, #16
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c846:	2301      	movs	r3, #1
 800c848:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d001      	beq.n	800c856 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c852:	f7f4 fc2d 	bl	80010b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c85c:	7bfa      	ldrb	r2, [r7, #15]
 800c85e:	4611      	mov	r1, r2
 800c860:	4618      	mov	r0, r3
 800c862:	f7fc fb9f 	bl	8008fa4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7fc fb58 	bl	8008f22 <USBD_LL_Reset>
}
 800c872:	bf00      	nop
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
	...

0800c87c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fc fb9a 	bl	8008fc4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	6812      	ldr	r2, [r2, #0]
 800c89e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c8a2:	f043 0301 	orr.w	r3, r3, #1
 800c8a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a1b      	ldr	r3, [r3, #32]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d005      	beq.n	800c8bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8b0:	4b04      	ldr	r3, [pc, #16]	; (800c8c4 <HAL_PCD_SuspendCallback+0x48>)
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	4a03      	ldr	r2, [pc, #12]	; (800c8c4 <HAL_PCD_SuspendCallback+0x48>)
 800c8b6:	f043 0306 	orr.w	r3, r3, #6
 800c8ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c8bc:	bf00      	nop
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	e000ed00 	.word	0xe000ed00

0800c8c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fc fb89 	bl	8008fee <USBD_LL_Resume>
}
 800c8dc:	bf00      	nop
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8f6:	78fa      	ldrb	r2, [r7, #3]
 800c8f8:	4611      	mov	r1, r2
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fc fbb4 	bl	8009068 <USBD_LL_IsoOUTIncomplete>
}
 800c900:	bf00      	nop
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	460b      	mov	r3, r1
 800c912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c91a:	78fa      	ldrb	r2, [r7, #3]
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fc fb95 	bl	800904e <USBD_LL_IsoINIncomplete>
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7fc fba1 	bl	8009082 <USBD_LL_DevConnected>
}
 800c940:	bf00      	nop
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c956:	4618      	mov	r0, r3
 800c958:	f7fc fb9e 	bl	8009098 <USBD_LL_DevDisconnected>
}
 800c95c:	bf00      	nop
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d13f      	bne.n	800c9f4 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c974:	4a22      	ldr	r2, [pc, #136]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4a20      	ldr	r2, [pc, #128]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c980:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c984:	4b1e      	ldr	r3, [pc, #120]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c98a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c98c:	4b1c      	ldr	r3, [pc, #112]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c98e:	2206      	movs	r2, #6
 800c990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c992:	4b1b      	ldr	r3, [pc, #108]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c994:	2202      	movs	r2, #2
 800c996:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c998:	4b19      	ldr	r3, [pc, #100]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c99a:	2200      	movs	r2, #0
 800c99c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c99e:	4b18      	ldr	r3, [pc, #96]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c9a0:	2202      	movs	r2, #2
 800c9a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c9a4:	4b16      	ldr	r3, [pc, #88]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c9aa:	4b15      	ldr	r3, [pc, #84]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c9b0:	4b13      	ldr	r3, [pc, #76]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c9b6:	4b12      	ldr	r3, [pc, #72]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c9bc:	4b10      	ldr	r3, [pc, #64]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c9c8:	480d      	ldr	r0, [pc, #52]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c9ca:	f7f5 f820 	bl	8001a0e <HAL_PCD_Init>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800c9d4:	f7f4 fb6c 	bl	80010b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c9d8:	2180      	movs	r1, #128	; 0x80
 800c9da:	4809      	ldr	r0, [pc, #36]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c9dc:	f7f6 f9df 	bl	8002d9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c9e0:	2240      	movs	r2, #64	; 0x40
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	4806      	ldr	r0, [pc, #24]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c9e6:	f7f6 f993 	bl	8002d10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c9ea:	2280      	movs	r2, #128	; 0x80
 800c9ec:	2101      	movs	r1, #1
 800c9ee:	4804      	ldr	r0, [pc, #16]	; (800ca00 <USBD_LL_Init+0x9c>)
 800c9f0:	f7f6 f98e 	bl	8002d10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20001950 	.word	0x20001950

0800ca04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca10:	2300      	movs	r3, #0
 800ca12:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7f5 f91b 	bl	8001c56 <HAL_PCD_Start>
 800ca20:	4603      	mov	r3, r0
 800ca22:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f000 f94a 	bl	800ccc0 <USBD_Get_USB_Status>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
 800ca42:	4608      	mov	r0, r1
 800ca44:	4611      	mov	r1, r2
 800ca46:	461a      	mov	r2, r3
 800ca48:	4603      	mov	r3, r0
 800ca4a:	70fb      	strb	r3, [r7, #3]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	70bb      	strb	r3, [r7, #2]
 800ca50:	4613      	mov	r3, r2
 800ca52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca54:	2300      	movs	r3, #0
 800ca56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca62:	78bb      	ldrb	r3, [r7, #2]
 800ca64:	883a      	ldrh	r2, [r7, #0]
 800ca66:	78f9      	ldrb	r1, [r7, #3]
 800ca68:	f7f5 fd2c 	bl	80024c4 <HAL_PCD_EP_Open>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f000 f924 	bl	800ccc0 <USBD_Get_USB_Status>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ca7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b084      	sub	sp, #16
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
 800ca8e:	460b      	mov	r3, r1
 800ca90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca92:	2300      	movs	r3, #0
 800ca94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca96:	2300      	movs	r3, #0
 800ca98:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800caa0:	78fa      	ldrb	r2, [r7, #3]
 800caa2:	4611      	mov	r1, r2
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7f5 fd75 	bl	8002594 <HAL_PCD_EP_Close>
 800caaa:	4603      	mov	r3, r0
 800caac:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800caae:	7bfb      	ldrb	r3, [r7, #15]
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 f905 	bl	800ccc0 <USBD_Get_USB_Status>
 800cab6:	4603      	mov	r3, r0
 800cab8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800caba:	7bbb      	ldrb	r3, [r7, #14]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	460b      	mov	r3, r1
 800cace:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cad4:	2300      	movs	r3, #0
 800cad6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cade:	78fa      	ldrb	r2, [r7, #3]
 800cae0:	4611      	mov	r1, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7f5 ff07 	bl	80028f6 <HAL_PCD_EP_Flush>
 800cae8:	4603      	mov	r3, r0
 800caea:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800caec:	7bfb      	ldrb	r3, [r7, #15]
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 f8e6 	bl	800ccc0 <USBD_Get_USB_Status>
 800caf4:	4603      	mov	r3, r0
 800caf6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b084      	sub	sp, #16
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb1c:	78fa      	ldrb	r2, [r7, #3]
 800cb1e:	4611      	mov	r1, r2
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7f5 fe2e 	bl	8002782 <HAL_PCD_EP_SetStall>
 800cb26:	4603      	mov	r3, r0
 800cb28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb2a:	7bfb      	ldrb	r3, [r7, #15]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 f8c7 	bl	800ccc0 <USBD_Get_USB_Status>
 800cb32:	4603      	mov	r3, r0
 800cb34:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800cb36:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3710      	adds	r7, #16
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	460b      	mov	r3, r1
 800cb4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb5a:	78fa      	ldrb	r2, [r7, #3]
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7f5 fe73 	bl	800284a <HAL_PCD_EP_ClrStall>
 800cb64:	4603      	mov	r3, r0
 800cb66:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f000 f8a8 	bl	800ccc0 <USBD_Get_USB_Status>
 800cb70:	4603      	mov	r3, r0
 800cb72:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800cb74:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb7e:	b480      	push	{r7}
 800cb80:	b085      	sub	sp, #20
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	460b      	mov	r3, r1
 800cb88:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb90:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800cb92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	da0b      	bge.n	800cbb2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800cb9a:	78fb      	ldrb	r3, [r7, #3]
 800cb9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cba0:	68f9      	ldr	r1, [r7, #12]
 800cba2:	4613      	mov	r3, r2
 800cba4:	00db      	lsls	r3, r3, #3
 800cba6:	1a9b      	subs	r3, r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	440b      	add	r3, r1
 800cbac:	333e      	adds	r3, #62	; 0x3e
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	e00b      	b.n	800cbca <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800cbb2:	78fb      	ldrb	r3, [r7, #3]
 800cbb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbb8:	68f9      	ldr	r1, [r7, #12]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	1a9b      	subs	r3, r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	440b      	add	r3, r1
 800cbc4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cbc8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b084      	sub	sp, #16
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	460b      	mov	r3, r1
 800cbe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbf0:	78fa      	ldrb	r2, [r7, #3]
 800cbf2:	4611      	mov	r1, r2
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7f5 fc40 	bl	800247a <HAL_PCD_SetAddress>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbfe:	7bfb      	ldrb	r3, [r7, #15]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 f85d 	bl	800ccc0 <USBD_Get_USB_Status>
 800cc06:	4603      	mov	r3, r0
 800cc08:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800cc0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	607a      	str	r2, [r7, #4]
 800cc1e:	603b      	str	r3, [r7, #0]
 800cc20:	460b      	mov	r3, r1
 800cc22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc32:	7af9      	ldrb	r1, [r7, #11]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	f7f5 fd59 	bl	80026ee <HAL_PCD_EP_Transmit>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800cc40:	7dfb      	ldrb	r3, [r7, #23]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f000 f83c 	bl	800ccc0 <USBD_Get_USB_Status>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800cc4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3718      	adds	r7, #24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b086      	sub	sp, #24
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	60f8      	str	r0, [r7, #12]
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	603b      	str	r3, [r7, #0]
 800cc62:	460b      	mov	r3, r1
 800cc64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc74:	7af9      	ldrb	r1, [r7, #11]
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	f7f5 fcd5 	bl	8002628 <HAL_PCD_EP_Receive>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800cc82:	7dfb      	ldrb	r3, [r7, #23]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f000 f81b 	bl	800ccc0 <USBD_Get_USB_Status>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800cc8e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3718      	adds	r7, #24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	460b      	mov	r3, r1
 800cca2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccaa:	78fa      	ldrb	r2, [r7, #3]
 800ccac:	4611      	mov	r1, r2
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7f5 fd05 	bl	80026be <HAL_PCD_EP_GetRxCount>
 800ccb4:	4603      	mov	r3, r0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
	...

0800ccc0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccca:	2300      	movs	r3, #0
 800cccc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ccce:	79fb      	ldrb	r3, [r7, #7]
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d817      	bhi.n	800cd04 <USBD_Get_USB_Status+0x44>
 800ccd4:	a201      	add	r2, pc, #4	; (adr r2, 800ccdc <USBD_Get_USB_Status+0x1c>)
 800ccd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccda:	bf00      	nop
 800ccdc:	0800cced 	.word	0x0800cced
 800cce0:	0800ccf3 	.word	0x0800ccf3
 800cce4:	0800ccf9 	.word	0x0800ccf9
 800cce8:	0800ccff 	.word	0x0800ccff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf0:	e00b      	b.n	800cd0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf6:	e008      	b.n	800cd0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	73fb      	strb	r3, [r7, #15]
    break;
 800ccfc:	e005      	b.n	800cd0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	73fb      	strb	r3, [r7, #15]
    break;
 800cd02:	e002      	b.n	800cd0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cd04:	2303      	movs	r3, #3
 800cd06:	73fb      	strb	r3, [r7, #15]
    break;
 800cd08:	bf00      	nop
  }
  return usb_status;
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <__errno>:
 800cd18:	4b01      	ldr	r3, [pc, #4]	; (800cd20 <__errno+0x8>)
 800cd1a:	6818      	ldr	r0, [r3, #0]
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	20000164 	.word	0x20000164

0800cd24 <__libc_init_array>:
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	4e0d      	ldr	r6, [pc, #52]	; (800cd5c <__libc_init_array+0x38>)
 800cd28:	4c0d      	ldr	r4, [pc, #52]	; (800cd60 <__libc_init_array+0x3c>)
 800cd2a:	1ba4      	subs	r4, r4, r6
 800cd2c:	10a4      	asrs	r4, r4, #2
 800cd2e:	2500      	movs	r5, #0
 800cd30:	42a5      	cmp	r5, r4
 800cd32:	d109      	bne.n	800cd48 <__libc_init_array+0x24>
 800cd34:	4e0b      	ldr	r6, [pc, #44]	; (800cd64 <__libc_init_array+0x40>)
 800cd36:	4c0c      	ldr	r4, [pc, #48]	; (800cd68 <__libc_init_array+0x44>)
 800cd38:	f000 f8ea 	bl	800cf10 <_init>
 800cd3c:	1ba4      	subs	r4, r4, r6
 800cd3e:	10a4      	asrs	r4, r4, #2
 800cd40:	2500      	movs	r5, #0
 800cd42:	42a5      	cmp	r5, r4
 800cd44:	d105      	bne.n	800cd52 <__libc_init_array+0x2e>
 800cd46:	bd70      	pop	{r4, r5, r6, pc}
 800cd48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cd4c:	4798      	blx	r3
 800cd4e:	3501      	adds	r5, #1
 800cd50:	e7ee      	b.n	800cd30 <__libc_init_array+0xc>
 800cd52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cd56:	4798      	blx	r3
 800cd58:	3501      	adds	r5, #1
 800cd5a:	e7f2      	b.n	800cd42 <__libc_init_array+0x1e>
 800cd5c:	0800d0b0 	.word	0x0800d0b0
 800cd60:	0800d0b0 	.word	0x0800d0b0
 800cd64:	0800d0b0 	.word	0x0800d0b0
 800cd68:	0800d0b4 	.word	0x0800d0b4

0800cd6c <malloc>:
 800cd6c:	4b02      	ldr	r3, [pc, #8]	; (800cd78 <malloc+0xc>)
 800cd6e:	4601      	mov	r1, r0
 800cd70:	6818      	ldr	r0, [r3, #0]
 800cd72:	f000 b861 	b.w	800ce38 <_malloc_r>
 800cd76:	bf00      	nop
 800cd78:	20000164 	.word	0x20000164

0800cd7c <free>:
 800cd7c:	4b02      	ldr	r3, [pc, #8]	; (800cd88 <free+0xc>)
 800cd7e:	4601      	mov	r1, r0
 800cd80:	6818      	ldr	r0, [r3, #0]
 800cd82:	f000 b80b 	b.w	800cd9c <_free_r>
 800cd86:	bf00      	nop
 800cd88:	20000164 	.word	0x20000164

0800cd8c <memset>:
 800cd8c:	4402      	add	r2, r0
 800cd8e:	4603      	mov	r3, r0
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d100      	bne.n	800cd96 <memset+0xa>
 800cd94:	4770      	bx	lr
 800cd96:	f803 1b01 	strb.w	r1, [r3], #1
 800cd9a:	e7f9      	b.n	800cd90 <memset+0x4>

0800cd9c <_free_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4605      	mov	r5, r0
 800cda0:	2900      	cmp	r1, #0
 800cda2:	d045      	beq.n	800ce30 <_free_r+0x94>
 800cda4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cda8:	1f0c      	subs	r4, r1, #4
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	bfb8      	it	lt
 800cdae:	18e4      	addlt	r4, r4, r3
 800cdb0:	f000 f8ac 	bl	800cf0c <__malloc_lock>
 800cdb4:	4a1f      	ldr	r2, [pc, #124]	; (800ce34 <_free_r+0x98>)
 800cdb6:	6813      	ldr	r3, [r2, #0]
 800cdb8:	4610      	mov	r0, r2
 800cdba:	b933      	cbnz	r3, 800cdca <_free_r+0x2e>
 800cdbc:	6063      	str	r3, [r4, #4]
 800cdbe:	6014      	str	r4, [r2, #0]
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdc6:	f000 b8a2 	b.w	800cf0e <__malloc_unlock>
 800cdca:	42a3      	cmp	r3, r4
 800cdcc:	d90c      	bls.n	800cde8 <_free_r+0x4c>
 800cdce:	6821      	ldr	r1, [r4, #0]
 800cdd0:	1862      	adds	r2, r4, r1
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	bf04      	itt	eq
 800cdd6:	681a      	ldreq	r2, [r3, #0]
 800cdd8:	685b      	ldreq	r3, [r3, #4]
 800cdda:	6063      	str	r3, [r4, #4]
 800cddc:	bf04      	itt	eq
 800cdde:	1852      	addeq	r2, r2, r1
 800cde0:	6022      	streq	r2, [r4, #0]
 800cde2:	6004      	str	r4, [r0, #0]
 800cde4:	e7ec      	b.n	800cdc0 <_free_r+0x24>
 800cde6:	4613      	mov	r3, r2
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	b10a      	cbz	r2, 800cdf0 <_free_r+0x54>
 800cdec:	42a2      	cmp	r2, r4
 800cdee:	d9fa      	bls.n	800cde6 <_free_r+0x4a>
 800cdf0:	6819      	ldr	r1, [r3, #0]
 800cdf2:	1858      	adds	r0, r3, r1
 800cdf4:	42a0      	cmp	r0, r4
 800cdf6:	d10b      	bne.n	800ce10 <_free_r+0x74>
 800cdf8:	6820      	ldr	r0, [r4, #0]
 800cdfa:	4401      	add	r1, r0
 800cdfc:	1858      	adds	r0, r3, r1
 800cdfe:	4282      	cmp	r2, r0
 800ce00:	6019      	str	r1, [r3, #0]
 800ce02:	d1dd      	bne.n	800cdc0 <_free_r+0x24>
 800ce04:	6810      	ldr	r0, [r2, #0]
 800ce06:	6852      	ldr	r2, [r2, #4]
 800ce08:	605a      	str	r2, [r3, #4]
 800ce0a:	4401      	add	r1, r0
 800ce0c:	6019      	str	r1, [r3, #0]
 800ce0e:	e7d7      	b.n	800cdc0 <_free_r+0x24>
 800ce10:	d902      	bls.n	800ce18 <_free_r+0x7c>
 800ce12:	230c      	movs	r3, #12
 800ce14:	602b      	str	r3, [r5, #0]
 800ce16:	e7d3      	b.n	800cdc0 <_free_r+0x24>
 800ce18:	6820      	ldr	r0, [r4, #0]
 800ce1a:	1821      	adds	r1, r4, r0
 800ce1c:	428a      	cmp	r2, r1
 800ce1e:	bf04      	itt	eq
 800ce20:	6811      	ldreq	r1, [r2, #0]
 800ce22:	6852      	ldreq	r2, [r2, #4]
 800ce24:	6062      	str	r2, [r4, #4]
 800ce26:	bf04      	itt	eq
 800ce28:	1809      	addeq	r1, r1, r0
 800ce2a:	6021      	streq	r1, [r4, #0]
 800ce2c:	605c      	str	r4, [r3, #4]
 800ce2e:	e7c7      	b.n	800cdc0 <_free_r+0x24>
 800ce30:	bd38      	pop	{r3, r4, r5, pc}
 800ce32:	bf00      	nop
 800ce34:	20000220 	.word	0x20000220

0800ce38 <_malloc_r>:
 800ce38:	b570      	push	{r4, r5, r6, lr}
 800ce3a:	1ccd      	adds	r5, r1, #3
 800ce3c:	f025 0503 	bic.w	r5, r5, #3
 800ce40:	3508      	adds	r5, #8
 800ce42:	2d0c      	cmp	r5, #12
 800ce44:	bf38      	it	cc
 800ce46:	250c      	movcc	r5, #12
 800ce48:	2d00      	cmp	r5, #0
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	db01      	blt.n	800ce52 <_malloc_r+0x1a>
 800ce4e:	42a9      	cmp	r1, r5
 800ce50:	d903      	bls.n	800ce5a <_malloc_r+0x22>
 800ce52:	230c      	movs	r3, #12
 800ce54:	6033      	str	r3, [r6, #0]
 800ce56:	2000      	movs	r0, #0
 800ce58:	bd70      	pop	{r4, r5, r6, pc}
 800ce5a:	f000 f857 	bl	800cf0c <__malloc_lock>
 800ce5e:	4a21      	ldr	r2, [pc, #132]	; (800cee4 <_malloc_r+0xac>)
 800ce60:	6814      	ldr	r4, [r2, #0]
 800ce62:	4621      	mov	r1, r4
 800ce64:	b991      	cbnz	r1, 800ce8c <_malloc_r+0x54>
 800ce66:	4c20      	ldr	r4, [pc, #128]	; (800cee8 <_malloc_r+0xb0>)
 800ce68:	6823      	ldr	r3, [r4, #0]
 800ce6a:	b91b      	cbnz	r3, 800ce74 <_malloc_r+0x3c>
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f000 f83d 	bl	800ceec <_sbrk_r>
 800ce72:	6020      	str	r0, [r4, #0]
 800ce74:	4629      	mov	r1, r5
 800ce76:	4630      	mov	r0, r6
 800ce78:	f000 f838 	bl	800ceec <_sbrk_r>
 800ce7c:	1c43      	adds	r3, r0, #1
 800ce7e:	d124      	bne.n	800ceca <_malloc_r+0x92>
 800ce80:	230c      	movs	r3, #12
 800ce82:	6033      	str	r3, [r6, #0]
 800ce84:	4630      	mov	r0, r6
 800ce86:	f000 f842 	bl	800cf0e <__malloc_unlock>
 800ce8a:	e7e4      	b.n	800ce56 <_malloc_r+0x1e>
 800ce8c:	680b      	ldr	r3, [r1, #0]
 800ce8e:	1b5b      	subs	r3, r3, r5
 800ce90:	d418      	bmi.n	800cec4 <_malloc_r+0x8c>
 800ce92:	2b0b      	cmp	r3, #11
 800ce94:	d90f      	bls.n	800ceb6 <_malloc_r+0x7e>
 800ce96:	600b      	str	r3, [r1, #0]
 800ce98:	50cd      	str	r5, [r1, r3]
 800ce9a:	18cc      	adds	r4, r1, r3
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	f000 f836 	bl	800cf0e <__malloc_unlock>
 800cea2:	f104 000b 	add.w	r0, r4, #11
 800cea6:	1d23      	adds	r3, r4, #4
 800cea8:	f020 0007 	bic.w	r0, r0, #7
 800ceac:	1ac3      	subs	r3, r0, r3
 800ceae:	d0d3      	beq.n	800ce58 <_malloc_r+0x20>
 800ceb0:	425a      	negs	r2, r3
 800ceb2:	50e2      	str	r2, [r4, r3]
 800ceb4:	e7d0      	b.n	800ce58 <_malloc_r+0x20>
 800ceb6:	428c      	cmp	r4, r1
 800ceb8:	684b      	ldr	r3, [r1, #4]
 800ceba:	bf16      	itet	ne
 800cebc:	6063      	strne	r3, [r4, #4]
 800cebe:	6013      	streq	r3, [r2, #0]
 800cec0:	460c      	movne	r4, r1
 800cec2:	e7eb      	b.n	800ce9c <_malloc_r+0x64>
 800cec4:	460c      	mov	r4, r1
 800cec6:	6849      	ldr	r1, [r1, #4]
 800cec8:	e7cc      	b.n	800ce64 <_malloc_r+0x2c>
 800ceca:	1cc4      	adds	r4, r0, #3
 800cecc:	f024 0403 	bic.w	r4, r4, #3
 800ced0:	42a0      	cmp	r0, r4
 800ced2:	d005      	beq.n	800cee0 <_malloc_r+0xa8>
 800ced4:	1a21      	subs	r1, r4, r0
 800ced6:	4630      	mov	r0, r6
 800ced8:	f000 f808 	bl	800ceec <_sbrk_r>
 800cedc:	3001      	adds	r0, #1
 800cede:	d0cf      	beq.n	800ce80 <_malloc_r+0x48>
 800cee0:	6025      	str	r5, [r4, #0]
 800cee2:	e7db      	b.n	800ce9c <_malloc_r+0x64>
 800cee4:	20000220 	.word	0x20000220
 800cee8:	20000224 	.word	0x20000224

0800ceec <_sbrk_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4c06      	ldr	r4, [pc, #24]	; (800cf08 <_sbrk_r+0x1c>)
 800cef0:	2300      	movs	r3, #0
 800cef2:	4605      	mov	r5, r0
 800cef4:	4608      	mov	r0, r1
 800cef6:	6023      	str	r3, [r4, #0]
 800cef8:	f7f4 f9cc 	bl	8001294 <_sbrk>
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	d102      	bne.n	800cf06 <_sbrk_r+0x1a>
 800cf00:	6823      	ldr	r3, [r4, #0]
 800cf02:	b103      	cbz	r3, 800cf06 <_sbrk_r+0x1a>
 800cf04:	602b      	str	r3, [r5, #0]
 800cf06:	bd38      	pop	{r3, r4, r5, pc}
 800cf08:	20001d58 	.word	0x20001d58

0800cf0c <__malloc_lock>:
 800cf0c:	4770      	bx	lr

0800cf0e <__malloc_unlock>:
 800cf0e:	4770      	bx	lr

0800cf10 <_init>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	bf00      	nop
 800cf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf16:	bc08      	pop	{r3}
 800cf18:	469e      	mov	lr, r3
 800cf1a:	4770      	bx	lr

0800cf1c <_fini>:
 800cf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf1e:	bf00      	nop
 800cf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf22:	bc08      	pop	{r3}
 800cf24:	469e      	mov	lr, r3
 800cf26:	4770      	bx	lr
