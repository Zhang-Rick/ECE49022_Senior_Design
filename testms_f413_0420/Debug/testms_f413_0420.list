
testms_f413_0420.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a998  0800a998  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a998  0800a998  0001a998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9a0  0800a9a0  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9a0  0800a9a0  0001a9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9a4  0800a9a4  0001a9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800a9a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e28  200001c8  0800ab70  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ff0  0800ab70  00020ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd29  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000042d1  00000000  00000000  0003df21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a0  00000000  00000000  000421f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  00043398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026b8d  00000000  00000000  00044338  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013a1a  00000000  00000000  0006aec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdadf  00000000  00000000  0007e8df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c3be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bec  00000000  00000000  0014c43c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c8 	.word	0x200001c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a890 	.word	0x0800a890

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001cc 	.word	0x200001cc
 8000214:	0800a890 	.word	0x0800a890

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fb0e 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f82c 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8d2 	bl	80006cc <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000528:	f000 f8b0 	bl	800068c <MX_SDIO_SD_Init>
  MX_USB_DEVICE_Init();
 800052c:	f009 f830 	bl	8009590 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8000530:	f006 f8e0 	bl	80066f4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
//  HAL_SD_WideBusOperation()
  HAL_SD_Init(&hsd);
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <main+0x54>)
 8000536:	f002 fef3 	bl	8003320 <HAL_SD_Init>
  //HAL_SD_WideBusOperation_Config(&hsd, SDIO_BUS_WIDE_4B);
  HAL_Delay(500);
 800053a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053e:	f000 fb6f 	bl	8000c20 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	480a      	ldr	r0, [pc, #40]	; (8000570 <main+0x58>)
 8000548:	f000 fe30 	bl	80011ac <HAL_GPIO_WritePin>


  fp = fopen('E:\haha.txt','r');
 800054c:	2172      	movs	r1, #114	; 0x72
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <main+0x5c>)
 8000550:	f009 fd3a 	bl	8009fc8 <fopen>
 8000554:	4602      	mov	r2, r0
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <main+0x60>)
 8000558:	601a      	str	r2, [r3, #0]
  if (fp == NULL)
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <main+0x60>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d103      	bne.n	800056a <main+0x52>
     {
       // perror("Error while opening the file.\n");
        //exit(EXIT_FAILURE);
	  HAL_Delay(500);
 8000562:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000566:	f000 fb5b 	bl	8000c20 <HAL_Delay>
     }

  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x52>
 800056c:	20000204 	.word	0x20000204
 8000570:	40020800 	.word	0x40020800
 8000574:	2e747874 	.word	0x2e747874
 8000578:	20000200 	.word	0x20000200

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b0aa      	sub	sp, #168	; 0xa8
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f009 fe4e 	bl	800a22c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2258      	movs	r2, #88	; 0x58
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f009 fe3f 	bl	800a22c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	4b34      	ldr	r3, [pc, #208]	; (8000684 <SystemClock_Config+0x108>)
 80005b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b6:	4a33      	ldr	r2, [pc, #204]	; (8000684 <SystemClock_Config+0x108>)
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005bc:	6413      	str	r3, [r2, #64]	; 0x40
 80005be:	4b31      	ldr	r3, [pc, #196]	; (8000684 <SystemClock_Config+0x108>)
 80005c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ca:	2300      	movs	r3, #0
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <SystemClock_Config+0x10c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a2d      	ldr	r2, [pc, #180]	; (8000688 <SystemClock_Config+0x10c>)
 80005d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <SystemClock_Config+0x10c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e6:	2301      	movs	r3, #1
 80005e8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ee:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	2302      	movs	r3, #2
 80005f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005fe:	2304      	movs	r3, #4
 8000600:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000604:	2348      	movs	r3, #72	; 0x48
 8000606:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000610:	2303      	movs	r3, #3
 8000612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fc3b 	bl	8002e9c <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800062c:	f000 f8ac 	bl	8000788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000646:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800064a:	2102      	movs	r1, #2
 800064c:	4618      	mov	r0, r3
 800064e:	f001 ffcf 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000658:	f000 f896 	bl	8000788 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800065c:	2360      	movs	r3, #96	; 0x60
 800065e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000660:	2300      	movs	r3, #0
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4618      	mov	r0, r3
 800066e:	f002 f989 	bl	8002984 <HAL_RCCEx_PeriphCLKConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000678:	f000 f886 	bl	8000788 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	37a8      	adds	r7, #168	; 0xa8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_SDIO_SD_Init+0x38>)
 8000692:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <MX_SDIO_SD_Init+0x3c>)
 8000694:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_SDIO_SD_Init+0x38>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_SDIO_SD_Init+0x38>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_SDIO_SD_Init+0x38>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_SDIO_SD_Init+0x38>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <MX_SDIO_SD_Init+0x38>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 36;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <MX_SDIO_SD_Init+0x38>)
 80006b6:	2224      	movs	r2, #36	; 0x24
 80006b8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	20000204 	.word	0x20000204
 80006c8:	40012c00 	.word	0x40012c00

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a25      	ldr	r2, [pc, #148]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a17      	ldr	r2, [pc, #92]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_GPIO_Init+0xb4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000758:	f000 fd28 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000774:	f000 fb88 	bl	8000e88 <HAL_GPIO_Init>

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	; 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40020800 	.word	0x40020800

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ac:	6453      	str	r3, [r2, #68]	; 0x44
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a38      	ldr	r2, [pc, #224]	; (80008e8 <HAL_SD_MspInit+0x100>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d169      	bne.n	80008de <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	4b37      	ldr	r3, [pc, #220]	; (80008ec <HAL_SD_MspInit+0x104>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a36      	ldr	r2, [pc, #216]	; (80008ec <HAL_SD_MspInit+0x104>)
 8000814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b34      	ldr	r3, [pc, #208]	; (80008ec <HAL_SD_MspInit+0x104>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <HAL_SD_MspInit+0x104>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a2f      	ldr	r2, [pc, #188]	; (80008ec <HAL_SD_MspInit+0x104>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <HAL_SD_MspInit+0x104>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <HAL_SD_MspInit+0x104>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a28      	ldr	r2, [pc, #160]	; (80008ec <HAL_SD_MspInit+0x104>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <HAL_SD_MspInit+0x104>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <HAL_SD_MspInit+0x104>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a21      	ldr	r2, [pc, #132]	; (80008ec <HAL_SD_MspInit+0x104>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <HAL_SD_MspInit+0x104>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800088a:	230c      	movs	r3, #12
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4816      	ldr	r0, [pc, #88]	; (80008f0 <HAL_SD_MspInit+0x108>)
 8000896:	f000 faf7 	bl	8000e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800089a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800089e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008ac:	230c      	movs	r3, #12
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	480f      	ldr	r0, [pc, #60]	; (80008f4 <HAL_SD_MspInit+0x10c>)
 80008b8:	f000 fae6 	bl	8000e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80008bc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008ce:	230c      	movs	r3, #12
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <HAL_SD_MspInit+0x110>)
 80008da:	f000 fad5 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3730      	adds	r7, #48	; 0x30
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40012c00 	.word	0x40012c00
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40020800 	.word	0x40020800

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f946 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <OTG_FS_IRQHandler+0x10>)
 800095e:	f000 fd95 	bl	800148c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000be4 	.word	0x20000be4

0800096c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e00a      	b.n	8000994 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800097e:	f3af 8000 	nop.w
 8000982:	4601      	mov	r1, r0
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	b2ca      	uxtb	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf0      	blt.n	800097e <_read+0x12>
	}

return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	e009      	b.n	80009cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	60ba      	str	r2, [r7, #8]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf1      	blt.n	80009b8 <_write+0x12>
	}
	return len;
 80009d4:	687b      	ldr	r3, [r7, #4]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_close>:

int _close(int file)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
	return -1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a06:	605a      	str	r2, [r3, #4]
	return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <_isatty>:

int _isatty(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
	return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_open>:

int _open(char *path, int flags, ...)
{
 8000a46:	b40e      	push	{r1, r2, r3}
 8000a48:	b480      	push	{r7}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	b003      	add	sp, #12
 8000a60:	4770      	bx	lr
	...

08000a64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x50>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x16>
		heap_end = &end;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <_sbrk+0x50>)
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <_sbrk+0x54>)
 8000a78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <_sbrk+0x50>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <_sbrk+0x50>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	466a      	mov	r2, sp
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d907      	bls.n	8000a9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a8e:	f009 fa55 	bl	8009f3c <__errno>
 8000a92:	4602      	mov	r2, r0
 8000a94:	230c      	movs	r3, #12
 8000a96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	e006      	b.n	8000aac <_sbrk+0x48>
	}

	heap_end += incr;
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <_sbrk+0x50>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <_sbrk+0x50>)
 8000aa8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001e4 	.word	0x200001e4
 8000ab8:	20000ff0 	.word	0x20000ff0

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <SystemInit+0x28>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <SystemInit+0x28>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SystemInit+0x28>)
 8000ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000aec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aee:	e003      	b.n	8000af8 <LoopCopyDataInit>

08000af0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000af2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000af4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000af6:	3104      	adds	r1, #4

08000af8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000afc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000afe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b00:	d3f6      	bcc.n	8000af0 <CopyDataInit>
  ldr  r2, =_sbss
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b04:	e002      	b.n	8000b0c <LoopFillZerobss>

08000b06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000b06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b08:	f842 3b04 	str.w	r3, [r2], #4

08000b0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b10:	d3f9      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b12:	f7ff ffd3 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f009 faf1 	bl	800a0fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1a:	f7ff fcfd 	bl	8000518 <main>
  bx  lr    
 8000b1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b20:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000b24:	0800a9a8 	.word	0x0800a9a8
  ldr  r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b2c:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8000b30:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8000b34:	20000ff0 	.word	0x20000ff0

08000b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_Init+0x40>)
 8000b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_Init+0x40>)
 8000b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x40>)
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f94d 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fe12 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023c00 	.word	0x40023c00

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f965 	bl	8000e6e <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f92d 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	200002a8 	.word	0x200002a8

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200002a8 	.word	0x200002a8

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff ffee 	bl	8000c08 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_Delay+0x40>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c46:	bf00      	nop
 8000c48:	f7ff ffde 	bl	8000c08 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000008 	.word	0x20000008

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff29 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff3e 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff31 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e165      	b.n	8001170 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8154 	bne.w	800116a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d00b      	beq.n	8000ee2 <HAL_GPIO_Init+0x5a>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed6:	2b11      	cmp	r3, #17
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b12      	cmp	r3, #18
 8000ee0:	d130      	bne.n	8000f44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	f003 0201 	and.w	r2, r3, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0xfc>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b12      	cmp	r3, #18
 8000f82:	d123      	bne.n	8000fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	69b9      	ldr	r1, [r7, #24]
 8000fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0203 	and.w	r2, r3, #3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80ae 	beq.w	800116a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b5c      	ldr	r3, [pc, #368]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a5b      	ldr	r2, [pc, #364]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b59      	ldr	r3, [pc, #356]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102a:	4a57      	ldr	r2, [pc, #348]	; (8001188 <HAL_GPIO_Init+0x300>)
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4e      	ldr	r2, [pc, #312]	; (800118c <HAL_GPIO_Init+0x304>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d025      	beq.n	80010a2 <HAL_GPIO_Init+0x21a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4d      	ldr	r2, [pc, #308]	; (8001190 <HAL_GPIO_Init+0x308>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d01f      	beq.n	800109e <HAL_GPIO_Init+0x216>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4c      	ldr	r2, [pc, #304]	; (8001194 <HAL_GPIO_Init+0x30c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d019      	beq.n	800109a <HAL_GPIO_Init+0x212>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4b      	ldr	r2, [pc, #300]	; (8001198 <HAL_GPIO_Init+0x310>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x20e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4a      	ldr	r2, [pc, #296]	; (800119c <HAL_GPIO_Init+0x314>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x20a>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a49      	ldr	r2, [pc, #292]	; (80011a0 <HAL_GPIO_Init+0x318>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x206>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a48      	ldr	r2, [pc, #288]	; (80011a4 <HAL_GPIO_Init+0x31c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x202>
 8001086:	2306      	movs	r3, #6
 8001088:	e00c      	b.n	80010a4 <HAL_GPIO_Init+0x21c>
 800108a:	2307      	movs	r3, #7
 800108c:	e00a      	b.n	80010a4 <HAL_GPIO_Init+0x21c>
 800108e:	2305      	movs	r3, #5
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x21c>
 8001092:	2304      	movs	r3, #4
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x21c>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x21c>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x21c>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x21c>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4934      	ldr	r1, [pc, #208]	; (8001188 <HAL_GPIO_Init+0x300>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c2:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <HAL_GPIO_Init+0x320>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e6:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <HAL_GPIO_Init+0x320>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_GPIO_Init+0x320>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <HAL_GPIO_Init+0x320>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_GPIO_Init+0x320>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113a:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <HAL_GPIO_Init+0x320>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_GPIO_Init+0x320>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001164:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <HAL_GPIO_Init+0x320>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f ae96 	bls.w	8000ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	3724      	adds	r7, #36	; 0x24
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40023800 	.word	0x40023800
 8001188:	40013800 	.word	0x40013800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40021400 	.word	0x40021400
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40013c00 	.word	0x40013c00

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e0:	b08f      	sub	sp, #60	; 0x3c
 80011e2:	af0a      	add	r7, sp, #40	; 0x28
 80011e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e116      	b.n	800141e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d106      	bne.n	8001210 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f008 fb80 	bl	8009910 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2203      	movs	r2, #3
 8001214:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f004 f867 	bl	8005302 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	687e      	ldr	r6, [r7, #4]
 800123c:	466d      	mov	r5, sp
 800123e:	f106 0410 	add.w	r4, r6, #16
 8001242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800124e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001252:	1d33      	adds	r3, r6, #4
 8001254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f003 ff3e 	bl	80050d8 <USB_CoreInit>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d005      	beq.n	800126e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2202      	movs	r2, #2
 8001266:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e0d7      	b.n	800141e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f004 f855 	bl	8005324 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127a:	2300      	movs	r3, #0
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	e04a      	b.n	8001316 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	333d      	adds	r3, #61	; 0x3d
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	1a9b      	subs	r3, r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	333c      	adds	r3, #60	; 0x3c
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	b298      	uxth	r0, r3
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	3342      	adds	r3, #66	; 0x42
 80012bc:	4602      	mov	r2, r0
 80012be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	1a9b      	subs	r3, r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	333f      	adds	r3, #63	; 0x3f
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	1a9b      	subs	r3, r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	3344      	adds	r3, #68	; 0x44
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	3348      	adds	r3, #72	; 0x48
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	3350      	adds	r3, #80	; 0x50
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	3301      	adds	r3, #1
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	d3af      	bcc.n	8001280 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e044      	b.n	80013b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	3301      	adds	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d3b5      	bcc.n	8001326 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	687e      	ldr	r6, [r7, #4]
 80013c2:	466d      	mov	r5, sp
 80013c4:	f106 0410 	add.w	r4, r6, #16
 80013c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80013d8:	1d33      	adds	r3, r6, #4
 80013da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f003 ffcb 	bl	8005378 <USB_DevInit>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e014      	b.n	800141e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	2b01      	cmp	r3, #1
 800140a:	d102      	bne.n	8001412 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f001 f8bf 	bl	8002590 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f004 fffd 	bl	8006416 <USB_DevDisconnect>

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001426 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_PCD_Start+0x1c>
 800143e:	2302      	movs	r3, #2
 8001440:	e020      	b.n	8001484 <HAL_PCD_Start+0x5e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	2b01      	cmp	r3, #1
 8001450:	d109      	bne.n	8001466 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001456:	2b01      	cmp	r3, #1
 8001458:	d005      	beq.n	8001466 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f004 ffbb 	bl	80063e6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f003 ff33 	bl	80052e0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b08d      	sub	sp, #52	; 0x34
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f005 f862 	bl	800656c <USB_GetMode>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 83ca 	bne.w	8001c44 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 ffc6 	bl	8006446 <USB_ReadInterrupts>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 83c0 	beq.w	8001c42 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 ffbd 	bl	8006446 <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d107      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f002 0202 	and.w	r2, r2, #2
 80014e4:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 ffab 	bl	8006446 <USB_ReadInterrupts>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b10      	cmp	r3, #16
 80014f8:	d161      	bne.n	80015be <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0210 	bic.w	r2, r2, #16
 8001508:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f003 020f 	and.w	r2, r3, #15
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	3304      	adds	r3, #4
 8001528:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	0c5b      	lsrs	r3, r3, #17
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	2b02      	cmp	r3, #2
 8001534:	d124      	bne.n	8001580 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d035      	beq.n	80015ae <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800154c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	6a38      	ldr	r0, [r7, #32]
 8001556:	f004 fe23 	bl	80061a0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001566:	441a      	add	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	699a      	ldr	r2, [r3, #24]
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001578:	441a      	add	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	619a      	str	r2, [r3, #24]
 800157e:	e016      	b.n	80015ae <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	0c5b      	lsrs	r3, r3, #17
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	2b06      	cmp	r3, #6
 800158a:	d110      	bne.n	80015ae <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001592:	2208      	movs	r2, #8
 8001594:	4619      	mov	r1, r3
 8001596:	6a38      	ldr	r0, [r7, #32]
 8001598:	f004 fe02 	bl	80061a0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	699a      	ldr	r2, [r3, #24]
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015a8:	441a      	add	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0210 	orr.w	r2, r2, #16
 80015bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 ff3f 	bl	8006446 <USB_ReadInterrupts>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015d2:	d16e      	bne.n	80016b2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f004 ff45 	bl	800646c <USB_ReadDevAllOutEpInterrupt>
 80015e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015e4:	e062      	b.n	80016ac <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d057      	beq.n	80016a0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 ff6a 	bl	80064d4 <USB_ReadDevOutEPInterrupt>
 8001600:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00c      	beq.n	8001626 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	015a      	lsls	r2, r3, #5
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	4413      	add	r3, r2
 8001614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001618:	461a      	mov	r2, r3
 800161a:	2301      	movs	r3, #1
 800161c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800161e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fe0b 	bl	800223c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00c      	beq.n	800164a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	015a      	lsls	r2, r3, #5
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	4413      	add	r3, r2
 8001638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800163c:	461a      	mov	r2, r3
 800163e:	2308      	movs	r3, #8
 8001640:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 ff05 	bl	8002454 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	015a      	lsls	r2, r3, #5
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001660:	461a      	mov	r2, r3
 8001662:	2310      	movs	r3, #16
 8001664:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800167c:	461a      	mov	r2, r3
 800167e:	2320      	movs	r3, #32
 8001680:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001698:	461a      	mov	r2, r3
 800169a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800169e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	3301      	adds	r3, #1
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d199      	bne.n	80015e6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 fec5 	bl	8006446 <USB_ReadInterrupts>
 80016bc:	4603      	mov	r3, r0
 80016be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016c6:	f040 80c0 	bne.w	800184a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 fee6 	bl	80064a0 <USB_ReadDevAllInEpInterrupt>
 80016d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016da:	e0b2      	b.n	8001842 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80a7 	beq.w	8001836 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f004 ff0c 	bl	8006510 <USB_ReadDevInEPInterrupt>
 80016f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d057      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	2201      	movs	r2, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	69f9      	ldr	r1, [r7, #28]
 8001720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001724:	4013      	ands	r3, r2
 8001726:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	015a      	lsls	r2, r3, #5
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	4413      	add	r3, r2
 8001730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001734:	461a      	mov	r2, r3
 8001736:	2301      	movs	r3, #1
 8001738:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d132      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	3348      	adds	r3, #72	; 0x48
 8001752:	6819      	ldr	r1, [r3, #0]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4403      	add	r3, r0
 8001762:	3344      	adds	r3, #68	; 0x44
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4419      	add	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4403      	add	r3, r0
 8001776:	3348      	adds	r3, #72	; 0x48
 8001778:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	2b00      	cmp	r3, #0
 800177e:	d113      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x31c>
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001784:	4613      	mov	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	3350      	adds	r3, #80	; 0x50
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d108      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017a0:	461a      	mov	r2, r3
 80017a2:	2101      	movs	r1, #1
 80017a4:	f004 ff14 	bl	80065d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f008 f92f 	bl	8009a12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ca:	461a      	mov	r2, r3
 80017cc:	2308      	movs	r3, #8
 80017ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d008      	beq.n	80017ec <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e6:	461a      	mov	r2, r3
 80017e8:	2310      	movs	r3, #16
 80017ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001802:	461a      	mov	r2, r3
 8001804:	2340      	movs	r3, #64	; 0x40
 8001806:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	015a      	lsls	r2, r3, #5
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800181e:	461a      	mov	r2, r3
 8001820:	2302      	movs	r3, #2
 8001822:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800182e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 fc75 	bl	8002120 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3301      	adds	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800183c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	2b00      	cmp	r3, #0
 8001846:	f47f af49 	bne.w	80016dc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f004 fdf9 	bl	8006446 <USB_ReadInterrupts>
 8001854:	4603      	mov	r3, r0
 8001856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800185a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800185e:	d122      	bne.n	80018a6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001886:	2100      	movs	r1, #0
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fea5 	bl	80025d8 <HAL_PCDEx_LPM_Callback>
 800188e:	e002      	b.n	8001896 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f008 f92b 	bl	8009aec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 fdcb 	bl	8006446 <USB_ReadInterrupts>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ba:	d112      	bne.n	80018e2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d102      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f008 f8e7 	bl	8009aa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018e0:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 fdad 	bl	8006446 <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018f6:	d121      	bne.n	800193c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001906:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d111      	bne.n	8001936 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	f003 020f 	and.w	r2, r3, #15
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800192c:	2101      	movs	r1, #1
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fe52 	bl	80025d8 <HAL_PCDEx_LPM_Callback>
 8001934:	e002      	b.n	800193c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f008 f8b2 	bl	8009aa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f004 fd80 	bl	8006446 <USB_ReadInterrupts>
 8001946:	4603      	mov	r3, r0
 8001948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001950:	f040 80c7 	bne.w	8001ae2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2110      	movs	r1, #16
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fe60 	bl	8005634 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001978:	e056      	b.n	8001a28 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001986:	461a      	mov	r2, r3
 8001988:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800198c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800199e:	0151      	lsls	r1, r2, #5
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	440a      	add	r2, r1
 80019a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019ac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	015a      	lsls	r2, r3, #5
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019be:	0151      	lsls	r1, r2, #5
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	440a      	add	r2, r1
 80019c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d0:	015a      	lsls	r2, r3, #5
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019da:	461a      	mov	r2, r3
 80019dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f2:	0151      	lsls	r1, r2, #5
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	440a      	add	r2, r1
 80019f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	015a      	lsls	r2, r3, #5
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a12:	0151      	lsls	r1, r2, #5
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	440a      	add	r2, r1
 8001a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a24:	3301      	adds	r3, #1
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3a3      	bcc.n	800197a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d016      	beq.n	8001a7c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a5e:	f043 030b 	orr.w	r3, r3, #11
 8001a62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a74:	f043 030b 	orr.w	r3, r3, #11
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	e015      	b.n	8001aa8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a8e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a92:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aa2:	f043 030b 	orr.w	r3, r3, #11
 8001aa6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001aba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001acc:	461a      	mov	r2, r3
 8001ace:	f004 fd7f 	bl	80065d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 fcad 	bl	8006446 <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af6:	d124      	bne.n	8001b42 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 fd43 	bl	8006588 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fdf5 	bl	80056f6 <USB_GetDevSpeed>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681c      	ldr	r4, [r3, #0]
 8001b18:	f000 ff28 	bl	800296c <HAL_RCC_GetHCLKFreq>
 8001b1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	4620      	mov	r0, r4
 8001b28:	f003 fb38 	bl	800519c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f007 ff98 	bl	8009a62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 fc7d 	bl	8006446 <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d10a      	bne.n	8001b6c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f007 ff75 	bl	8009a46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f002 0208 	and.w	r2, r2, #8
 8001b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f004 fc68 	bl	8006446 <USB_ReadInterrupts>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b80:	d10f      	bne.n	8001ba2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f007 ffcd 	bl	8009b2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 fc4d 	bl	8006446 <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bb6:	d10f      	bne.n	8001bd8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f007 ffa0 	bl	8009b08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 fc32 	bl	8006446 <USB_ReadInterrupts>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d10a      	bne.n	8001c04 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f007 ffae 	bl	8009b50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f004 fc1c 	bl	8006446 <USB_ReadInterrupts>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d115      	bne.n	8001c44 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f007 ff9e 	bl	8009b6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	e000      	b.n	8001c44 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001c42:	bf00      	nop
    }
  }
}
 8001c44:	3734      	adds	r7, #52	; 0x34
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}

08001c4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_PCD_SetAddress+0x1a>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e013      	b.n	8001c8c <HAL_PCD_SetAddress+0x42>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f004 fb8c 	bl	800639a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	70fb      	strb	r3, [r7, #3]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	803b      	strh	r3, [r7, #0]
 8001caa:	4613      	mov	r3, r2
 8001cac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	da0f      	bge.n	8001cda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	3338      	adds	r3, #56	; 0x38
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	3304      	adds	r3, #4
 8001cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	705a      	strb	r2, [r3, #1]
 8001cd8:	e00f      	b.n	8001cfa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	f003 020f 	and.w	r2, r3, #15
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d06:	883a      	ldrh	r2, [r7, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	78ba      	ldrb	r2, [r7, #2]
 8001d10:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	785b      	ldrb	r3, [r3, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d24:	78bb      	ldrb	r3, [r7, #2]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d102      	bne.n	8001d30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_PCD_EP_Open+0xaa>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e00e      	b.n	8001d5c <HAL_PCD_EP_Open+0xc8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68f9      	ldr	r1, [r7, #12]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fcf7 	bl	8005740 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	da0f      	bge.n	8001d98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 020f 	and.w	r2, r3, #15
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	3338      	adds	r3, #56	; 0x38
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2201      	movs	r2, #1
 8001d94:	705a      	strb	r2, [r3, #1]
 8001d96:	e00f      	b.n	8001db8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 020f 	and.w	r2, r3, #15
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_PCD_EP_Close+0x6e>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e00e      	b.n	8001df0 <HAL_PCD_EP_Close+0x8c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fd35 	bl	8005850 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	460b      	mov	r3, r1
 8001e06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e08:	7afb      	ldrb	r3, [r7, #11]
 8001e0a:	f003 020f 	and.w	r2, r3, #15
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2200      	movs	r2, #0
 8001e38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d102      	bne.n	8001e54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e54:	7afb      	ldrb	r3, [r7, #11]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	6979      	ldr	r1, [r7, #20]
 8001e6c:	f004 f810 	bl	8005e90 <USB_EP0StartXfer>
 8001e70:	e008      	b.n	8001e84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6979      	ldr	r1, [r7, #20]
 8001e80:	f003 fdc2 	bl	8005a08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 020f 	and.w	r2, r3, #15
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001eb0:	681b      	ldr	r3, [r3, #0]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	7afb      	ldrb	r3, [r7, #11]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	3338      	adds	r3, #56	; 0x38
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2201      	movs	r2, #1
 8001efc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6979      	ldr	r1, [r7, #20]
 8001f30:	f003 ffae 	bl	8005e90 <USB_EP0StartXfer>
 8001f34:	e008      	b.n	8001f48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	6979      	ldr	r1, [r7, #20]
 8001f44:	f003 fd60 	bl	8005a08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	f003 020f 	and.w	r2, r3, #15
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d901      	bls.n	8001f70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e050      	b.n	8002012 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	da0f      	bge.n	8001f98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	f003 020f 	and.w	r2, r3, #15
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	3338      	adds	r3, #56	; 0x38
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2201      	movs	r2, #1
 8001f94:	705a      	strb	r2, [r3, #1]
 8001f96:	e00d      	b.n	8001fb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_PCD_EP_SetStall+0x82>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e01e      	b.n	8002012 <HAL_PCD_EP_SetStall+0xc0>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 f905 	bl	80061f2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10a      	bne.n	8002008 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	b2d9      	uxtb	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002002:	461a      	mov	r2, r3
 8002004:	f004 fae4 	bl	80065d0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 020f 	and.w	r2, r3, #15
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	d901      	bls.n	8002038 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e042      	b.n	80020be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203c:	2b00      	cmp	r3, #0
 800203e:	da0f      	bge.n	8002060 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3338      	adds	r3, #56	; 0x38
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	705a      	strb	r2, [r3, #1]
 800205e:	e00f      	b.n	8002080 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	3304      	adds	r3, #4
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_PCD_EP_ClrStall+0x86>
 800209c:	2302      	movs	r3, #2
 800209e:	e00e      	b.n	80020be <HAL_PCD_EP_ClrStall+0xa4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 f90d 	bl	80062ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_PCD_EP_Flush+0x1a>
 80020dc:	2302      	movs	r3, #2
 80020de:	e01b      	b.n	8002118 <HAL_PCD_EP_Flush+0x52>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80020e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da09      	bge.n	8002104 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f003 fa99 	bl	8005634 <USB_FlushTxFifo>
 8002102:	e004      	b.n	800210e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fab9 	bl	8005680 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af02      	add	r7, sp, #8
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	3338      	adds	r3, #56	; 0x38
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	3304      	adds	r3, #4
 8002146:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	429a      	cmp	r2, r3
 8002152:	d901      	bls.n	8002158 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e06c      	b.n	8002232 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	429a      	cmp	r2, r3
 800216c:	d902      	bls.n	8002174 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	3303      	adds	r3, #3
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800217c:	e02b      	b.n	80021d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	429a      	cmp	r2, r3
 8002192:	d902      	bls.n	800219a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3303      	adds	r3, #3
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4603      	mov	r3, r0
 80021b8:	6978      	ldr	r0, [r7, #20]
 80021ba:	f003 ffbc 	bl	8006136 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	441a      	add	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	441a      	add	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d809      	bhi.n	8002200 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d203      	bcs.n	8002200 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1be      	bne.n	800217e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	429a      	cmp	r2, r3
 800220a:	d811      	bhi.n	8002230 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	2201      	movs	r2, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	43db      	mvns	r3, r3
 8002226:	6939      	ldr	r1, [r7, #16]
 8002228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800222c:	4013      	ands	r3, r2
 800222e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	333c      	adds	r3, #60	; 0x3c
 8002254:	3304      	adds	r3, #4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b01      	cmp	r3, #1
 8002270:	f040 80a0 	bne.w	80023b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a72      	ldr	r2, [pc, #456]	; (800244c <PCD_EP_OutXfrComplete_int+0x210>)
 8002282:	4293      	cmp	r3, r2
 8002284:	f240 80dd 	bls.w	8002442 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80d7 	beq.w	8002442 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a0:	461a      	mov	r2, r3
 80022a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a6:	6093      	str	r3, [r2, #8]
 80022a8:	e0cb      	b.n	8002442 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d009      	beq.n	80022c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c0:	461a      	mov	r2, r3
 80022c2:	2320      	movs	r3, #32
 80022c4:	6093      	str	r3, [r2, #8]
 80022c6:	e0bc      	b.n	8002442 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 80b7 	bne.w	8002442 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a5d      	ldr	r2, [pc, #372]	; (800244c <PCD_EP_OutXfrComplete_int+0x210>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d90f      	bls.n	80022fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f2:	461a      	mov	r2, r3
 80022f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f8:	6093      	str	r3, [r2, #8]
 80022fa:	e0a2      	b.n	8002442 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800230e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	0159      	lsls	r1, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	440b      	add	r3, r1
 8002318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002322:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4403      	add	r3, r0
 8002332:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002336:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4403      	add	r3, r0
 800235a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4419      	add	r1, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4403      	add	r3, r0
 8002370:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002374:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d114      	bne.n	80023a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d108      	bne.n	80023a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800239e:	461a      	mov	r2, r3
 80023a0:	2101      	movs	r1, #1
 80023a2:	f004 f915 	bl	80065d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f007 fb15 	bl	80099dc <HAL_PCD_DataOutStageCallback>
 80023b2:	e046      	b.n	8002442 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a26      	ldr	r2, [pc, #152]	; (8002450 <PCD_EP_OutXfrComplete_int+0x214>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d124      	bne.n	8002406 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d2:	461a      	mov	r2, r3
 80023d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d8:	6093      	str	r3, [r2, #8]
 80023da:	e032      	b.n	8002442 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f2:	461a      	mov	r2, r3
 80023f4:	2320      	movs	r3, #32
 80023f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	4619      	mov	r1, r3
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f007 faec 	bl	80099dc <HAL_PCD_DataOutStageCallback>
 8002404:	e01d      	b.n	8002442 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d114      	bne.n	8002436 <PCD_EP_OutXfrComplete_int+0x1fa>
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d108      	bne.n	8002436 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800242e:	461a      	mov	r2, r3
 8002430:	2100      	movs	r1, #0
 8002432:	f004 f8cd 	bl	80065d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f007 facd 	bl	80099dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	4f54300a 	.word	0x4f54300a
 8002450:	4f54310a 	.word	0x4f54310a

08002454 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	333c      	adds	r3, #60	; 0x3c
 800246c:	3304      	adds	r3, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a15      	ldr	r2, [pc, #84]	; (80024dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d90e      	bls.n	80024a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002490:	2b00      	cmp	r3, #0
 8002492:	d009      	beq.n	80024a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a0:	461a      	mov	r2, r3
 80024a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f007 fa85 	bl	80099b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <PCD_EP_OutSetupPacket_int+0x88>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d90c      	bls.n	80024d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d108      	bne.n	80024d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024c8:	461a      	mov	r2, r3
 80024ca:	2101      	movs	r1, #1
 80024cc:	f004 f880 	bl	80065d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	4f54300a 	.word	0x4f54300a

080024e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
 80024ec:	4613      	mov	r3, r2
 80024ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d107      	bne.n	800250e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024fe:	883b      	ldrh	r3, [r7, #0]
 8002500:	0419      	lsls	r1, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	430a      	orrs	r2, r1
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
 800250c:	e028      	b.n	8002560 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4413      	add	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	e00d      	b.n	800253e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3340      	adds	r3, #64	; 0x40
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	4413      	add	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	3b01      	subs	r3, #1
 8002544:	429a      	cmp	r2, r3
 8002546:	d3ec      	bcc.n	8002522 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002548:	883b      	ldrh	r3, [r7, #0]
 800254a:	0418      	lsls	r0, r3, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	3b01      	subs	r3, #1
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	4302      	orrs	r2, r0
 8002558:	3340      	adds	r3, #64	; 0x40
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c2:	f043 0303 	orr.w	r3, r3, #3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cc      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d044      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e067      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4934      	ldr	r1, [pc, #208]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fa92 	bl	8000c08 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fa8e 	bl	8000c08 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d20c      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4601      	mov	r1, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	5cd3      	ldrb	r3, [r2, r3]
 800278a:	fa21 f303 	lsr.w	r3, r1, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe f9f2 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	0800a8ec 	.word	0x0800a8ec
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	2300      	movs	r3, #0
 80027cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d2:	4b63      	ldr	r3, [pc, #396]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d007      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x32>
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d008      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x38>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 80b4 	bne.w	8002950 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4b5e      	ldr	r3, [pc, #376]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027ea:	60bb      	str	r3, [r7, #8]
       break;
 80027ec:	e0b3      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ee:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80027f0:	60bb      	str	r3, [r7, #8]
      break;
 80027f2:	e0b0      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f4:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027fe:	4b58      	ldr	r3, [pc, #352]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d04a      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280a:	4b55      	ldr	r3, [pc, #340]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	099b      	lsrs	r3, r3, #6
 8002810:	f04f 0400 	mov.w	r4, #0
 8002814:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	ea03 0501 	and.w	r5, r3, r1
 8002820:	ea04 0602 	and.w	r6, r4, r2
 8002824:	4629      	mov	r1, r5
 8002826:	4632      	mov	r2, r6
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	f04f 0400 	mov.w	r4, #0
 8002830:	0154      	lsls	r4, r2, #5
 8002832:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002836:	014b      	lsls	r3, r1, #5
 8002838:	4619      	mov	r1, r3
 800283a:	4622      	mov	r2, r4
 800283c:	1b49      	subs	r1, r1, r5
 800283e:	eb62 0206 	sbc.w	r2, r2, r6
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	f04f 0400 	mov.w	r4, #0
 800284a:	0194      	lsls	r4, r2, #6
 800284c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002850:	018b      	lsls	r3, r1, #6
 8002852:	1a5b      	subs	r3, r3, r1
 8002854:	eb64 0402 	sbc.w	r4, r4, r2
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	00e2      	lsls	r2, r4, #3
 8002862:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002866:	00d9      	lsls	r1, r3, #3
 8002868:	460b      	mov	r3, r1
 800286a:	4614      	mov	r4, r2
 800286c:	195b      	adds	r3, r3, r5
 800286e:	eb44 0406 	adc.w	r4, r4, r6
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	0262      	lsls	r2, r4, #9
 800287c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002880:	0259      	lsls	r1, r3, #9
 8002882:	460b      	mov	r3, r1
 8002884:	4614      	mov	r4, r2
 8002886:	4618      	mov	r0, r3
 8002888:	4621      	mov	r1, r4
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f04f 0400 	mov.w	r4, #0
 8002890:	461a      	mov	r2, r3
 8002892:	4623      	mov	r3, r4
 8002894:	f7fd fcc0 	bl	8000218 <__aeabi_uldivmod>
 8002898:	4603      	mov	r3, r0
 800289a:	460c      	mov	r4, r1
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	e049      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a0:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	f04f 0400 	mov.w	r4, #0
 80028aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	ea03 0501 	and.w	r5, r3, r1
 80028b6:	ea04 0602 	and.w	r6, r4, r2
 80028ba:	4629      	mov	r1, r5
 80028bc:	4632      	mov	r2, r6
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	f04f 0400 	mov.w	r4, #0
 80028c6:	0154      	lsls	r4, r2, #5
 80028c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028cc:	014b      	lsls	r3, r1, #5
 80028ce:	4619      	mov	r1, r3
 80028d0:	4622      	mov	r2, r4
 80028d2:	1b49      	subs	r1, r1, r5
 80028d4:	eb62 0206 	sbc.w	r2, r2, r6
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	f04f 0400 	mov.w	r4, #0
 80028e0:	0194      	lsls	r4, r2, #6
 80028e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028e6:	018b      	lsls	r3, r1, #6
 80028e8:	1a5b      	subs	r3, r3, r1
 80028ea:	eb64 0402 	sbc.w	r4, r4, r2
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	00e2      	lsls	r2, r4, #3
 80028f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028fc:	00d9      	lsls	r1, r3, #3
 80028fe:	460b      	mov	r3, r1
 8002900:	4614      	mov	r4, r2
 8002902:	195b      	adds	r3, r3, r5
 8002904:	eb44 0406 	adc.w	r4, r4, r6
 8002908:	f04f 0100 	mov.w	r1, #0
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	02a2      	lsls	r2, r4, #10
 8002912:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002916:	0299      	lsls	r1, r3, #10
 8002918:	460b      	mov	r3, r1
 800291a:	4614      	mov	r4, r2
 800291c:	4618      	mov	r0, r3
 800291e:	4621      	mov	r1, r4
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f04f 0400 	mov.w	r4, #0
 8002926:	461a      	mov	r2, r3
 8002928:	4623      	mov	r3, r4
 800292a:	f7fd fc75 	bl	8000218 <__aeabi_uldivmod>
 800292e:	4603      	mov	r3, r0
 8002930:	460c      	mov	r4, r1
 8002932:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	3301      	adds	r3, #1
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	60bb      	str	r3, [r7, #8]
      break;
 800294e:	e002      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002952:	60bb      	str	r3, [r7, #8]
      break;
 8002954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002956:	68bb      	ldr	r3, [r7, #8]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	00f42400 	.word	0x00f42400
 8002968:	007a1200 	.word	0x007a1200

0800296c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_RCC_GetHCLKFreq+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000000 	.word	0x20000000

08002984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80029a8:	4b7a      	ldr	r3, [pc, #488]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4977      	ldr	r1, [pc, #476]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80029c6:	2301      	movs	r3, #1
 80029c8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80029d6:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029dc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	496b      	ldr	r1, [pc, #428]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80029f4:	2301      	movs	r3, #1
 80029f6:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d022      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8002a04:	4b63      	ldr	r3, [pc, #396]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	4960      	ldr	r1, [pc, #384]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002a30:	4b58      	ldr	r3, [pc, #352]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a36:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	4954      	ldr	r1, [pc, #336]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d022      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8002a56:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a64:	494b      	ldr	r1, [pc, #300]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002a74:	2301      	movs	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002a82:	4b44      	ldr	r3, [pc, #272]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	493f      	ldr	r1, [pc, #252]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 808a 	beq.w	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a38      	ldr	r2, [pc, #224]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a33      	ldr	r2, [pc, #204]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ad2:	f7fe f899 	bl	8000c08 <HAL_GetTick>
 8002ad6:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ada:	f7fe f895 	bl	8000c08 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e1d1      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002aec:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002af8:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b00:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02f      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d028      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b16:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b20:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d114      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe f863 	bl	8000c08 <HAL_GetTick>
 8002b42:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7fe f85f 	bl	8000c08 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e199      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0ee      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b74:	d114      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8a:	4902      	ldr	r1, [pc, #8]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]
 8002b90:	e00c      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	42470e40 	.word	0x42470e40
 8002ba0:	4b89      	ldr	r3, [pc, #548]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a88      	ldr	r2, [pc, #544]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002ba6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002baa:	6093      	str	r3, [r2, #8]
 8002bac:	4b86      	ldr	r3, [pc, #536]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb8:	4983      	ldr	r1, [pc, #524]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002bd0:	4b7e      	ldr	r3, [pc, #504]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8002bd2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002be0:	4b79      	ldr	r3, [pc, #484]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	4976      	ldr	r1, [pc, #472]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d011      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c02:	4b71      	ldr	r3, [pc, #452]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	496d      	ldr	r1, [pc, #436]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c20:	d101      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002c22:	2301      	movs	r3, #1
 8002c24:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002c32:	4b65      	ldr	r3, [pc, #404]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c38:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	4961      	ldr	r1, [pc, #388]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d004      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b80      	cmp	r3, #128	; 0x80
 8002c54:	f040 80c6 	bne.w	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c58:	4b5d      	ldr	r3, [pc, #372]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c5e:	f7fd ffd3 	bl	8000c08 <HAL_GetTick>
 8002c62:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c66:	f7fd ffcf 	bl	8000c08 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e10b      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c78:	4b53      	ldr	r3, [pc, #332]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002c84:	4a53      	ldr	r2, [pc, #332]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d023      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d019      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cc8:	d00e      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d019      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d115      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce6:	d110      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	019b      	lsls	r3, r3, #6
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	061b      	lsls	r3, r3, #24
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	071b      	lsls	r3, r3, #28
 8002d02:	4931      	ldr	r1, [pc, #196]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d026      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d122      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d32:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d38:	0e1b      	lsrs	r3, r3, #24
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	071b      	lsls	r3, r3, #28
 8002d58:	491b      	ldr	r1, [pc, #108]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d66:	f023 021f 	bic.w	r2, r3, #31
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	4915      	ldr	r1, [pc, #84]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	019b      	lsls	r3, r3, #6
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	071b      	lsls	r3, r3, #28
 8002d9e:	490a      	ldr	r1, [pc, #40]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dac:	f7fd ff2c 	bl	8000c08 <HAL_GetTick>
 8002db0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002db2:	e011      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002db4:	f7fd ff28 	bl	8000c08 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d90a      	bls.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e064      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	424711e0 	.word	0x424711e0
 8002dd0:	42470068 	.word	0x42470068
 8002dd4:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dd8:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0e7      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	4926      	ldr	r1, [pc, #152]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e12:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e18:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	491d      	ldr	r1, [pc, #116]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002e34:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	4915      	ldr	r1, [pc, #84]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e5c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	490c      	ldr	r1, [pc, #48]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e78:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	4904      	ldr	r1, [pc, #16]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3720      	adds	r7, #32
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800

08002e9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d075      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002eb4:	4ba2      	ldr	r3, [pc, #648]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d00c      	beq.n	8002eda <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec0:	4b9f      	ldr	r3, [pc, #636]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d112      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ecc:	4b9c      	ldr	r3, [pc, #624]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eda:	4b99      	ldr	r3, [pc, #612]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d05b      	beq.n	8002f9e <HAL_RCC_OscConfig+0x102>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d157      	bne.n	8002f9e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e20b      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x6e>
 8002efc:	4b90      	ldr	r3, [pc, #576]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a8f      	ldr	r2, [pc, #572]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	e01d      	b.n	8002f46 <HAL_RCC_OscConfig+0xaa>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f12:	d10c      	bne.n	8002f2e <HAL_RCC_OscConfig+0x92>
 8002f14:	4b8a      	ldr	r3, [pc, #552]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a89      	ldr	r2, [pc, #548]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b87      	ldr	r3, [pc, #540]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a86      	ldr	r2, [pc, #536]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e00b      	b.n	8002f46 <HAL_RCC_OscConfig+0xaa>
 8002f2e:	4b84      	ldr	r3, [pc, #528]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a83      	ldr	r2, [pc, #524]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b81      	ldr	r3, [pc, #516]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a80      	ldr	r2, [pc, #512]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d013      	beq.n	8002f76 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fd fe5b 	bl	8000c08 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f56:	f7fd fe57 	bl	8000c08 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b64      	cmp	r3, #100	; 0x64
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e1d0      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f68:	4b75      	ldr	r3, [pc, #468]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0xba>
 8002f74:	e014      	b.n	8002fa0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7fd fe47 	bl	8000c08 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7e:	f7fd fe43 	bl	8000c08 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b64      	cmp	r3, #100	; 0x64
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e1bc      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f90:	4b6b      	ldr	r3, [pc, #428]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0xe2>
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d063      	beq.n	8003074 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fac:	4b64      	ldr	r3, [pc, #400]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb8:	4b61      	ldr	r3, [pc, #388]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d11c      	bne.n	8002ffe <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc4:	4b5e      	ldr	r3, [pc, #376]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d116      	bne.n	8002ffe <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd0:	4b5b      	ldr	r3, [pc, #364]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x14c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e190      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b55      	ldr	r3, [pc, #340]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4952      	ldr	r1, [pc, #328]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffc:	e03a      	b.n	8003074 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d020      	beq.n	8003048 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003006:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <HAL_RCC_OscConfig+0x2a8>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fd fdfc 	bl	8000c08 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003014:	f7fd fdf8 	bl	8000c08 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e171      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003026:	4b46      	ldr	r3, [pc, #280]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b43      	ldr	r3, [pc, #268]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	493f      	ldr	r1, [pc, #252]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
 8003046:	e015      	b.n	8003074 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003048:	4b3e      	ldr	r3, [pc, #248]	; (8003144 <HAL_RCC_OscConfig+0x2a8>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fd fddb 	bl	8000c08 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003056:	f7fd fdd7 	bl	8000c08 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e150      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d030      	beq.n	80030e2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d016      	beq.n	80030b6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003088:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fd fdbb 	bl	8000c08 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003096:	f7fd fdb7 	bl	8000c08 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e130      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x1fa>
 80030b4:	e015      	b.n	80030e2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fd fda4 	bl	8000c08 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c4:	f7fd fda0 	bl	8000c08 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e119      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 80030d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 809f 	beq.w	800322e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f0:	2300      	movs	r3, #0
 80030f2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10f      	bne.n	8003120 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	4a0d      	ldr	r2, [pc, #52]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 800310a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310e:	6413      	str	r3, [r2, #64]	; 0x40
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_OscConfig+0x2a4>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800311c:	2301      	movs	r3, #1
 800311e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_RCC_OscConfig+0x2b0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d120      	bne.n	800316e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <HAL_RCC_OscConfig+0x2b0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a06      	ldr	r2, [pc, #24]	; (800314c <HAL_RCC_OscConfig+0x2b0>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003138:	f7fd fd66 	bl	8000c08 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313e:	e010      	b.n	8003162 <HAL_RCC_OscConfig+0x2c6>
 8003140:	40023800 	.word	0x40023800
 8003144:	42470000 	.word	0x42470000
 8003148:	42470e80 	.word	0x42470e80
 800314c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003150:	f7fd fd5a 	bl	8000c08 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e0d3      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003162:	4b6c      	ldr	r3, [pc, #432]	; (8003314 <HAL_RCC_OscConfig+0x478>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d106      	bne.n	8003184 <HAL_RCC_OscConfig+0x2e8>
 8003176:	4b68      	ldr	r3, [pc, #416]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	4a67      	ldr	r2, [pc, #412]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6713      	str	r3, [r2, #112]	; 0x70
 8003182:	e01c      	b.n	80031be <HAL_RCC_OscConfig+0x322>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d10c      	bne.n	80031a6 <HAL_RCC_OscConfig+0x30a>
 800318c:	4b62      	ldr	r3, [pc, #392]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	4a61      	ldr	r2, [pc, #388]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	6713      	str	r3, [r2, #112]	; 0x70
 8003198:	4b5f      	ldr	r3, [pc, #380]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	4a5e      	ldr	r2, [pc, #376]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6713      	str	r3, [r2, #112]	; 0x70
 80031a4:	e00b      	b.n	80031be <HAL_RCC_OscConfig+0x322>
 80031a6:	4b5c      	ldr	r3, [pc, #368]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a5b      	ldr	r2, [pc, #364]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
 80031b2:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 80031b8:	f023 0304 	bic.w	r3, r3, #4
 80031bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d015      	beq.n	80031f2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c6:	f7fd fd1f 	bl	8000c08 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fd fd1b 	bl	8000c08 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e092      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e4:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ee      	beq.n	80031ce <HAL_RCC_OscConfig+0x332>
 80031f0:	e014      	b.n	800321c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f2:	f7fd fd09 	bl	8000c08 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fd fd05 	bl	8000c08 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e07c      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003210:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ee      	bne.n	80031fa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d105      	bne.n	800322e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003222:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	4a3c      	ldr	r2, [pc, #240]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 8003228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d068      	beq.n	8003308 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003236:	4b38      	ldr	r3, [pc, #224]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b08      	cmp	r3, #8
 8003240:	d060      	beq.n	8003304 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d145      	bne.n	80032d6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b34      	ldr	r3, [pc, #208]	; (800331c <HAL_RCC_OscConfig+0x480>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fd fcda 	bl	8000c08 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003258:	f7fd fcd6 	bl	8000c08 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e04f      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	019b      	lsls	r3, r3, #6
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	071b      	lsls	r3, r3, #28
 80032a2:	491d      	ldr	r1, [pc, #116]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a8:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_RCC_OscConfig+0x480>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fd fcab 	bl	8000c08 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b6:	f7fd fca7 	bl	8000c08 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e020      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c8:	4b13      	ldr	r3, [pc, #76]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x41a>
 80032d4:	e018      	b.n	8003308 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_RCC_OscConfig+0x480>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fd fc94 	bl	8000c08 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fd fc90 	bl	8000c08 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e009      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <HAL_RCC_OscConfig+0x47c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x448>
 8003302:	e001      	b.n	8003308 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40007000 	.word	0x40007000
 8003318:	40023800 	.word	0x40023800
 800331c:	42470060 	.word	0x42470060

08003320 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e022      	b.n	8003378 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fd fa4f 	bl	80007e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2203      	movs	r2, #3
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f814 	bl	8003380 <HAL_SD_InitCard>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e00a      	b.n	8003378 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003380:	b5b0      	push	{r4, r5, r7, lr}
 8003382:	b08e      	sub	sp, #56	; 0x38
 8003384:	af04      	add	r7, sp, #16
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800339c:	2376      	movs	r3, #118	; 0x76
 800339e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681d      	ldr	r5, [r3, #0]
 80033a4:	466c      	mov	r4, sp
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033b2:	f107 0308 	add.w	r3, r7, #8
 80033b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b8:	4628      	mov	r0, r5
 80033ba:	f001 f929 	bl	8004610 <SDIO_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80033c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e031      	b.n	8003434 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <HAL_SD_InitCard+0xbc>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f001 f961 	bl	80046a2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <HAL_SD_InitCard+0xbc>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fefc 	bl	80041e4 <SD_PowerON>
 80033ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e013      	b.n	8003434 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fe1b 	bl	8004048 <SD_InitCard>
 8003412:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3728      	adds	r7, #40	; 0x28
 8003438:	46bd      	mov	sp, r7
 800343a:	bdb0      	pop	{r4, r5, r7, pc}
 800343c:	422580a0 	.word	0x422580a0

08003440 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b092      	sub	sp, #72	; 0x48
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800344e:	f7fd fbdb 	bl	8000c08 <HAL_GetTick>
 8003452:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e1d7      	b.n	8003822 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	f040 81ca 	bne.w	8003814 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	441a      	add	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	429a      	cmp	r2, r3
 8003492:	d907      	bls.n	80034a4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e1be      	b.n	8003822 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2203      	movs	r2, #3
 80034a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2200      	movs	r2, #0
 80034b2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d002      	beq.n	80034c2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80034bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034be:	025b      	lsls	r3, r3, #9
 80034c0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 f97c 	bl	80047c8 <SDMMC_CmdBlockLength>
 80034d0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80034d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00f      	beq.n	80034f8 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a9a      	ldr	r2, [pc, #616]	; (8003748 <HAL_SD_ReadBlocks+0x308>)
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e194      	b.n	8003822 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
 80034fc:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	025b      	lsls	r3, r3, #9
 8003502:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003504:	2390      	movs	r3, #144	; 0x90
 8003506:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003508:	2302      	movs	r3, #2
 800350a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800350c:	2300      	movs	r3, #0
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003510:	2301      	movs	r3, #1
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f107 0214 	add.w	r2, r7, #20
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f001 f926 	bl	8004770 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d90a      	bls.n	8003540 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2202      	movs	r2, #2
 800352e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f98a 	bl	8004850 <SDMMC_CmdReadMultiBlock>
 800353c:	6478      	str	r0, [r7, #68]	; 0x44
 800353e:	e009      	b.n	8003554 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800354c:	4618      	mov	r0, r3
 800354e:	f001 f95d 	bl	800480c <SDMMC_CmdReadSingleBlock>
 8003552:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003556:	2b00      	cmp	r3, #0
 8003558:	d012      	beq.n	8003580 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a7a      	ldr	r2, [pc, #488]	; (8003748 <HAL_SD_ReadBlocks+0x308>)
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003568:	431a      	orrs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e150      	b.n	8003822 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003584:	e061      	b.n	800364a <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d03c      	beq.n	800360e <HAL_SD_ReadBlocks+0x1ce>
 8003594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d039      	beq.n	800360e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800359a:	2300      	movs	r3, #0
 800359c:	643b      	str	r3, [r7, #64]	; 0x40
 800359e:	e033      	b.n	8003608 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 f85e 	bl	8004666 <SDIO_ReadFIFO>
 80035aa:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	3301      	adds	r3, #1
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	3b01      	subs	r3, #1
 80035be:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035cc:	3301      	adds	r3, #1
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d2:	3b01      	subs	r3, #1
 80035d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e2:	3301      	adds	r3, #1
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e8:	3b01      	subs	r3, #1
 80035ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	0e1b      	lsrs	r3, r3, #24
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f8:	3301      	adds	r3, #1
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fe:	3b01      	subs	r3, #1
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003604:	3301      	adds	r3, #1
 8003606:	643b      	str	r3, [r7, #64]	; 0x40
 8003608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360a:	2b07      	cmp	r3, #7
 800360c:	d9c8      	bls.n	80035a0 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800360e:	f7fd fafb 	bl	8000c08 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800361a:	429a      	cmp	r2, r3
 800361c:	d902      	bls.n	8003624 <HAL_SD_ReadBlocks+0x1e4>
 800361e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003620:	2b00      	cmp	r3, #0
 8003622:	d112      	bne.n	800364a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a47      	ldr	r2, [pc, #284]	; (8003748 <HAL_SD_ReadBlocks+0x308>)
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0eb      	b.n	8003822 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003654:	2b00      	cmp	r3, #0
 8003656:	d096      	beq.n	8003586 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d022      	beq.n	80036ac <HAL_SD_ReadBlocks+0x26c>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d91f      	bls.n	80036ac <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	2b03      	cmp	r3, #3
 8003672:	d01b      	beq.n	80036ac <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f001 f94f 	bl	800491c <SDMMC_CmdStopTransfer>
 800367e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003682:	2b00      	cmp	r3, #0
 8003684:	d012      	beq.n	80036ac <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a2f      	ldr	r2, [pc, #188]	; (8003748 <HAL_SD_ReadBlocks+0x308>)
 800368c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003694:	431a      	orrs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0ba      	b.n	8003822 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d012      	beq.n	80036e0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a22      	ldr	r2, [pc, #136]	; (8003748 <HAL_SD_ReadBlocks+0x308>)
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	f043 0208 	orr.w	r2, r3, #8
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0a0      	b.n	8003822 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d012      	beq.n	8003714 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a15      	ldr	r2, [pc, #84]	; (8003748 <HAL_SD_ReadBlocks+0x308>)
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	f043 0202 	orr.w	r2, r3, #2
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e086      	b.n	8003822 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d063      	beq.n	80037ea <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a08      	ldr	r2, [pc, #32]	; (8003748 <HAL_SD_ReadBlocks+0x308>)
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	f043 0220 	orr.w	r2, r3, #32
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e06c      	b.n	8003822 <HAL_SD_ReadBlocks+0x3e2>
 8003748:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f000 ff88 	bl	8004666 <SDIO_ReadFIFO>
 8003756:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	b2da      	uxtb	r2, r3
 800375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003762:	3301      	adds	r3, #1
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003768:	3b01      	subs	r3, #1
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376e:	0a1b      	lsrs	r3, r3, #8
 8003770:	b2da      	uxtb	r2, r3
 8003772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003774:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003778:	3301      	adds	r3, #1
 800377a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800377c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377e:	3b01      	subs	r3, #1
 8003780:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	0c1b      	lsrs	r3, r3, #16
 8003786:	b2da      	uxtb	r2, r3
 8003788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378e:	3301      	adds	r3, #1
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003794:	3b01      	subs	r3, #1
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379a:	0e1b      	lsrs	r3, r3, #24
 800379c:	b2da      	uxtb	r2, r3
 800379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80037a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a4:	3301      	adds	r3, #1
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80037a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037aa:	3b01      	subs	r3, #1
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80037ae:	f7fd fa2b 	bl	8000c08 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d902      	bls.n	80037c4 <HAL_SD_ReadBlocks+0x384>
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d112      	bne.n	80037ea <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a18      	ldr	r2, [pc, #96]	; (800382c <HAL_SD_ReadBlocks+0x3ec>)
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e01b      	b.n	8003822 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_SD_ReadBlocks+0x3be>
 80037f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1a6      	bne.n	800374c <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f240 523a 	movw	r2, #1338	; 0x53a
 8003806:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e006      	b.n	8003822 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	3748      	adds	r7, #72	; 0x48
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	004005ff 	.word	0x004005ff

08003830 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b092      	sub	sp, #72	; 0x48
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800383e:	f7fd f9e3 	bl	8000c08 <HAL_GetTick>
 8003842:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d107      	bne.n	8003862 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e182      	b.n	8003b68 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b01      	cmp	r3, #1
 800386c:	f040 8175 	bne.w	8003b5a <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	441a      	add	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	429a      	cmp	r2, r3
 8003882:	d907      	bls.n	8003894 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e169      	b.n	8003b68 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2203      	movs	r2, #3
 8003898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2200      	movs	r2, #0
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d002      	beq.n	80038b2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	025b      	lsls	r3, r3, #9
 80038b0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 ff84 	bl	80047c8 <SDMMC_CmdBlockLength>
 80038c0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80038c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00f      	beq.n	80038e8 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a9c      	ldr	r2, [pc, #624]	; (8003b40 <HAL_SD_WriteBlocks+0x310>)
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e13f      	b.n	8003b68 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ec:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	025b      	lsls	r3, r3, #9
 80038f2:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80038f4:	2390      	movs	r3, #144	; 0x90
 80038f6:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80038f8:	2300      	movs	r3, #0
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003900:	2301      	movs	r3, #1
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f107 0218 	add.w	r2, r7, #24
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f000 ff2e 	bl	8004770 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d90a      	bls.n	8003930 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003926:	4618      	mov	r0, r3
 8003928:	f000 ffd6 	bl	80048d8 <SDMMC_CmdWriteMultiBlock>
 800392c:	6478      	str	r0, [r7, #68]	; 0x44
 800392e:	e009      	b.n	8003944 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2210      	movs	r2, #16
 8003934:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800393c:	4618      	mov	r0, r3
 800393e:	f000 ffa9 	bl	8004894 <SDMMC_CmdWriteSingleBlock>
 8003942:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003946:	2b00      	cmp	r3, #0
 8003948:	d012      	beq.n	8003970 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a7c      	ldr	r2, [pc, #496]	; (8003b40 <HAL_SD_WriteBlocks+0x310>)
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003958:	431a      	orrs	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0fb      	b.n	8003b68 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003974:	e065      	b.n	8003a42 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d040      	beq.n	8003a06 <HAL_SD_WriteBlocks+0x1d6>
 8003984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d03d      	beq.n	8003a06 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800398a:	2300      	movs	r3, #0
 800398c:	643b      	str	r3, [r7, #64]	; 0x40
 800398e:	e037      	b.n	8003a00 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8003990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	3301      	adds	r3, #1
 800399a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800399c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399e:	3b01      	subs	r3, #1
 80039a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	021a      	lsls	r2, r3, #8
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80039ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b0:	3301      	adds	r3, #1
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b6:	3b01      	subs	r3, #1
 80039b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80039ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	041a      	lsls	r2, r3, #16
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80039c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c8:	3301      	adds	r3, #1
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ce:	3b01      	subs	r3, #1
 80039d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	061a      	lsls	r2, r3, #24
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	3301      	adds	r3, #1
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e6:	3b01      	subs	r3, #1
 80039e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f107 0214 	add.w	r2, r7, #20
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fe43 	bl	8004680 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80039fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039fc:	3301      	adds	r3, #1
 80039fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a02:	2b07      	cmp	r3, #7
 8003a04:	d9c4      	bls.n	8003990 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003a06:	f7fd f8ff 	bl	8000c08 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d902      	bls.n	8003a1c <HAL_SD_WriteBlocks+0x1ec>
 8003a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d112      	bne.n	8003a42 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a47      	ldr	r2, [pc, #284]	; (8003b40 <HAL_SD_WriteBlocks+0x310>)
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e092      	b.n	8003b68 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d092      	beq.n	8003976 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d022      	beq.n	8003aa4 <HAL_SD_WriteBlocks+0x274>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d91f      	bls.n	8003aa4 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d01b      	beq.n	8003aa4 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 ff53 	bl	800491c <SDMMC_CmdStopTransfer>
 8003a76:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d012      	beq.n	8003aa4 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a2f      	ldr	r2, [pc, #188]	; (8003b40 <HAL_SD_WriteBlocks+0x310>)
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e061      	b.n	8003b68 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d012      	beq.n	8003ad8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a22      	ldr	r2, [pc, #136]	; (8003b40 <HAL_SD_WriteBlocks+0x310>)
 8003ab8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	f043 0208 	orr.w	r2, r3, #8
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e047      	b.n	8003b68 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d012      	beq.n	8003b0c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <HAL_SD_WriteBlocks+0x310>)
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	f043 0202 	orr.w	r2, r3, #2
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e02d      	b.n	8003b68 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d014      	beq.n	8003b44 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <HAL_SD_WriteBlocks+0x310>)
 8003b20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	f043 0210 	orr.w	r2, r3, #16
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e013      	b.n	8003b68 <HAL_SD_WriteBlocks+0x338>
 8003b40:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e006      	b.n	8003b68 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
  }
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3748      	adds	r7, #72	; 0x48
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7e:	0f9b      	lsrs	r3, r3, #30
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8a:	0e9b      	lsrs	r3, r3, #26
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b9c:	0e1b      	lsrs	r3, r3, #24
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bae:	0c1b      	lsrs	r3, r3, #16
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd0:	0d1b      	lsrs	r3, r3, #20
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bee:	0bdb      	lsrs	r3, r3, #15
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c00:	0b9b      	lsrs	r3, r3, #14
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c12:	0b5b      	lsrs	r3, r3, #13
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c24:	0b1b      	lsrs	r3, r3, #12
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2200      	movs	r2, #0
 8003c36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d163      	bne.n	8003d08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c44:	009a      	lsls	r2, r3, #2
 8003c46:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003c50:	0f92      	lsrs	r2, r2, #30
 8003c52:	431a      	orrs	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c5c:	0edb      	lsrs	r3, r3, #27
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6e:	0e1b      	lsrs	r3, r3, #24
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c80:	0d5b      	lsrs	r3, r3, #21
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c92:	0c9b      	lsrs	r3, r3, #18
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca4:	0bdb      	lsrs	r3, r3, #15
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	7e1b      	ldrb	r3, [r3, #24]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	2201      	movs	r2, #1
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003cd2:	fb02 f203 	mul.w	r2, r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	7a1b      	ldrb	r3, [r3, #8]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003cf4:	0a52      	lsrs	r2, r2, #9
 8003cf6:	fb02 f203 	mul.w	r2, r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d04:	661a      	str	r2, [r3, #96]	; 0x60
 8003d06:	e031      	b.n	8003d6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d11d      	bne.n	8003d4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d1e:	0c1b      	lsrs	r3, r3, #16
 8003d20:	431a      	orrs	r2, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	029a      	lsls	r2, r3, #10
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d40:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60
 8003d4a:	e00f      	b.n	8003d6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a58      	ldr	r2, [pc, #352]	; (8003eb4 <HAL_SD_GetCardCSD+0x344>)
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e09d      	b.n	8003ea8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d70:	0b9b      	lsrs	r3, r3, #14
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d82:	09db      	lsrs	r3, r3, #7
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	0fdb      	lsrs	r3, r3, #31
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	0f5b      	lsrs	r3, r3, #29
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	0e9b      	lsrs	r3, r3, #26
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	0d9b      	lsrs	r3, r3, #22
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	0d5b      	lsrs	r3, r3, #21
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	0bdb      	lsrs	r3, r3, #15
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	0b9b      	lsrs	r3, r3, #14
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	0b5b      	lsrs	r3, r3, #13
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	0b1b      	lsrs	r3, r3, #12
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	0a9b      	lsrs	r3, r3, #10
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	004005ff 	.word	0x004005ff

08003eb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003f10:	b5b0      	push	{r4, r5, r7, lr}
 8003f12:	b08e      	sub	sp, #56	; 0x38
 8003f14:	af04      	add	r7, sp, #16
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d02e      	beq.n	8003f88 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f30:	d106      	bne.n	8003f40 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
 8003f3e:	e029      	b.n	8003f94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f46:	d10a      	bne.n	8003f5e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fa01 	bl	8004350 <SD_WideBus_Enable>
 8003f4e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f5c:	e01a      	b.n	8003f94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fa3e 	bl	80043e6 <SD_WideBus_Disable>
 8003f6a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38
 8003f78:	e00c      	b.n	8003f94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38
 8003f86:	e005      	b.n	8003f94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a18      	ldr	r2, [pc, #96]	; (8004004 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e024      	b.n	8003ffa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681d      	ldr	r5, [r3, #0]
 8003fd6:	466c      	mov	r4, sp
 8003fd8:	f107 0318 	add.w	r3, r7, #24
 8003fdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fe0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 fb10 	bl	8004610 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3728      	adds	r7, #40	; 0x28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bdb0      	pop	{r4, r5, r7, pc}
 8004002:	bf00      	nop
 8004004:	004005ff 	.word	0x004005ff

08004008 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004014:	f107 030c 	add.w	r3, r7, #12
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f970 	bl	8004300 <SD_SendStatus>
 8004020:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	0a5b      	lsrs	r3, r3, #9
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800403e:	693b      	ldr	r3, [r7, #16]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004048:	b5b0      	push	{r4, r5, r7, lr}
 800404a:	b094      	sub	sp, #80	; 0x50
 800404c:	af04      	add	r7, sp, #16
 800404e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004050:	2301      	movs	r3, #1
 8004052:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fb31 	bl	80046c0 <SDIO_GetPowerState>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004064:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004068:	e0b7      	b.n	80041da <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	2b03      	cmp	r3, #3
 8004070:	d02f      	beq.n	80040d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fd5a 	bl	8004b30 <SDMMC_CmdSendCID>
 800407c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800407e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <SD_InitCard+0x40>
    {
      return errorstate;
 8004084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004086:	e0a8      	b.n	80041da <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fb5b 	bl	800474a <SDIO_GetResponse>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2104      	movs	r1, #4
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fb52 	bl	800474a <SDIO_GetResponse>
 80040a6:	4602      	mov	r2, r0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2108      	movs	r1, #8
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fb49 	bl	800474a <SDIO_GetResponse>
 80040b8:	4602      	mov	r2, r0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	210c      	movs	r1, #12
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fb40 	bl	800474a <SDIO_GetResponse>
 80040ca:	4602      	mov	r2, r0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d00d      	beq.n	80040f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f107 020e 	add.w	r2, r7, #14
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fd60 	bl	8004baa <SDMMC_CmdSetRelAdd>
 80040ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80040ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <SD_InitCard+0xae>
    {
      return errorstate;
 80040f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f4:	e071      	b.n	80041da <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d036      	beq.n	800416c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80040fe:	89fb      	ldrh	r3, [r7, #14]
 8004100:	461a      	mov	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410e:	041b      	lsls	r3, r3, #16
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f000 fd2a 	bl	8004b6c <SDMMC_CmdSendCSD>
 8004118:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800411a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004122:	e05a      	b.n	80041da <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fb0d 	bl	800474a <SDIO_GetResponse>
 8004130:	4602      	mov	r2, r0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2104      	movs	r1, #4
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fb04 	bl	800474a <SDIO_GetResponse>
 8004142:	4602      	mov	r2, r0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2108      	movs	r1, #8
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fafb 	bl	800474a <SDIO_GetResponse>
 8004154:	4602      	mov	r2, r0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	210c      	movs	r1, #12
 8004160:	4618      	mov	r0, r3
 8004162:	f000 faf2 	bl	800474a <SDIO_GetResponse>
 8004166:	4602      	mov	r2, r0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2104      	movs	r1, #4
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fae9 	bl	800474a <SDIO_GetResponse>
 8004178:	4603      	mov	r3, r0
 800417a:	0d1a      	lsrs	r2, r3, #20
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004180:	f107 0310 	add.w	r3, r7, #16
 8004184:	4619      	mov	r1, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fcf2 	bl	8003b70 <HAL_SD_GetCardCSD>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004192:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004196:	e020      	b.n	80041da <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6819      	ldr	r1, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	041b      	lsls	r3, r3, #16
 80041a2:	f04f 0400 	mov.w	r4, #0
 80041a6:	461a      	mov	r2, r3
 80041a8:	4623      	mov	r3, r4
 80041aa:	4608      	mov	r0, r1
 80041ac:	f000 fbd8 	bl	8004960 <SDMMC_CmdSelDesel>
 80041b0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80041b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <SD_InitCard+0x174>
  {
    return errorstate;
 80041b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ba:	e00e      	b.n	80041da <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681d      	ldr	r5, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	466c      	mov	r4, sp
 80041c4:	f103 0210 	add.w	r2, r3, #16
 80041c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80041ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80041ce:	3304      	adds	r3, #4
 80041d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041d2:	4628      	mov	r0, r5
 80041d4:	f000 fa1c 	bl	8004610 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3740      	adds	r7, #64	; 0x40
 80041de:	46bd      	mov	sp, r7
 80041e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080041e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fbd2 	bl	80049a6 <SDMMC_CmdGoIdleState>
 8004202:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <SD_PowerON+0x2a>
  {
    return errorstate;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	e072      	b.n	80042f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fbe5 	bl	80049e2 <SDMMC_CmdOperCond>
 8004218:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00d      	beq.n	800423c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fbbb 	bl	80049a6 <SDMMC_CmdGoIdleState>
 8004230:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	e05b      	b.n	80042f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004246:	2b01      	cmp	r3, #1
 8004248:	d137      	bne.n	80042ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fbe5 	bl	8004a20 <SDMMC_CmdAppCommand>
 8004256:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d02d      	beq.n	80042ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800425e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004262:	e047      	b.n	80042f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2100      	movs	r1, #0
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fbd8 	bl	8004a20 <SDMMC_CmdAppCommand>
 8004270:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <SD_PowerON+0x98>
    {
      return errorstate;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	e03b      	b.n	80042f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	491e      	ldr	r1, [pc, #120]	; (80042fc <SD_PowerON+0x118>)
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fbee 	bl	8004a64 <SDMMC_CmdAppOperCommand>
 8004288:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004290:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004294:	e02e      	b.n	80042f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fa54 	bl	800474a <SDIO_GetResponse>
 80042a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	0fdb      	lsrs	r3, r3, #31
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <SD_PowerON+0xcc>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <SD_PowerON+0xce>
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]

    count++;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	3301      	adds	r3, #1
 80042b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d802      	bhi.n	80042ca <SD_PowerON+0xe6>
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0cc      	beq.n	8004264 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d902      	bls.n	80042da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80042d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d8:	e00c      	b.n	80042f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
 80042ea:	e002      	b.n	80042f2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	c1100000 	.word	0xc1100000

08004300 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004310:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004314:	e018      	b.n	8004348 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431e:	041b      	lsls	r3, r3, #16
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 fc62 	bl	8004bec <SDMMC_CmdSendStatus>
 8004328:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	e009      	b.n	8004348 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2100      	movs	r1, #0
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fa05 	bl	800474a <SDIO_GetResponse>
 8004340:	4602      	mov	r2, r0
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f9ef 	bl	800474a <SDIO_GetResponse>
 800436c:	4603      	mov	r3, r0
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004376:	d102      	bne.n	800437e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004378:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800437c:	e02f      	b.n	80043de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f879 	bl	800447c <SD_FindSCR>
 800438a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	e023      	b.n	80043de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01c      	beq.n	80043da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f000 fb37 	bl	8004a20 <SDMMC_CmdAppCommand>
 80043b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	e00f      	b.n	80043de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2102      	movs	r1, #2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fb70 	bl	8004aaa <SDMMC_CmdBusWidth>
 80043ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	e003      	b.n	80043de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e001      	b.n	80043de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80043da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 f9a4 	bl	800474a <SDIO_GetResponse>
 8004402:	4603      	mov	r3, r0
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800440c:	d102      	bne.n	8004414 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800440e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004412:	e02f      	b.n	8004474 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004414:	f107 030c 	add.w	r3, r7, #12
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f82e 	bl	800447c <SD_FindSCR>
 8004420:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	e023      	b.n	8004474 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01c      	beq.n	8004470 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f000 faec 	bl	8004a20 <SDMMC_CmdAppCommand>
 8004448:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	e00f      	b.n	8004474 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fb25 	bl	8004aaa <SDMMC_CmdBusWidth>
 8004460:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	e003      	b.n	8004474 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800446c:	2300      	movs	r3, #0
 800446e:	e001      	b.n	8004474 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004470:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800447c:	b590      	push	{r4, r7, lr}
 800447e:	b08f      	sub	sp, #60	; 0x3c
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004486:	f7fc fbbf 	bl	8000c08 <HAL_GetTick>
 800448a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004490:	2300      	movs	r3, #0
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2108      	movs	r1, #8
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f990 	bl	80047c8 <SDMMC_CmdBlockLength>
 80044a8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	e0a9      	b.n	8004608 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f000 faad 	bl	8004a20 <SDMMC_CmdAppCommand>
 80044c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	e09a      	b.n	8004608 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80044d2:	f04f 33ff 	mov.w	r3, #4294967295
 80044d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80044d8:	2308      	movs	r3, #8
 80044da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80044dc:	2330      	movs	r3, #48	; 0x30
 80044de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80044e0:	2302      	movs	r3, #2
 80044e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80044e8:	2301      	movs	r3, #1
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f107 0210 	add.w	r2, r7, #16
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f93a 	bl	8004770 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 faf4 	bl	8004aee <SDMMC_CmdSendSCR>
 8004506:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d022      	beq.n	8004554 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	e07a      	b.n	8004608 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00e      	beq.n	800453e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	f107 0208 	add.w	r2, r7, #8
 800452c:	18d4      	adds	r4, r2, r3
 800452e:	4608      	mov	r0, r1
 8004530:	f000 f899 	bl	8004666 <SDIO_ReadFIFO>
 8004534:	4603      	mov	r3, r0
 8004536:	6023      	str	r3, [r4, #0]
      index++;
 8004538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453a:	3301      	adds	r3, #1
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800453e:	f7fc fb63 	bl	8000c08 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d102      	bne.n	8004554 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800454e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004552:	e059      	b.n	8004608 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800455a:	f240 432a 	movw	r3, #1066	; 0x42a
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0d6      	beq.n	8004512 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2208      	movs	r2, #8
 8004578:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800457a:	2308      	movs	r3, #8
 800457c:	e044      	b.n	8004608 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2202      	movs	r2, #2
 8004592:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004594:	2302      	movs	r3, #2
 8004596:	e037      	b.n	8004608 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2220      	movs	r2, #32
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80045ae:	2320      	movs	r3, #32
 80045b0:	e02a      	b.n	8004608 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	061a      	lsls	r2, r3, #24
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	0a1b      	lsrs	r3, r3, #8
 80045ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80045d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	0e1b      	lsrs	r3, r3, #24
 80045d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	601a      	str	r2, [r3, #0]
    scr++;
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	3304      	adds	r3, #4
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	061a      	lsls	r2, r3, #24
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80045fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	0e1b      	lsrs	r3, r3, #24
 8004600:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	373c      	adds	r7, #60	; 0x3c
 800460c:	46bd      	mov	sp, r7
 800460e:	bd90      	pop	{r4, r7, pc}

08004610 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004610:	b084      	sub	sp, #16
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	f107 001c 	add.w	r0, r7, #28
 800461e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004626:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004628:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800462a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800462e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004632:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004636:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800463a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800464a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	b004      	add	sp, #16
 8004664:	4770      	bx	lr

08004666 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2203      	movs	r2, #3
 80046ae:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80046b0:	2002      	movs	r0, #2
 80046b2:	f7fc fab5 	bl	8000c20 <HAL_Delay>
  
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0303 	and.w	r3, r3, #3
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80046fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004700:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004706:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004716:	f023 030f 	bic.w	r3, r3, #15
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	b2db      	uxtb	r3, r3
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3314      	adds	r3, #20
 8004758:	461a      	mov	r2, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	4413      	add	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
}  
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004796:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800479c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80047a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0

}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80047d6:	2310      	movs	r3, #16
 80047d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047da:	2340      	movs	r3, #64	; 0x40
 80047dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047e8:	f107 0308 	add.w	r3, r7, #8
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff74 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	2110      	movs	r1, #16
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fa40 	bl	8004c80 <SDMMC_GetCmdResp1>
 8004800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004802:	69fb      	ldr	r3, [r7, #28]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800481a:	2311      	movs	r3, #17
 800481c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800481e:	2340      	movs	r3, #64	; 0x40
 8004820:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800482c:	f107 0308 	add.w	r3, r7, #8
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff ff52 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004838:	f241 3288 	movw	r2, #5000	; 0x1388
 800483c:	2111      	movs	r1, #17
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fa1e 	bl	8004c80 <SDMMC_GetCmdResp1>
 8004844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004846:	69fb      	ldr	r3, [r7, #28]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800485e:	2312      	movs	r3, #18
 8004860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004862:	2340      	movs	r3, #64	; 0x40
 8004864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800486a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800486e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004870:	f107 0308 	add.w	r3, r7, #8
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff ff30 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800487c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004880:	2112      	movs	r1, #18
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f9fc 	bl	8004c80 <SDMMC_GetCmdResp1>
 8004888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800488a:	69fb      	ldr	r3, [r7, #28]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80048a2:	2318      	movs	r3, #24
 80048a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048a6:	2340      	movs	r3, #64	; 0x40
 80048a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048b4:	f107 0308 	add.w	r3, r7, #8
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff ff0e 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80048c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c4:	2118      	movs	r1, #24
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9da 	bl	8004c80 <SDMMC_GetCmdResp1>
 80048cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048ce:	69fb      	ldr	r3, [r7, #28]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80048e6:	2319      	movs	r3, #25
 80048e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048ea:	2340      	movs	r3, #64	; 0x40
 80048ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048f8:	f107 0308 	add.w	r3, r7, #8
 80048fc:	4619      	mov	r1, r3
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff feec 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004904:	f241 3288 	movw	r2, #5000	; 0x1388
 8004908:	2119      	movs	r1, #25
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f9b8 	bl	8004c80 <SDMMC_GetCmdResp1>
 8004910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004912:	69fb      	ldr	r3, [r7, #28]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004928:	230c      	movs	r3, #12
 800492a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800492c:	2340      	movs	r3, #64	; 0x40
 800492e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004938:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff fecb 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004946:	4a05      	ldr	r2, [pc, #20]	; (800495c <SDMMC_CmdStopTransfer+0x40>)
 8004948:	210c      	movs	r1, #12
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f998 	bl	8004c80 <SDMMC_GetCmdResp1>
 8004950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004952:	69fb      	ldr	r3, [r7, #28]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	05f5e100 	.word	0x05f5e100

08004960 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004970:	2307      	movs	r3, #7
 8004972:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004974:	2340      	movs	r3, #64	; 0x40
 8004976:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004978:	2300      	movs	r3, #0
 800497a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800497c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004980:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004982:	f107 0310 	add.w	r3, r7, #16
 8004986:	4619      	mov	r1, r3
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff fea7 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	2107      	movs	r1, #7
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f973 	bl	8004c80 <SDMMC_GetCmdResp1>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3728      	adds	r7, #40	; 0x28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b088      	sub	sp, #32
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049c4:	f107 0308 	add.w	r3, r7, #8
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff fe86 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f92d 	bl	8004c30 <SDMMC_GetCmdError>
 80049d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049d8:	69fb      	ldr	r3, [r7, #28]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b088      	sub	sp, #32
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80049ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80049ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80049f0:	2308      	movs	r3, #8
 80049f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049f4:	2340      	movs	r3, #64	; 0x40
 80049f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a02:	f107 0308 	add.w	r3, r7, #8
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fe67 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fb16 	bl	8005040 <SDMMC_GetCmdResp7>
 8004a14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a16:	69fb      	ldr	r3, [r7, #28]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004a2e:	2337      	movs	r3, #55	; 0x37
 8004a30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a32:	2340      	movs	r3, #64	; 0x40
 8004a34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a40:	f107 0308 	add.w	r3, r7, #8
 8004a44:	4619      	mov	r1, r3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fe48 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	2137      	movs	r1, #55	; 0x37
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f914 	bl	8004c80 <SDMMC_GetCmdResp1>
 8004a58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004a7a:	2329      	movs	r3, #41	; 0x29
 8004a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a7e:	2340      	movs	r3, #64	; 0x40
 8004a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fe22 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fa23 	bl	8004ee4 <SDMMC_GetCmdResp3>
 8004a9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b088      	sub	sp, #32
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004ab8:	2306      	movs	r3, #6
 8004aba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004abc:	2340      	movs	r3, #64	; 0x40
 8004abe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aca:	f107 0308 	add.w	r3, r7, #8
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff fe03 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ada:	2106      	movs	r1, #6
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f8cf 	bl	8004c80 <SDMMC_GetCmdResp1>
 8004ae2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b088      	sub	sp, #32
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004afa:	2333      	movs	r3, #51	; 0x33
 8004afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004afe:	2340      	movs	r3, #64	; 0x40
 8004b00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b0c:	f107 0308 	add.w	r3, r7, #8
 8004b10:	4619      	mov	r1, r3
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff fde2 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1c:	2133      	movs	r1, #51	; 0x33
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8ae 	bl	8004c80 <SDMMC_GetCmdResp1>
 8004b24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b26:	69fb      	ldr	r3, [r7, #28]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004b40:	23c0      	movs	r3, #192	; 0xc0
 8004b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b4e:	f107 0308 	add.w	r3, r7, #8
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff fdc1 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f97c 	bl	8004e58 <SDMMC_GetCmdResp2>
 8004b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b62:	69fb      	ldr	r3, [r7, #28]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004b7a:	2309      	movs	r3, #9
 8004b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004b7e:	23c0      	movs	r3, #192	; 0xc0
 8004b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b8c:	f107 0308 	add.w	r3, r7, #8
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fda2 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f95d 	bl	8004e58 <SDMMC_GetCmdResp2>
 8004b9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b088      	sub	sp, #32
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bbc:	2340      	movs	r3, #64	; 0x40
 8004bbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bca:	f107 0308 	add.w	r3, r7, #8
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff fd83 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	2103      	movs	r1, #3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f9bc 	bl	8004f58 <SDMMC_GetCmdResp6>
 8004be0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004be2:	69fb      	ldr	r3, [r7, #28]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004bfa:	230d      	movs	r3, #13
 8004bfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bfe:	2340      	movs	r3, #64	; 0x40
 8004c00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c0c:	f107 0308 	add.w	r3, r7, #8
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff fd62 	bl	80046dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1c:	210d      	movs	r1, #13
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f82e 	bl	8004c80 <SDMMC_GetCmdResp1>
 8004c24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c26:	69fb      	ldr	r3, [r7, #28]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004c30:	b490      	push	{r4, r7}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <SDMMC_GetCmdError+0x48>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a0f      	ldr	r2, [pc, #60]	; (8004c7c <SDMMC_GetCmdError+0x4c>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	0a5b      	lsrs	r3, r3, #9
 8004c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	1e5c      	subs	r4, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c58:	e009      	b.n	8004c6e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f2      	beq.n	8004c4c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	22c5      	movs	r2, #197	; 0xc5
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc90      	pop	{r4, r7}
 8004c76:	4770      	bx	lr
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	10624dd3 	.word	0x10624dd3

08004c80 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004c80:	b590      	push	{r4, r7, lr}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004c8e:	4b6f      	ldr	r3, [pc, #444]	; (8004e4c <SDMMC_GetCmdResp1+0x1cc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a6f      	ldr	r2, [pc, #444]	; (8004e50 <SDMMC_GetCmdResp1+0x1d0>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	0a5b      	lsrs	r3, r3, #9
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004ca0:	4623      	mov	r3, r4
 8004ca2:	1e5c      	subs	r4, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ca8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cac:	e0c9      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <SDMMC_GetCmdResp1+0x20>
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1eb      	bne.n	8004ca0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d004      	beq.n	8004cde <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004cda:	2304      	movs	r3, #4
 8004cdc:	e0b1      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d004      	beq.n	8004cf4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0a6      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	22c5      	movs	r2, #197	; 0xc5
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7ff fd18 	bl	8004730 <SDIO_GetCommandResponse>
 8004d00:	4603      	mov	r3, r0
 8004d02:	461a      	mov	r2, r3
 8004d04:	7afb      	ldrb	r3, [r7, #11]
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d001      	beq.n	8004d0e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e099      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004d0e:	2100      	movs	r1, #0
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7ff fd1a 	bl	800474a <SDIO_GetResponse>
 8004d16:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4b4e      	ldr	r3, [pc, #312]	; (8004e54 <SDMMC_GetCmdResp1+0x1d4>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e08d      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	da02      	bge.n	8004d32 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004d2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d30:	e087      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004d3c:	2340      	movs	r3, #64	; 0x40
 8004d3e:	e080      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	e079      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d5c:	e071      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d6c:	e069      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d7c:	e061      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004d88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d8c:	e059      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d9c:	e051      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dac:	e049      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004db8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dbc:	e041      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dcc:	e039      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ddc:	e031      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004de8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004dec:	e029      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004df8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004dfc:	e021      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004e08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e0c:	e019      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004e18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e1c:	e011      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004e28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e2c:	e009      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004e38:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004e3c:	e001      	b.n	8004e42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd90      	pop	{r4, r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000000 	.word	0x20000000
 8004e50:	10624dd3 	.word	0x10624dd3
 8004e54:	fdffe008 	.word	0xfdffe008

08004e58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004e58:	b490      	push	{r4, r7}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e60:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <SDMMC_GetCmdResp2+0x84>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <SDMMC_GetCmdResp2+0x88>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0a5b      	lsrs	r3, r3, #9
 8004e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e74:	4623      	mov	r3, r4
 8004e76:	1e5c      	subs	r4, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d102      	bne.n	8004e82 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e80:	e026      	b.n	8004ed0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f0      	beq.n	8004e74 <SDMMC_GetCmdResp2+0x1c>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1eb      	bne.n	8004e74 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2204      	movs	r2, #4
 8004eac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004eae:	2304      	movs	r3, #4
 8004eb0:	e00e      	b.n	8004ed0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e003      	b.n	8004ed0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	22c5      	movs	r2, #197	; 0xc5
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc90      	pop	{r4, r7}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	10624dd3 	.word	0x10624dd3

08004ee4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004ee4:	b490      	push	{r4, r7}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004eec:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <SDMMC_GetCmdResp3+0x6c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <SDMMC_GetCmdResp3+0x70>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	0a5b      	lsrs	r3, r3, #9
 8004ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004f00:	4623      	mov	r3, r4
 8004f02:	1e5c      	subs	r4, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f0c:	e01b      	b.n	8004f46 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f12:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <SDMMC_GetCmdResp3+0x1c>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1eb      	bne.n	8004f00 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2204      	movs	r2, #4
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	e003      	b.n	8004f46 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	22c5      	movs	r2, #197	; 0xc5
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc90      	pop	{r4, r7}
 8004f4e:	4770      	bx	lr
 8004f50:	20000000 	.word	0x20000000
 8004f54:	10624dd3 	.word	0x10624dd3

08004f58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	460b      	mov	r3, r1
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f66:	4b34      	ldr	r3, [pc, #208]	; (8005038 <SDMMC_GetCmdResp6+0xe0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a34      	ldr	r2, [pc, #208]	; (800503c <SDMMC_GetCmdResp6+0xe4>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	0a5b      	lsrs	r3, r3, #9
 8004f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f76:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	1e5c      	subs	r4, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f86:	e052      	b.n	800502e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <SDMMC_GetCmdResp6+0x22>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1eb      	bne.n	8004f7a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	e03a      	b.n	800502e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d004      	beq.n	8004fce <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e02f      	b.n	800502e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7ff fbae 	bl	8004730 <SDIO_GetCommandResponse>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	7afb      	ldrb	r3, [r7, #11]
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d001      	beq.n	8004fe2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e025      	b.n	800502e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	22c5      	movs	r2, #197	; 0xc5
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004fe8:	2100      	movs	r1, #0
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7ff fbad 	bl	800474a <SDIO_GetResponse>
 8004ff0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	0c1b      	lsrs	r3, r3, #16
 8005000:	b29a      	uxth	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005006:	2300      	movs	r3, #0
 8005008:	e011      	b.n	800502e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005018:	e009      	b.n	800502e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005028:	e001      	b.n	800502e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800502a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800502e:	4618      	mov	r0, r3
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	bd90      	pop	{r4, r7, pc}
 8005036:	bf00      	nop
 8005038:	20000000 	.word	0x20000000
 800503c:	10624dd3 	.word	0x10624dd3

08005040 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005040:	b490      	push	{r4, r7}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005048:	4b21      	ldr	r3, [pc, #132]	; (80050d0 <SDMMC_GetCmdResp7+0x90>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a21      	ldr	r2, [pc, #132]	; (80050d4 <SDMMC_GetCmdResp7+0x94>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	0a5b      	lsrs	r3, r3, #9
 8005054:	f241 3288 	movw	r2, #5000	; 0x1388
 8005058:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800505c:	4623      	mov	r3, r4
 800505e:	1e5c      	subs	r4, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005064:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005068:	e02c      	b.n	80050c4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <SDMMC_GetCmdResp7+0x1c>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1eb      	bne.n	800505c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2204      	movs	r2, #4
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005096:	2304      	movs	r3, #4
 8005098:	e014      	b.n	80050c4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e009      	b.n	80050c4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2240      	movs	r2, #64	; 0x40
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80050c2:	2300      	movs	r3, #0
  
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc90      	pop	{r4, r7}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000000 	.word	0x20000000
 80050d4:	10624dd3 	.word	0x10624dd3

080050d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050d8:	b084      	sub	sp, #16
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	f107 001c 	add.w	r0, r7, #28
 80050e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d122      	bne.n	8005136 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d105      	bne.n	800512a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f001 faae 	bl	800668c <USB_CoreReset>
 8005130:	4603      	mov	r3, r0
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	e01a      	b.n	800516c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 faa2 	bl	800668c <USB_CoreReset>
 8005148:	4603      	mov	r3, r0
 800514a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800514c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
 800515e:	e005      	b.n	800516c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	2b01      	cmp	r3, #1
 8005170:	d10b      	bne.n	800518a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f043 0206 	orr.w	r2, r3, #6
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f043 0220 	orr.w	r2, r3, #32
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005196:	b004      	add	sp, #16
 8005198:	4770      	bx	lr
	...

0800519c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	4613      	mov	r3, r2
 80051a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d165      	bne.n	800527c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4a41      	ldr	r2, [pc, #260]	; (80052b8 <USB_SetTurnaroundTime+0x11c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d906      	bls.n	80051c6 <USB_SetTurnaroundTime+0x2a>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4a40      	ldr	r2, [pc, #256]	; (80052bc <USB_SetTurnaroundTime+0x120>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d802      	bhi.n	80051c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051c0:	230f      	movs	r3, #15
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e062      	b.n	800528c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4a3c      	ldr	r2, [pc, #240]	; (80052bc <USB_SetTurnaroundTime+0x120>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d906      	bls.n	80051dc <USB_SetTurnaroundTime+0x40>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4a3b      	ldr	r2, [pc, #236]	; (80052c0 <USB_SetTurnaroundTime+0x124>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d802      	bhi.n	80051dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051d6:	230e      	movs	r3, #14
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	e057      	b.n	800528c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4a38      	ldr	r2, [pc, #224]	; (80052c0 <USB_SetTurnaroundTime+0x124>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d906      	bls.n	80051f2 <USB_SetTurnaroundTime+0x56>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a37      	ldr	r2, [pc, #220]	; (80052c4 <USB_SetTurnaroundTime+0x128>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d802      	bhi.n	80051f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051ec:	230d      	movs	r3, #13
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	e04c      	b.n	800528c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4a33      	ldr	r2, [pc, #204]	; (80052c4 <USB_SetTurnaroundTime+0x128>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d906      	bls.n	8005208 <USB_SetTurnaroundTime+0x6c>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4a32      	ldr	r2, [pc, #200]	; (80052c8 <USB_SetTurnaroundTime+0x12c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d802      	bhi.n	8005208 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005202:	230c      	movs	r3, #12
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	e041      	b.n	800528c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4a2f      	ldr	r2, [pc, #188]	; (80052c8 <USB_SetTurnaroundTime+0x12c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d906      	bls.n	800521e <USB_SetTurnaroundTime+0x82>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4a2e      	ldr	r2, [pc, #184]	; (80052cc <USB_SetTurnaroundTime+0x130>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d802      	bhi.n	800521e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005218:	230b      	movs	r3, #11
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e036      	b.n	800528c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4a2a      	ldr	r2, [pc, #168]	; (80052cc <USB_SetTurnaroundTime+0x130>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d906      	bls.n	8005234 <USB_SetTurnaroundTime+0x98>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4a29      	ldr	r2, [pc, #164]	; (80052d0 <USB_SetTurnaroundTime+0x134>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d802      	bhi.n	8005234 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800522e:	230a      	movs	r3, #10
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e02b      	b.n	800528c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4a26      	ldr	r2, [pc, #152]	; (80052d0 <USB_SetTurnaroundTime+0x134>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d906      	bls.n	800524a <USB_SetTurnaroundTime+0xae>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4a25      	ldr	r2, [pc, #148]	; (80052d4 <USB_SetTurnaroundTime+0x138>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d802      	bhi.n	800524a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005244:	2309      	movs	r3, #9
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e020      	b.n	800528c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4a21      	ldr	r2, [pc, #132]	; (80052d4 <USB_SetTurnaroundTime+0x138>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d906      	bls.n	8005260 <USB_SetTurnaroundTime+0xc4>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4a20      	ldr	r2, [pc, #128]	; (80052d8 <USB_SetTurnaroundTime+0x13c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d802      	bhi.n	8005260 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800525a:	2308      	movs	r3, #8
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	e015      	b.n	800528c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4a1d      	ldr	r2, [pc, #116]	; (80052d8 <USB_SetTurnaroundTime+0x13c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d906      	bls.n	8005276 <USB_SetTurnaroundTime+0xda>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <USB_SetTurnaroundTime+0x140>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d802      	bhi.n	8005276 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005270:	2307      	movs	r3, #7
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e00a      	b.n	800528c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005276:	2306      	movs	r3, #6
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	e007      	b.n	800528c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d102      	bne.n	8005288 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005282:	2309      	movs	r3, #9
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	e001      	b.n	800528c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005288:	2309      	movs	r3, #9
 800528a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	029b      	lsls	r3, r3, #10
 80052a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	00d8acbf 	.word	0x00d8acbf
 80052bc:	00e4e1bf 	.word	0x00e4e1bf
 80052c0:	00f423ff 	.word	0x00f423ff
 80052c4:	0106737f 	.word	0x0106737f
 80052c8:	011a499f 	.word	0x011a499f
 80052cc:	01312cff 	.word	0x01312cff
 80052d0:	014ca43f 	.word	0x014ca43f
 80052d4:	016e35ff 	.word	0x016e35ff
 80052d8:	01a6ab1f 	.word	0x01a6ab1f
 80052dc:	01e847ff 	.word	0x01e847ff

080052e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f043 0201 	orr.w	r2, r3, #1
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 0201 	bic.w	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d106      	bne.n	8005350 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60da      	str	r2, [r3, #12]
 800534e:	e00b      	b.n	8005368 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60da      	str	r2, [r3, #12]
 8005362:	e001      	b.n	8005368 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e003      	b.n	8005370 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005368:	2032      	movs	r0, #50	; 0x32
 800536a:	f7fb fc59 	bl	8000c20 <HAL_Delay>

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005378:	b084      	sub	sp, #16
 800537a:	b580      	push	{r7, lr}
 800537c:	b086      	sub	sp, #24
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	e009      	b.n	80053ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3340      	adds	r3, #64	; 0x40
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	2200      	movs	r2, #0
 80053a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	3301      	adds	r3, #1
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b0e      	cmp	r3, #14
 80053b0:	d9f2      	bls.n	8005398 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11c      	bne.n	80053f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c6:	f043 0302 	orr.w	r3, r3, #2
 80053ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	e005      	b.n	80053fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005404:	461a      	mov	r2, r3
 8005406:	2300      	movs	r3, #0
 8005408:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	4619      	mov	r1, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005418:	461a      	mov	r2, r3
 800541a:	680b      	ldr	r3, [r1, #0]
 800541c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10c      	bne.n	800543e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d104      	bne.n	8005434 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800542a:	2100      	movs	r1, #0
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f949 	bl	80056c4 <USB_SetDevSpeed>
 8005432:	e008      	b.n	8005446 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005434:	2101      	movs	r1, #1
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f944 	bl	80056c4 <USB_SetDevSpeed>
 800543c:	e003      	b.n	8005446 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800543e:	2103      	movs	r1, #3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f93f 	bl	80056c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005446:	2110      	movs	r1, #16
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f8f3 	bl	8005634 <USB_FlushTxFifo>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f911 	bl	8005680 <USB_FlushRxFifo>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	461a      	mov	r2, r3
 8005470:	2300      	movs	r3, #0
 8005472:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	461a      	mov	r2, r3
 800547c:	2300      	movs	r3, #0
 800547e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	461a      	mov	r2, r3
 8005488:	2300      	movs	r3, #0
 800548a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800548c:	2300      	movs	r3, #0
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	e043      	b.n	800551a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a8:	d118      	bne.n	80054dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054bc:	461a      	mov	r2, r3
 80054be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	e013      	b.n	80054ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	461a      	mov	r2, r3
 80054d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e008      	b.n	80054ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	461a      	mov	r2, r3
 80054ea:	2300      	movs	r3, #0
 80054ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fa:	461a      	mov	r2, r3
 80054fc:	2300      	movs	r3, #0
 80054fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	461a      	mov	r2, r3
 800550e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005512:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	3301      	adds	r3, #1
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	d3b7      	bcc.n	8005492 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	e043      	b.n	80055b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800553a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800553e:	d118      	bne.n	8005572 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	461a      	mov	r2, r3
 8005554:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e013      	b.n	8005584 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005568:	461a      	mov	r2, r3
 800556a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e008      	b.n	8005584 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	461a      	mov	r2, r3
 8005580:	2300      	movs	r3, #0
 8005582:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	461a      	mov	r2, r3
 8005592:	2300      	movs	r3, #0
 8005594:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	461a      	mov	r2, r3
 80055a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	3301      	adds	r3, #1
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d3b7      	bcc.n	8005528 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f043 0210 	orr.w	r2, r3, #16
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699a      	ldr	r2, [r3, #24]
 80055f0:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <USB_DevInit+0x2b8>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f043 0208 	orr.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800560a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d107      	bne.n	8005620 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005618:	f043 0304 	orr.w	r3, r3, #4
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005620:	7dfb      	ldrb	r3, [r7, #23]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800562c:	b004      	add	sp, #16
 800562e:	4770      	bx	lr
 8005630:	803c3800 	.word	0x803c3800

08005634 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	019b      	lsls	r3, r3, #6
 8005646:	f043 0220 	orr.w	r2, r3, #32
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3301      	adds	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4a09      	ldr	r2, [pc, #36]	; (800567c <USB_FlushTxFifo+0x48>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d901      	bls.n	8005660 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e006      	b.n	800566e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b20      	cmp	r3, #32
 800566a:	d0f0      	beq.n	800564e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	00030d40 	.word	0x00030d40

08005680 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2210      	movs	r2, #16
 8005690:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3301      	adds	r3, #1
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <USB_FlushRxFifo+0x40>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d901      	bls.n	80056a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e006      	b.n	80056b2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d0f0      	beq.n	8005692 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	00030d40 	.word	0x00030d40

080056c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e4:	4313      	orrs	r3, r2
 80056e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b087      	sub	sp, #28
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0306 	and.w	r3, r3, #6
 800570e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]
 800571a:	e00a      	b.n	8005732 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d002      	beq.n	8005728 <USB_GetDevSpeed+0x32>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b06      	cmp	r3, #6
 8005726:	d102      	bne.n	800572e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005728:	2302      	movs	r3, #2
 800572a:	75fb      	strb	r3, [r7, #23]
 800572c:	e001      	b.n	8005732 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800572e:	230f      	movs	r3, #15
 8005730:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
}
 8005734:	4618      	mov	r0, r3
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d13a      	bne.n	80057d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	2101      	movs	r1, #1
 800576e:	fa01 f303 	lsl.w	r3, r1, r3
 8005772:	b29b      	uxth	r3, r3
 8005774:	68f9      	ldr	r1, [r7, #12]
 8005776:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800577a:	4313      	orrs	r3, r2
 800577c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d155      	bne.n	8005840 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	78db      	ldrb	r3, [r3, #3]
 80057ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	059b      	lsls	r3, r3, #22
 80057b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057b8:	4313      	orrs	r3, r2
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	e036      	b.n	8005840 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d8:	69da      	ldr	r2, [r3, #28]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	2101      	movs	r1, #1
 80057e4:	fa01 f303 	lsl.w	r3, r1, r3
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	68f9      	ldr	r1, [r7, #12]
 80057ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f0:	4313      	orrs	r3, r2
 80057f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d11a      	bne.n	8005840 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	78db      	ldrb	r3, [r3, #3]
 8005824:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005826:	430b      	orrs	r3, r1
 8005828:	4313      	orrs	r3, r2
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800583a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d161      	bne.n	8005930 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800587e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005882:	d11f      	bne.n	80058c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	440a      	add	r2, r1
 800589a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	2101      	movs	r1, #1
 80058d6:	fa01 f303 	lsl.w	r3, r1, r3
 80058da:	b29b      	uxth	r3, r3
 80058dc:	43db      	mvns	r3, r3
 80058de:	68f9      	ldr	r1, [r7, #12]
 80058e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e4:	4013      	ands	r3, r2
 80058e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	2101      	movs	r1, #1
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	43db      	mvns	r3, r3
 8005902:	68f9      	ldr	r1, [r7, #12]
 8005904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005908:	4013      	ands	r3, r2
 800590a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	0159      	lsls	r1, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	440b      	add	r3, r1
 8005922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005926:	4619      	mov	r1, r3
 8005928:	4b35      	ldr	r3, [pc, #212]	; (8005a00 <USB_DeactivateEndpoint+0x1b0>)
 800592a:	4013      	ands	r3, r2
 800592c:	600b      	str	r3, [r1, #0]
 800592e:	e060      	b.n	80059f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005946:	d11f      	bne.n	8005988 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	0151      	lsls	r1, r2, #5
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	440a      	add	r2, r1
 800595e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005962:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005966:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005986:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	2101      	movs	r1, #1
 800599a:	fa01 f303 	lsl.w	r3, r1, r3
 800599e:	041b      	lsls	r3, r3, #16
 80059a0:	43db      	mvns	r3, r3
 80059a2:	68f9      	ldr	r1, [r7, #12]
 80059a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a8:	4013      	ands	r3, r2
 80059aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	2101      	movs	r1, #1
 80059be:	fa01 f303 	lsl.w	r3, r1, r3
 80059c2:	041b      	lsls	r3, r3, #16
 80059c4:	43db      	mvns	r3, r3
 80059c6:	68f9      	ldr	r1, [r7, #12]
 80059c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059cc:	4013      	ands	r3, r2
 80059ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	0159      	lsls	r1, r3, #5
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	440b      	add	r3, r1
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	4619      	mov	r1, r3
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <USB_DeactivateEndpoint+0x1b4>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	ec337800 	.word	0xec337800
 8005a04:	eff37800 	.word	0xeff37800

08005a08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	; 0x28
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	785b      	ldrb	r3, [r3, #1]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	f040 815c 	bne.w	8005ce2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d132      	bne.n	8005a98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a90:	0cdb      	lsrs	r3, r3, #19
 8005a92:	04db      	lsls	r3, r3, #19
 8005a94:	6113      	str	r3, [r2, #16]
 8005a96:	e074      	b.n	8005b82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab2:	0cdb      	lsrs	r3, r3, #19
 8005ab4:	04db      	lsls	r3, r3, #19
 8005ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ad6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	691a      	ldr	r2, [r3, #16]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6959      	ldr	r1, [r3, #20]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	440b      	add	r3, r1
 8005af4:	1e59      	subs	r1, r3, #1
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005afe:	04d9      	lsls	r1, r3, #19
 8005b00:	4b9d      	ldr	r3, [pc, #628]	; (8005d78 <USB_EPStartXfer+0x370>)
 8005b02:	400b      	ands	r3, r1
 8005b04:	69b9      	ldr	r1, [r7, #24]
 8005b06:	0148      	lsls	r0, r1, #5
 8005b08:	69f9      	ldr	r1, [r7, #28]
 8005b0a:	4401      	add	r1, r0
 8005b0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b10:	4313      	orrs	r3, r2
 8005b12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2a:	69b9      	ldr	r1, [r7, #24]
 8005b2c:	0148      	lsls	r0, r1, #5
 8005b2e:	69f9      	ldr	r1, [r7, #28]
 8005b30:	4401      	add	r1, r0
 8005b32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b36:	4313      	orrs	r3, r2
 8005b38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	78db      	ldrb	r3, [r3, #3]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d11f      	bne.n	8005b82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d14b      	bne.n	8005c20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d009      	beq.n	8005ba4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	78db      	ldrb	r3, [r3, #3]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d128      	bne.n	8005bfe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d110      	bne.n	8005bde <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	e00f      	b.n	8005bfe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e12f      	b.n	8005e80 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	78db      	ldrb	r3, [r3, #3]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d015      	beq.n	8005c74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8117 	beq.w	8005e80 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	2101      	movs	r1, #1
 8005c64:	fa01 f303 	lsl.w	r3, r1, r3
 8005c68:	69f9      	ldr	r1, [r7, #28]
 8005c6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	634b      	str	r3, [r1, #52]	; 0x34
 8005c72:	e105      	b.n	8005e80 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d110      	bne.n	8005ca6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	e00f      	b.n	8005cc6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	68d9      	ldr	r1, [r3, #12]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	b298      	uxth	r0, r3
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4603      	mov	r3, r0
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fa2b 	bl	8006136 <USB_WritePacket>
 8005ce0:	e0ce      	b.n	8005e80 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfc:	0cdb      	lsrs	r3, r3, #19
 8005cfe:	04db      	lsls	r3, r3, #19
 8005d00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d126      	bne.n	8005d7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d44:	69b9      	ldr	r1, [r7, #24]
 8005d46:	0148      	lsls	r0, r1, #5
 8005d48:	69f9      	ldr	r1, [r7, #28]
 8005d4a:	4401      	add	r1, r0
 8005d4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d50:	4313      	orrs	r3, r2
 8005d52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d72:	6113      	str	r3, [r2, #16]
 8005d74:	e036      	b.n	8005de4 <USB_EPStartXfer+0x3dc>
 8005d76:	bf00      	nop
 8005d78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	4413      	add	r3, r2
 8005d86:	1e5a      	subs	r2, r3, #1
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d90:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	8afb      	ldrh	r3, [r7, #22]
 8005da2:	04d9      	lsls	r1, r3, #19
 8005da4:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <USB_EPStartXfer+0x484>)
 8005da6:	400b      	ands	r3, r1
 8005da8:	69b9      	ldr	r1, [r7, #24]
 8005daa:	0148      	lsls	r0, r1, #5
 8005dac:	69f9      	ldr	r1, [r7, #28]
 8005dae:	4401      	add	r1, r0
 8005db0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005db4:	4313      	orrs	r3, r2
 8005db6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	8af9      	ldrh	r1, [r7, #22]
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dd4:	69b9      	ldr	r1, [r7, #24]
 8005dd6:	0148      	lsls	r0, r1, #5
 8005dd8:	69f9      	ldr	r1, [r7, #28]
 8005dda:	4401      	add	r1, r0
 8005ddc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005de0:	4313      	orrs	r3, r2
 8005de2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d10d      	bne.n	8005e06 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d009      	beq.n	8005e06 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	68d9      	ldr	r1, [r3, #12]
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e02:	460a      	mov	r2, r1
 8005e04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	78db      	ldrb	r3, [r3, #3]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d128      	bne.n	8005e60 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d110      	bne.n	8005e40 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e00f      	b.n	8005e60 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3720      	adds	r7, #32
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	1ff80000 	.word	0x1ff80000

08005e90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	f040 80cd 	bne.w	800604c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d132      	bne.n	8005f20 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	0151      	lsls	r1, r2, #5
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	440a      	add	r2, r1
 8005ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ed8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005edc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	0151      	lsls	r1, r2, #5
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	440a      	add	r2, r1
 8005ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005efc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f18:	0cdb      	lsrs	r3, r3, #19
 8005f1a:	04db      	lsls	r3, r3, #19
 8005f1c:	6113      	str	r3, [r2, #16]
 8005f1e:	e04e      	b.n	8005fbe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3a:	0cdb      	lsrs	r3, r3, #19
 8005f3c:	04db      	lsls	r3, r3, #19
 8005f3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f62:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	695a      	ldr	r2, [r3, #20]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d903      	bls.n	8005f78 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fae:	6939      	ldr	r1, [r7, #16]
 8005fb0:	0148      	lsls	r0, r1, #5
 8005fb2:	6979      	ldr	r1, [r7, #20]
 8005fb4:	4401      	add	r1, r0
 8005fb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d11e      	bne.n	8006002 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d009      	beq.n	8005fe0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e092      	b.n	8006128 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006020:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d07e      	beq.n	8006128 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	2101      	movs	r1, #1
 800603c:	fa01 f303 	lsl.w	r3, r1, r3
 8006040:	6979      	ldr	r1, [r7, #20]
 8006042:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006046:	4313      	orrs	r3, r2
 8006048:	634b      	str	r3, [r1, #52]	; 0x34
 800604a:	e06d      	b.n	8006128 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	440a      	add	r2, r1
 8006062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006066:	0cdb      	lsrs	r3, r3, #19
 8006068:	04db      	lsls	r3, r3, #19
 800606a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006086:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800608a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800608e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d6:	6939      	ldr	r1, [r7, #16]
 80060d8:	0148      	lsls	r0, r1, #5
 80060da:	6979      	ldr	r1, [r7, #20]
 80060dc:	4401      	add	r1, r0
 80060de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060e2:	4313      	orrs	r3, r2
 80060e4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80060e6:	79fb      	ldrb	r3, [r7, #7]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d10d      	bne.n	8006108 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	68d9      	ldr	r1, [r3, #12]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006104:	460a      	mov	r2, r1
 8006106:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	440a      	add	r2, r1
 800611e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006122:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006126:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006136:	b480      	push	{r7}
 8006138:	b089      	sub	sp, #36	; 0x24
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	4611      	mov	r1, r2
 8006142:	461a      	mov	r2, r3
 8006144:	460b      	mov	r3, r1
 8006146:	71fb      	strb	r3, [r7, #7]
 8006148:	4613      	mov	r3, r2
 800614a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006154:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006158:	2b00      	cmp	r3, #0
 800615a:	d11a      	bne.n	8006192 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800615c:	88bb      	ldrh	r3, [r7, #4]
 800615e:	3303      	adds	r3, #3
 8006160:	089b      	lsrs	r3, r3, #2
 8006162:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006164:	2300      	movs	r3, #0
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e00f      	b.n	800618a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	031a      	lsls	r2, r3, #12
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006176:	461a      	mov	r2, r3
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	3304      	adds	r3, #4
 8006182:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	3301      	adds	r3, #1
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	429a      	cmp	r2, r3
 8006190:	d3eb      	bcc.n	800616a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3724      	adds	r7, #36	; 0x24
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b089      	sub	sp, #36	; 0x24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	3303      	adds	r3, #3
 80061ba:	089b      	lsrs	r3, r3, #2
 80061bc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80061be:	2300      	movs	r3, #0
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	e00b      	b.n	80061dc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	3304      	adds	r3, #4
 80061d4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	3301      	adds	r3, #1
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d3ef      	bcc.n	80061c4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80061e4:	69fb      	ldr	r3, [r7, #28]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3724      	adds	r7, #36	; 0x24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d12c      	bne.n	8006268 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	db12      	blt.n	8006246 <USB_EPSetStall+0x54>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00f      	beq.n	8006246 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006240:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006244:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	440a      	add	r2, r1
 800625c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e02b      	b.n	80062c0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	db12      	blt.n	80062a0 <USB_EPSetStall+0xae>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00f      	beq.n	80062a0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800629e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	785b      	ldrb	r3, [r3, #1]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d128      	bne.n	800633c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006304:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006308:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	78db      	ldrb	r3, [r3, #3]
 800630e:	2b03      	cmp	r3, #3
 8006310:	d003      	beq.n	800631a <USB_EPClearStall+0x4c>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	78db      	ldrb	r3, [r3, #3]
 8006316:	2b02      	cmp	r3, #2
 8006318:	d138      	bne.n	800638c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	e027      	b.n	800638c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	440a      	add	r2, r1
 8006352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800635a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	78db      	ldrb	r3, [r3, #3]
 8006360:	2b03      	cmp	r3, #3
 8006362:	d003      	beq.n	800636c <USB_EPClearStall+0x9e>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	78db      	ldrb	r3, [r3, #3]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d10f      	bne.n	800638c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800638a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800639a:	b480      	push	{r7}
 800639c:	b085      	sub	sp, #20
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80063bc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80063ce:	68f9      	ldr	r1, [r7, #12]
 80063d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d4:	4313      	orrs	r3, r2
 80063d6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006400:	f023 0302 	bic.w	r3, r3, #2
 8006404:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006406:	2003      	movs	r0, #3
 8006408:	f7fa fc0a 	bl	8000c20 <HAL_Delay>

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006430:	f043 0302 	orr.w	r3, r3, #2
 8006434:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006436:	2003      	movs	r0, #3
 8006438:	f7fa fbf2 	bl	8000c20 <HAL_Delay>

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4013      	ands	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800645e:	68fb      	ldr	r3, [r7, #12]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	4013      	ands	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	0c1b      	lsrs	r3, r3, #16
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	4013      	ands	r3, r2
 80064c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	b29b      	uxth	r3, r3
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	4013      	ands	r3, r2
 8006500:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006502:	68bb      	ldr	r3, [r7, #8]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	fa22 f303 	lsr.w	r3, r2, r3
 8006540:	01db      	lsls	r3, r3, #7
 8006542:	b2db      	uxtb	r3, r3
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4013      	ands	r3, r2
 800655c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800655e:	68bb      	ldr	r3, [r7, #8]
}
 8006560:	4618      	mov	r0, r3
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	f003 0301 	and.w	r3, r3, #1
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065a6:	f023 0307 	bic.w	r3, r3, #7
 80065aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
	...

080065d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	460b      	mov	r3, r1
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	333c      	adds	r3, #60	; 0x3c
 80065e6:	3304      	adds	r3, #4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4a26      	ldr	r2, [pc, #152]	; (8006688 <USB_EP0_OutStart+0xb8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d90a      	bls.n	800660a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006604:	d101      	bne.n	800660a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	e037      	b.n	800667a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	461a      	mov	r2, r3
 8006612:	2300      	movs	r3, #0
 8006614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006624:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006628:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006638:	f043 0318 	orr.w	r3, r3, #24
 800663c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800664c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006650:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006652:	7afb      	ldrb	r3, [r7, #11]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d10f      	bne.n	8006678 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006672:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006676:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	4f54300a 	.word	0x4f54300a

0800668c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <USB_CoreReset+0x64>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e01b      	b.n	80066e2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	daf2      	bge.n	8006698 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f043 0201 	orr.w	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3301      	adds	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4a09      	ldr	r2, [pc, #36]	; (80066f0 <USB_CoreReset+0x64>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e006      	b.n	80066e2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d0f0      	beq.n	80066c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	00030d40 	.word	0x00030d40

080066f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80066f8:	4904      	ldr	r1, [pc, #16]	; (800670c <MX_FATFS_Init+0x18>)
 80066fa:	4805      	ldr	r0, [pc, #20]	; (8006710 <MX_FATFS_Init+0x1c>)
 80066fc:	f002 ff38 	bl	8009570 <FATFS_LinkDriver>
 8006700:	4603      	mov	r3, r0
 8006702:	461a      	mov	r2, r3
 8006704:	4b03      	ldr	r3, [pc, #12]	; (8006714 <MX_FATFS_Init+0x20>)
 8006706:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006708:	bf00      	nop
 800670a:	bd80      	pop	{r7, pc}
 800670c:	200002b0 	.word	0x200002b0
 8006710:	0800a8fc 	.word	0x0800a8fc
 8006714:	200002ac 	.word	0x200002ac

08006718 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006722:	f000 f879 	bl	8006818 <BSP_SD_IsDetected>
 8006726:	4603      	mov	r3, r0
 8006728:	2b01      	cmp	r3, #1
 800672a:	d001      	beq.n	8006730 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e012      	b.n	8006756 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006730:	480b      	ldr	r0, [pc, #44]	; (8006760 <BSP_SD_Init+0x48>)
 8006732:	f7fc fdf5 	bl	8003320 <HAL_SD_Init>
 8006736:	4603      	mov	r3, r0
 8006738:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006744:	4806      	ldr	r0, [pc, #24]	; (8006760 <BSP_SD_Init+0x48>)
 8006746:	f7fd fbe3 	bl	8003f10 <HAL_SD_ConfigWideBusOperation>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006754:	79fb      	ldrb	r3, [r7, #7]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000204 	.word	0x20000204

08006764 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	4806      	ldr	r0, [pc, #24]	; (800679c <BSP_SD_ReadBlocks+0x38>)
 8006782:	f7fc fe5d 	bl	8003440 <HAL_SD_ReadBlocks>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006790:	7dfb      	ldrb	r3, [r7, #23]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000204 	.word	0x20000204

080067a0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	4806      	ldr	r0, [pc, #24]	; (80067d8 <BSP_SD_WriteBlocks+0x38>)
 80067be:	f7fd f837 	bl	8003830 <HAL_SD_WriteBlocks>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000204 	.word	0x20000204

080067dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80067e0:	4805      	ldr	r0, [pc, #20]	; (80067f8 <BSP_SD_GetCardState+0x1c>)
 80067e2:	f7fd fc11 	bl	8004008 <HAL_SD_GetCardState>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000204 	.word	0x20000204

080067fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	4803      	ldr	r0, [pc, #12]	; (8006814 <BSP_SD_GetCardInfo+0x18>)
 8006808:	f7fd fb56 	bl	8003eb8 <HAL_SD_GetCardInfo>
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20000204 	.word	0x20000204

08006818 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800681e:	2301      	movs	r3, #1
 8006820:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	b2db      	uxtb	r3, r3
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800683e:	4b0b      	ldr	r3, [pc, #44]	; (800686c <SD_CheckStatus+0x38>)
 8006840:	2201      	movs	r2, #1
 8006842:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006844:	f7ff ffca 	bl	80067dc <BSP_SD_GetCardState>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d107      	bne.n	800685e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800684e:	4b07      	ldr	r3, [pc, #28]	; (800686c <SD_CheckStatus+0x38>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	b2da      	uxtb	r2, r3
 800685a:	4b04      	ldr	r3, [pc, #16]	; (800686c <SD_CheckStatus+0x38>)
 800685c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800685e:	4b03      	ldr	r3, [pc, #12]	; (800686c <SD_CheckStatus+0x38>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	b2db      	uxtb	r3, r3
}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000009 	.word	0x20000009

08006870 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800687a:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <SD_initialize+0x38>)
 800687c:	2201      	movs	r2, #1
 800687e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006880:	f7ff ff4a 	bl	8006718 <BSP_SD_Init>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d107      	bne.n	800689a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff ffd1 	bl	8006834 <SD_CheckStatus>
 8006892:	4603      	mov	r3, r0
 8006894:	461a      	mov	r2, r3
 8006896:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <SD_initialize+0x38>)
 8006898:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800689a:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <SD_initialize+0x38>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20000009 	.word	0x20000009

080068ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4603      	mov	r3, r0
 80068b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff ffbb 	bl	8006834 <SD_CheckStatus>
 80068be:	4603      	mov	r3, r0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	68b8      	ldr	r0, [r7, #8]
 80068e6:	f7ff ff3d 	bl	8006764 <BSP_SD_ReadBlocks>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d107      	bne.n	8006900 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80068f0:	bf00      	nop
 80068f2:	f7ff ff73 	bl	80067dc <BSP_SD_GetCardState>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1fa      	bne.n	80068f2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006900:	7dfb      	ldrb	r3, [r7, #23]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	4603      	mov	r3, r0
 8006918:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800691e:	f04f 33ff 	mov.w	r3, #4294967295
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	68b8      	ldr	r0, [r7, #8]
 8006928:	f7ff ff3a 	bl	80067a0 <BSP_SD_WriteBlocks>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d107      	bne.n	8006942 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006932:	bf00      	nop
 8006934:	f7ff ff52 	bl	80067dc <BSP_SD_GetCardState>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1fa      	bne.n	8006934 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006942:	7dfb      	ldrb	r3, [r7, #23]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08c      	sub	sp, #48	; 0x30
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	603a      	str	r2, [r7, #0]
 8006956:	71fb      	strb	r3, [r7, #7]
 8006958:	460b      	mov	r3, r1
 800695a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006962:	4b25      	ldr	r3, [pc, #148]	; (80069f8 <SD_ioctl+0xac>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <SD_ioctl+0x28>
 8006970:	2303      	movs	r3, #3
 8006972:	e03c      	b.n	80069ee <SD_ioctl+0xa2>

  switch (cmd)
 8006974:	79bb      	ldrb	r3, [r7, #6]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d834      	bhi.n	80069e4 <SD_ioctl+0x98>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <SD_ioctl+0x34>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	08006991 	.word	0x08006991
 8006984:	08006999 	.word	0x08006999
 8006988:	080069b1 	.word	0x080069b1
 800698c:	080069cb 	.word	0x080069cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006996:	e028      	b.n	80069ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006998:	f107 030c 	add.w	r3, r7, #12
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff ff2d 	bl	80067fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80069a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80069ae:	e01c      	b.n	80069ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80069b0:	f107 030c 	add.w	r3, r7, #12
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff ff21 	bl	80067fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	b29a      	uxth	r2, r3
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80069c8:	e00f      	b.n	80069ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80069ca:	f107 030c 	add.w	r3, r7, #12
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff ff14 	bl	80067fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	0a5a      	lsrs	r2, r3, #9
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80069e2:	e002      	b.n	80069ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80069e4:	2304      	movs	r3, #4
 80069e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80069ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3730      	adds	r7, #48	; 0x30
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000009 	.word	0x20000009

080069fc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006a08:	f44f 701d 	mov.w	r0, #628	; 0x274
 8006a0c:	f003 fbfe 	bl	800a20c <malloc>
 8006a10:	4603      	mov	r3, r0
 8006a12:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d105      	bne.n	8006a26 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a22:	2302      	movs	r3, #2
 8006a24:	e034      	b.n	8006a90 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	7c1b      	ldrb	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d115      	bne.n	8006a62 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f003 f90d 	bl	8009c5e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a50:	2202      	movs	r2, #2
 8006a52:	2181      	movs	r1, #129	; 0x81
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f003 f902 	bl	8009c5e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	871a      	strh	r2, [r3, #56]	; 0x38
 8006a60:	e012      	b.n	8006a88 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006a62:	2340      	movs	r3, #64	; 0x40
 8006a64:	2202      	movs	r2, #2
 8006a66:	2101      	movs	r1, #1
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f003 f8f8 	bl	8009c5e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006a76:	2340      	movs	r3, #64	; 0x40
 8006a78:	2202      	movs	r2, #2
 8006a7a:	2181      	movs	r1, #129	; 0x81
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f003 f8ee 	bl	8009c5e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f98e 	bl	8006daa <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f003 f8ff 	bl	8009caa <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006ab4:	2181      	movs	r1, #129	; 0x81
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f003 f8f7 	bl	8009caa <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f9c7 	bl	8006e56 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f003 fb9f 	bl	800a21c <free>
    pdev->pClassData = NULL;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b00:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d04d      	beq.n	8006bb2 <USBD_MSC_Setup+0xc2>
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	f040 80c6 	bne.w	8006ca8 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	2bfe      	cmp	r3, #254	; 0xfe
 8006b22:	d002      	beq.n	8006b2a <USBD_MSC_Setup+0x3a>
 8006b24:	2bff      	cmp	r3, #255	; 0xff
 8006b26:	d024      	beq.n	8006b72 <USBD_MSC_Setup+0x82>
 8006b28:	e03b      	b.n	8006ba2 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	885b      	ldrh	r3, [r3, #2]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d118      	bne.n	8006b64 <USBD_MSC_Setup+0x74>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	88db      	ldrh	r3, [r3, #6]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d114      	bne.n	8006b64 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	da0f      	bge.n	8006b64 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	4798      	blx	r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	461a      	mov	r2, r3
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f002 fc58 	bl	8009412 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006b62:	e025      	b.n	8006bb0 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f002 fbe2 	bl	8009330 <USBD_CtlError>
        ret = USBD_FAIL;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b70:	e01e      	b.n	8006bb0 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	885b      	ldrh	r3, [r3, #2]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10c      	bne.n	8006b94 <USBD_MSC_Setup+0xa4>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	88db      	ldrh	r3, [r3, #6]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d108      	bne.n	8006b94 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	db03      	blt.n	8006b94 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f940 	bl	8006e12 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006b92:	e00d      	b.n	8006bb0 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f002 fbca 	bl	8009330 <USBD_CtlError>
        ret = USBD_FAIL;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba0:	e006      	b.n	8006bb0 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f002 fbc3 	bl	8009330 <USBD_CtlError>
      ret = USBD_FAIL;
 8006baa:	2303      	movs	r3, #3
 8006bac:	75fb      	strb	r3, [r7, #23]
      break;
 8006bae:	bf00      	nop
    }
    break;
 8006bb0:	e081      	b.n	8006cb6 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	785b      	ldrb	r3, [r3, #1]
 8006bb6:	2b0b      	cmp	r3, #11
 8006bb8:	d86d      	bhi.n	8006c96 <USBD_MSC_Setup+0x1a6>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <USBD_MSC_Setup+0xd0>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bf1 	.word	0x08006bf1
 8006bc4:	08006c67 	.word	0x08006c67
 8006bc8:	08006c97 	.word	0x08006c97
 8006bcc:	08006c97 	.word	0x08006c97
 8006bd0:	08006c97 	.word	0x08006c97
 8006bd4:	08006c97 	.word	0x08006c97
 8006bd8:	08006c97 	.word	0x08006c97
 8006bdc:	08006c97 	.word	0x08006c97
 8006be0:	08006c97 	.word	0x08006c97
 8006be4:	08006c97 	.word	0x08006c97
 8006be8:	08006c19 	.word	0x08006c19
 8006bec:	08006c41 	.word	0x08006c41
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d107      	bne.n	8006c0a <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bfa:	f107 030e 	add.w	r3, r7, #14
 8006bfe:	2202      	movs	r2, #2
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f002 fc05 	bl	8009412 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c08:	e04d      	b.n	8006ca6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f002 fb8f 	bl	8009330 <USBD_CtlError>
        ret = USBD_FAIL;
 8006c12:	2303      	movs	r3, #3
 8006c14:	75fb      	strb	r3, [r7, #23]
      break;
 8006c16:	e046      	b.n	8006ca6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d107      	bne.n	8006c32 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	3304      	adds	r3, #4
 8006c26:	2201      	movs	r2, #1
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f002 fbf1 	bl	8009412 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c30:	e039      	b.n	8006ca6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f002 fb7b 	bl	8009330 <USBD_CtlError>
        ret = USBD_FAIL;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3e:	e032      	b.n	8006ca6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d106      	bne.n	8006c58 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	885b      	ldrh	r3, [r3, #2]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	461a      	mov	r2, r3
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c56:	e026      	b.n	8006ca6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f002 fb68 	bl	8009330 <USBD_CtlError>
        ret = USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	75fb      	strb	r3, [r7, #23]
      break;
 8006c64:	e01f      	b.n	8006ca6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d119      	bne.n	8006ca4 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	885b      	ldrh	r3, [r3, #2]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d115      	bne.n	8006ca4 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	889b      	ldrh	r3, [r3, #4]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f003 f831 	bl	8009ce8 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	889b      	ldrh	r3, [r3, #4]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fa5a 	bl	8007148 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8006c94:	e006      	b.n	8006ca4 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f002 fb49 	bl	8009330 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca2:	e000      	b.n	8006ca6 <USBD_MSC_Setup+0x1b6>
      break;
 8006ca4:	bf00      	nop
    }
    break;
 8006ca6:	e006      	b.n	8006cb6 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f002 fb40 	bl	8009330 <USBD_CtlError>
    ret = USBD_FAIL;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	75fb      	strb	r3, [r7, #23]
    break;
 8006cb4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f8d1 	bl	8006e78 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f8f2 	bl	8006eda <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006d0e:	4b03      	ldr	r3, [pc, #12]	; (8006d1c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	20000044 	.word	0x20000044

08006d20 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006d2e:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	20000064 	.word	0x20000064

08006d40 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006d4e:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000084 	.word	0x20000084

08006d60 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	220a      	movs	r2, #10
 8006d6c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006d6e:	4b03      	ldr	r3, [pc, #12]	; (8006d7c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	200000a4 	.word	0x200000a4

08006d80 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e004      	b.n	8006d9e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006db8:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2000      	movs	r0, #0
 8006de8:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006dea:	2101      	movs	r1, #1
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f002 ff7b 	bl	8009ce8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006df2:	2181      	movs	r1, #129	; 0x81
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f002 ff77 	bl	8009ce8 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006e00:	231f      	movs	r3, #31
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f003 f838 	bl	8009e7a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e20:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8006e2e:	2181      	movs	r1, #129	; 0x81
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f002 ff97 	bl	8009d64 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8006e36:	2101      	movs	r1, #1
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f002 ff93 	bl	8009d64 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006e44:	231f      	movs	r3, #31
 8006e46:	2101      	movs	r1, #1
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f003 f816 	bl	8009e7a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e64:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	721a      	strb	r2, [r3, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e8a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	7a1b      	ldrb	r3, [r3, #8]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d004      	beq.n	8006e9e <MSC_BOT_DataIn+0x26>
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	db19      	blt.n	8006ecc <MSC_BOT_DataIn+0x54>
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	dc17      	bgt.n	8006ecc <MSC_BOT_DataIn+0x54>
 8006e9c:	e011      	b.n	8006ec2 <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006eaa:	461a      	mov	r2, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f973 	bl	8007198 <SCSI_ProcessCmd>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	da0b      	bge.n	8006ed0 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006eb8:	2101      	movs	r1, #1
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f8ea 	bl	8007094 <MSC_BOT_SendCSW>
    }
    break;
 8006ec0:	e006      	b.n	8006ed0 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f8e5 	bl	8007094 <MSC_BOT_SendCSW>
    break;
 8006eca:	e002      	b.n	8006ed2 <MSC_BOT_DataIn+0x5a>

  default:
    break;
 8006ecc:	bf00      	nop
 8006ece:	e000      	b.n	8006ed2 <MSC_BOT_DataIn+0x5a>
    break;
 8006ed0:	bf00      	nop
  }
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eec:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	7a1b      	ldrb	r3, [r3, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <MSC_BOT_DataOut+0x22>
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d004      	beq.n	8006f04 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006efa:	e015      	b.n	8006f28 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f817 	bl	8006f30 <MSC_BOT_CBW_Decode>
      break;
 8006f02:	e011      	b.n	8006f28 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006f10:	461a      	mov	r2, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f940 	bl	8007198 <SCSI_ProcessCmd>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	da03      	bge.n	8006f26 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006f1e:	2101      	movs	r1, #1
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f8b7 	bl	8007094 <MSC_BOT_SendCSW>
      break;
 8006f26:	bf00      	nop
  }
}
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f3e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006f58:	2101      	movs	r1, #1
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f002 ffae 	bl	8009ebc <USBD_LL_GetRxDataSize>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b1f      	cmp	r3, #31
 8006f64:	d114      	bne.n	8006f90 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006f6c:	4a32      	ldr	r2, [pc, #200]	; (8007038 <MSC_BOT_CBW_Decode+0x108>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d10e      	bne.n	8006f90 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d809      	bhi.n	8006f90 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d004      	beq.n	8006f90 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006f8c:	2b10      	cmp	r3, #16
 8006f8e:	d90e      	bls.n	8006fae <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006f96:	2320      	movs	r3, #32
 8006f98:	2205      	movs	r2, #5
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fcc9 	bl	8007932 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f8a0 	bl	80070ec <MSC_BOT_Abort>
 8006fac:	e041      	b.n	8007032 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f8eb 	bl	8007198 <SCSI_ProcessCmd>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	da0c      	bge.n	8006fe2 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	7a1b      	ldrb	r3, [r3, #8]
 8006fcc:	2b05      	cmp	r3, #5
 8006fce:	d104      	bne.n	8006fda <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f85e 	bl	8007094 <MSC_BOT_SendCSW>
 8006fd8:	e02b      	b.n	8007032 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f886 	bl	80070ec <MSC_BOT_Abort>
 8006fe0:	e027      	b.n	8007032 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	7a1b      	ldrb	r3, [r3, #8]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d022      	beq.n	8007030 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d01e      	beq.n	8007030 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d01a      	beq.n	8007030 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d009      	beq.n	8007016 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f103 0110 	add.w	r1, r3, #16
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	461a      	mov	r2, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f814 	bl	800703c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007014:	e00d      	b.n	8007032 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d104      	bne.n	8007028 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800701e:	2100      	movs	r1, #0
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f837 	bl	8007094 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007026:	e004      	b.n	8007032 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f85f 	bl	80070ec <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800702e:	e000      	b.n	8007032 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8007030:	bf00      	nop
    }
  }
}
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	43425355 	.word	0x43425355

0800703c <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800704e:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4293      	cmp	r3, r2
 800705a:	bf28      	it	cs
 800705c:	4613      	movcs	r3, r2
 800705e:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	1ad2      	subs	r2, r2, r3
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2204      	movs	r2, #4
 800707c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	2181      	movs	r1, #129	; 0x81
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f002 fed7 	bl	8009e38 <USBD_LL_Transmit>
}
 800708a:	bf00      	nop
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070a6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4a0f      	ldr	r2, [pc, #60]	; (80070e8 <MSC_BOT_SendCSW+0x54>)
 80070ac:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80070c4:	230d      	movs	r3, #13
 80070c6:	2181      	movs	r1, #129	; 0x81
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f002 feb5 	bl	8009e38 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80070d4:	231f      	movs	r3, #31
 80070d6:	2101      	movs	r1, #1
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f002 fece 	bl	8009e7a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80070de:	bf00      	nop
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	53425355 	.word	0x53425355

080070ec <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070fa:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10c      	bne.n	8007120 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800710c:	2b00      	cmp	r3, #0
 800710e:	d007      	beq.n	8007120 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007118:	2101      	movs	r1, #1
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f002 fe03 	bl	8009d26 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007120:	2181      	movs	r1, #129	; 0x81
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f002 fdff 	bl	8009d26 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	7a5b      	ldrb	r3, [r3, #9]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d107      	bne.n	8007140 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007130:	2181      	movs	r1, #129	; 0x81
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f002 fdf7 	bl	8009d26 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007138:	2101      	movs	r1, #1
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f002 fdf3 	bl	8009d26 <USBD_LL_StallEP>
  }
}
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800715a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	7a5b      	ldrb	r3, [r3, #9]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d108      	bne.n	8007176 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007164:	2181      	movs	r1, #129	; 0x81
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f002 fddd 	bl	8009d26 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800716c:	2101      	movs	r1, #1
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f002 fdd9 	bl	8009d26 <USBD_LL_StallEP>
 8007174:	e00d      	b.n	8007192 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800717a:	2b00      	cmp	r3, #0
 800717c:	da08      	bge.n	8007190 <MSC_BOT_CplClrFeature+0x48>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	7a5b      	ldrb	r3, [r3, #9]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d004      	beq.n	8007190 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007186:	2101      	movs	r1, #1
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff ff83 	bl	8007094 <MSC_BOT_SendCSW>
 800718e:	e000      	b.n	8007192 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8007190:	bf00      	nop
  }
}
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	460b      	mov	r3, r1
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ac:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	2b25      	cmp	r3, #37	; 0x25
 80071b4:	d06e      	beq.n	8007294 <SCSI_ProcessCmd+0xfc>
 80071b6:	2b25      	cmp	r3, #37	; 0x25
 80071b8:	dc11      	bgt.n	80071de <SCSI_ProcessCmd+0x46>
 80071ba:	2b1a      	cmp	r3, #26
 80071bc:	d04f      	beq.n	800725e <SCSI_ProcessCmd+0xc6>
 80071be:	2b1a      	cmp	r3, #26
 80071c0:	dc06      	bgt.n	80071d0 <SCSI_ProcessCmd+0x38>
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d027      	beq.n	8007216 <SCSI_ProcessCmd+0x7e>
 80071c6:	2b12      	cmp	r3, #18
 80071c8:	d02e      	beq.n	8007228 <SCSI_ProcessCmd+0x90>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d01a      	beq.n	8007204 <SCSI_ProcessCmd+0x6c>
 80071ce:	e0a0      	b.n	8007312 <SCSI_ProcessCmd+0x17a>
 80071d0:	2b1e      	cmp	r3, #30
 80071d2:	d03b      	beq.n	800724c <SCSI_ProcessCmd+0xb4>
 80071d4:	2b23      	cmp	r3, #35	; 0x23
 80071d6:	d054      	beq.n	8007282 <SCSI_ProcessCmd+0xea>
 80071d8:	2b1b      	cmp	r3, #27
 80071da:	d02e      	beq.n	800723a <SCSI_ProcessCmd+0xa2>
 80071dc:	e099      	b.n	8007312 <SCSI_ProcessCmd+0x17a>
 80071de:	2b5a      	cmp	r3, #90	; 0x5a
 80071e0:	d046      	beq.n	8007270 <SCSI_ProcessCmd+0xd8>
 80071e2:	2b5a      	cmp	r3, #90	; 0x5a
 80071e4:	dc07      	bgt.n	80071f6 <SCSI_ProcessCmd+0x5e>
 80071e6:	2b2a      	cmp	r3, #42	; 0x2a
 80071e8:	d078      	beq.n	80072dc <SCSI_ProcessCmd+0x144>
 80071ea:	2b2f      	cmp	r3, #47	; 0x2f
 80071ec:	f000 8088 	beq.w	8007300 <SCSI_ProcessCmd+0x168>
 80071f0:	2b28      	cmp	r3, #40	; 0x28
 80071f2:	d061      	beq.n	80072b8 <SCSI_ProcessCmd+0x120>
 80071f4:	e08d      	b.n	8007312 <SCSI_ProcessCmd+0x17a>
 80071f6:	2ba8      	cmp	r3, #168	; 0xa8
 80071f8:	d067      	beq.n	80072ca <SCSI_ProcessCmd+0x132>
 80071fa:	2baa      	cmp	r3, #170	; 0xaa
 80071fc:	d077      	beq.n	80072ee <SCSI_ProcessCmd+0x156>
 80071fe:	2b9e      	cmp	r3, #158	; 0x9e
 8007200:	d051      	beq.n	80072a6 <SCSI_ProcessCmd+0x10e>
 8007202:	e086      	b.n	8007312 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8007204:	7afb      	ldrb	r3, [r7, #11]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	4619      	mov	r1, r3
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 f893 	bl	8007336 <SCSI_TestUnitReady>
 8007210:	4603      	mov	r3, r0
 8007212:	75fb      	strb	r3, [r7, #23]
    break;
 8007214:	e089      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	4619      	mov	r1, r3
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 fb0f 	bl	8007840 <SCSI_RequestSense>
 8007222:	4603      	mov	r3, r0
 8007224:	75fb      	strb	r3, [r7, #23]
    break;
 8007226:	e080      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8007228:	7afb      	ldrb	r3, [r7, #11]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	4619      	mov	r1, r3
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 f8cc 	bl	80073cc <SCSI_Inquiry>
 8007234:	4603      	mov	r3, r0
 8007236:	75fb      	strb	r3, [r7, #23]
    break;
 8007238:	e077      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800723a:	7afb      	ldrb	r3, [r7, #11]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	4619      	mov	r1, r3
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fbb9 	bl	80079b8 <SCSI_StartStopUnit>
 8007246:	4603      	mov	r3, r0
 8007248:	75fb      	strb	r3, [r7, #23]
    break;
 800724a:	e06e      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	4619      	mov	r1, r3
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 fbfb 	bl	8007a4e <SCSI_AllowPreventRemovable>
 8007258:	4603      	mov	r3, r0
 800725a:	75fb      	strb	r3, [r7, #23]
    break;
 800725c:	e065      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800725e:	7afb      	ldrb	r3, [r7, #11]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	4619      	mov	r1, r3
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 fa9f 	bl	80077a8 <SCSI_ModeSense6>
 800726a:	4603      	mov	r3, r0
 800726c:	75fb      	strb	r3, [r7, #23]
    break;
 800726e:	e05c      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8007270:	7afb      	ldrb	r3, [r7, #11]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4619      	mov	r1, r3
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fabc 	bl	80077f4 <SCSI_ModeSense10>
 800727c:	4603      	mov	r3, r0
 800727e:	75fb      	strb	r3, [r7, #23]
    break;
 8007280:	e053      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	4619      	mov	r1, r3
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fa20 	bl	80076ce <SCSI_ReadFormatCapacity>
 800728e:	4603      	mov	r3, r0
 8007290:	75fb      	strb	r3, [r7, #23]
    break;
 8007292:	e04a      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	4619      	mov	r1, r3
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f904 	bl	80074a8 <SCSI_ReadCapacity10>
 80072a0:	4603      	mov	r3, r0
 80072a2:	75fb      	strb	r3, [r7, #23]
    break;
 80072a4:	e041      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80072a6:	7afb      	ldrb	r3, [r7, #11]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	4619      	mov	r1, r3
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f96a 	bl	8007586 <SCSI_ReadCapacity16>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75fb      	strb	r3, [r7, #23]
    break;
 80072b6:	e038      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	4619      	mov	r1, r3
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fbe8 	bl	8007a94 <SCSI_Read10>
 80072c4:	4603      	mov	r3, r0
 80072c6:	75fb      	strb	r3, [r7, #23]
    break;
 80072c8:	e02f      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	4619      	mov	r1, r3
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 fc79 	bl	8007bc8 <SCSI_Read12>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]
    break;
 80072da:	e026      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 80072dc:	7afb      	ldrb	r3, [r7, #11]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	4619      	mov	r1, r3
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fd15 	bl	8007d12 <SCSI_Write10>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]
    break;
 80072ec:	e01d      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 80072ee:	7afb      	ldrb	r3, [r7, #11]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	4619      	mov	r1, r3
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fdcb 	bl	8007e90 <SCSI_Write12>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]
    break;
 80072fe:	e014      	b.n	800732a <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8007300:	7afb      	ldrb	r3, [r7, #11]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	4619      	mov	r1, r3
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 fe91 	bl	800802e <SCSI_Verify10>
 800730c:	4603      	mov	r3, r0
 800730e:	75fb      	strb	r3, [r7, #23]
    break;
 8007310:	e00b      	b.n	800732a <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007312:	7af9      	ldrb	r1, [r7, #11]
 8007314:	2320      	movs	r3, #32
 8007316:	2205      	movs	r2, #5
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 fb0a 	bl	8007932 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2202      	movs	r2, #2
 8007322:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8007324:	23ff      	movs	r3, #255	; 0xff
 8007326:	75fb      	strb	r3, [r7, #23]
    break;
 8007328:	bf00      	nop
  }

  return ret;
 800732a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b086      	sub	sp, #24
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	460b      	mov	r3, r1
 8007340:	607a      	str	r2, [r7, #4]
 8007342:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800734a:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800735c:	2320      	movs	r3, #32
 800735e:	2205      	movs	r2, #5
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 fae6 	bl	8007932 <SCSI_SenseCode>

    return -1;
 8007366:	f04f 33ff 	mov.w	r3, #4294967295
 800736a:	e02a      	b.n	80073c2 <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007372:	2b02      	cmp	r3, #2
 8007374:	d10b      	bne.n	800738e <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007376:	7af9      	ldrb	r1, [r7, #11]
 8007378:	233a      	movs	r3, #58	; 0x3a
 800737a:	2202      	movs	r2, #2
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 fad8 	bl	8007932 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2205      	movs	r2, #5
 8007386:	721a      	strb	r2, [r3, #8]
    return -1;
 8007388:	f04f 33ff 	mov.w	r3, #4294967295
 800738c:	e019      	b.n	80073c2 <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	7afa      	ldrb	r2, [r7, #11]
 8007398:	4610      	mov	r0, r2
 800739a:	4798      	blx	r3
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00b      	beq.n	80073ba <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073a2:	7af9      	ldrb	r1, [r7, #11]
 80073a4:	233a      	movs	r3, #58	; 0x3a
 80073a6:	2202      	movs	r2, #2
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 fac2 	bl	8007932 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2205      	movs	r2, #5
 80073b2:	721a      	strb	r2, [r3, #8]

    return -1;
 80073b4:	f04f 33ff 	mov.w	r3, #4294967295
 80073b8:	e003      	b.n	80073c2 <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2200      	movs	r2, #0
 80073be:	60da      	str	r2, [r3, #12]

  return 0;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	460b      	mov	r3, r1
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073e0:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80073f2:	2320      	movs	r3, #32
 80073f4:	2205      	movs	r2, #5
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 fa9b 	bl	8007932 <SCSI_SenseCode>
    return -1;
 80073fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007400:	e04a      	b.n	8007498 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3301      	adds	r3, #1
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d020      	beq.n	8007452 <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3302      	adds	r3, #2
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800741a:	2206      	movs	r2, #6
 800741c:	4920      	ldr	r1, [pc, #128]	; (80074a0 <SCSI_Inquiry+0xd4>)
 800741e:	69b8      	ldr	r0, [r7, #24]
 8007420:	f000 ff50 	bl	80082c4 <SCSI_UpdateBotData>
 8007424:	e037      	b.n	8007496 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3302      	adds	r3, #2
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b80      	cmp	r3, #128	; 0x80
 800742e:	d105      	bne.n	800743c <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007430:	2208      	movs	r2, #8
 8007432:	491c      	ldr	r1, [pc, #112]	; (80074a4 <SCSI_Inquiry+0xd8>)
 8007434:	69b8      	ldr	r0, [r7, #24]
 8007436:	f000 ff45 	bl	80082c4 <SCSI_UpdateBotData>
 800743a:	e02c      	b.n	8007496 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007442:	2324      	movs	r3, #36	; 0x24
 8007444:	2205      	movs	r2, #5
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fa73 	bl	8007932 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800744c:	f04f 33ff 	mov.w	r3, #4294967295
 8007450:	e022      	b.n	8007498 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007458:	69d9      	ldr	r1, [r3, #28]
 800745a:	7afa      	ldrb	r2, [r7, #11]
 800745c:	4613      	mov	r3, r2
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	3304      	adds	r3, #4
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	3305      	adds	r3, #5
 8007472:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3304      	adds	r3, #4
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	8bfa      	ldrh	r2, [r7, #30]
 800747e:	429a      	cmp	r2, r3
 8007480:	d303      	bcc.n	800748a <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3304      	adds	r3, #4
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800748a:	8bfb      	ldrh	r3, [r7, #30]
 800748c:	461a      	mov	r2, r3
 800748e:	6979      	ldr	r1, [r7, #20]
 8007490:	69b8      	ldr	r0, [r7, #24]
 8007492:	f000 ff17 	bl	80082c4 <SCSI_UpdateBotData>
  }

  return 0;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3720      	adds	r7, #32
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	200000b0 	.word	0x200000b0
 80074a4:	200000b8 	.word	0x200000b8

080074a8 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	460b      	mov	r3, r1
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074bc:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80074d2:	7af8      	ldrb	r0, [r7, #11]
 80074d4:	4798      	blx	r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80074da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <SCSI_ReadCapacity10+0x44>
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d108      	bne.n	80074fe <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80074ec:	7af9      	ldrb	r1, [r7, #11]
 80074ee:	233a      	movs	r3, #58	; 0x3a
 80074f0:	2202      	movs	r2, #2
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fa1d 	bl	8007932 <SCSI_SenseCode>
    return -1;
 80074f8:	f04f 33ff 	mov.w	r3, #4294967295
 80074fc:	e03f      	b.n	800757e <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007504:	3b01      	subs	r3, #1
 8007506:	0e1b      	lsrs	r3, r3, #24
 8007508:	b2da      	uxtb	r2, r3
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007514:	3b01      	subs	r3, #1
 8007516:	0c1b      	lsrs	r3, r3, #16
 8007518:	b2da      	uxtb	r2, r3
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007524:	3b01      	subs	r3, #1
 8007526:	0a1b      	lsrs	r3, r3, #8
 8007528:	b2da      	uxtb	r2, r3
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007534:	b2db      	uxtb	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b2da      	uxtb	r2, r3
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007544:	161b      	asrs	r3, r3, #24
 8007546:	b2da      	uxtb	r2, r3
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007552:	141b      	asrs	r3, r3, #16
 8007554:	b2da      	uxtb	r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007560:	0a1b      	lsrs	r3, r3, #8
 8007562:	b29b      	uxth	r3, r3
 8007564:	b2da      	uxtb	r2, r3
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007570:	b2da      	uxtb	r2, r3
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2208      	movs	r2, #8
 800757a:	60da      	str	r2, [r3, #12]

  return 0;
 800757c:	2300      	movs	r3, #0

}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b088      	sub	sp, #32
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	460b      	mov	r3, r1
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800759a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80075b0:	7af8      	ldrb	r0, [r7, #11]
 80075b2:	4798      	blx	r3
 80075b4:	4603      	mov	r3, r0
 80075b6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80075b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d104      	bne.n	80075ca <SCSI_ReadCapacity16+0x44>
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d108      	bne.n	80075dc <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80075ca:	7af9      	ldrb	r1, [r7, #11]
 80075cc:	233a      	movs	r3, #58	; 0x3a
 80075ce:	2202      	movs	r2, #2
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f9ae 	bl	8007932 <SCSI_SenseCode>
    return -1;
 80075d6:	f04f 33ff 	mov.w	r3, #4294967295
 80075da:	e074      	b.n	80076c6 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	330a      	adds	r3, #10
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	330b      	adds	r3, #11
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80075ec:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	330c      	adds	r3, #12
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80075f6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	320d      	adds	r2, #13
 80075fc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80075fe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007604:	2300      	movs	r3, #0
 8007606:	77fb      	strb	r3, [r7, #31]
 8007608:	e007      	b.n	800761a <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800760a:	7ffb      	ldrb	r3, [r7, #31]
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	4413      	add	r3, r2
 8007610:	2200      	movs	r2, #0
 8007612:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007614:	7ffb      	ldrb	r3, [r7, #31]
 8007616:	3301      	adds	r3, #1
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	7ffa      	ldrb	r2, [r7, #31]
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	429a      	cmp	r2, r3
 8007622:	d3f2      	bcc.n	800760a <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800762a:	3b01      	subs	r3, #1
 800762c:	0e1b      	lsrs	r3, r3, #24
 800762e:	b2da      	uxtb	r2, r3
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800763a:	3b01      	subs	r3, #1
 800763c:	0c1b      	lsrs	r3, r3, #16
 800763e:	b2da      	uxtb	r2, r3
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800764a:	3b01      	subs	r3, #1
 800764c:	0a1b      	lsrs	r3, r3, #8
 800764e:	b2da      	uxtb	r2, r3
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800765a:	b2db      	uxtb	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b2da      	uxtb	r2, r3
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800766a:	161b      	asrs	r3, r3, #24
 800766c:	b2da      	uxtb	r2, r3
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007678:	141b      	asrs	r3, r3, #16
 800767a:	b2da      	uxtb	r2, r3
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	b29b      	uxth	r3, r3
 800768a:	b2da      	uxtb	r2, r3
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007696:	b2da      	uxtb	r2, r3
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	330a      	adds	r3, #10
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	330b      	adds	r3, #11
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80076ac:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	330c      	adds	r3, #12
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80076b6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	320d      	adds	r2, #13
 80076bc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80076be:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	60da      	str	r2, [r3, #12]

  return 0;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3720      	adds	r7, #32
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b088      	sub	sp, #32
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	460b      	mov	r3, r1
 80076d8:	607a      	str	r2, [r7, #4]
 80076da:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076e2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f107 0214 	add.w	r2, r7, #20
 80076f0:	f107 0110 	add.w	r1, r7, #16
 80076f4:	7af8      	ldrb	r0, [r7, #11]
 80076f6:	4798      	blx	r3
 80076f8:	4603      	mov	r3, r0
 80076fa:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80076fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <SCSI_ReadFormatCapacity+0x40>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800770a:	2b02      	cmp	r3, #2
 800770c:	d108      	bne.n	8007720 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800770e:	7af9      	ldrb	r1, [r7, #11]
 8007710:	233a      	movs	r3, #58	; 0x3a
 8007712:	2202      	movs	r2, #2
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f90c 	bl	8007932 <SCSI_SenseCode>
    return -1;
 800771a:	f04f 33ff 	mov.w	r3, #4294967295
 800771e:	e03e      	b.n	800779e <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 8007720:	2300      	movs	r3, #0
 8007722:	83fb      	strh	r3, [r7, #30]
 8007724:	e007      	b.n	8007736 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 8007726:	8bfb      	ldrh	r3, [r7, #30]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	4413      	add	r3, r2
 800772c:	2200      	movs	r2, #0
 800772e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8007730:	8bfb      	ldrh	r3, [r7, #30]
 8007732:	3301      	adds	r3, #1
 8007734:	83fb      	strh	r3, [r7, #30]
 8007736:	8bfb      	ldrh	r3, [r7, #30]
 8007738:	2b0b      	cmp	r3, #11
 800773a:	d9f4      	bls.n	8007726 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2208      	movs	r2, #8
 8007740:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	3b01      	subs	r3, #1
 8007746:	0e1b      	lsrs	r3, r3, #24
 8007748:	b2da      	uxtb	r2, r3
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	3b01      	subs	r3, #1
 8007752:	0c1b      	lsrs	r3, r3, #16
 8007754:	b2da      	uxtb	r2, r3
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	3b01      	subs	r3, #1
 800775e:	0a1b      	lsrs	r3, r3, #8
 8007760:	b2da      	uxtb	r2, r3
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	b2da      	uxtb	r2, r3
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2202      	movs	r2, #2
 8007776:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007778:	8abb      	ldrh	r3, [r7, #20]
 800777a:	141b      	asrs	r3, r3, #16
 800777c:	b2da      	uxtb	r2, r3
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007782:	8abb      	ldrh	r3, [r7, #20]
 8007784:	0a1b      	lsrs	r3, r3, #8
 8007786:	b29b      	uxth	r3, r3
 8007788:	b2da      	uxtb	r2, r3
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800778e:	8abb      	ldrh	r3, [r7, #20]
 8007790:	b2da      	uxtb	r2, r3
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	220c      	movs	r2, #12
 800779a:	60da      	str	r2, [r3, #12]

  return 0;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3720      	adds	r7, #32
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	460b      	mov	r3, r1
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077bc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80077be:	2317      	movs	r3, #23
 80077c0:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3304      	adds	r3, #4
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	8afa      	ldrh	r2, [r7, #22]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d303      	bcc.n	80077d8 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3304      	adds	r3, #4
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80077d8:	8afb      	ldrh	r3, [r7, #22]
 80077da:	461a      	mov	r2, r3
 80077dc:	4904      	ldr	r1, [pc, #16]	; (80077f0 <SCSI_ModeSense6+0x48>)
 80077de:	6938      	ldr	r0, [r7, #16]
 80077e0:	f000 fd70 	bl	80082c4 <SCSI_UpdateBotData>

  return 0;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	200000c0 	.word	0x200000c0

080077f4 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	460b      	mov	r3, r1
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007808:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800780a:	231b      	movs	r3, #27
 800780c:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3308      	adds	r3, #8
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	8afa      	ldrh	r2, [r7, #22]
 8007818:	429a      	cmp	r2, r3
 800781a:	d303      	bcc.n	8007824 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3308      	adds	r3, #8
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8007824:	8afb      	ldrh	r3, [r7, #22]
 8007826:	461a      	mov	r2, r3
 8007828:	4904      	ldr	r1, [pc, #16]	; (800783c <SCSI_ModeSense10+0x48>)
 800782a:	6938      	ldr	r0, [r7, #16]
 800782c:	f000 fd4a 	bl	80082c4 <SCSI_UpdateBotData>

  return 0;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	200000d8 	.word	0x200000d8

08007840 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	460b      	mov	r3, r1
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007854:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007866:	2320      	movs	r3, #32
 8007868:	2205      	movs	r2, #5
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 f861 	bl	8007932 <SCSI_SenseCode>
    return -1;
 8007870:	f04f 33ff 	mov.w	r3, #4294967295
 8007874:	e059      	b.n	800792a <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007876:	2300      	movs	r3, #0
 8007878:	75fb      	strb	r3, [r7, #23]
 800787a:	e007      	b.n	800788c <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	4413      	add	r3, r2
 8007882:	2200      	movs	r2, #0
 8007884:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007886:	7dfb      	ldrb	r3, [r7, #23]
 8007888:	3301      	adds	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	2b11      	cmp	r3, #17
 8007890:	d9f4      	bls.n	800787c <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2270      	movs	r2, #112	; 0x70
 8007896:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	220c      	movs	r2, #12
 800789c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d02e      	beq.n	800790c <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80078b4:	461a      	mov	r2, r3
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3248      	adds	r2, #72	; 0x48
 80078ba:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	3348      	adds	r3, #72	; 0x48
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	4413      	add	r3, r2
 80078d0:	791a      	ldrb	r2, [r3, #4]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	3348      	adds	r3, #72	; 0x48
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	4413      	add	r3, r2
 80078e4:	795a      	ldrb	r2, [r3, #5]
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80078f0:	3301      	adds	r3, #1
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007900:	2b04      	cmp	r3, #4
 8007902:	d103      	bne.n	800790c <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2212      	movs	r2, #18
 8007910:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3304      	adds	r3, #4
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b12      	cmp	r3, #18
 800791a:	d805      	bhi.n	8007928 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	4608      	mov	r0, r1
 800793c:	4611      	mov	r1, r2
 800793e:	461a      	mov	r2, r3
 8007940:	4603      	mov	r3, r0
 8007942:	70fb      	strb	r3, [r7, #3]
 8007944:	460b      	mov	r3, r1
 8007946:	70bb      	strb	r3, [r7, #2]
 8007948:	4613      	mov	r3, r2
 800794a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007952:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800795a:	461a      	mov	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3248      	adds	r2, #72	; 0x48
 8007960:	78b9      	ldrb	r1, [r7, #2]
 8007962:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	3348      	adds	r3, #72	; 0x48
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	4413      	add	r3, r2
 8007974:	787a      	ldrb	r2, [r7, #1]
 8007976:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	3348      	adds	r3, #72	; 0x48
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	4413      	add	r3, r2
 8007986:	2200      	movs	r2, #0
 8007988:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007990:	3301      	adds	r3, #1
 8007992:	b2da      	uxtb	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d103      	bne.n	80079ac <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 80079ac:	bf00      	nop
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	460b      	mov	r3, r1
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079cc:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d10f      	bne.n	80079f8 <SCSI_StartStopUnit+0x40>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3304      	adds	r3, #4
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d108      	bne.n	80079f8 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80079e6:	7af9      	ldrb	r1, [r7, #11]
 80079e8:	2324      	movs	r3, #36	; 0x24
 80079ea:	2205      	movs	r2, #5
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f7ff ffa0 	bl	8007932 <SCSI_SenseCode>

    return -1;
 80079f2:	f04f 33ff 	mov.w	r3, #4294967295
 80079f6:	e026      	b.n	8007a46 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3304      	adds	r3, #4
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d104      	bne.n	8007a10 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007a0e:	e016      	b.n	8007a3e <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3304      	adds	r3, #4
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	f003 0303 	and.w	r3, r3, #3
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d104      	bne.n	8007a28 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2202      	movs	r2, #2
 8007a22:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007a26:	e00a      	b.n	8007a3e <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d103      	bne.n	8007a3e <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2200      	movs	r2, #0
 8007a42:	60da      	str	r2, [r3, #12]

  return 0;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b087      	sub	sp, #28
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	460b      	mov	r3, r1
 8007a58:	607a      	str	r2, [r7, #4]
 8007a5a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a62:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3304      	adds	r3, #4
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d104      	bne.n	8007a78 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007a76:	e003      	b.n	8007a80 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2200      	movs	r2, #0
 8007a84:	60da      	str	r2, [r3, #12]

  return 0;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa8:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	7a1b      	ldrb	r3, [r3, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d17c      	bne.n	8007bac <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007ab8:	b25b      	sxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	db0a      	blt.n	8007ad4 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007ac4:	2320      	movs	r3, #32
 8007ac6:	2205      	movs	r2, #5
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7ff ff32 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007ace:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad2:	e075      	b.n	8007bc0 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d108      	bne.n	8007af0 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007ade:	7af9      	ldrb	r1, [r7, #11]
 8007ae0:	233a      	movs	r3, #58	; 0x3a
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff ff24 	bl	8007932 <SCSI_SenseCode>

      return -1;
 8007aea:	f04f 33ff 	mov.w	r3, #4294967295
 8007aee:	e067      	b.n	8007bc0 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	7afa      	ldrb	r2, [r7, #11]
 8007afa:	4610      	mov	r0, r2
 8007afc:	4798      	blx	r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d008      	beq.n	8007b16 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b04:	7af9      	ldrb	r1, [r7, #11]
 8007b06:	233a      	movs	r3, #58	; 0x3a
 8007b08:	2202      	movs	r2, #2
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f7ff ff11 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007b10:	f04f 33ff 	mov.w	r3, #4294967295
 8007b14:	e054      	b.n	8007bc0 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3302      	adds	r3, #2
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3303      	adds	r3, #3
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b26:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007b30:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	3205      	adds	r2, #5
 8007b36:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007b38:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3307      	adds	r3, #7
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	021b      	lsls	r3, r3, #8
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	3208      	adds	r2, #8
 8007b4c:	7812      	ldrb	r2, [r2, #0]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007b62:	7af9      	ldrb	r1, [r7, #11]
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fa95 	bl	8008094 <SCSI_CheckAddressRange>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	da02      	bge.n	8007b76 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007b70:	f04f 33ff 	mov.w	r3, #4294967295
 8007b74:	e024      	b.n	8007bc0 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007b82:	6979      	ldr	r1, [r7, #20]
 8007b84:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007b88:	fb01 f303 	mul.w	r3, r1, r3
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d00a      	beq.n	8007ba6 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007b96:	2320      	movs	r3, #32
 8007b98:	2205      	movs	r2, #5
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f7ff fec9 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba4:	e00c      	b.n	8007bc0 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bb2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007bb4:	7afb      	ldrb	r3, [r7, #11]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 fa8d 	bl	80080d8 <SCSI_ProcessRead>
 8007bbe:	4603      	mov	r3, r0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bdc:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	7a1b      	ldrb	r3, [r3, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f040 8087 	bne.w	8007cf6 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007bee:	b25b      	sxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	db0a      	blt.n	8007c0a <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007bfa:	2320      	movs	r3, #32
 8007bfc:	2205      	movs	r2, #5
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff fe97 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007c04:	f04f 33ff 	mov.w	r3, #4294967295
 8007c08:	e07f      	b.n	8007d0a <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d108      	bne.n	8007c26 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c14:	7af9      	ldrb	r1, [r7, #11]
 8007c16:	233a      	movs	r3, #58	; 0x3a
 8007c18:	2202      	movs	r2, #2
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7ff fe89 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007c20:	f04f 33ff 	mov.w	r3, #4294967295
 8007c24:	e071      	b.n	8007d0a <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	7afa      	ldrb	r2, [r7, #11]
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d008      	beq.n	8007c4c <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c3a:	7af9      	ldrb	r1, [r7, #11]
 8007c3c:	233a      	movs	r3, #58	; 0x3a
 8007c3e:	2202      	movs	r2, #2
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f7ff fe76 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007c46:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4a:	e05e      	b.n	8007d0a <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3302      	adds	r3, #2
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3303      	adds	r3, #3
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c5c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3304      	adds	r3, #4
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007c66:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	3205      	adds	r2, #5
 8007c6c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007c6e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3306      	adds	r3, #6
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3307      	adds	r3, #7
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007c86:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3308      	adds	r3, #8
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007c90:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	3209      	adds	r2, #9
 8007c96:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007c98:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cac:	7af9      	ldrb	r1, [r7, #11]
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 f9f0 	bl	8008094 <SCSI_CheckAddressRange>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	da02      	bge.n	8007cc0 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007cba:	f04f 33ff 	mov.w	r3, #4294967295
 8007cbe:	e024      	b.n	8007d0a <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007ccc:	6979      	ldr	r1, [r7, #20]
 8007cce:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007cd2:	fb01 f303 	mul.w	r3, r1, r3
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d00a      	beq.n	8007cf0 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	2205      	movs	r2, #5
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff fe24 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007cea:	f04f 33ff 	mov.w	r3, #4294967295
 8007cee:	e00c      	b.n	8007d0a <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cfc:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007cfe:	7afb      	ldrb	r3, [r7, #11]
 8007d00:	4619      	mov	r1, r3
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 f9e8 	bl	80080d8 <SCSI_ProcessRead>
 8007d08:	4603      	mov	r3, r0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b086      	sub	sp, #24
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	60f8      	str	r0, [r7, #12]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	607a      	str	r2, [r7, #4]
 8007d1e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d26:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	7a1b      	ldrb	r3, [r3, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f040 80a5 	bne.w	8007e7c <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10a      	bne.n	8007d52 <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007d42:	2320      	movs	r3, #32
 8007d44:	2205      	movs	r2, #5
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f7ff fdf3 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d50:	e09a      	b.n	8007e88 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007d58:	b25b      	sxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	da0a      	bge.n	8007d74 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007d64:	2320      	movs	r3, #32
 8007d66:	2205      	movs	r2, #5
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f7ff fde2 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d72:	e089      	b.n	8007e88 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	7afa      	ldrb	r2, [r7, #11]
 8007d7e:	4610      	mov	r0, r2
 8007d80:	4798      	blx	r3
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d008      	beq.n	8007d9a <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007d88:	7af9      	ldrb	r1, [r7, #11]
 8007d8a:	233a      	movs	r3, #58	; 0x3a
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7ff fdcf 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295
 8007d98:	e076      	b.n	8007e88 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	7afa      	ldrb	r2, [r7, #11]
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d008      	beq.n	8007dc0 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007dae:	7af9      	ldrb	r1, [r7, #11]
 8007db0:	2327      	movs	r3, #39	; 0x27
 8007db2:	2202      	movs	r2, #2
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff fdbc 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007dba:	f04f 33ff 	mov.w	r3, #4294967295
 8007dbe:	e063      	b.n	8007e88 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3302      	adds	r3, #2
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3303      	adds	r3, #3
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007dd0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007dda:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	3205      	adds	r2, #5
 8007de0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007de2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	3307      	adds	r3, #7
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	3208      	adds	r2, #8
 8007df6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e0c:	7af9      	ldrb	r1, [r7, #11]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 f940 	bl	8008094 <SCSI_CheckAddressRange>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	da02      	bge.n	8007e20 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1e:	e033      	b.n	8007e88 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007e2c:	fb02 f303 	mul.w	r3, r2, r3
 8007e30:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d00a      	beq.n	8007e54 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007e44:	2320      	movs	r3, #32
 8007e46:	2205      	movs	r2, #5
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7ff fd72 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e52:	e019      	b.n	8007e88 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e5a:	bf28      	it	cs
 8007e5c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007e60:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2201      	movs	r2, #1
 8007e66:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f103 0210 	add.w	r2, r3, #16
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	2101      	movs	r1, #1
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f002 f801 	bl	8009e7a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	e005      	b.n	8007e88 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 8007e7c:	7afb      	ldrb	r3, [r7, #11]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 f99c 	bl	80081be <SCSI_ProcessWrite>
 8007e86:	4603      	mov	r3, r0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ea4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	7a1b      	ldrb	r3, [r3, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f040 80b5 	bne.w	800801a <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10a      	bne.n	8007ed0 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007ec0:	2320      	movs	r3, #32
 8007ec2:	2205      	movs	r2, #5
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff fd34 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007eca:	f04f 33ff 	mov.w	r3, #4294967295
 8007ece:	e0aa      	b.n	8008026 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007ed6:	b25b      	sxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	da0a      	bge.n	8007ef2 <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007ee2:	2320      	movs	r3, #32
 8007ee4:	2205      	movs	r2, #5
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f7ff fd23 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007eec:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef0:	e099      	b.n	8008026 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	7afa      	ldrb	r2, [r7, #11]
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f06:	7af9      	ldrb	r1, [r7, #11]
 8007f08:	233a      	movs	r3, #58	; 0x3a
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7ff fd10 	bl	8007932 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2205      	movs	r2, #5
 8007f16:	721a      	strb	r2, [r3, #8]
      return -1;
 8007f18:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1c:	e083      	b.n	8008026 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	7afa      	ldrb	r2, [r7, #11]
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00b      	beq.n	8007f4a <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007f32:	7af9      	ldrb	r1, [r7, #11]
 8007f34:	2327      	movs	r3, #39	; 0x27
 8007f36:	2202      	movs	r2, #2
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f7ff fcfa 	bl	8007932 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2205      	movs	r2, #5
 8007f42:	721a      	strb	r2, [r3, #8]
      return -1;
 8007f44:	f04f 33ff 	mov.w	r3, #4294967295
 8007f48:	e06d      	b.n	8008026 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3302      	adds	r3, #2
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3303      	adds	r3, #3
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007f5a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007f64:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	3205      	adds	r2, #5
 8007f6a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007f6c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3306      	adds	r3, #6
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3307      	adds	r3, #7
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007f84:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	3308      	adds	r3, #8
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007f8e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	3209      	adds	r2, #9
 8007f94:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007f96:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007faa:	7af9      	ldrb	r1, [r7, #11]
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 f871 	bl	8008094 <SCSI_CheckAddressRange>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	da02      	bge.n	8007fbe <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fbc:	e033      	b.n	8008026 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007fca:	fb02 f303 	mul.w	r3, r2, r3
 8007fce:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d00a      	beq.n	8007ff2 <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007fe2:	2320      	movs	r3, #32
 8007fe4:	2205      	movs	r2, #5
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff fca3 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007fec:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff0:	e019      	b.n	8008026 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ff8:	bf28      	it	cs
 8007ffa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007ffe:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2201      	movs	r2, #1
 8008004:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f103 0210 	add.w	r2, r3, #16
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2101      	movs	r1, #1
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f001 ff32 	bl	8009e7a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008016:	2300      	movs	r3, #0
 8008018:	e005      	b.n	8008026 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800801a:	7afb      	ldrb	r3, [r7, #11]
 800801c:	4619      	mov	r1, r3
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 f8cd 	bl	80081be <SCSI_ProcessWrite>
 8008024:	4603      	mov	r3, r0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b086      	sub	sp, #24
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	460b      	mov	r3, r1
 8008038:	607a      	str	r2, [r7, #4]
 800803a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008042:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3301      	adds	r3, #1
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d008      	beq.n	8008064 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008052:	7af9      	ldrb	r1, [r7, #11]
 8008054:	2324      	movs	r3, #36	; 0x24
 8008056:	2205      	movs	r2, #5
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f7ff fc6a 	bl	8007932 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800805e:	f04f 33ff 	mov.w	r3, #4294967295
 8008062:	e013      	b.n	800808c <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008070:	7af9      	ldrb	r1, [r7, #11]
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 f80e 	bl	8008094 <SCSI_CheckAddressRange>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	da02      	bge.n	8008084 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800807e:	f04f 33ff 	mov.w	r3, #4294967295
 8008082:	e003      	b.n	800808c <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2200      	movs	r2, #0
 8008088:	60da      	str	r2, [r3, #12]

  return 0;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	460b      	mov	r3, r1
 80080a2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080aa:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	441a      	add	r2, r3
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d908      	bls.n	80080ce <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80080bc:	7af9      	ldrb	r1, [r7, #11]
 80080be:	2321      	movs	r3, #33	; 0x21
 80080c0:	2205      	movs	r2, #5
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f7ff fc35 	bl	8007932 <SCSI_SenseCode>
    return -1;
 80080c8:	f04f 33ff 	mov.w	r3, #4294967295
 80080cc:	e000      	b.n	80080d0 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80080d8:	b590      	push	{r4, r7, lr}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ea:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80080f8:	fb02 f303 	mul.w	r3, r2, r3
 80080fc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008104:	bf28      	it	cs
 8008106:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800810a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008112:	691c      	ldr	r4, [r3, #16]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f103 0110 	add.w	r1, r3, #16
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008126:	4618      	mov	r0, r3
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800812e:	b29b      	uxth	r3, r3
 8008130:	78f8      	ldrb	r0, [r7, #3]
 8008132:	47a0      	blx	r4
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	da08      	bge.n	800814c <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800813a:	78f9      	ldrb	r1, [r7, #3]
 800813c:	2311      	movs	r3, #17
 800813e:	2204      	movs	r2, #4
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff fbf6 	bl	8007932 <SCSI_SenseCode>
    return -1;
 8008146:	f04f 33ff 	mov.w	r3, #4294967295
 800814a:	e034      	b.n	80081b6 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f103 0210 	add.w	r2, r3, #16
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2181      	movs	r1, #129	; 0x81
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f001 fe6e 	bl	8009e38 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008168:	4619      	mov	r1, r3
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008170:	441a      	add	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008184:	4619      	mov	r1, r3
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	fbb3 f3f1 	udiv	r3, r3, r1
 800818c:	1ad2      	subs	r2, r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	1ad2      	subs	r2, r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d102      	bne.n	80081b4 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2203      	movs	r2, #3
 80081b2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd90      	pop	{r4, r7, pc}

080081be <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80081be:	b590      	push	{r4, r7, lr}
 80081c0:	b085      	sub	sp, #20
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081d0:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80081de:	fb02 f303 	mul.w	r3, r2, r3
 80081e2:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ea:	bf28      	it	cs
 80081ec:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80081f0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081f8:	695c      	ldr	r4, [r3, #20]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f103 0110 	add.w	r1, r3, #16
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800820c:	4618      	mov	r0, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008214:	b29b      	uxth	r3, r3
 8008216:	78f8      	ldrb	r0, [r7, #3]
 8008218:	47a0      	blx	r4
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	da08      	bge.n	8008232 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008220:	78f9      	ldrb	r1, [r7, #3]
 8008222:	2303      	movs	r3, #3
 8008224:	2204      	movs	r2, #4
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff fb83 	bl	8007932 <SCSI_SenseCode>
    return -1;
 800822c:	f04f 33ff 	mov.w	r3, #4294967295
 8008230:	e044      	b.n	80082bc <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800823e:	4619      	mov	r1, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	fbb3 f3f1 	udiv	r3, r3, r1
 8008246:	441a      	add	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800825a:	4619      	mov	r1, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008262:	1ad2      	subs	r2, r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	1ad2      	subs	r2, r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008280:	2b00      	cmp	r3, #0
 8008282:	d104      	bne.n	800828e <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008284:	2100      	movs	r1, #0
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7fe ff04 	bl	8007094 <MSC_BOT_SendCSW>
 800828c:	e015      	b.n	80082ba <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800829a:	fb02 f303 	mul.w	r3, r2, r3
 800829e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a2:	bf28      	it	cs
 80082a4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80082a8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f103 0210 	add.w	r2, r3, #16
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2101      	movs	r1, #1
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 fde0 	bl	8009e7a <USBD_LL_PrepareReceive>
  }

  return 0;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd90      	pop	{r4, r7, pc}

080082c4 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80082d6:	8afa      	ldrh	r2, [r7, #22]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80082dc:	e00b      	b.n	80082f6 <SCSI_UpdateBotData+0x32>
  {
    len--;
 80082de:	8afb      	ldrh	r3, [r7, #22]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80082e4:	8afb      	ldrh	r3, [r7, #22]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	441a      	add	r2, r3
 80082ea:	8afb      	ldrh	r3, [r7, #22]
 80082ec:	7811      	ldrb	r1, [r2, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4413      	add	r3, r2
 80082f2:	460a      	mov	r2, r1
 80082f4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80082f6:	8afb      	ldrh	r3, [r7, #22]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f0      	bne.n	80082de <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	371c      	adds	r7, #28
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b086      	sub	sp, #24
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	4613      	mov	r3, r2
 8008316:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800831e:	2303      	movs	r3, #3
 8008320:	e025      	b.n	800836e <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008328:	2b00      	cmp	r3, #0
 800832a:	d003      	beq.n	8008334 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	79fa      	ldrb	r2, [r7, #7]
 8008360:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f001 fc10 	bl	8009b88 <USBD_LL_Init>
 8008368:	4603      	mov	r3, r0
 800836a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800836c:	7dfb      	ldrb	r3, [r7, #23]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800838a:	2303      	movs	r3, #3
 800838c:	e010      	b.n	80083b0 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839e:	f107 020e 	add.w	r2, r7, #14
 80083a2:	4610      	mov	r0, r2
 80083a4:	4798      	blx	r3
 80083a6:	4602      	mov	r2, r0
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 fc31 	bl	8009c28 <USBD_LL_Start>
 80083c6:	4603      	mov	r3, r0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	460b      	mov	r3, r1
 80083f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80083f2:	2303      	movs	r3, #3
 80083f4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d009      	beq.n	8008414 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	78fa      	ldrb	r2, [r7, #3]
 800840a:	4611      	mov	r1, r2
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	4798      	blx	r3
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	460b      	mov	r3, r1
 8008428:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008430:	2b00      	cmp	r3, #0
 8008432:	d007      	beq.n	8008444 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	78fa      	ldrb	r2, [r7, #3]
 800843e:	4611      	mov	r1, r2
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	4798      	blx	r3
  }

  return USBD_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 ff2b 	bl	80092bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008474:	461a      	mov	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008482:	f003 031f 	and.w	r3, r3, #31
 8008486:	2b01      	cmp	r3, #1
 8008488:	d00e      	beq.n	80084a8 <USBD_LL_SetupStage+0x5a>
 800848a:	2b01      	cmp	r3, #1
 800848c:	d302      	bcc.n	8008494 <USBD_LL_SetupStage+0x46>
 800848e:	2b02      	cmp	r3, #2
 8008490:	d014      	beq.n	80084bc <USBD_LL_SetupStage+0x6e>
 8008492:	e01d      	b.n	80084d0 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fa17 	bl	80088d0 <USBD_StdDevReq>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73fb      	strb	r3, [r7, #15]
      break;
 80084a6:	e020      	b.n	80084ea <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fa7b 	bl	80089ac <USBD_StdItfReq>
 80084b6:	4603      	mov	r3, r0
 80084b8:	73fb      	strb	r3, [r7, #15]
      break;
 80084ba:	e016      	b.n	80084ea <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fab7 	bl	8008a38 <USBD_StdEPReq>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73fb      	strb	r3, [r7, #15]
      break;
 80084ce:	e00c      	b.n	80084ea <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 fc21 	bl	8009d26 <USBD_LL_StallEP>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]
      break;
 80084e8:	bf00      	nop
  }

  return ret;
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	460b      	mov	r3, r1
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008502:	7afb      	ldrb	r3, [r7, #11]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d137      	bne.n	8008578 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800850e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008516:	2b03      	cmp	r3, #3
 8008518:	d14a      	bne.n	80085b0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	689a      	ldr	r2, [r3, #8]
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	429a      	cmp	r2, r3
 8008524:	d913      	bls.n	800854e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	4293      	cmp	r3, r2
 800853e:	bf28      	it	cs
 8008540:	4613      	movcs	r3, r2
 8008542:	461a      	mov	r2, r3
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 ff8f 	bl	800946a <USBD_CtlContinueRx>
 800854c:	e030      	b.n	80085b0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008560:	2b03      	cmp	r3, #3
 8008562:	d105      	bne.n	8008570 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 ff8b 	bl	800948c <USBD_CtlSendStatus>
 8008576:	e01b      	b.n	80085b0 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d013      	beq.n	80085ac <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800858a:	2b03      	cmp	r3, #3
 800858c:	d10e      	bne.n	80085ac <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	7afa      	ldrb	r2, [r7, #11]
 8008598:	4611      	mov	r1, r2
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
 80085aa:	e002      	b.n	80085b2 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e000      	b.n	80085b2 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	460b      	mov	r3, r1
 80085c4:	607a      	str	r2, [r7, #4]
 80085c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085c8:	7afb      	ldrb	r3, [r7, #11]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d16a      	bne.n	80086a4 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3314      	adds	r3, #20
 80085d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d155      	bne.n	800868a <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	689a      	ldr	r2, [r3, #8]
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d914      	bls.n	8008614 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	689a      	ldr	r2, [r3, #8]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	1ad2      	subs	r2, r2, r3
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	461a      	mov	r2, r3
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 ff21 	bl	8009448 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008606:	2300      	movs	r3, #0
 8008608:	2200      	movs	r2, #0
 800860a:	2100      	movs	r1, #0
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f001 fc34 	bl	8009e7a <USBD_LL_PrepareReceive>
 8008612:	e03a      	b.n	800868a <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	429a      	cmp	r2, r3
 800861e:	d11c      	bne.n	800865a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008628:	429a      	cmp	r2, r3
 800862a:	d316      	bcc.n	800865a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008636:	429a      	cmp	r2, r3
 8008638:	d20f      	bcs.n	800865a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800863a:	2200      	movs	r2, #0
 800863c:	2100      	movs	r1, #0
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 ff02 	bl	8009448 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800864c:	2300      	movs	r3, #0
 800864e:	2200      	movs	r2, #0
 8008650:	2100      	movs	r1, #0
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f001 fc11 	bl	8009e7a <USBD_LL_PrepareReceive>
 8008658:	e017      	b.n	800868a <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800866c:	2b03      	cmp	r3, #3
 800866e:	d105      	bne.n	800867c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800867c:	2180      	movs	r1, #128	; 0x80
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f001 fb51 	bl	8009d26 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 ff14 	bl	80094b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008690:	2b01      	cmp	r3, #1
 8008692:	d123      	bne.n	80086dc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7ff fe9b 	bl	80083d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086a2:	e01b      	b.n	80086dc <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d013      	beq.n	80086d8 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d10e      	bne.n	80086d8 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	7afa      	ldrb	r2, [r7, #11]
 80086c4:	4611      	mov	r1, r2
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	4798      	blx	r3
 80086ca:	4603      	mov	r3, r0
 80086cc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	e002      	b.n	80086de <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086d8:	2303      	movs	r3, #3
 80086da:	e000      	b.n	80086de <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008712:	2b00      	cmp	r3, #0
 8008714:	d009      	beq.n	800872a <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	6852      	ldr	r2, [r2, #4]
 8008722:	b2d2      	uxtb	r2, r2
 8008724:	4611      	mov	r1, r2
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800872a:	2340      	movs	r3, #64	; 0x40
 800872c:	2200      	movs	r2, #0
 800872e:	2100      	movs	r1, #0
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f001 fa94 	bl	8009c5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2240      	movs	r2, #64	; 0x40
 8008742:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008746:	2340      	movs	r3, #64	; 0x40
 8008748:	2200      	movs	r2, #0
 800874a:	2180      	movs	r1, #128	; 0x80
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 fa86 	bl	8009c5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2240      	movs	r2, #64	; 0x40
 800875c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	78fa      	ldrb	r2, [r7, #3]
 8008778:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2204      	movs	r2, #4
 80087a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d105      	bne.n	80087d0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b082      	sub	sp, #8
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d10b      	bne.n	8008808 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d009      	beq.n	800888a <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6852      	ldr	r2, [r2, #4]
 8008882:	b2d2      	uxtb	r2, r2
 8008884:	4611      	mov	r1, r2
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	4798      	blx	r3
  }

  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	3301      	adds	r3, #1
 80088aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088b2:	8a3b      	ldrh	r3, [r7, #16]
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	b21a      	sxth	r2, r3
 80088b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088bc:	4313      	orrs	r3, r2
 80088be:	b21b      	sxth	r3, r3
 80088c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088c2:	89fb      	ldrh	r3, [r7, #14]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	371c      	adds	r7, #28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	d004      	beq.n	80088f4 <USBD_StdDevReq+0x24>
 80088ea:	2b40      	cmp	r3, #64	; 0x40
 80088ec:	d002      	beq.n	80088f4 <USBD_StdDevReq+0x24>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <USBD_StdDevReq+0x38>
 80088f2:	e050      	b.n	8008996 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	4798      	blx	r3
 8008902:	4603      	mov	r3, r0
 8008904:	73fb      	strb	r3, [r7, #15]
    break;
 8008906:	e04b      	b.n	80089a0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	785b      	ldrb	r3, [r3, #1]
 800890c:	2b09      	cmp	r3, #9
 800890e:	d83c      	bhi.n	800898a <USBD_StdDevReq+0xba>
 8008910:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <USBD_StdDevReq+0x48>)
 8008912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008916:	bf00      	nop
 8008918:	0800896d 	.word	0x0800896d
 800891c:	08008981 	.word	0x08008981
 8008920:	0800898b 	.word	0x0800898b
 8008924:	08008977 	.word	0x08008977
 8008928:	0800898b 	.word	0x0800898b
 800892c:	0800894b 	.word	0x0800894b
 8008930:	08008941 	.word	0x08008941
 8008934:	0800898b 	.word	0x0800898b
 8008938:	08008963 	.word	0x08008963
 800893c:	08008955 	.word	0x08008955
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f9ce 	bl	8008ce4 <USBD_GetDescriptor>
      break;
 8008948:	e024      	b.n	8008994 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fb33 	bl	8008fb8 <USBD_SetAddress>
      break;
 8008952:	e01f      	b.n	8008994 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fb70 	bl	800903c <USBD_SetConfig>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]
      break;
 8008960:	e018      	b.n	8008994 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fc0d 	bl	8009184 <USBD_GetConfig>
      break;
 800896a:	e013      	b.n	8008994 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fc3c 	bl	80091ec <USBD_GetStatus>
      break;
 8008974:	e00e      	b.n	8008994 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fc6a 	bl	8009252 <USBD_SetFeature>
      break;
 800897e:	e009      	b.n	8008994 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fc79 	bl	800927a <USBD_ClrFeature>
      break;
 8008988:	e004      	b.n	8008994 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fccf 	bl	8009330 <USBD_CtlError>
      break;
 8008992:	bf00      	nop
    }
    break;
 8008994:	e004      	b.n	80089a0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fcc9 	bl	8009330 <USBD_CtlError>
    break;
 800899e:	bf00      	nop
  }

  return ret;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop

080089ac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	d003      	beq.n	80089ce <USBD_StdItfReq+0x22>
 80089c6:	2b40      	cmp	r3, #64	; 0x40
 80089c8:	d001      	beq.n	80089ce <USBD_StdItfReq+0x22>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d12a      	bne.n	8008a24 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d4:	3b01      	subs	r3, #1
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d81d      	bhi.n	8008a16 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	889b      	ldrh	r3, [r3, #4]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d813      	bhi.n	8008a0c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
 80089f2:	4603      	mov	r3, r0
 80089f4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	88db      	ldrh	r3, [r3, #6]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d110      	bne.n	8008a20 <USBD_StdItfReq+0x74>
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10d      	bne.n	8008a20 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fd41 	bl	800948c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008a0a:	e009      	b.n	8008a20 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fc8e 	bl	8009330 <USBD_CtlError>
      break;
 8008a14:	e004      	b.n	8008a20 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fc89 	bl	8009330 <USBD_CtlError>
      break;
 8008a1e:	e000      	b.n	8008a22 <USBD_StdItfReq+0x76>
      break;
 8008a20:	bf00      	nop
    }
    break;
 8008a22:	e004      	b.n	8008a2e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fc82 	bl	8009330 <USBD_CtlError>
    break;
 8008a2c:	bf00      	nop
  }

  return ret;
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	889b      	ldrh	r3, [r3, #4]
 8008a4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a54:	2b20      	cmp	r3, #32
 8008a56:	d004      	beq.n	8008a62 <USBD_StdEPReq+0x2a>
 8008a58:	2b40      	cmp	r3, #64	; 0x40
 8008a5a:	d002      	beq.n	8008a62 <USBD_StdEPReq+0x2a>
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00a      	beq.n	8008a76 <USBD_StdEPReq+0x3e>
 8008a60:	e135      	b.n	8008cce <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	4798      	blx	r3
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
    break;
 8008a74:	e130      	b.n	8008cd8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	785b      	ldrb	r3, [r3, #1]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d03e      	beq.n	8008afc <USBD_StdEPReq+0xc4>
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d002      	beq.n	8008a88 <USBD_StdEPReq+0x50>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d077      	beq.n	8008b76 <USBD_StdEPReq+0x13e>
 8008a86:	e11c      	b.n	8008cc2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d002      	beq.n	8008a98 <USBD_StdEPReq+0x60>
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d015      	beq.n	8008ac2 <USBD_StdEPReq+0x8a>
 8008a96:	e02b      	b.n	8008af0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00c      	beq.n	8008ab8 <USBD_StdEPReq+0x80>
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b80      	cmp	r3, #128	; 0x80
 8008aa2:	d009      	beq.n	8008ab8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f001 f93c 	bl	8009d26 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aae:	2180      	movs	r1, #128	; 0x80
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f938 	bl	8009d26 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008ab6:	e020      	b.n	8008afa <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fc38 	bl	8009330 <USBD_CtlError>
        break;
 8008ac0:	e01b      	b.n	8008afa <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	885b      	ldrh	r3, [r3, #2]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10e      	bne.n	8008ae8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <USBD_StdEPReq+0xb0>
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d008      	beq.n	8008ae8 <USBD_StdEPReq+0xb0>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	88db      	ldrh	r3, [r3, #6]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d104      	bne.n	8008ae8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 f91f 	bl	8009d26 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fccf 	bl	800948c <USBD_CtlSendStatus>

        break;
 8008aee:	e004      	b.n	8008afa <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fc1c 	bl	8009330 <USBD_CtlError>
        break;
 8008af8:	bf00      	nop
      }
      break;
 8008afa:	e0e7      	b.n	8008ccc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d002      	beq.n	8008b0c <USBD_StdEPReq+0xd4>
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d015      	beq.n	8008b36 <USBD_StdEPReq+0xfe>
 8008b0a:	e02d      	b.n	8008b68 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00c      	beq.n	8008b2c <USBD_StdEPReq+0xf4>
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	2b80      	cmp	r3, #128	; 0x80
 8008b16:	d009      	beq.n	8008b2c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 f902 	bl	8009d26 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b22:	2180      	movs	r1, #128	; 0x80
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f001 f8fe 	bl	8009d26 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008b2a:	e023      	b.n	8008b74 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fbfe 	bl	8009330 <USBD_CtlError>
        break;
 8008b34:	e01e      	b.n	8008b74 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	885b      	ldrh	r3, [r3, #2]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d119      	bne.n	8008b72 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d004      	beq.n	8008b52 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b48:	7bbb      	ldrb	r3, [r7, #14]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 f909 	bl	8009d64 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fc9a 	bl	800948c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	4798      	blx	r3
        }
        break;
 8008b66:	e004      	b.n	8008b72 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fbe0 	bl	8009330 <USBD_CtlError>
        break;
 8008b70:	e000      	b.n	8008b74 <USBD_StdEPReq+0x13c>
        break;
 8008b72:	bf00      	nop
      }
      break;
 8008b74:	e0aa      	b.n	8008ccc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d002      	beq.n	8008b86 <USBD_StdEPReq+0x14e>
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d032      	beq.n	8008bea <USBD_StdEPReq+0x1b2>
 8008b84:	e097      	b.n	8008cb6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d007      	beq.n	8008b9c <USBD_StdEPReq+0x164>
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
 8008b8e:	2b80      	cmp	r3, #128	; 0x80
 8008b90:	d004      	beq.n	8008b9c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fbcb 	bl	8009330 <USBD_CtlError>
          break;
 8008b9a:	e091      	b.n	8008cc0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da0b      	bge.n	8008bbc <USBD_StdEPReq+0x184>
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	3310      	adds	r3, #16
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	3304      	adds	r3, #4
 8008bba:	e00b      	b.n	8008bd4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2202      	movs	r2, #2
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fc15 	bl	8009412 <USBD_CtlSendData>
        break;
 8008be8:	e06a      	b.n	8008cc0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	da11      	bge.n	8008c16 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	f003 020f 	and.w	r2, r3, #15
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	440b      	add	r3, r1
 8008c04:	3324      	adds	r3, #36	; 0x24
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d117      	bne.n	8008c3c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fb8e 	bl	8009330 <USBD_CtlError>
            break;
 8008c14:	e054      	b.n	8008cc0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	f003 020f 	and.w	r2, r3, #15
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d104      	bne.n	8008c3c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fb7b 	bl	8009330 <USBD_CtlError>
            break;
 8008c3a:	e041      	b.n	8008cc0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	da0b      	bge.n	8008c5c <USBD_StdEPReq+0x224>
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	3310      	adds	r3, #16
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	4413      	add	r3, r2
 8008c58:	3304      	adds	r3, #4
 8008c5a:	e00b      	b.n	8008c74 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c62:	4613      	mov	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	4413      	add	r3, r2
 8008c72:	3304      	adds	r3, #4
 8008c74:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <USBD_StdEPReq+0x24a>
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b80      	cmp	r3, #128	; 0x80
 8008c80:	d103      	bne.n	8008c8a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2200      	movs	r2, #0
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	e00e      	b.n	8008ca8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 f887 	bl	8009da2 <USBD_LL_IsStallEP>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	e002      	b.n	8008ca8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2202      	movs	r2, #2
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fbaf 	bl	8009412 <USBD_CtlSendData>
          break;
 8008cb4:	e004      	b.n	8008cc0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fb39 	bl	8009330 <USBD_CtlError>
        break;
 8008cbe:	bf00      	nop
      }
      break;
 8008cc0:	e004      	b.n	8008ccc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fb33 	bl	8009330 <USBD_CtlError>
      break;
 8008cca:	bf00      	nop
    }
    break;
 8008ccc:	e004      	b.n	8008cd8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fb2d 	bl	8009330 <USBD_CtlError>
    break;
 8008cd6:	bf00      	nop
  }

  return ret;
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	885b      	ldrh	r3, [r3, #2]
 8008cfe:	0a1b      	lsrs	r3, r3, #8
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	2b06      	cmp	r3, #6
 8008d06:	f200 8128 	bhi.w	8008f5a <USBD_GetDescriptor+0x276>
 8008d0a:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <USBD_GetDescriptor+0x2c>)
 8008d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d10:	08008d2d 	.word	0x08008d2d
 8008d14:	08008d45 	.word	0x08008d45
 8008d18:	08008d85 	.word	0x08008d85
 8008d1c:	08008f5b 	.word	0x08008f5b
 8008d20:	08008f5b 	.word	0x08008f5b
 8008d24:	08008efb 	.word	0x08008efb
 8008d28:	08008f27 	.word	0x08008f27
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	7c12      	ldrb	r2, [r2, #16]
 8008d38:	f107 0108 	add.w	r1, r7, #8
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	60f8      	str	r0, [r7, #12]
    break;
 8008d42:	e112      	b.n	8008f6a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	7c1b      	ldrb	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10d      	bne.n	8008d68 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d54:	f107 0208 	add.w	r2, r7, #8
 8008d58:	4610      	mov	r0, r2
 8008d5a:	4798      	blx	r3
 8008d5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3301      	adds	r3, #1
 8008d62:	2202      	movs	r2, #2
 8008d64:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008d66:	e100      	b.n	8008f6a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d70:	f107 0208 	add.w	r2, r7, #8
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	2202      	movs	r2, #2
 8008d80:	701a      	strb	r2, [r3, #0]
    break;
 8008d82:	e0f2      	b.n	8008f6a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	885b      	ldrh	r3, [r3, #2]
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	f200 80ac 	bhi.w	8008ee8 <USBD_GetDescriptor+0x204>
 8008d90:	a201      	add	r2, pc, #4	; (adr r2, 8008d98 <USBD_GetDescriptor+0xb4>)
 8008d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d96:	bf00      	nop
 8008d98:	08008db1 	.word	0x08008db1
 8008d9c:	08008de5 	.word	0x08008de5
 8008da0:	08008e19 	.word	0x08008e19
 8008da4:	08008e4d 	.word	0x08008e4d
 8008da8:	08008e81 	.word	0x08008e81
 8008dac:	08008eb5 	.word	0x08008eb5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	7c12      	ldrb	r2, [r2, #16]
 8008dc8:	f107 0108 	add.w	r1, r7, #8
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
 8008dd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dd2:	e091      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 faaa 	bl	8009330 <USBD_CtlError>
        err++;
 8008ddc:	7afb      	ldrb	r3, [r7, #11]
 8008dde:	3301      	adds	r3, #1
 8008de0:	72fb      	strb	r3, [r7, #11]
      break;
 8008de2:	e089      	b.n	8008ef8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00b      	beq.n	8008e08 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	7c12      	ldrb	r2, [r2, #16]
 8008dfc:	f107 0108 	add.w	r1, r7, #8
 8008e00:	4610      	mov	r0, r2
 8008e02:	4798      	blx	r3
 8008e04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e06:	e077      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa90 	bl	8009330 <USBD_CtlError>
        err++;
 8008e10:	7afb      	ldrb	r3, [r7, #11]
 8008e12:	3301      	adds	r3, #1
 8008e14:	72fb      	strb	r3, [r7, #11]
      break;
 8008e16:	e06f      	b.n	8008ef8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00b      	beq.n	8008e3c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	7c12      	ldrb	r2, [r2, #16]
 8008e30:	f107 0108 	add.w	r1, r7, #8
 8008e34:	4610      	mov	r0, r2
 8008e36:	4798      	blx	r3
 8008e38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e3a:	e05d      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fa76 	bl	8009330 <USBD_CtlError>
        err++;
 8008e44:	7afb      	ldrb	r3, [r7, #11]
 8008e46:	3301      	adds	r3, #1
 8008e48:	72fb      	strb	r3, [r7, #11]
      break;
 8008e4a:	e055      	b.n	8008ef8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00b      	beq.n	8008e70 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	7c12      	ldrb	r2, [r2, #16]
 8008e64:	f107 0108 	add.w	r1, r7, #8
 8008e68:	4610      	mov	r0, r2
 8008e6a:	4798      	blx	r3
 8008e6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e6e:	e043      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fa5c 	bl	8009330 <USBD_CtlError>
        err++;
 8008e78:	7afb      	ldrb	r3, [r7, #11]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	72fb      	strb	r3, [r7, #11]
      break;
 8008e7e:	e03b      	b.n	8008ef8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00b      	beq.n	8008ea4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	7c12      	ldrb	r2, [r2, #16]
 8008e98:	f107 0108 	add.w	r1, r7, #8
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4798      	blx	r3
 8008ea0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ea2:	e029      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa42 	bl	8009330 <USBD_CtlError>
        err++;
 8008eac:	7afb      	ldrb	r3, [r7, #11]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	72fb      	strb	r3, [r7, #11]
      break;
 8008eb2:	e021      	b.n	8008ef8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	7c12      	ldrb	r2, [r2, #16]
 8008ecc:	f107 0108 	add.w	r1, r7, #8
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ed6:	e00f      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa28 	bl	8009330 <USBD_CtlError>
        err++;
 8008ee0:	7afb      	ldrb	r3, [r7, #11]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ee6:	e007      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa20 	bl	8009330 <USBD_CtlError>
      err++;
 8008ef0:	7afb      	ldrb	r3, [r7, #11]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008ef6:	bf00      	nop
    }
    break;
 8008ef8:	e037      	b.n	8008f6a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	7c1b      	ldrb	r3, [r3, #16]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d109      	bne.n	8008f16 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f0a:	f107 0208 	add.w	r2, r7, #8
 8008f0e:	4610      	mov	r0, r2
 8008f10:	4798      	blx	r3
 8008f12:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008f14:	e029      	b.n	8008f6a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fa09 	bl	8009330 <USBD_CtlError>
      err++;
 8008f1e:	7afb      	ldrb	r3, [r7, #11]
 8008f20:	3301      	adds	r3, #1
 8008f22:	72fb      	strb	r3, [r7, #11]
    break;
 8008f24:	e021      	b.n	8008f6a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	7c1b      	ldrb	r3, [r3, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10d      	bne.n	8008f4a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	f107 0208 	add.w	r2, r7, #8
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	4798      	blx	r3
 8008f3e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	2207      	movs	r2, #7
 8008f46:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008f48:	e00f      	b.n	8008f6a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f9ef 	bl	8009330 <USBD_CtlError>
      err++;
 8008f52:	7afb      	ldrb	r3, [r7, #11]
 8008f54:	3301      	adds	r3, #1
 8008f56:	72fb      	strb	r3, [r7, #11]
    break;
 8008f58:	e007      	b.n	8008f6a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f9e7 	bl	8009330 <USBD_CtlError>
    err++;
 8008f62:	7afb      	ldrb	r3, [r7, #11]
 8008f64:	3301      	adds	r3, #1
 8008f66:	72fb      	strb	r3, [r7, #11]
    break;
 8008f68:	bf00      	nop
  }

  if (err != 0U)
 8008f6a:	7afb      	ldrb	r3, [r7, #11]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d11e      	bne.n	8008fae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	88db      	ldrh	r3, [r3, #6]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d016      	beq.n	8008fa6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008f78:	893b      	ldrh	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00e      	beq.n	8008f9c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	88da      	ldrh	r2, [r3, #6]
 8008f82:	893b      	ldrh	r3, [r7, #8]
 8008f84:	4293      	cmp	r3, r2
 8008f86:	bf28      	it	cs
 8008f88:	4613      	movcs	r3, r2
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f8e:	893b      	ldrh	r3, [r7, #8]
 8008f90:	461a      	mov	r2, r3
 8008f92:	68f9      	ldr	r1, [r7, #12]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fa3c 	bl	8009412 <USBD_CtlSendData>
 8008f9a:	e009      	b.n	8008fb0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f9c6 	bl	8009330 <USBD_CtlError>
 8008fa4:	e004      	b.n	8008fb0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fa70 	bl	800948c <USBD_CtlSendStatus>
 8008fac:	e000      	b.n	8008fb0 <USBD_GetDescriptor+0x2cc>
    return;
 8008fae:	bf00      	nop
    }
  }
}
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop

08008fb8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	889b      	ldrh	r3, [r3, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d130      	bne.n	800902c <USBD_SetAddress+0x74>
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	88db      	ldrh	r3, [r3, #6]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d12c      	bne.n	800902c <USBD_SetAddress+0x74>
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	885b      	ldrh	r3, [r3, #2]
 8008fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8008fd8:	d828      	bhi.n	800902c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	885b      	ldrh	r3, [r3, #2]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d104      	bne.n	8008ffa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f99c 	bl	8009330 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff8:	e01c      	b.n	8009034 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	7bfa      	ldrb	r2, [r7, #15]
 8008ffe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fef7 	bl	8009dfa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fa3d 	bl	800948c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d004      	beq.n	8009022 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009020:	e008      	b.n	8009034 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902a:	e003      	b.n	8009034 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f97e 	bl	8009330 <USBD_CtlError>
  }
}
 8009034:	bf00      	nop
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	885b      	ldrh	r3, [r3, #2]
 800904e:	b2da      	uxtb	r2, r3
 8009050:	4b4b      	ldr	r3, [pc, #300]	; (8009180 <USBD_SetConfig+0x144>)
 8009052:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009054:	4b4a      	ldr	r3, [pc, #296]	; (8009180 <USBD_SetConfig+0x144>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d905      	bls.n	8009068 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f966 	bl	8009330 <USBD_CtlError>
    return USBD_FAIL;
 8009064:	2303      	movs	r3, #3
 8009066:	e087      	b.n	8009178 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906e:	2b02      	cmp	r3, #2
 8009070:	d002      	beq.n	8009078 <USBD_SetConfig+0x3c>
 8009072:	2b03      	cmp	r3, #3
 8009074:	d025      	beq.n	80090c2 <USBD_SetConfig+0x86>
 8009076:	e071      	b.n	800915c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009078:	4b41      	ldr	r3, [pc, #260]	; (8009180 <USBD_SetConfig+0x144>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d01c      	beq.n	80090ba <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009080:	4b3f      	ldr	r3, [pc, #252]	; (8009180 <USBD_SetConfig+0x144>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	461a      	mov	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800908a:	4b3d      	ldr	r3, [pc, #244]	; (8009180 <USBD_SetConfig+0x144>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7ff f9a8 	bl	80083e6 <USBD_SetClassConfig>
 8009096:	4603      	mov	r3, r0
 8009098:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d004      	beq.n	80090aa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f944 	bl	8009330 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80090a8:	e065      	b.n	8009176 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f9ee 	bl	800948c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2203      	movs	r2, #3
 80090b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80090b8:	e05d      	b.n	8009176 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f9e6 	bl	800948c <USBD_CtlSendStatus>
    break;
 80090c0:	e059      	b.n	8009176 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80090c2:	4b2f      	ldr	r3, [pc, #188]	; (8009180 <USBD_SetConfig+0x144>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d112      	bne.n	80090f0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2202      	movs	r2, #2
 80090ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80090d2:	4b2b      	ldr	r3, [pc, #172]	; (8009180 <USBD_SetConfig+0x144>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090dc:	4b28      	ldr	r3, [pc, #160]	; (8009180 <USBD_SetConfig+0x144>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff f99b 	bl	800841e <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f9cf 	bl	800948c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80090ee:	e042      	b.n	8009176 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80090f0:	4b23      	ldr	r3, [pc, #140]	; (8009180 <USBD_SetConfig+0x144>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	461a      	mov	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d02a      	beq.n	8009154 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	b2db      	uxtb	r3, r3
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff f989 	bl	800841e <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800910c:	4b1c      	ldr	r3, [pc, #112]	; (8009180 <USBD_SetConfig+0x144>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	461a      	mov	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009116:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <USBD_SetConfig+0x144>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff f962 	bl	80083e6 <USBD_SetClassConfig>
 8009122:	4603      	mov	r3, r0
 8009124:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00f      	beq.n	800914c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f8fe 	bl	8009330 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	b2db      	uxtb	r3, r3
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7ff f96e 	bl	800841e <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2202      	movs	r2, #2
 8009146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800914a:	e014      	b.n	8009176 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f99d 	bl	800948c <USBD_CtlSendStatus>
    break;
 8009152:	e010      	b.n	8009176 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f999 	bl	800948c <USBD_CtlSendStatus>
    break;
 800915a:	e00c      	b.n	8009176 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f8e6 	bl	8009330 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009164:	4b06      	ldr	r3, [pc, #24]	; (8009180 <USBD_SetConfig+0x144>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff f957 	bl	800841e <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009170:	2303      	movs	r3, #3
 8009172:	73fb      	strb	r3, [r7, #15]
    break;
 8009174:	bf00      	nop
  }

  return ret;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	200001e8 	.word	0x200001e8

08009184 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	88db      	ldrh	r3, [r3, #6]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d004      	beq.n	80091a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f8c9 	bl	8009330 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800919e:	e021      	b.n	80091e4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	db17      	blt.n	80091da <USBD_GetConfig+0x56>
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	dd02      	ble.n	80091b4 <USBD_GetConfig+0x30>
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d00b      	beq.n	80091ca <USBD_GetConfig+0x46>
 80091b2:	e012      	b.n	80091da <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	3308      	adds	r3, #8
 80091be:	2201      	movs	r2, #1
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f925 	bl	8009412 <USBD_CtlSendData>
      break;
 80091c8:	e00c      	b.n	80091e4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3304      	adds	r3, #4
 80091ce:	2201      	movs	r2, #1
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f91d 	bl	8009412 <USBD_CtlSendData>
      break;
 80091d8:	e004      	b.n	80091e4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f8a7 	bl	8009330 <USBD_CtlError>
      break;
 80091e2:	bf00      	nop
}
 80091e4:	bf00      	nop
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fc:	3b01      	subs	r3, #1
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d81e      	bhi.n	8009240 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	88db      	ldrh	r3, [r3, #6]
 8009206:	2b02      	cmp	r3, #2
 8009208:	d004      	beq.n	8009214 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f88f 	bl	8009330 <USBD_CtlError>
      break;
 8009212:	e01a      	b.n	800924a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	f043 0202 	orr.w	r2, r3, #2
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	330c      	adds	r3, #12
 8009234:	2202      	movs	r2, #2
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f8ea 	bl	8009412 <USBD_CtlSendData>
    break;
 800923e:	e004      	b.n	800924a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f874 	bl	8009330 <USBD_CtlError>
    break;
 8009248:	bf00      	nop
  }
}
 800924a:	bf00      	nop
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	885b      	ldrh	r3, [r3, #2]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d106      	bne.n	8009272 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f90d 	bl	800948c <USBD_CtlSendStatus>
  }
}
 8009272:	bf00      	nop
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800928a:	3b01      	subs	r3, #1
 800928c:	2b02      	cmp	r3, #2
 800928e:	d80b      	bhi.n	80092a8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	885b      	ldrh	r3, [r3, #2]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d10c      	bne.n	80092b2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f8f3 	bl	800948c <USBD_CtlSendStatus>
      }
      break;
 80092a6:	e004      	b.n	80092b2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f840 	bl	8009330 <USBD_CtlError>
      break;
 80092b0:	e000      	b.n	80092b4 <USBD_ClrFeature+0x3a>
      break;
 80092b2:	bf00      	nop
  }
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	781a      	ldrb	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3301      	adds	r3, #1
 80092d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	781a      	ldrb	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	3301      	adds	r3, #1
 80092e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f7ff fad4 	bl	8008894 <SWAPBYTE>
 80092ec:	4603      	mov	r3, r0
 80092ee:	461a      	mov	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3301      	adds	r3, #1
 80092f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3301      	adds	r3, #1
 80092fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f7ff fac7 	bl	8008894 <SWAPBYTE>
 8009306:	4603      	mov	r3, r0
 8009308:	461a      	mov	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3301      	adds	r3, #1
 8009312:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3301      	adds	r3, #1
 8009318:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f7ff faba 	bl	8008894 <SWAPBYTE>
 8009320:	4603      	mov	r3, r0
 8009322:	461a      	mov	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	80da      	strh	r2, [r3, #6]
}
 8009328:	bf00      	nop
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800933a:	2180      	movs	r1, #128	; 0x80
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fcf2 	bl	8009d26 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009342:	2100      	movs	r1, #0
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fcee 	bl	8009d26 <USBD_LL_StallEP>
}
 800934a:	bf00      	nop
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d036      	beq.n	80093d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800936c:	6938      	ldr	r0, [r7, #16]
 800936e:	f000 f836 	bl	80093de <USBD_GetLen>
 8009372:	4603      	mov	r3, r0
 8009374:	3301      	adds	r3, #1
 8009376:	b29b      	uxth	r3, r3
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	b29a      	uxth	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	4413      	add	r3, r2
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	7812      	ldrb	r2, [r2, #0]
 800938a:	701a      	strb	r2, [r3, #0]
  idx++;
 800938c:	7dfb      	ldrb	r3, [r7, #23]
 800938e:	3301      	adds	r3, #1
 8009390:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	4413      	add	r3, r2
 8009398:	2203      	movs	r2, #3
 800939a:	701a      	strb	r2, [r3, #0]
  idx++;
 800939c:	7dfb      	ldrb	r3, [r7, #23]
 800939e:	3301      	adds	r3, #1
 80093a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093a2:	e013      	b.n	80093cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	4413      	add	r3, r2
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	7812      	ldrb	r2, [r2, #0]
 80093ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	3301      	adds	r3, #1
 80093b4:	613b      	str	r3, [r7, #16]
    idx++;
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	3301      	adds	r3, #1
 80093ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	2200      	movs	r2, #0
 80093c4:	701a      	strb	r2, [r3, #0]
    idx++;
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	3301      	adds	r3, #1
 80093ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e7      	bne.n	80093a4 <USBD_GetString+0x52>
 80093d4:	e000      	b.n	80093d8 <USBD_GetString+0x86>
    return;
 80093d6:	bf00      	nop
  }
}
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093de:	b480      	push	{r7}
 80093e0:	b085      	sub	sp, #20
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80093ee:	e005      	b.n	80093fc <USBD_GetLen+0x1e>
  {
    len++;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	3301      	adds	r3, #1
 80093f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	3301      	adds	r3, #1
 80093fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1f5      	bne.n	80093f0 <USBD_GetLen+0x12>
  }

  return len;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2202      	movs	r2, #2
 8009422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	2100      	movs	r1, #0
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fcfd 	bl	8009e38 <USBD_LL_Transmit>

  return USBD_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	2100      	movs	r1, #0
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 fcec 	bl	8009e38 <USBD_LL_Transmit>

  return USBD_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	60f8      	str	r0, [r7, #12]
 8009472:	60b9      	str	r1, [r7, #8]
 8009474:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	2100      	movs	r1, #0
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 fcfc 	bl	8009e7a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2204      	movs	r2, #4
 8009498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800949c:	2300      	movs	r3, #0
 800949e:	2200      	movs	r2, #0
 80094a0:	2100      	movs	r1, #0
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fcc8 	bl	8009e38 <USBD_LL_Transmit>

  return USBD_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2205      	movs	r2, #5
 80094be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094c2:	2300      	movs	r3, #0
 80094c4:	2200      	movs	r2, #0
 80094c6:	2100      	movs	r1, #0
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fcd6 	bl	8009e7a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	4613      	mov	r3, r2
 80094e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80094e6:	2301      	movs	r3, #1
 80094e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80094ee:	4b1f      	ldr	r3, [pc, #124]	; (800956c <FATFS_LinkDriverEx+0x94>)
 80094f0:	7a5b      	ldrb	r3, [r3, #9]
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d131      	bne.n	800955c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80094f8:	4b1c      	ldr	r3, [pc, #112]	; (800956c <FATFS_LinkDriverEx+0x94>)
 80094fa:	7a5b      	ldrb	r3, [r3, #9]
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	461a      	mov	r2, r3
 8009500:	4b1a      	ldr	r3, [pc, #104]	; (800956c <FATFS_LinkDriverEx+0x94>)
 8009502:	2100      	movs	r1, #0
 8009504:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009506:	4b19      	ldr	r3, [pc, #100]	; (800956c <FATFS_LinkDriverEx+0x94>)
 8009508:	7a5b      	ldrb	r3, [r3, #9]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	4a17      	ldr	r2, [pc, #92]	; (800956c <FATFS_LinkDriverEx+0x94>)
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009516:	4b15      	ldr	r3, [pc, #84]	; (800956c <FATFS_LinkDriverEx+0x94>)
 8009518:	7a5b      	ldrb	r3, [r3, #9]
 800951a:	b2db      	uxtb	r3, r3
 800951c:	461a      	mov	r2, r3
 800951e:	4b13      	ldr	r3, [pc, #76]	; (800956c <FATFS_LinkDriverEx+0x94>)
 8009520:	4413      	add	r3, r2
 8009522:	79fa      	ldrb	r2, [r7, #7]
 8009524:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009526:	4b11      	ldr	r3, [pc, #68]	; (800956c <FATFS_LinkDriverEx+0x94>)
 8009528:	7a5b      	ldrb	r3, [r3, #9]
 800952a:	b2db      	uxtb	r3, r3
 800952c:	1c5a      	adds	r2, r3, #1
 800952e:	b2d1      	uxtb	r1, r2
 8009530:	4a0e      	ldr	r2, [pc, #56]	; (800956c <FATFS_LinkDriverEx+0x94>)
 8009532:	7251      	strb	r1, [r2, #9]
 8009534:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009536:	7dbb      	ldrb	r3, [r7, #22]
 8009538:	3330      	adds	r3, #48	; 0x30
 800953a:	b2da      	uxtb	r2, r3
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	3301      	adds	r3, #1
 8009544:	223a      	movs	r2, #58	; 0x3a
 8009546:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	3302      	adds	r3, #2
 800954c:	222f      	movs	r2, #47	; 0x2f
 800954e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	3303      	adds	r3, #3
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800955c:	7dfb      	ldrb	r3, [r7, #23]
}
 800955e:	4618      	mov	r0, r3
 8009560:	371c      	adds	r7, #28
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	200001ec 	.word	0x200001ec

08009570 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800957a:	2200      	movs	r2, #0
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff ffaa 	bl	80094d8 <FATFS_LinkDriverEx>
 8009584:	4603      	mov	r3, r0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009594:	2200      	movs	r2, #0
 8009596:	4912      	ldr	r1, [pc, #72]	; (80095e0 <MX_USB_DEVICE_Init+0x50>)
 8009598:	4812      	ldr	r0, [pc, #72]	; (80095e4 <MX_USB_DEVICE_Init+0x54>)
 800959a:	f7fe feb6 	bl	800830a <USBD_Init>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80095a4:	f7f7 f8f0 	bl	8000788 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80095a8:	490f      	ldr	r1, [pc, #60]	; (80095e8 <MX_USB_DEVICE_Init+0x58>)
 80095aa:	480e      	ldr	r0, [pc, #56]	; (80095e4 <MX_USB_DEVICE_Init+0x54>)
 80095ac:	f7fe fee3 	bl	8008376 <USBD_RegisterClass>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80095b6:	f7f7 f8e7 	bl	8000788 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80095ba:	490c      	ldr	r1, [pc, #48]	; (80095ec <MX_USB_DEVICE_Init+0x5c>)
 80095bc:	4809      	ldr	r0, [pc, #36]	; (80095e4 <MX_USB_DEVICE_Init+0x54>)
 80095be:	f7fd fbdf 	bl	8006d80 <USBD_MSC_RegisterStorage>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80095c8:	f7f7 f8de 	bl	8000788 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095cc:	4805      	ldr	r0, [pc, #20]	; (80095e4 <MX_USB_DEVICE_Init+0x54>)
 80095ce:	f7fe fef3 	bl	80083b8 <USBD_Start>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80095d8:	f7f7 f8d6 	bl	8000788 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095dc:	bf00      	nop
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	200000f4 	.word	0x200000f4
 80095e4:	20000714 	.word	0x20000714
 80095e8:	2000000c 	.word	0x2000000c
 80095ec:	20000144 	.word	0x20000144

080095f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	6039      	str	r1, [r7, #0]
 80095fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2212      	movs	r2, #18
 8009600:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009602:	4b03      	ldr	r3, [pc, #12]	; (8009610 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009604:	4618      	mov	r0, r3
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	20000110 	.word	0x20000110

08009614 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2204      	movs	r2, #4
 8009624:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009626:	4b03      	ldr	r3, [pc, #12]	; (8009634 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	20000124 	.word	0x20000124

08009638 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	6039      	str	r1, [r7, #0]
 8009642:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d105      	bne.n	8009656 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	4907      	ldr	r1, [pc, #28]	; (800966c <USBD_FS_ProductStrDescriptor+0x34>)
 800964e:	4808      	ldr	r0, [pc, #32]	; (8009670 <USBD_FS_ProductStrDescriptor+0x38>)
 8009650:	f7ff fe7f 	bl	8009352 <USBD_GetString>
 8009654:	e004      	b.n	8009660 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	4904      	ldr	r1, [pc, #16]	; (800966c <USBD_FS_ProductStrDescriptor+0x34>)
 800965a:	4805      	ldr	r0, [pc, #20]	; (8009670 <USBD_FS_ProductStrDescriptor+0x38>)
 800965c:	f7ff fe79 	bl	8009352 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009660:	4b02      	ldr	r3, [pc, #8]	; (800966c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	200009e4 	.word	0x200009e4
 8009670:	0800a8a8 	.word	0x0800a8a8

08009674 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	4904      	ldr	r1, [pc, #16]	; (8009694 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009684:	4804      	ldr	r0, [pc, #16]	; (8009698 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009686:	f7ff fe64 	bl	8009352 <USBD_GetString>
  return USBD_StrDesc;
 800968a:	4b02      	ldr	r3, [pc, #8]	; (8009694 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	200009e4 	.word	0x200009e4
 8009698:	0800a8bc 	.word	0x0800a8bc

0800969c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4603      	mov	r3, r0
 80096a4:	6039      	str	r1, [r7, #0]
 80096a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	221a      	movs	r2, #26
 80096ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80096ae:	f000 f843 	bl	8009738 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80096b2:	4b02      	ldr	r3, [pc, #8]	; (80096bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20000128 	.word	0x20000128

080096c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	6039      	str	r1, [r7, #0]
 80096ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d105      	bne.n	80096de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	4907      	ldr	r1, [pc, #28]	; (80096f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096d6:	4808      	ldr	r0, [pc, #32]	; (80096f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80096d8:	f7ff fe3b 	bl	8009352 <USBD_GetString>
 80096dc:	e004      	b.n	80096e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	4904      	ldr	r1, [pc, #16]	; (80096f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096e2:	4805      	ldr	r0, [pc, #20]	; (80096f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80096e4:	f7ff fe35 	bl	8009352 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096e8:	4b02      	ldr	r3, [pc, #8]	; (80096f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	200009e4 	.word	0x200009e4
 80096f8:	0800a8d0 	.word	0x0800a8d0

080096fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	6039      	str	r1, [r7, #0]
 8009706:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d105      	bne.n	800971a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	4907      	ldr	r1, [pc, #28]	; (8009730 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009712:	4808      	ldr	r0, [pc, #32]	; (8009734 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009714:	f7ff fe1d 	bl	8009352 <USBD_GetString>
 8009718:	e004      	b.n	8009724 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	4904      	ldr	r1, [pc, #16]	; (8009730 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800971e:	4805      	ldr	r0, [pc, #20]	; (8009734 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009720:	f7ff fe17 	bl	8009352 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009724:	4b02      	ldr	r3, [pc, #8]	; (8009730 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	200009e4 	.word	0x200009e4
 8009734:	0800a8dc 	.word	0x0800a8dc

08009738 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800973e:	4b0f      	ldr	r3, [pc, #60]	; (800977c <Get_SerialNum+0x44>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009744:	4b0e      	ldr	r3, [pc, #56]	; (8009780 <Get_SerialNum+0x48>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800974a:	4b0e      	ldr	r3, [pc, #56]	; (8009784 <Get_SerialNum+0x4c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4413      	add	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d009      	beq.n	8009772 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800975e:	2208      	movs	r2, #8
 8009760:	4909      	ldr	r1, [pc, #36]	; (8009788 <Get_SerialNum+0x50>)
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 f814 	bl	8009790 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009768:	2204      	movs	r2, #4
 800976a:	4908      	ldr	r1, [pc, #32]	; (800978c <Get_SerialNum+0x54>)
 800976c:	68b8      	ldr	r0, [r7, #8]
 800976e:	f000 f80f 	bl	8009790 <IntToUnicode>
  }
}
 8009772:	bf00      	nop
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	1fff7a10 	.word	0x1fff7a10
 8009780:	1fff7a14 	.word	0x1fff7a14
 8009784:	1fff7a18 	.word	0x1fff7a18
 8009788:	2000012a 	.word	0x2000012a
 800978c:	2000013a 	.word	0x2000013a

08009790 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4613      	mov	r3, r2
 800979c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80097a2:	2300      	movs	r3, #0
 80097a4:	75fb      	strb	r3, [r7, #23]
 80097a6:	e027      	b.n	80097f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	0f1b      	lsrs	r3, r3, #28
 80097ac:	2b09      	cmp	r3, #9
 80097ae:	d80b      	bhi.n	80097c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	0f1b      	lsrs	r3, r3, #28
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	4619      	mov	r1, r3
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	440b      	add	r3, r1
 80097c0:	3230      	adds	r2, #48	; 0x30
 80097c2:	b2d2      	uxtb	r2, r2
 80097c4:	701a      	strb	r2, [r3, #0]
 80097c6:	e00a      	b.n	80097de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	0f1b      	lsrs	r3, r3, #28
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	005b      	lsls	r3, r3, #1
 80097d2:	4619      	mov	r1, r3
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	440b      	add	r3, r1
 80097d8:	3237      	adds	r2, #55	; 0x37
 80097da:	b2d2      	uxtb	r2, r2
 80097dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	011b      	lsls	r3, r3, #4
 80097e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	005b      	lsls	r3, r3, #1
 80097e8:	3301      	adds	r3, #1
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	4413      	add	r3, r2
 80097ee:	2200      	movs	r2, #0
 80097f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	3301      	adds	r3, #1
 80097f6:	75fb      	strb	r3, [r7, #23]
 80097f8:	7dfa      	ldrb	r2, [r7, #23]
 80097fa:	79fb      	ldrb	r3, [r7, #7]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d3d3      	bcc.n	80097a8 <IntToUnicode+0x18>
  }
}
 8009800:	bf00      	nop
 8009802:	371c      	adds	r7, #28
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	4603      	mov	r3, r0
 8009814:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8009816:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  HAL_SD_GetCardInfo(&hsd, &SdCard);
 8009832:	490b      	ldr	r1, [pc, #44]	; (8009860 <STORAGE_GetCapacity_FS+0x3c>)
 8009834:	480b      	ldr	r0, [pc, #44]	; (8009864 <STORAGE_GetCapacity_FS+0x40>)
 8009836:	f7fa fb3f 	bl	8003eb8 <HAL_SD_GetCardInfo>
//SDCardInfo.CardCapacity / BLOCK_SIZE
	  *block_num  = SdCard.LogBlockNbr;
 800983a:	4b09      	ldr	r3, [pc, #36]	; (8009860 <STORAGE_GetCapacity_FS+0x3c>)
 800983c:	699a      	ldr	r2, [r3, #24]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	601a      	str	r2, [r3, #0]
	  uint32_t a = SdCard.LogBlockNbr;
 8009842:	4b07      	ldr	r3, [pc, #28]	; (8009860 <STORAGE_GetCapacity_FS+0x3c>)
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	617b      	str	r3, [r7, #20]
	  *block_size = (uint16_t)BLOCK_SIZE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800984e:	801a      	strh	r2, [r3, #0]
	  uint16_t b = BLOCK_SIZE;
 8009850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009854:	827b      	strh	r3, [r7, #18]
  return (USBD_OK);
 8009856:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20000288 	.word	0x20000288
 8009864:	20000204 	.word	0x20000204

08009868 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	4603      	mov	r3, r0
 8009870:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009872:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	4603      	mov	r3, r0
 8009888:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800988a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800988c:	4618      	mov	r0, r3
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af02      	add	r7, sp, #8
 800989e:	60b9      	str	r1, [r7, #8]
 80098a0:	607a      	str	r2, [r7, #4]
 80098a2:	461a      	mov	r2, r3
 80098a4:	4603      	mov	r3, r0
 80098a6:	73fb      	strb	r3, [r7, #15]
 80098a8:	4613      	mov	r3, r2
 80098aa:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
//	memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
	//HAL_SD_ReadBlocks(&hsd, (uint32_t*)buf, (uint64_t)(blk_addr * BLOCK_SIZE), BLOCK_SIZE, blk_len);
	HAL_SD_ReadBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
 80098ac:	89ba      	ldrh	r2, [r7, #12]
 80098ae:	230a      	movs	r3, #10
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	4613      	mov	r3, r2
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	68b9      	ldr	r1, [r7, #8]
 80098b8:	4803      	ldr	r0, [pc, #12]	; (80098c8 <STORAGE_Read_FS+0x30>)
 80098ba:	f7f9 fdc1 	bl	8003440 <HAL_SD_ReadBlocks>
  return (USBD_OK);
 80098be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	20000204 	.word	0x20000204

080098cc <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af02      	add	r7, sp, #8
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	461a      	mov	r2, r3
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]
 80098dc:	4613      	mov	r3, r2
 80098de:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
//	memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
	//HAL_SD_WriteBlocks(&hsd, (uint32_t*)buf, (uint64_t)(blk_addr * BLOCK_SIZE), BLOCK_SIZE, blk_len);
	HAL_SD_WriteBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
 80098e0:	89ba      	ldrh	r2, [r7, #12]
 80098e2:	230a      	movs	r3, #10
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	4613      	mov	r3, r2
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	68b9      	ldr	r1, [r7, #8]
 80098ec:	4803      	ldr	r0, [pc, #12]	; (80098fc <STORAGE_Write_FS+0x30>)
 80098ee:	f7f9 ff9f 	bl	8003830 <HAL_SD_WriteBlocks>
  return (USBD_OK);
 80098f2:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	20000204 	.word	0x20000204

08009900 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8009900:	b480      	push	{r7}
 8009902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8009904:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009906:	4618      	mov	r0, r3
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b08a      	sub	sp, #40	; 0x28
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009918:	f107 0314 	add.w	r3, r7, #20
 800991c:	2200      	movs	r2, #0
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	605a      	str	r2, [r3, #4]
 8009922:	609a      	str	r2, [r3, #8]
 8009924:	60da      	str	r2, [r3, #12]
 8009926:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009930:	d13a      	bne.n	80099a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009932:	2300      	movs	r3, #0
 8009934:	613b      	str	r3, [r7, #16]
 8009936:	4b1e      	ldr	r3, [pc, #120]	; (80099b0 <HAL_PCD_MspInit+0xa0>)
 8009938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993a:	4a1d      	ldr	r2, [pc, #116]	; (80099b0 <HAL_PCD_MspInit+0xa0>)
 800993c:	f043 0301 	orr.w	r3, r3, #1
 8009940:	6313      	str	r3, [r2, #48]	; 0x30
 8009942:	4b1b      	ldr	r3, [pc, #108]	; (80099b0 <HAL_PCD_MspInit+0xa0>)
 8009944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800994e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009954:	2302      	movs	r3, #2
 8009956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009958:	2300      	movs	r3, #0
 800995a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800995c:	2303      	movs	r3, #3
 800995e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009960:	230a      	movs	r3, #10
 8009962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009964:	f107 0314 	add.w	r3, r7, #20
 8009968:	4619      	mov	r1, r3
 800996a:	4812      	ldr	r0, [pc, #72]	; (80099b4 <HAL_PCD_MspInit+0xa4>)
 800996c:	f7f7 fa8c 	bl	8000e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009970:	4b0f      	ldr	r3, [pc, #60]	; (80099b0 <HAL_PCD_MspInit+0xa0>)
 8009972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009974:	4a0e      	ldr	r2, [pc, #56]	; (80099b0 <HAL_PCD_MspInit+0xa0>)
 8009976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800997a:	6353      	str	r3, [r2, #52]	; 0x34
 800997c:	2300      	movs	r3, #0
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	4b0b      	ldr	r3, [pc, #44]	; (80099b0 <HAL_PCD_MspInit+0xa0>)
 8009982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009984:	4a0a      	ldr	r2, [pc, #40]	; (80099b0 <HAL_PCD_MspInit+0xa0>)
 8009986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800998a:	6453      	str	r3, [r2, #68]	; 0x44
 800998c:	4b08      	ldr	r3, [pc, #32]	; (80099b0 <HAL_PCD_MspInit+0xa0>)
 800998e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009994:	60fb      	str	r3, [r7, #12]
 8009996:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009998:	2200      	movs	r2, #0
 800999a:	2100      	movs	r1, #0
 800999c:	2043      	movs	r0, #67	; 0x43
 800999e:	f7f7 fa3c 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80099a2:	2043      	movs	r0, #67	; 0x43
 80099a4:	f7f7 fa55 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099a8:	bf00      	nop
 80099aa:	3728      	adds	r7, #40	; 0x28
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	40023800 	.word	0x40023800
 80099b4:	40020000 	.word	0x40020000

080099b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80099cc:	4619      	mov	r1, r3
 80099ce:	4610      	mov	r0, r2
 80099d0:	f7fe fd3d 	bl	800844e <USBD_LL_SetupStage>
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80099ee:	78fa      	ldrb	r2, [r7, #3]
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	4613      	mov	r3, r2
 80099f4:	00db      	lsls	r3, r3, #3
 80099f6:	1a9b      	subs	r3, r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	440b      	add	r3, r1
 80099fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	78fb      	ldrb	r3, [r7, #3]
 8009a04:	4619      	mov	r1, r3
 8009a06:	f7fe fd75 	bl	80084f4 <USBD_LL_DataOutStage>
}
 8009a0a:	bf00      	nop
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b082      	sub	sp, #8
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009a24:	78fa      	ldrb	r2, [r7, #3]
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	00db      	lsls	r3, r3, #3
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	440b      	add	r3, r1
 8009a32:	3348      	adds	r3, #72	; 0x48
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	f7fe fdbe 	bl	80085ba <USBD_LL_DataInStage>
}
 8009a3e:	bf00      	nop
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fe fec2 	bl	80087de <USBD_LL_SOF>
}
 8009a5a:	bf00      	nop
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d001      	beq.n	8009a7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a76:	f7f6 fe87 	bl	8000788 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a80:	7bfa      	ldrb	r2, [r7, #15]
 8009a82:	4611      	mov	r1, r2
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe fe6f 	bl	8008768 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe fe28 	bl	80086e6 <USBD_LL_Reset>
}
 8009a96:	bf00      	nop
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe fe6a 	bl	8008788 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	6812      	ldr	r2, [r2, #0]
 8009ac2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ac6:	f043 0301 	orr.w	r3, r3, #1
 8009aca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d005      	beq.n	8009ae0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ad4:	4b04      	ldr	r3, [pc, #16]	; (8009ae8 <HAL_PCD_SuspendCallback+0x48>)
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	4a03      	ldr	r2, [pc, #12]	; (8009ae8 <HAL_PCD_SuspendCallback+0x48>)
 8009ada:	f043 0306 	orr.w	r3, r3, #6
 8009ade:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	e000ed00 	.word	0xe000ed00

08009aec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe fe59 	bl	80087b2 <USBD_LL_Resume>
}
 8009b00:	bf00      	nop
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b1a:	78fa      	ldrb	r2, [r7, #3]
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe fe84 	bl	800882c <USBD_LL_IsoOUTIncomplete>
}
 8009b24:	bf00      	nop
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b3e:	78fa      	ldrb	r2, [r7, #3]
 8009b40:	4611      	mov	r1, r2
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe fe65 	bl	8008812 <USBD_LL_IsoINIncomplete>
}
 8009b48:	bf00      	nop
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe fe71 	bl	8008846 <USBD_LL_DevConnected>
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fe6e 	bl	800885c <USBD_LL_DevDisconnected>
}
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d13f      	bne.n	8009c18 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b98:	4a22      	ldr	r2, [pc, #136]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a20      	ldr	r2, [pc, #128]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009ba4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ba8:	4b1e      	ldr	r3, [pc, #120]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009baa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009bae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009bb0:	4b1c      	ldr	r3, [pc, #112]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009bb2:	2206      	movs	r2, #6
 8009bb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009bb6:	4b1b      	ldr	r3, [pc, #108]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009bb8:	2202      	movs	r2, #2
 8009bba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009bbc:	4b19      	ldr	r3, [pc, #100]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bc2:	4b18      	ldr	r3, [pc, #96]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009bc8:	4b16      	ldr	r3, [pc, #88]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009bce:	4b15      	ldr	r3, [pc, #84]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009bd4:	4b13      	ldr	r3, [pc, #76]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009bda:	4b12      	ldr	r3, [pc, #72]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009be0:	4b10      	ldr	r3, [pc, #64]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009be6:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009bec:	480d      	ldr	r0, [pc, #52]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009bee:	f7f7 faf6 	bl	80011de <HAL_PCD_Init>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8009bf8:	f7f6 fdc6 	bl	8000788 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009bfc:	2180      	movs	r1, #128	; 0x80
 8009bfe:	4809      	ldr	r0, [pc, #36]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009c00:	f7f8 fcb5 	bl	800256e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c04:	2240      	movs	r2, #64	; 0x40
 8009c06:	2100      	movs	r1, #0
 8009c08:	4806      	ldr	r0, [pc, #24]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009c0a:	f7f8 fc69 	bl	80024e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c0e:	2280      	movs	r2, #128	; 0x80
 8009c10:	2101      	movs	r1, #1
 8009c12:	4804      	ldr	r0, [pc, #16]	; (8009c24 <USBD_LL_Init+0x9c>)
 8009c14:	f7f8 fc64 	bl	80024e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000be4 	.word	0x20000be4

08009c28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7f7 fbf1 	bl	8001426 <HAL_PCD_Start>
 8009c44:	4603      	mov	r3, r0
 8009c46:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8009c48:	7bfb      	ldrb	r3, [r7, #15]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 f94a 	bl	8009ee4 <USBD_Get_USB_Status>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	4608      	mov	r0, r1
 8009c68:	4611      	mov	r1, r2
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	70fb      	strb	r3, [r7, #3]
 8009c70:	460b      	mov	r3, r1
 8009c72:	70bb      	strb	r3, [r7, #2]
 8009c74:	4613      	mov	r3, r2
 8009c76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c86:	78bb      	ldrb	r3, [r7, #2]
 8009c88:	883a      	ldrh	r2, [r7, #0]
 8009c8a:	78f9      	ldrb	r1, [r7, #3]
 8009c8c:	f7f8 f802 	bl	8001c94 <HAL_PCD_EP_Open>
 8009c90:	4603      	mov	r3, r0
 8009c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 f924 	bl	8009ee4 <USBD_Get_USB_Status>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cc4:	78fa      	ldrb	r2, [r7, #3]
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7f8 f84b 	bl	8001d64 <HAL_PCD_EP_Close>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 f905 	bl	8009ee4 <USBD_Get_USB_Status>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d02:	78fa      	ldrb	r2, [r7, #3]
 8009d04:	4611      	mov	r1, r2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7f8 f9dd 	bl	80020c6 <HAL_PCD_EP_Flush>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 f8e6 	bl	8009ee4 <USBD_Get_USB_Status>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	460b      	mov	r3, r1
 8009d30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d40:	78fa      	ldrb	r2, [r7, #3]
 8009d42:	4611      	mov	r1, r2
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7f8 f904 	bl	8001f52 <HAL_PCD_EP_SetStall>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 f8c7 	bl	8009ee4 <USBD_Get_USB_Status>
 8009d56:	4603      	mov	r3, r0
 8009d58:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d7e:	78fa      	ldrb	r2, [r7, #3]
 8009d80:	4611      	mov	r1, r2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7f8 f949 	bl	800201a <HAL_PCD_EP_ClrStall>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 f8a8 	bl	8009ee4 <USBD_Get_USB_Status>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b085      	sub	sp, #20
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	460b      	mov	r3, r1
 8009dac:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009db4:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009db6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	da0b      	bge.n	8009dd6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009dbe:	78fb      	ldrb	r3, [r7, #3]
 8009dc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dc4:	68f9      	ldr	r1, [r7, #12]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	00db      	lsls	r3, r3, #3
 8009dca:	1a9b      	subs	r3, r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	440b      	add	r3, r1
 8009dd0:	333e      	adds	r3, #62	; 0x3e
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	e00b      	b.n	8009dee <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ddc:	68f9      	ldr	r1, [r7, #12]
 8009dde:	4613      	mov	r3, r2
 8009de0:	00db      	lsls	r3, r3, #3
 8009de2:	1a9b      	subs	r3, r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	440b      	add	r3, r1
 8009de8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009dec:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	460b      	mov	r3, r1
 8009e04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e14:	78fa      	ldrb	r2, [r7, #3]
 8009e16:	4611      	mov	r1, r2
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7f7 ff16 	bl	8001c4a <HAL_PCD_SetAddress>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 f85d 	bl	8009ee4 <USBD_Get_USB_Status>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	607a      	str	r2, [r7, #4]
 8009e42:	603b      	str	r3, [r7, #0]
 8009e44:	460b      	mov	r3, r1
 8009e46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e56:	7af9      	ldrb	r1, [r7, #11]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	f7f8 f82f 	bl	8001ebe <HAL_PCD_EP_Transmit>
 8009e60:	4603      	mov	r3, r0
 8009e62:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 f83c 	bl	8009ee4 <USBD_Get_USB_Status>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009e70:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b086      	sub	sp, #24
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	603b      	str	r3, [r7, #0]
 8009e86:	460b      	mov	r3, r1
 8009e88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e98:	7af9      	ldrb	r1, [r7, #11]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	f7f7 ffab 	bl	8001df8 <HAL_PCD_EP_Receive>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 f81b 	bl	8009ee4 <USBD_Get_USB_Status>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009eb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3718      	adds	r7, #24
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ece:	78fa      	ldrb	r2, [r7, #3]
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7f7 ffdb 	bl	8001e8e <HAL_PCD_EP_GetRxCount>
 8009ed8:	4603      	mov	r3, r0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	4603      	mov	r3, r0
 8009eec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ef2:	79fb      	ldrb	r3, [r7, #7]
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d817      	bhi.n	8009f28 <USBD_Get_USB_Status+0x44>
 8009ef8:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <USBD_Get_USB_Status+0x1c>)
 8009efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efe:	bf00      	nop
 8009f00:	08009f11 	.word	0x08009f11
 8009f04:	08009f17 	.word	0x08009f17
 8009f08:	08009f1d 	.word	0x08009f1d
 8009f0c:	08009f23 	.word	0x08009f23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f10:	2300      	movs	r3, #0
 8009f12:	73fb      	strb	r3, [r7, #15]
    break;
 8009f14:	e00b      	b.n	8009f2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f16:	2303      	movs	r3, #3
 8009f18:	73fb      	strb	r3, [r7, #15]
    break;
 8009f1a:	e008      	b.n	8009f2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f20:	e005      	b.n	8009f2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f22:	2303      	movs	r3, #3
 8009f24:	73fb      	strb	r3, [r7, #15]
    break;
 8009f26:	e002      	b.n	8009f2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2c:	bf00      	nop
  }
  return usb_status;
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <__errno>:
 8009f3c:	4b01      	ldr	r3, [pc, #4]	; (8009f44 <__errno+0x8>)
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20000164 	.word	0x20000164

08009f48 <_fopen_r>:
 8009f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f4a:	460f      	mov	r7, r1
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	aa01      	add	r2, sp, #4
 8009f50:	4605      	mov	r5, r0
 8009f52:	f000 fc01 	bl	800a758 <__sflags>
 8009f56:	4606      	mov	r6, r0
 8009f58:	b918      	cbnz	r0, 8009f62 <_fopen_r+0x1a>
 8009f5a:	2400      	movs	r4, #0
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	b003      	add	sp, #12
 8009f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f62:	4628      	mov	r0, r5
 8009f64:	f000 fbba 	bl	800a6dc <__sfp>
 8009f68:	4604      	mov	r4, r0
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d0f5      	beq.n	8009f5a <_fopen_r+0x12>
 8009f6e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8009f72:	9a01      	ldr	r2, [sp, #4]
 8009f74:	4639      	mov	r1, r7
 8009f76:	4628      	mov	r0, r5
 8009f78:	f000 fa08 	bl	800a38c <_open_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	da06      	bge.n	8009f8e <_fopen_r+0x46>
 8009f80:	2500      	movs	r5, #0
 8009f82:	f000 fbe7 	bl	800a754 <__sfp_lock_acquire>
 8009f86:	81a5      	strh	r5, [r4, #12]
 8009f88:	f000 fbe5 	bl	800a756 <__sfp_lock_release>
 8009f8c:	e7e5      	b.n	8009f5a <_fopen_r+0x12>
 8009f8e:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <_fopen_r+0x70>)
 8009f90:	6263      	str	r3, [r4, #36]	; 0x24
 8009f92:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <_fopen_r+0x74>)
 8009f94:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f96:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <_fopen_r+0x78>)
 8009f98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f9a:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <_fopen_r+0x7c>)
 8009f9c:	6323      	str	r3, [r4, #48]	; 0x30
 8009f9e:	05f3      	lsls	r3, r6, #23
 8009fa0:	81e0      	strh	r0, [r4, #14]
 8009fa2:	81a6      	strh	r6, [r4, #12]
 8009fa4:	6224      	str	r4, [r4, #32]
 8009fa6:	d5d9      	bpl.n	8009f5c <_fopen_r+0x14>
 8009fa8:	2302      	movs	r3, #2
 8009faa:	2200      	movs	r2, #0
 8009fac:	4621      	mov	r1, r4
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f000 f812 	bl	8009fd8 <_fseek_r>
 8009fb4:	e7d2      	b.n	8009f5c <_fopen_r+0x14>
 8009fb6:	bf00      	nop
 8009fb8:	0800a3d1 	.word	0x0800a3d1
 8009fbc:	0800a3f3 	.word	0x0800a3f3
 8009fc0:	0800a42b 	.word	0x0800a42b
 8009fc4:	0800a44f 	.word	0x0800a44f

08009fc8 <fopen>:
 8009fc8:	4b02      	ldr	r3, [pc, #8]	; (8009fd4 <fopen+0xc>)
 8009fca:	460a      	mov	r2, r1
 8009fcc:	4601      	mov	r1, r0
 8009fce:	6818      	ldr	r0, [r3, #0]
 8009fd0:	f7ff bfba 	b.w	8009f48 <_fopen_r>
 8009fd4:	20000164 	.word	0x20000164

08009fd8 <_fseek_r>:
 8009fd8:	f000 b800 	b.w	8009fdc <_fseeko_r>

08009fdc <_fseeko_r>:
 8009fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	4691      	mov	r9, r2
 8009fe4:	461e      	mov	r6, r3
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	b118      	cbz	r0, 8009ff2 <_fseeko_r+0x16>
 8009fea:	6983      	ldr	r3, [r0, #24]
 8009fec:	b90b      	cbnz	r3, 8009ff2 <_fseeko_r+0x16>
 8009fee:	f000 fb45 	bl	800a67c <__sinit>
 8009ff2:	4b3f      	ldr	r3, [pc, #252]	; (800a0f0 <_fseeko_r+0x114>)
 8009ff4:	429c      	cmp	r4, r3
 8009ff6:	d112      	bne.n	800a01e <_fseeko_r+0x42>
 8009ff8:	686c      	ldr	r4, [r5, #4]
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800a000:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800a004:	d103      	bne.n	800a00e <_fseeko_r+0x32>
 800a006:	4621      	mov	r1, r4
 800a008:	4628      	mov	r0, r5
 800a00a:	f000 facd 	bl	800a5a8 <_fflush_r>
 800a00e:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800a012:	f1b8 0f00 	cmp.w	r8, #0
 800a016:	d10c      	bne.n	800a032 <_fseeko_r+0x56>
 800a018:	231d      	movs	r3, #29
 800a01a:	602b      	str	r3, [r5, #0]
 800a01c:	e057      	b.n	800a0ce <_fseeko_r+0xf2>
 800a01e:	4b35      	ldr	r3, [pc, #212]	; (800a0f4 <_fseeko_r+0x118>)
 800a020:	429c      	cmp	r4, r3
 800a022:	d101      	bne.n	800a028 <_fseeko_r+0x4c>
 800a024:	68ac      	ldr	r4, [r5, #8]
 800a026:	e7e8      	b.n	8009ffa <_fseeko_r+0x1e>
 800a028:	4b33      	ldr	r3, [pc, #204]	; (800a0f8 <_fseeko_r+0x11c>)
 800a02a:	429c      	cmp	r4, r3
 800a02c:	bf08      	it	eq
 800a02e:	68ec      	ldreq	r4, [r5, #12]
 800a030:	e7e3      	b.n	8009ffa <_fseeko_r+0x1e>
 800a032:	2e01      	cmp	r6, #1
 800a034:	d030      	beq.n	800a098 <_fseeko_r+0xbc>
 800a036:	2e02      	cmp	r6, #2
 800a038:	d001      	beq.n	800a03e <_fseeko_r+0x62>
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	d155      	bne.n	800a0ea <_fseeko_r+0x10e>
 800a03e:	6923      	ldr	r3, [r4, #16]
 800a040:	b91b      	cbnz	r3, 800a04a <_fseeko_r+0x6e>
 800a042:	4621      	mov	r1, r4
 800a044:	4628      	mov	r0, r5
 800a046:	f000 f8a1 	bl	800a18c <__smakebuf_r>
 800a04a:	4621      	mov	r1, r4
 800a04c:	4628      	mov	r0, r5
 800a04e:	f000 faab 	bl	800a5a8 <_fflush_r>
 800a052:	4607      	mov	r7, r0
 800a054:	2800      	cmp	r0, #0
 800a056:	d13a      	bne.n	800a0ce <_fseeko_r+0xf2>
 800a058:	4633      	mov	r3, r6
 800a05a:	464a      	mov	r2, r9
 800a05c:	6a21      	ldr	r1, [r4, #32]
 800a05e:	4628      	mov	r0, r5
 800a060:	47c0      	blx	r8
 800a062:	3001      	adds	r0, #1
 800a064:	d033      	beq.n	800a0ce <_fseeko_r+0xf2>
 800a066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a068:	b141      	cbz	r1, 800a07c <_fseeko_r+0xa0>
 800a06a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a06e:	4299      	cmp	r1, r3
 800a070:	d002      	beq.n	800a078 <_fseeko_r+0x9c>
 800a072:	4628      	mov	r0, r5
 800a074:	f000 f8e2 	bl	800a23c <_free_r>
 800a078:	2300      	movs	r3, #0
 800a07a:	6363      	str	r3, [r4, #52]	; 0x34
 800a07c:	6923      	ldr	r3, [r4, #16]
 800a07e:	6023      	str	r3, [r4, #0]
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	2100      	movs	r1, #0
 800a084:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800a088:	6061      	str	r1, [r4, #4]
 800a08a:	81a3      	strh	r3, [r4, #12]
 800a08c:	2208      	movs	r2, #8
 800a08e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a092:	f000 f8cb 	bl	800a22c <memset>
 800a096:	e01c      	b.n	800a0d2 <_fseeko_r+0xf6>
 800a098:	4621      	mov	r1, r4
 800a09a:	4628      	mov	r0, r5
 800a09c:	f000 fa84 	bl	800a5a8 <_fflush_r>
 800a0a0:	89a2      	ldrh	r2, [r4, #12]
 800a0a2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0a6:	d00c      	beq.n	800a0c2 <_fseeko_r+0xe6>
 800a0a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	075a      	lsls	r2, r3, #29
 800a0ae:	d513      	bpl.n	800a0d8 <_fseeko_r+0xfc>
 800a0b0:	6863      	ldr	r3, [r4, #4]
 800a0b2:	1ac0      	subs	r0, r0, r3
 800a0b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0b6:	b10b      	cbz	r3, 800a0bc <_fseeko_r+0xe0>
 800a0b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0ba:	1ac0      	subs	r0, r0, r3
 800a0bc:	4481      	add	r9, r0
 800a0be:	2600      	movs	r6, #0
 800a0c0:	e7bd      	b.n	800a03e <_fseeko_r+0x62>
 800a0c2:	6a21      	ldr	r1, [r4, #32]
 800a0c4:	4633      	mov	r3, r6
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	47c0      	blx	r8
 800a0ca:	1c41      	adds	r1, r0, #1
 800a0cc:	d1ed      	bne.n	800a0aa <_fseeko_r+0xce>
 800a0ce:	f04f 37ff 	mov.w	r7, #4294967295
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0d8:	071b      	lsls	r3, r3, #28
 800a0da:	d5ef      	bpl.n	800a0bc <_fseeko_r+0xe0>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	6922      	ldr	r2, [r4, #16]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d0eb      	beq.n	800a0bc <_fseeko_r+0xe0>
 800a0e4:	1a9b      	subs	r3, r3, r2
 800a0e6:	4418      	add	r0, r3
 800a0e8:	e7e8      	b.n	800a0bc <_fseeko_r+0xe0>
 800a0ea:	2316      	movs	r3, #22
 800a0ec:	e795      	b.n	800a01a <_fseeko_r+0x3e>
 800a0ee:	bf00      	nop
 800a0f0:	0800a958 	.word	0x0800a958
 800a0f4:	0800a978 	.word	0x0800a978
 800a0f8:	0800a938 	.word	0x0800a938

0800a0fc <__libc_init_array>:
 800a0fc:	b570      	push	{r4, r5, r6, lr}
 800a0fe:	4e0d      	ldr	r6, [pc, #52]	; (800a134 <__libc_init_array+0x38>)
 800a100:	4c0d      	ldr	r4, [pc, #52]	; (800a138 <__libc_init_array+0x3c>)
 800a102:	1ba4      	subs	r4, r4, r6
 800a104:	10a4      	asrs	r4, r4, #2
 800a106:	2500      	movs	r5, #0
 800a108:	42a5      	cmp	r5, r4
 800a10a:	d109      	bne.n	800a120 <__libc_init_array+0x24>
 800a10c:	4e0b      	ldr	r6, [pc, #44]	; (800a13c <__libc_init_array+0x40>)
 800a10e:	4c0c      	ldr	r4, [pc, #48]	; (800a140 <__libc_init_array+0x44>)
 800a110:	f000 fbbe 	bl	800a890 <_init>
 800a114:	1ba4      	subs	r4, r4, r6
 800a116:	10a4      	asrs	r4, r4, #2
 800a118:	2500      	movs	r5, #0
 800a11a:	42a5      	cmp	r5, r4
 800a11c:	d105      	bne.n	800a12a <__libc_init_array+0x2e>
 800a11e:	bd70      	pop	{r4, r5, r6, pc}
 800a120:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a124:	4798      	blx	r3
 800a126:	3501      	adds	r5, #1
 800a128:	e7ee      	b.n	800a108 <__libc_init_array+0xc>
 800a12a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a12e:	4798      	blx	r3
 800a130:	3501      	adds	r5, #1
 800a132:	e7f2      	b.n	800a11a <__libc_init_array+0x1e>
 800a134:	0800a9a0 	.word	0x0800a9a0
 800a138:	0800a9a0 	.word	0x0800a9a0
 800a13c:	0800a9a0 	.word	0x0800a9a0
 800a140:	0800a9a4 	.word	0x0800a9a4

0800a144 <__swhatbuf_r>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	460e      	mov	r6, r1
 800a148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a14c:	2900      	cmp	r1, #0
 800a14e:	b096      	sub	sp, #88	; 0x58
 800a150:	4614      	mov	r4, r2
 800a152:	461d      	mov	r5, r3
 800a154:	da07      	bge.n	800a166 <__swhatbuf_r+0x22>
 800a156:	2300      	movs	r3, #0
 800a158:	602b      	str	r3, [r5, #0]
 800a15a:	89b3      	ldrh	r3, [r6, #12]
 800a15c:	061a      	lsls	r2, r3, #24
 800a15e:	d410      	bmi.n	800a182 <__swhatbuf_r+0x3e>
 800a160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a164:	e00e      	b.n	800a184 <__swhatbuf_r+0x40>
 800a166:	466a      	mov	r2, sp
 800a168:	f000 fb2c 	bl	800a7c4 <_fstat_r>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	dbf2      	blt.n	800a156 <__swhatbuf_r+0x12>
 800a170:	9a01      	ldr	r2, [sp, #4]
 800a172:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a176:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a17a:	425a      	negs	r2, r3
 800a17c:	415a      	adcs	r2, r3
 800a17e:	602a      	str	r2, [r5, #0]
 800a180:	e7ee      	b.n	800a160 <__swhatbuf_r+0x1c>
 800a182:	2340      	movs	r3, #64	; 0x40
 800a184:	2000      	movs	r0, #0
 800a186:	6023      	str	r3, [r4, #0]
 800a188:	b016      	add	sp, #88	; 0x58
 800a18a:	bd70      	pop	{r4, r5, r6, pc}

0800a18c <__smakebuf_r>:
 800a18c:	898b      	ldrh	r3, [r1, #12]
 800a18e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a190:	079d      	lsls	r5, r3, #30
 800a192:	4606      	mov	r6, r0
 800a194:	460c      	mov	r4, r1
 800a196:	d507      	bpl.n	800a1a8 <__smakebuf_r+0x1c>
 800a198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	6123      	str	r3, [r4, #16]
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	6163      	str	r3, [r4, #20]
 800a1a4:	b002      	add	sp, #8
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}
 800a1a8:	ab01      	add	r3, sp, #4
 800a1aa:	466a      	mov	r2, sp
 800a1ac:	f7ff ffca 	bl	800a144 <__swhatbuf_r>
 800a1b0:	9900      	ldr	r1, [sp, #0]
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f000 f88f 	bl	800a2d8 <_malloc_r>
 800a1ba:	b948      	cbnz	r0, 800a1d0 <__smakebuf_r+0x44>
 800a1bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c0:	059a      	lsls	r2, r3, #22
 800a1c2:	d4ef      	bmi.n	800a1a4 <__smakebuf_r+0x18>
 800a1c4:	f023 0303 	bic.w	r3, r3, #3
 800a1c8:	f043 0302 	orr.w	r3, r3, #2
 800a1cc:	81a3      	strh	r3, [r4, #12]
 800a1ce:	e7e3      	b.n	800a198 <__smakebuf_r+0xc>
 800a1d0:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <__smakebuf_r+0x7c>)
 800a1d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	6020      	str	r0, [r4, #0]
 800a1d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1dc:	81a3      	strh	r3, [r4, #12]
 800a1de:	9b00      	ldr	r3, [sp, #0]
 800a1e0:	6163      	str	r3, [r4, #20]
 800a1e2:	9b01      	ldr	r3, [sp, #4]
 800a1e4:	6120      	str	r0, [r4, #16]
 800a1e6:	b15b      	cbz	r3, 800a200 <__smakebuf_r+0x74>
 800a1e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f000 fb19 	bl	800a824 <_isatty_r>
 800a1f2:	b128      	cbz	r0, 800a200 <__smakebuf_r+0x74>
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	f023 0303 	bic.w	r3, r3, #3
 800a1fa:	f043 0301 	orr.w	r3, r3, #1
 800a1fe:	81a3      	strh	r3, [r4, #12]
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	431d      	orrs	r5, r3
 800a204:	81a5      	strh	r5, [r4, #12]
 800a206:	e7cd      	b.n	800a1a4 <__smakebuf_r+0x18>
 800a208:	0800a645 	.word	0x0800a645

0800a20c <malloc>:
 800a20c:	4b02      	ldr	r3, [pc, #8]	; (800a218 <malloc+0xc>)
 800a20e:	4601      	mov	r1, r0
 800a210:	6818      	ldr	r0, [r3, #0]
 800a212:	f000 b861 	b.w	800a2d8 <_malloc_r>
 800a216:	bf00      	nop
 800a218:	20000164 	.word	0x20000164

0800a21c <free>:
 800a21c:	4b02      	ldr	r3, [pc, #8]	; (800a228 <free+0xc>)
 800a21e:	4601      	mov	r1, r0
 800a220:	6818      	ldr	r0, [r3, #0]
 800a222:	f000 b80b 	b.w	800a23c <_free_r>
 800a226:	bf00      	nop
 800a228:	20000164 	.word	0x20000164

0800a22c <memset>:
 800a22c:	4402      	add	r2, r0
 800a22e:	4603      	mov	r3, r0
 800a230:	4293      	cmp	r3, r2
 800a232:	d100      	bne.n	800a236 <memset+0xa>
 800a234:	4770      	bx	lr
 800a236:	f803 1b01 	strb.w	r1, [r3], #1
 800a23a:	e7f9      	b.n	800a230 <memset+0x4>

0800a23c <_free_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4605      	mov	r5, r0
 800a240:	2900      	cmp	r1, #0
 800a242:	d045      	beq.n	800a2d0 <_free_r+0x94>
 800a244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a248:	1f0c      	subs	r4, r1, #4
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	bfb8      	it	lt
 800a24e:	18e4      	addlt	r4, r4, r3
 800a250:	f000 fb0a 	bl	800a868 <__malloc_lock>
 800a254:	4a1f      	ldr	r2, [pc, #124]	; (800a2d4 <_free_r+0x98>)
 800a256:	6813      	ldr	r3, [r2, #0]
 800a258:	4610      	mov	r0, r2
 800a25a:	b933      	cbnz	r3, 800a26a <_free_r+0x2e>
 800a25c:	6063      	str	r3, [r4, #4]
 800a25e:	6014      	str	r4, [r2, #0]
 800a260:	4628      	mov	r0, r5
 800a262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a266:	f000 bb00 	b.w	800a86a <__malloc_unlock>
 800a26a:	42a3      	cmp	r3, r4
 800a26c:	d90c      	bls.n	800a288 <_free_r+0x4c>
 800a26e:	6821      	ldr	r1, [r4, #0]
 800a270:	1862      	adds	r2, r4, r1
 800a272:	4293      	cmp	r3, r2
 800a274:	bf04      	itt	eq
 800a276:	681a      	ldreq	r2, [r3, #0]
 800a278:	685b      	ldreq	r3, [r3, #4]
 800a27a:	6063      	str	r3, [r4, #4]
 800a27c:	bf04      	itt	eq
 800a27e:	1852      	addeq	r2, r2, r1
 800a280:	6022      	streq	r2, [r4, #0]
 800a282:	6004      	str	r4, [r0, #0]
 800a284:	e7ec      	b.n	800a260 <_free_r+0x24>
 800a286:	4613      	mov	r3, r2
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	b10a      	cbz	r2, 800a290 <_free_r+0x54>
 800a28c:	42a2      	cmp	r2, r4
 800a28e:	d9fa      	bls.n	800a286 <_free_r+0x4a>
 800a290:	6819      	ldr	r1, [r3, #0]
 800a292:	1858      	adds	r0, r3, r1
 800a294:	42a0      	cmp	r0, r4
 800a296:	d10b      	bne.n	800a2b0 <_free_r+0x74>
 800a298:	6820      	ldr	r0, [r4, #0]
 800a29a:	4401      	add	r1, r0
 800a29c:	1858      	adds	r0, r3, r1
 800a29e:	4282      	cmp	r2, r0
 800a2a0:	6019      	str	r1, [r3, #0]
 800a2a2:	d1dd      	bne.n	800a260 <_free_r+0x24>
 800a2a4:	6810      	ldr	r0, [r2, #0]
 800a2a6:	6852      	ldr	r2, [r2, #4]
 800a2a8:	605a      	str	r2, [r3, #4]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	6019      	str	r1, [r3, #0]
 800a2ae:	e7d7      	b.n	800a260 <_free_r+0x24>
 800a2b0:	d902      	bls.n	800a2b8 <_free_r+0x7c>
 800a2b2:	230c      	movs	r3, #12
 800a2b4:	602b      	str	r3, [r5, #0]
 800a2b6:	e7d3      	b.n	800a260 <_free_r+0x24>
 800a2b8:	6820      	ldr	r0, [r4, #0]
 800a2ba:	1821      	adds	r1, r4, r0
 800a2bc:	428a      	cmp	r2, r1
 800a2be:	bf04      	itt	eq
 800a2c0:	6811      	ldreq	r1, [r2, #0]
 800a2c2:	6852      	ldreq	r2, [r2, #4]
 800a2c4:	6062      	str	r2, [r4, #4]
 800a2c6:	bf04      	itt	eq
 800a2c8:	1809      	addeq	r1, r1, r0
 800a2ca:	6021      	streq	r1, [r4, #0]
 800a2cc:	605c      	str	r4, [r3, #4]
 800a2ce:	e7c7      	b.n	800a260 <_free_r+0x24>
 800a2d0:	bd38      	pop	{r3, r4, r5, pc}
 800a2d2:	bf00      	nop
 800a2d4:	200001f8 	.word	0x200001f8

0800a2d8 <_malloc_r>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	1ccd      	adds	r5, r1, #3
 800a2dc:	f025 0503 	bic.w	r5, r5, #3
 800a2e0:	3508      	adds	r5, #8
 800a2e2:	2d0c      	cmp	r5, #12
 800a2e4:	bf38      	it	cc
 800a2e6:	250c      	movcc	r5, #12
 800a2e8:	2d00      	cmp	r5, #0
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	db01      	blt.n	800a2f2 <_malloc_r+0x1a>
 800a2ee:	42a9      	cmp	r1, r5
 800a2f0:	d903      	bls.n	800a2fa <_malloc_r+0x22>
 800a2f2:	230c      	movs	r3, #12
 800a2f4:	6033      	str	r3, [r6, #0]
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	bd70      	pop	{r4, r5, r6, pc}
 800a2fa:	f000 fab5 	bl	800a868 <__malloc_lock>
 800a2fe:	4a21      	ldr	r2, [pc, #132]	; (800a384 <_malloc_r+0xac>)
 800a300:	6814      	ldr	r4, [r2, #0]
 800a302:	4621      	mov	r1, r4
 800a304:	b991      	cbnz	r1, 800a32c <_malloc_r+0x54>
 800a306:	4c20      	ldr	r4, [pc, #128]	; (800a388 <_malloc_r+0xb0>)
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	b91b      	cbnz	r3, 800a314 <_malloc_r+0x3c>
 800a30c:	4630      	mov	r0, r6
 800a30e:	f000 f84f 	bl	800a3b0 <_sbrk_r>
 800a312:	6020      	str	r0, [r4, #0]
 800a314:	4629      	mov	r1, r5
 800a316:	4630      	mov	r0, r6
 800a318:	f000 f84a 	bl	800a3b0 <_sbrk_r>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d124      	bne.n	800a36a <_malloc_r+0x92>
 800a320:	230c      	movs	r3, #12
 800a322:	6033      	str	r3, [r6, #0]
 800a324:	4630      	mov	r0, r6
 800a326:	f000 faa0 	bl	800a86a <__malloc_unlock>
 800a32a:	e7e4      	b.n	800a2f6 <_malloc_r+0x1e>
 800a32c:	680b      	ldr	r3, [r1, #0]
 800a32e:	1b5b      	subs	r3, r3, r5
 800a330:	d418      	bmi.n	800a364 <_malloc_r+0x8c>
 800a332:	2b0b      	cmp	r3, #11
 800a334:	d90f      	bls.n	800a356 <_malloc_r+0x7e>
 800a336:	600b      	str	r3, [r1, #0]
 800a338:	50cd      	str	r5, [r1, r3]
 800a33a:	18cc      	adds	r4, r1, r3
 800a33c:	4630      	mov	r0, r6
 800a33e:	f000 fa94 	bl	800a86a <__malloc_unlock>
 800a342:	f104 000b 	add.w	r0, r4, #11
 800a346:	1d23      	adds	r3, r4, #4
 800a348:	f020 0007 	bic.w	r0, r0, #7
 800a34c:	1ac3      	subs	r3, r0, r3
 800a34e:	d0d3      	beq.n	800a2f8 <_malloc_r+0x20>
 800a350:	425a      	negs	r2, r3
 800a352:	50e2      	str	r2, [r4, r3]
 800a354:	e7d0      	b.n	800a2f8 <_malloc_r+0x20>
 800a356:	428c      	cmp	r4, r1
 800a358:	684b      	ldr	r3, [r1, #4]
 800a35a:	bf16      	itet	ne
 800a35c:	6063      	strne	r3, [r4, #4]
 800a35e:	6013      	streq	r3, [r2, #0]
 800a360:	460c      	movne	r4, r1
 800a362:	e7eb      	b.n	800a33c <_malloc_r+0x64>
 800a364:	460c      	mov	r4, r1
 800a366:	6849      	ldr	r1, [r1, #4]
 800a368:	e7cc      	b.n	800a304 <_malloc_r+0x2c>
 800a36a:	1cc4      	adds	r4, r0, #3
 800a36c:	f024 0403 	bic.w	r4, r4, #3
 800a370:	42a0      	cmp	r0, r4
 800a372:	d005      	beq.n	800a380 <_malloc_r+0xa8>
 800a374:	1a21      	subs	r1, r4, r0
 800a376:	4630      	mov	r0, r6
 800a378:	f000 f81a 	bl	800a3b0 <_sbrk_r>
 800a37c:	3001      	adds	r0, #1
 800a37e:	d0cf      	beq.n	800a320 <_malloc_r+0x48>
 800a380:	6025      	str	r5, [r4, #0]
 800a382:	e7db      	b.n	800a33c <_malloc_r+0x64>
 800a384:	200001f8 	.word	0x200001f8
 800a388:	200001fc 	.word	0x200001fc

0800a38c <_open_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4c07      	ldr	r4, [pc, #28]	; (800a3ac <_open_r+0x20>)
 800a390:	4605      	mov	r5, r0
 800a392:	4608      	mov	r0, r1
 800a394:	4611      	mov	r1, r2
 800a396:	2200      	movs	r2, #0
 800a398:	6022      	str	r2, [r4, #0]
 800a39a:	461a      	mov	r2, r3
 800a39c:	f7f6 fb53 	bl	8000a46 <_open>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d102      	bne.n	800a3aa <_open_r+0x1e>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	b103      	cbz	r3, 800a3aa <_open_r+0x1e>
 800a3a8:	602b      	str	r3, [r5, #0]
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	20000fec 	.word	0x20000fec

0800a3b0 <_sbrk_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	4c06      	ldr	r4, [pc, #24]	; (800a3cc <_sbrk_r+0x1c>)
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	6023      	str	r3, [r4, #0]
 800a3bc:	f7f6 fb52 	bl	8000a64 <_sbrk>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_sbrk_r+0x1a>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_sbrk_r+0x1a>
 800a3c8:	602b      	str	r3, [r5, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	20000fec 	.word	0x20000fec

0800a3d0 <__sread>:
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d8:	f000 fa48 	bl	800a86c <_read_r>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	bfab      	itete	ge
 800a3e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3e4:	181b      	addge	r3, r3, r0
 800a3e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3ea:	bfac      	ite	ge
 800a3ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ee:	81a3      	strhlt	r3, [r4, #12]
 800a3f0:	bd10      	pop	{r4, pc}

0800a3f2 <__swrite>:
 800a3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f6:	461f      	mov	r7, r3
 800a3f8:	898b      	ldrh	r3, [r1, #12]
 800a3fa:	05db      	lsls	r3, r3, #23
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	460c      	mov	r4, r1
 800a400:	4616      	mov	r6, r2
 800a402:	d505      	bpl.n	800a410 <__swrite+0x1e>
 800a404:	2302      	movs	r3, #2
 800a406:	2200      	movs	r2, #0
 800a408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a40c:	f000 fa1a 	bl	800a844 <_lseek_r>
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a41a:	81a3      	strh	r3, [r4, #12]
 800a41c:	4632      	mov	r2, r6
 800a41e:	463b      	mov	r3, r7
 800a420:	4628      	mov	r0, r5
 800a422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a426:	f000 b817 	b.w	800a458 <_write_r>

0800a42a <__sseek>:
 800a42a:	b510      	push	{r4, lr}
 800a42c:	460c      	mov	r4, r1
 800a42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a432:	f000 fa07 	bl	800a844 <_lseek_r>
 800a436:	1c43      	adds	r3, r0, #1
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	bf15      	itete	ne
 800a43c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a43e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a446:	81a3      	strheq	r3, [r4, #12]
 800a448:	bf18      	it	ne
 800a44a:	81a3      	strhne	r3, [r4, #12]
 800a44c:	bd10      	pop	{r4, pc}

0800a44e <__sclose>:
 800a44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a452:	f000 b813 	b.w	800a47c <_close_r>
	...

0800a458 <_write_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4c07      	ldr	r4, [pc, #28]	; (800a478 <_write_r+0x20>)
 800a45c:	4605      	mov	r5, r0
 800a45e:	4608      	mov	r0, r1
 800a460:	4611      	mov	r1, r2
 800a462:	2200      	movs	r2, #0
 800a464:	6022      	str	r2, [r4, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	f7f6 fa9d 	bl	80009a6 <_write>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_write_r+0x1e>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	b103      	cbz	r3, 800a476 <_write_r+0x1e>
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20000fec 	.word	0x20000fec

0800a47c <_close_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4c06      	ldr	r4, [pc, #24]	; (800a498 <_close_r+0x1c>)
 800a480:	2300      	movs	r3, #0
 800a482:	4605      	mov	r5, r0
 800a484:	4608      	mov	r0, r1
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	f7f6 faa9 	bl	80009de <_close>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_close_r+0x1a>
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	b103      	cbz	r3, 800a496 <_close_r+0x1a>
 800a494:	602b      	str	r3, [r5, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	20000fec 	.word	0x20000fec

0800a49c <__sflush_r>:
 800a49c:	898a      	ldrh	r2, [r1, #12]
 800a49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	0710      	lsls	r0, r2, #28
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	d458      	bmi.n	800a55c <__sflush_r+0xc0>
 800a4aa:	684b      	ldr	r3, [r1, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	dc05      	bgt.n	800a4bc <__sflush_r+0x20>
 800a4b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	dc02      	bgt.n	800a4bc <__sflush_r+0x20>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4be:	2e00      	cmp	r6, #0
 800a4c0:	d0f9      	beq.n	800a4b6 <__sflush_r+0x1a>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4c8:	682f      	ldr	r7, [r5, #0]
 800a4ca:	6a21      	ldr	r1, [r4, #32]
 800a4cc:	602b      	str	r3, [r5, #0]
 800a4ce:	d032      	beq.n	800a536 <__sflush_r+0x9a>
 800a4d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	075a      	lsls	r2, r3, #29
 800a4d6:	d505      	bpl.n	800a4e4 <__sflush_r+0x48>
 800a4d8:	6863      	ldr	r3, [r4, #4]
 800a4da:	1ac0      	subs	r0, r0, r3
 800a4dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4de:	b10b      	cbz	r3, 800a4e4 <__sflush_r+0x48>
 800a4e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4e2:	1ac0      	subs	r0, r0, r3
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ea:	6a21      	ldr	r1, [r4, #32]
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	47b0      	blx	r6
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	89a3      	ldrh	r3, [r4, #12]
 800a4f4:	d106      	bne.n	800a504 <__sflush_r+0x68>
 800a4f6:	6829      	ldr	r1, [r5, #0]
 800a4f8:	291d      	cmp	r1, #29
 800a4fa:	d848      	bhi.n	800a58e <__sflush_r+0xf2>
 800a4fc:	4a29      	ldr	r2, [pc, #164]	; (800a5a4 <__sflush_r+0x108>)
 800a4fe:	40ca      	lsrs	r2, r1
 800a500:	07d6      	lsls	r6, r2, #31
 800a502:	d544      	bpl.n	800a58e <__sflush_r+0xf2>
 800a504:	2200      	movs	r2, #0
 800a506:	6062      	str	r2, [r4, #4]
 800a508:	04d9      	lsls	r1, r3, #19
 800a50a:	6922      	ldr	r2, [r4, #16]
 800a50c:	6022      	str	r2, [r4, #0]
 800a50e:	d504      	bpl.n	800a51a <__sflush_r+0x7e>
 800a510:	1c42      	adds	r2, r0, #1
 800a512:	d101      	bne.n	800a518 <__sflush_r+0x7c>
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	b903      	cbnz	r3, 800a51a <__sflush_r+0x7e>
 800a518:	6560      	str	r0, [r4, #84]	; 0x54
 800a51a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a51c:	602f      	str	r7, [r5, #0]
 800a51e:	2900      	cmp	r1, #0
 800a520:	d0c9      	beq.n	800a4b6 <__sflush_r+0x1a>
 800a522:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a526:	4299      	cmp	r1, r3
 800a528:	d002      	beq.n	800a530 <__sflush_r+0x94>
 800a52a:	4628      	mov	r0, r5
 800a52c:	f7ff fe86 	bl	800a23c <_free_r>
 800a530:	2000      	movs	r0, #0
 800a532:	6360      	str	r0, [r4, #52]	; 0x34
 800a534:	e7c0      	b.n	800a4b8 <__sflush_r+0x1c>
 800a536:	2301      	movs	r3, #1
 800a538:	4628      	mov	r0, r5
 800a53a:	47b0      	blx	r6
 800a53c:	1c41      	adds	r1, r0, #1
 800a53e:	d1c8      	bne.n	800a4d2 <__sflush_r+0x36>
 800a540:	682b      	ldr	r3, [r5, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0c5      	beq.n	800a4d2 <__sflush_r+0x36>
 800a546:	2b1d      	cmp	r3, #29
 800a548:	d001      	beq.n	800a54e <__sflush_r+0xb2>
 800a54a:	2b16      	cmp	r3, #22
 800a54c:	d101      	bne.n	800a552 <__sflush_r+0xb6>
 800a54e:	602f      	str	r7, [r5, #0]
 800a550:	e7b1      	b.n	800a4b6 <__sflush_r+0x1a>
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a558:	81a3      	strh	r3, [r4, #12]
 800a55a:	e7ad      	b.n	800a4b8 <__sflush_r+0x1c>
 800a55c:	690f      	ldr	r7, [r1, #16]
 800a55e:	2f00      	cmp	r7, #0
 800a560:	d0a9      	beq.n	800a4b6 <__sflush_r+0x1a>
 800a562:	0793      	lsls	r3, r2, #30
 800a564:	680e      	ldr	r6, [r1, #0]
 800a566:	bf08      	it	eq
 800a568:	694b      	ldreq	r3, [r1, #20]
 800a56a:	600f      	str	r7, [r1, #0]
 800a56c:	bf18      	it	ne
 800a56e:	2300      	movne	r3, #0
 800a570:	eba6 0807 	sub.w	r8, r6, r7
 800a574:	608b      	str	r3, [r1, #8]
 800a576:	f1b8 0f00 	cmp.w	r8, #0
 800a57a:	dd9c      	ble.n	800a4b6 <__sflush_r+0x1a>
 800a57c:	4643      	mov	r3, r8
 800a57e:	463a      	mov	r2, r7
 800a580:	6a21      	ldr	r1, [r4, #32]
 800a582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a584:	4628      	mov	r0, r5
 800a586:	47b0      	blx	r6
 800a588:	2800      	cmp	r0, #0
 800a58a:	dc06      	bgt.n	800a59a <__sflush_r+0xfe>
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a592:	81a3      	strh	r3, [r4, #12]
 800a594:	f04f 30ff 	mov.w	r0, #4294967295
 800a598:	e78e      	b.n	800a4b8 <__sflush_r+0x1c>
 800a59a:	4407      	add	r7, r0
 800a59c:	eba8 0800 	sub.w	r8, r8, r0
 800a5a0:	e7e9      	b.n	800a576 <__sflush_r+0xda>
 800a5a2:	bf00      	nop
 800a5a4:	20400001 	.word	0x20400001

0800a5a8 <_fflush_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	690b      	ldr	r3, [r1, #16]
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	b1db      	cbz	r3, 800a5ea <_fflush_r+0x42>
 800a5b2:	b118      	cbz	r0, 800a5bc <_fflush_r+0x14>
 800a5b4:	6983      	ldr	r3, [r0, #24]
 800a5b6:	b90b      	cbnz	r3, 800a5bc <_fflush_r+0x14>
 800a5b8:	f000 f860 	bl	800a67c <__sinit>
 800a5bc:	4b0c      	ldr	r3, [pc, #48]	; (800a5f0 <_fflush_r+0x48>)
 800a5be:	429c      	cmp	r4, r3
 800a5c0:	d109      	bne.n	800a5d6 <_fflush_r+0x2e>
 800a5c2:	686c      	ldr	r4, [r5, #4]
 800a5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5c8:	b17b      	cbz	r3, 800a5ea <_fflush_r+0x42>
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5d2:	f7ff bf63 	b.w	800a49c <__sflush_r>
 800a5d6:	4b07      	ldr	r3, [pc, #28]	; (800a5f4 <_fflush_r+0x4c>)
 800a5d8:	429c      	cmp	r4, r3
 800a5da:	d101      	bne.n	800a5e0 <_fflush_r+0x38>
 800a5dc:	68ac      	ldr	r4, [r5, #8]
 800a5de:	e7f1      	b.n	800a5c4 <_fflush_r+0x1c>
 800a5e0:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <_fflush_r+0x50>)
 800a5e2:	429c      	cmp	r4, r3
 800a5e4:	bf08      	it	eq
 800a5e6:	68ec      	ldreq	r4, [r5, #12]
 800a5e8:	e7ec      	b.n	800a5c4 <_fflush_r+0x1c>
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	bd38      	pop	{r3, r4, r5, pc}
 800a5ee:	bf00      	nop
 800a5f0:	0800a958 	.word	0x0800a958
 800a5f4:	0800a978 	.word	0x0800a978
 800a5f8:	0800a938 	.word	0x0800a938

0800a5fc <std>:
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	b510      	push	{r4, lr}
 800a600:	4604      	mov	r4, r0
 800a602:	e9c0 3300 	strd	r3, r3, [r0]
 800a606:	6083      	str	r3, [r0, #8]
 800a608:	8181      	strh	r1, [r0, #12]
 800a60a:	6643      	str	r3, [r0, #100]	; 0x64
 800a60c:	81c2      	strh	r2, [r0, #14]
 800a60e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a612:	6183      	str	r3, [r0, #24]
 800a614:	4619      	mov	r1, r3
 800a616:	2208      	movs	r2, #8
 800a618:	305c      	adds	r0, #92	; 0x5c
 800a61a:	f7ff fe07 	bl	800a22c <memset>
 800a61e:	4b05      	ldr	r3, [pc, #20]	; (800a634 <std+0x38>)
 800a620:	6263      	str	r3, [r4, #36]	; 0x24
 800a622:	4b05      	ldr	r3, [pc, #20]	; (800a638 <std+0x3c>)
 800a624:	62a3      	str	r3, [r4, #40]	; 0x28
 800a626:	4b05      	ldr	r3, [pc, #20]	; (800a63c <std+0x40>)
 800a628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a62a:	4b05      	ldr	r3, [pc, #20]	; (800a640 <std+0x44>)
 800a62c:	6224      	str	r4, [r4, #32]
 800a62e:	6323      	str	r3, [r4, #48]	; 0x30
 800a630:	bd10      	pop	{r4, pc}
 800a632:	bf00      	nop
 800a634:	0800a3d1 	.word	0x0800a3d1
 800a638:	0800a3f3 	.word	0x0800a3f3
 800a63c:	0800a42b 	.word	0x0800a42b
 800a640:	0800a44f 	.word	0x0800a44f

0800a644 <_cleanup_r>:
 800a644:	4901      	ldr	r1, [pc, #4]	; (800a64c <_cleanup_r+0x8>)
 800a646:	f000 b8cf 	b.w	800a7e8 <_fwalk_reent>
 800a64a:	bf00      	nop
 800a64c:	0800a5a9 	.word	0x0800a5a9

0800a650 <__sfmoreglue>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	1e4a      	subs	r2, r1, #1
 800a654:	2568      	movs	r5, #104	; 0x68
 800a656:	4355      	muls	r5, r2
 800a658:	460e      	mov	r6, r1
 800a65a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a65e:	f7ff fe3b 	bl	800a2d8 <_malloc_r>
 800a662:	4604      	mov	r4, r0
 800a664:	b140      	cbz	r0, 800a678 <__sfmoreglue+0x28>
 800a666:	2100      	movs	r1, #0
 800a668:	e9c0 1600 	strd	r1, r6, [r0]
 800a66c:	300c      	adds	r0, #12
 800a66e:	60a0      	str	r0, [r4, #8]
 800a670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a674:	f7ff fdda 	bl	800a22c <memset>
 800a678:	4620      	mov	r0, r4
 800a67a:	bd70      	pop	{r4, r5, r6, pc}

0800a67c <__sinit>:
 800a67c:	6983      	ldr	r3, [r0, #24]
 800a67e:	b510      	push	{r4, lr}
 800a680:	4604      	mov	r4, r0
 800a682:	bb33      	cbnz	r3, 800a6d2 <__sinit+0x56>
 800a684:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a688:	6503      	str	r3, [r0, #80]	; 0x50
 800a68a:	4b12      	ldr	r3, [pc, #72]	; (800a6d4 <__sinit+0x58>)
 800a68c:	4a12      	ldr	r2, [pc, #72]	; (800a6d8 <__sinit+0x5c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6282      	str	r2, [r0, #40]	; 0x28
 800a692:	4298      	cmp	r0, r3
 800a694:	bf04      	itt	eq
 800a696:	2301      	moveq	r3, #1
 800a698:	6183      	streq	r3, [r0, #24]
 800a69a:	f000 f81f 	bl	800a6dc <__sfp>
 800a69e:	6060      	str	r0, [r4, #4]
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 f81b 	bl	800a6dc <__sfp>
 800a6a6:	60a0      	str	r0, [r4, #8]
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 f817 	bl	800a6dc <__sfp>
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	60e0      	str	r0, [r4, #12]
 800a6b2:	2104      	movs	r1, #4
 800a6b4:	6860      	ldr	r0, [r4, #4]
 800a6b6:	f7ff ffa1 	bl	800a5fc <std>
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	2109      	movs	r1, #9
 800a6be:	68a0      	ldr	r0, [r4, #8]
 800a6c0:	f7ff ff9c 	bl	800a5fc <std>
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	2112      	movs	r1, #18
 800a6c8:	68e0      	ldr	r0, [r4, #12]
 800a6ca:	f7ff ff97 	bl	800a5fc <std>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	61a3      	str	r3, [r4, #24]
 800a6d2:	bd10      	pop	{r4, pc}
 800a6d4:	0800a934 	.word	0x0800a934
 800a6d8:	0800a645 	.word	0x0800a645

0800a6dc <__sfp>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	4b1b      	ldr	r3, [pc, #108]	; (800a74c <__sfp+0x70>)
 800a6e0:	681e      	ldr	r6, [r3, #0]
 800a6e2:	69b3      	ldr	r3, [r6, #24]
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	b913      	cbnz	r3, 800a6ee <__sfp+0x12>
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f7ff ffc7 	bl	800a67c <__sinit>
 800a6ee:	3648      	adds	r6, #72	; 0x48
 800a6f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	d503      	bpl.n	800a700 <__sfp+0x24>
 800a6f8:	6833      	ldr	r3, [r6, #0]
 800a6fa:	b133      	cbz	r3, 800a70a <__sfp+0x2e>
 800a6fc:	6836      	ldr	r6, [r6, #0]
 800a6fe:	e7f7      	b.n	800a6f0 <__sfp+0x14>
 800a700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a704:	b16d      	cbz	r5, 800a722 <__sfp+0x46>
 800a706:	3468      	adds	r4, #104	; 0x68
 800a708:	e7f4      	b.n	800a6f4 <__sfp+0x18>
 800a70a:	2104      	movs	r1, #4
 800a70c:	4638      	mov	r0, r7
 800a70e:	f7ff ff9f 	bl	800a650 <__sfmoreglue>
 800a712:	6030      	str	r0, [r6, #0]
 800a714:	2800      	cmp	r0, #0
 800a716:	d1f1      	bne.n	800a6fc <__sfp+0x20>
 800a718:	230c      	movs	r3, #12
 800a71a:	603b      	str	r3, [r7, #0]
 800a71c:	4604      	mov	r4, r0
 800a71e:	4620      	mov	r0, r4
 800a720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a722:	4b0b      	ldr	r3, [pc, #44]	; (800a750 <__sfp+0x74>)
 800a724:	6665      	str	r5, [r4, #100]	; 0x64
 800a726:	e9c4 5500 	strd	r5, r5, [r4]
 800a72a:	60a5      	str	r5, [r4, #8]
 800a72c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a730:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a734:	2208      	movs	r2, #8
 800a736:	4629      	mov	r1, r5
 800a738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a73c:	f7ff fd76 	bl	800a22c <memset>
 800a740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a748:	e7e9      	b.n	800a71e <__sfp+0x42>
 800a74a:	bf00      	nop
 800a74c:	0800a934 	.word	0x0800a934
 800a750:	ffff0001 	.word	0xffff0001

0800a754 <__sfp_lock_acquire>:
 800a754:	4770      	bx	lr

0800a756 <__sfp_lock_release>:
 800a756:	4770      	bx	lr

0800a758 <__sflags>:
 800a758:	780b      	ldrb	r3, [r1, #0]
 800a75a:	2b72      	cmp	r3, #114	; 0x72
 800a75c:	b530      	push	{r4, r5, lr}
 800a75e:	d02c      	beq.n	800a7ba <__sflags+0x62>
 800a760:	2b77      	cmp	r3, #119	; 0x77
 800a762:	d007      	beq.n	800a774 <__sflags+0x1c>
 800a764:	2b61      	cmp	r3, #97	; 0x61
 800a766:	d10f      	bne.n	800a788 <__sflags+0x30>
 800a768:	f44f 7402 	mov.w	r4, #520	; 0x208
 800a76c:	2301      	movs	r3, #1
 800a76e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a772:	e003      	b.n	800a77c <__sflags+0x24>
 800a774:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800a778:	2301      	movs	r3, #1
 800a77a:	2008      	movs	r0, #8
 800a77c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a780:	b935      	cbnz	r5, 800a790 <__sflags+0x38>
 800a782:	4323      	orrs	r3, r4
 800a784:	6013      	str	r3, [r2, #0]
 800a786:	e002      	b.n	800a78e <__sflags+0x36>
 800a788:	2316      	movs	r3, #22
 800a78a:	6003      	str	r3, [r0, #0]
 800a78c:	2000      	movs	r0, #0
 800a78e:	bd30      	pop	{r4, r5, pc}
 800a790:	2d62      	cmp	r5, #98	; 0x62
 800a792:	d00c      	beq.n	800a7ae <__sflags+0x56>
 800a794:	2d78      	cmp	r5, #120	; 0x78
 800a796:	d00d      	beq.n	800a7b4 <__sflags+0x5c>
 800a798:	2d2b      	cmp	r5, #43	; 0x2b
 800a79a:	d1ef      	bne.n	800a77c <__sflags+0x24>
 800a79c:	f020 001c 	bic.w	r0, r0, #28
 800a7a0:	f023 0303 	bic.w	r3, r3, #3
 800a7a4:	f040 0010 	orr.w	r0, r0, #16
 800a7a8:	f043 0302 	orr.w	r3, r3, #2
 800a7ac:	e7e6      	b.n	800a77c <__sflags+0x24>
 800a7ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7b2:	e7e3      	b.n	800a77c <__sflags+0x24>
 800a7b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a7b8:	e7e0      	b.n	800a77c <__sflags+0x24>
 800a7ba:	2400      	movs	r4, #0
 800a7bc:	4623      	mov	r3, r4
 800a7be:	2004      	movs	r0, #4
 800a7c0:	e7dc      	b.n	800a77c <__sflags+0x24>
	...

0800a7c4 <_fstat_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4c07      	ldr	r4, [pc, #28]	; (800a7e4 <_fstat_r+0x20>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	f7f6 f910 	bl	80009f6 <_fstat>
 800a7d6:	1c43      	adds	r3, r0, #1
 800a7d8:	d102      	bne.n	800a7e0 <_fstat_r+0x1c>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	b103      	cbz	r3, 800a7e0 <_fstat_r+0x1c>
 800a7de:	602b      	str	r3, [r5, #0]
 800a7e0:	bd38      	pop	{r3, r4, r5, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20000fec 	.word	0x20000fec

0800a7e8 <_fwalk_reent>:
 800a7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	4689      	mov	r9, r1
 800a7f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7f4:	2600      	movs	r6, #0
 800a7f6:	b914      	cbnz	r4, 800a7fe <_fwalk_reent+0x16>
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a802:	3f01      	subs	r7, #1
 800a804:	d501      	bpl.n	800a80a <_fwalk_reent+0x22>
 800a806:	6824      	ldr	r4, [r4, #0]
 800a808:	e7f5      	b.n	800a7f6 <_fwalk_reent+0xe>
 800a80a:	89ab      	ldrh	r3, [r5, #12]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d907      	bls.n	800a820 <_fwalk_reent+0x38>
 800a810:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a814:	3301      	adds	r3, #1
 800a816:	d003      	beq.n	800a820 <_fwalk_reent+0x38>
 800a818:	4629      	mov	r1, r5
 800a81a:	4640      	mov	r0, r8
 800a81c:	47c8      	blx	r9
 800a81e:	4306      	orrs	r6, r0
 800a820:	3568      	adds	r5, #104	; 0x68
 800a822:	e7ee      	b.n	800a802 <_fwalk_reent+0x1a>

0800a824 <_isatty_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4c06      	ldr	r4, [pc, #24]	; (800a840 <_isatty_r+0x1c>)
 800a828:	2300      	movs	r3, #0
 800a82a:	4605      	mov	r5, r0
 800a82c:	4608      	mov	r0, r1
 800a82e:	6023      	str	r3, [r4, #0]
 800a830:	f7f6 f8f1 	bl	8000a16 <_isatty>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d102      	bne.n	800a83e <_isatty_r+0x1a>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	b103      	cbz	r3, 800a83e <_isatty_r+0x1a>
 800a83c:	602b      	str	r3, [r5, #0]
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	20000fec 	.word	0x20000fec

0800a844 <_lseek_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4c07      	ldr	r4, [pc, #28]	; (800a864 <_lseek_r+0x20>)
 800a848:	4605      	mov	r5, r0
 800a84a:	4608      	mov	r0, r1
 800a84c:	4611      	mov	r1, r2
 800a84e:	2200      	movs	r2, #0
 800a850:	6022      	str	r2, [r4, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	f7f6 f8ea 	bl	8000a2c <_lseek>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_lseek_r+0x1e>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_lseek_r+0x1e>
 800a860:	602b      	str	r3, [r5, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	20000fec 	.word	0x20000fec

0800a868 <__malloc_lock>:
 800a868:	4770      	bx	lr

0800a86a <__malloc_unlock>:
 800a86a:	4770      	bx	lr

0800a86c <_read_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	4c07      	ldr	r4, [pc, #28]	; (800a88c <_read_r+0x20>)
 800a870:	4605      	mov	r5, r0
 800a872:	4608      	mov	r0, r1
 800a874:	4611      	mov	r1, r2
 800a876:	2200      	movs	r2, #0
 800a878:	6022      	str	r2, [r4, #0]
 800a87a:	461a      	mov	r2, r3
 800a87c:	f7f6 f876 	bl	800096c <_read>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_read_r+0x1e>
 800a884:	6823      	ldr	r3, [r4, #0]
 800a886:	b103      	cbz	r3, 800a88a <_read_r+0x1e>
 800a888:	602b      	str	r3, [r5, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	20000fec 	.word	0x20000fec

0800a890 <_init>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	bf00      	nop
 800a894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a896:	bc08      	pop	{r3}
 800a898:	469e      	mov	lr, r3
 800a89a:	4770      	bx	lr

0800a89c <_fini>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	bf00      	nop
 800a8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a2:	bc08      	pop	{r3}
 800a8a4:	469e      	mov	lr, r3
 800a8a6:	4770      	bx	lr
