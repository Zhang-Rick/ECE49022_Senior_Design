
testms_f413_0420.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e9c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800a074  0800a074  0001a074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a100  0800a100  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a100  0800a100  0001a100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a108  0800a108  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a108  0800a108  0001a108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a10c  0800a10c  0001a10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800a110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e2c  200001c8  0800a2d8  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  20000ff4  0800a2d8  00020ff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ceb7  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000408d  00000000  00000000  0003d0af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  00041140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  00042238  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025ee0  00000000  00000000  00043158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000132df  00000000  00000000  00069038  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccea9  00000000  00000000  0007c317  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001491c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004470  00000000  00000000  0014923c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c8 	.word	0x200001c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a05c 	.word	0x0800a05c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001cc 	.word	0x200001cc
 8000214:	0800a05c 	.word	0x0800a05c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fa84 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f81e 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8c4 	bl	80006b0 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000528:	f000 f8a2 	bl	8000670 <MX_SDIO_SD_Init>
  MX_USB_DEVICE_Init();
 800052c:	f008 ffa6 	bl	800947c <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8000530:	f006 f856 	bl	80065e0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_SD_Init(&hsd);
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x40>)
 8000536:	f002 fe69 	bl	800320c <HAL_SD_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <main+0x44>)
 8000540:	f000 fdaa 	bl	8001098 <HAL_GPIO_WritePin>
  HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B);
 8000544:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <main+0x40>)
 800054a:	f003 fc57 	bl	8003dfc <HAL_SD_ConfigWideBusOperation>
  HAL_Delay(500);
 800054e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000552:	f000 fadb 	bl	8000b0c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x3e>
 8000558:	20000204 	.word	0x20000204
 800055c:	40020800 	.word	0x40020800

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b0aa      	sub	sp, #168	; 0xa8
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800056a:	2234      	movs	r2, #52	; 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f009 fcb2 	bl	8009ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2258      	movs	r2, #88	; 0x58
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f009 fca3 	bl	8009ed8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	4b34      	ldr	r3, [pc, #208]	; (8000668 <SystemClock_Config+0x108>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	4a33      	ldr	r2, [pc, #204]	; (8000668 <SystemClock_Config+0x108>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a0:	6413      	str	r3, [r2, #64]	; 0x40
 80005a2:	4b31      	ldr	r3, [pc, #196]	; (8000668 <SystemClock_Config+0x108>)
 80005a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ae:	2300      	movs	r3, #0
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	4b2e      	ldr	r3, [pc, #184]	; (800066c <SystemClock_Config+0x10c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a2d      	ldr	r2, [pc, #180]	; (800066c <SystemClock_Config+0x10c>)
 80005b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <SystemClock_Config+0x10c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ca:	2301      	movs	r3, #1
 80005cc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005e8:	2348      	movs	r3, #72	; 0x48
 80005ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005f4:	2303      	movs	r3, #3
 80005f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fbbf 	bl	8002d88 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000610:	f000 f8ac 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800062e:	2102      	movs	r1, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f001 ff53 	bl	80024dc <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800063c:	f000 f896 	bl	800076c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000640:	2360      	movs	r3, #96	; 0x60
 8000642:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000644:	2300      	movs	r3, #0
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000648:	2300      	movs	r3, #0
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	4618      	mov	r0, r3
 8000652:	f002 f90d 	bl	8002870 <HAL_RCCEx_PeriphCLKConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x100>
  {
    Error_Handler();
 800065c:	f000 f886 	bl	800076c <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	37a8      	adds	r7, #168	; 0xa8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_SDIO_SD_Init+0x38>)
 8000676:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <MX_SDIO_SD_Init+0x3c>)
 8000678:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_SDIO_SD_Init+0x38>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_SDIO_SD_Init+0x38>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_SDIO_SD_Init+0x38>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_SDIO_SD_Init+0x38>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MX_SDIO_SD_Init+0x38>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 36;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <MX_SDIO_SD_Init+0x38>)
 800069a:	2224      	movs	r2, #36	; 0x24
 800069c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	20000204 	.word	0x20000204
 80006ac:	40012c00 	.word	0x40012c00

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <MX_GPIO_Init+0xb4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a25      	ldr	r2, [pc, #148]	; (8000764 <MX_GPIO_Init+0xb4>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_GPIO_Init+0xb4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_GPIO_Init+0xb4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a1e      	ldr	r2, [pc, #120]	; (8000764 <MX_GPIO_Init+0xb4>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_GPIO_Init+0xb4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_GPIO_Init+0xb4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_GPIO_Init+0xb4>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_GPIO_Init+0xb4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a10      	ldr	r2, [pc, #64]	; (8000764 <MX_GPIO_Init+0xb4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <MX_GPIO_Init+0xb8>)
 800073c:	f000 fcac 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_GPIO_Init+0xb8>)
 8000758:	f000 fb0c 	bl	8000d74 <HAL_GPIO_Init>

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020800 	.word	0x40020800

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <HAL_MspInit+0x4c>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a38      	ldr	r2, [pc, #224]	; (80008cc <HAL_SD_MspInit+0x100>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d169      	bne.n	80008c2 <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <HAL_SD_MspInit+0x104>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a36      	ldr	r2, [pc, #216]	; (80008d0 <HAL_SD_MspInit+0x104>)
 80007f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <HAL_SD_MspInit+0x104>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <HAL_SD_MspInit+0x104>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a2f      	ldr	r2, [pc, #188]	; (80008d0 <HAL_SD_MspInit+0x104>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <HAL_SD_MspInit+0x104>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <HAL_SD_MspInit+0x104>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a28      	ldr	r2, [pc, #160]	; (80008d0 <HAL_SD_MspInit+0x104>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <HAL_SD_MspInit+0x104>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <HAL_SD_MspInit+0x104>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <HAL_SD_MspInit+0x104>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <HAL_SD_MspInit+0x104>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800085e:	2340      	movs	r3, #64	; 0x40
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800086e:	230c      	movs	r3, #12
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4816      	ldr	r0, [pc, #88]	; (80008d4 <HAL_SD_MspInit+0x108>)
 800087a:	f000 fa7b 	bl	8000d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800087e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000890:	230c      	movs	r3, #12
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <HAL_SD_MspInit+0x10c>)
 800089c:	f000 fa6a 	bl	8000d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80008a0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008b2:	230c      	movs	r3, #12
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <HAL_SD_MspInit+0x110>)
 80008be:	f000 fa59 	bl	8000d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3730      	adds	r7, #48	; 0x30
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40012c00 	.word	0x40012c00
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020400 	.word	0x40020400
 80008dc:	40020800 	.word	0x40020800

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f8ca 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <OTG_FS_IRQHandler+0x10>)
 8000942:	f000 fd19 	bl	8001378 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000be8 	.word	0x20000be8

08000950 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <_sbrk+0x50>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x16>
		heap_end = &end;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <_sbrk+0x50>)
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <_sbrk+0x54>)
 8000964:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <_sbrk+0x50>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <_sbrk+0x50>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4413      	add	r3, r2
 8000974:	466a      	mov	r2, sp
 8000976:	4293      	cmp	r3, r2
 8000978:	d907      	bls.n	800098a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800097a:	f009 fa73 	bl	8009e64 <__errno>
 800097e:	4602      	mov	r2, r0
 8000980:	230c      	movs	r3, #12
 8000982:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	e006      	b.n	8000998 <_sbrk+0x48>
	}

	heap_end += incr;
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <_sbrk+0x50>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <_sbrk+0x50>)
 8000994:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200001e4 	.word	0x200001e4
 80009a4:	20000ff8 	.word	0x20000ff8

080009a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <SystemInit+0x28>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <SystemInit+0x28>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SystemInit+0x28>)
 80009be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009c2:	609a      	str	r2, [r3, #8]
#endif
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80009d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009da:	e003      	b.n	80009e4 <LoopCopyDataInit>

080009dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009e2:	3104      	adds	r1, #4

080009e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009e4:	480b      	ldr	r0, [pc, #44]	; (8000a14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009ec:	d3f6      	bcc.n	80009dc <CopyDataInit>
  ldr  r2, =_sbss
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009f0:	e002      	b.n	80009f8 <LoopFillZerobss>

080009f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80009f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009f4:	f842 3b04 	str.w	r3, [r2], #4

080009f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009fc:	d3f9      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009fe:	f7ff ffd3 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a02:	f009 fa35 	bl	8009e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a06:	f7ff fd87 	bl	8000518 <main>
  bx  lr    
 8000a0a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a0c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000a10:	0800a110 	.word	0x0800a110
  ldr  r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a18:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8000a1c:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8000a20:	20000ff4 	.word	0x20000ff4

08000a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <HAL_Init+0x40>)
 8000a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_Init+0x40>)
 8000a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_Init+0x40>)
 8000a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f94d 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 f808 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff fe8e 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023c00 	.word	0x40023c00

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f965 	bl	8000d5a <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f000 f92d 	bl	8000d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x20>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x24>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_IncTick+0x24>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008
 8000af0:	200002a8 	.word	0x200002a8

08000af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200002a8 	.word	0x200002a8

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff ffee 	bl	8000af4 <HAL_GetTick>
 8000b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b24:	d005      	beq.n	8000b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_Delay+0x40>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b32:	bf00      	nop
 8000b34:	f7ff ffde 	bl	8000af4 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8f7      	bhi.n	8000b34 <HAL_Delay+0x28>
  {
  }
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000008 	.word	0x20000008

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	db0b      	blt.n	8000bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 021f 	and.w	r2, r3, #31
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <__NVIC_EnableIRQ+0x38>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff8e 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff29 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff3e 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff8e 	bl	8000c44 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5d 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff31 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffa2 	bl	8000cac <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e165      	b.n	800105c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 8154 	bne.w	8001056 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d00b      	beq.n	8000dce <HAL_GPIO_Init+0x5a>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc2:	2b11      	cmp	r3, #17
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b12      	cmp	r3, #18
 8000dcc:	d130      	bne.n	8000e30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0xfc>
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b12      	cmp	r3, #18
 8000e6e:	d123      	bne.n	8000eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80ae 	beq.w	8001056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b5c      	ldr	r3, [pc, #368]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a5b      	ldr	r2, [pc, #364]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b59      	ldr	r3, [pc, #356]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a57      	ldr	r2, [pc, #348]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4e      	ldr	r2, [pc, #312]	; (8001078 <HAL_GPIO_Init+0x304>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d025      	beq.n	8000f8e <HAL_GPIO_Init+0x21a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4d      	ldr	r2, [pc, #308]	; (800107c <HAL_GPIO_Init+0x308>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d01f      	beq.n	8000f8a <HAL_GPIO_Init+0x216>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4c      	ldr	r2, [pc, #304]	; (8001080 <HAL_GPIO_Init+0x30c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4b      	ldr	r2, [pc, #300]	; (8001084 <HAL_GPIO_Init+0x310>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x20e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4a      	ldr	r2, [pc, #296]	; (8001088 <HAL_GPIO_Init+0x314>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x20a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a49      	ldr	r2, [pc, #292]	; (800108c <HAL_GPIO_Init+0x318>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x206>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a48      	ldr	r2, [pc, #288]	; (8001090 <HAL_GPIO_Init+0x31c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x202>
 8000f72:	2306      	movs	r3, #6
 8000f74:	e00c      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00a      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	e008      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	f002 0203 	and.w	r2, r2, #3
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa0:	4934      	ldr	r1, [pc, #208]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fae:	4b39      	ldr	r3, [pc, #228]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd2:	4a30      	ldr	r2, [pc, #192]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fd8:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ffc:	4a25      	ldr	r2, [pc, #148]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <HAL_GPIO_Init+0x320>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <HAL_GPIO_Init+0x320>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_GPIO_Init+0x320>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001050:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_GPIO_Init+0x320>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	f67f ae96 	bls.w	8000d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001064:	bf00      	nop
 8001066:	3724      	adds	r7, #36	; 0x24
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40023800 	.word	0x40023800
 8001074:	40013800 	.word	0x40013800
 8001078:	40020000 	.word	0x40020000
 800107c:	40020400 	.word	0x40020400
 8001080:	40020800 	.word	0x40020800
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40021000 	.word	0x40021000
 800108c:	40021400 	.word	0x40021400
 8001090:	40021800 	.word	0x40021800
 8001094:	40013c00 	.word	0x40013c00

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b4:	e003      	b.n	80010be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	041a      	lsls	r2, r3, #16
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	619a      	str	r2, [r3, #24]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010cc:	b08f      	sub	sp, #60	; 0x3c
 80010ce:	af0a      	add	r7, sp, #40	; 0x28
 80010d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e116      	b.n	800130a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d106      	bne.n	80010fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f008 fb9e 	bl	8009838 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2203      	movs	r2, #3
 8001100:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f004 f867 	bl	80051ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	687e      	ldr	r6, [r7, #4]
 8001128:	466d      	mov	r5, sp
 800112a:	f106 0410 	add.w	r4, r6, #16
 800112e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001136:	e894 0003 	ldmia.w	r4, {r0, r1}
 800113a:	e885 0003 	stmia.w	r5, {r0, r1}
 800113e:	1d33      	adds	r3, r6, #4
 8001140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001142:	6838      	ldr	r0, [r7, #0]
 8001144:	f003 ff3e 	bl	8004fc4 <USB_CoreInit>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2202      	movs	r2, #2
 8001152:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e0d7      	b.n	800130a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f004 f855 	bl	8005210 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e04a      	b.n	8001202 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	333d      	adds	r3, #61	; 0x3d
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	333c      	adds	r3, #60	; 0x3c
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	b298      	uxth	r0, r3
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	3342      	adds	r3, #66	; 0x42
 80011a8:	4602      	mov	r2, r0
 80011aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	1a9b      	subs	r3, r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	333f      	adds	r3, #63	; 0x3f
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3344      	adds	r3, #68	; 0x44
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	3348      	adds	r3, #72	; 0x48
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	3350      	adds	r3, #80	; 0x50
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3af      	bcc.n	800116c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e044      	b.n	800129c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	1a9b      	subs	r3, r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	1a9b      	subs	r3, r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	1a9b      	subs	r3, r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	3301      	adds	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d3b5      	bcc.n	8001212 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	687e      	ldr	r6, [r7, #4]
 80012ae:	466d      	mov	r5, sp
 80012b0:	f106 0410 	add.w	r4, r6, #16
 80012b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80012c4:	1d33      	adds	r3, r6, #4
 80012c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012c8:	6838      	ldr	r0, [r7, #0]
 80012ca:	f003 ffcb 	bl	8005264 <USB_DevInit>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2202      	movs	r2, #2
 80012d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e014      	b.n	800130a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d102      	bne.n	80012fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f001 f8bf 	bl	800247c <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f004 fffd 	bl	8006302 <USB_DevDisconnect>

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001312 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_PCD_Start+0x1c>
 800132a:	2302      	movs	r3, #2
 800132c:	e020      	b.n	8001370 <HAL_PCD_Start+0x5e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	2b01      	cmp	r3, #1
 800133c:	d109      	bne.n	8001352 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001342:	2b01      	cmp	r3, #1
 8001344:	d005      	beq.n	8001352 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f004 ffbb 	bl	80062d2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f003 ff33 	bl	80051cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b08d      	sub	sp, #52	; 0x34
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f005 f862 	bl	8006458 <USB_GetMode>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	f040 83ca 	bne.w	8001b30 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 ffc6 	bl	8006332 <USB_ReadInterrupts>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 83c0 	beq.w	8001b2e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 ffbd 	bl	8006332 <USB_ReadInterrupts>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d107      	bne.n	80013d2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	695a      	ldr	r2, [r3, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f002 0202 	and.w	r2, r2, #2
 80013d0:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 ffab 	bl	8006332 <USB_ReadInterrupts>
 80013dc:	4603      	mov	r3, r0
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d161      	bne.n	80014aa <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	699a      	ldr	r2, [r3, #24]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0210 	bic.w	r2, r2, #16
 80013f4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f003 020f 	and.w	r2, r3, #15
 8001402:	4613      	mov	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	3304      	adds	r3, #4
 8001414:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	0c5b      	lsrs	r3, r3, #17
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	2b02      	cmp	r3, #2
 8001420:	d124      	bne.n	800146c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d035      	beq.n	800149a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001438:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800143c:	b29b      	uxth	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	6a38      	ldr	r0, [r7, #32]
 8001442:	f004 fe23 	bl	800608c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001452:	441a      	add	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001464:	441a      	add	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	619a      	str	r2, [r3, #24]
 800146a:	e016      	b.n	800149a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	0c5b      	lsrs	r3, r3, #17
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	2b06      	cmp	r3, #6
 8001476:	d110      	bne.n	800149a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800147e:	2208      	movs	r2, #8
 8001480:	4619      	mov	r1, r3
 8001482:	6a38      	ldr	r0, [r7, #32]
 8001484:	f004 fe02 	bl	800608c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	699a      	ldr	r2, [r3, #24]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001494:	441a      	add	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	699a      	ldr	r2, [r3, #24]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 0210 	orr.w	r2, r2, #16
 80014a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f004 ff3f 	bl	8006332 <USB_ReadInterrupts>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014be:	d16e      	bne.n	800159e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 ff45 	bl	8006358 <USB_ReadDevAllOutEpInterrupt>
 80014ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014d0:	e062      	b.n	8001598 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d057      	beq.n	800158c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 ff6a 	bl	80063c0 <USB_ReadDevOutEPInterrupt>
 80014ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00c      	beq.n	8001512 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	4413      	add	r3, r2
 8001500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001504:	461a      	mov	r2, r3
 8001506:	2301      	movs	r3, #1
 8001508:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800150a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 fe0b 	bl	8002128 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00c      	beq.n	8001536 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	015a      	lsls	r2, r3, #5
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	4413      	add	r3, r2
 8001524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001528:	461a      	mov	r2, r3
 800152a:	2308      	movs	r3, #8
 800152c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800152e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 ff05 	bl	8002340 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4413      	add	r3, r2
 8001548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800154c:	461a      	mov	r2, r3
 800154e:	2310      	movs	r3, #16
 8001550:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	015a      	lsls	r2, r3, #5
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4413      	add	r3, r2
 8001564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001568:	461a      	mov	r2, r3
 800156a:	2320      	movs	r3, #32
 800156c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d009      	beq.n	800158c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	015a      	lsls	r2, r3, #5
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	4413      	add	r3, r2
 8001580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001584:	461a      	mov	r2, r3
 8001586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	3301      	adds	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	2b00      	cmp	r3, #0
 800159c:	d199      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 fec5 	bl	8006332 <USB_ReadInterrupts>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015b2:	f040 80c0 	bne.w	8001736 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 fee6 	bl	800638c <USB_ReadDevAllInEpInterrupt>
 80015c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015c6:	e0b2      	b.n	800172e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80a7 	beq.w	8001722 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 ff0c 	bl	80063fc <USB_ReadDevInEPInterrupt>
 80015e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d057      	beq.n	80016a0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	2201      	movs	r2, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	69f9      	ldr	r1, [r7, #28]
 800160c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001610:	4013      	ands	r3, r2
 8001612:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001620:	461a      	mov	r2, r3
 8001622:	2301      	movs	r3, #1
 8001624:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d132      	bne.n	8001694 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	3348      	adds	r3, #72	; 0x48
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4403      	add	r3, r0
 800164e:	3344      	adds	r3, #68	; 0x44
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4419      	add	r1, r3
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4403      	add	r3, r0
 8001662:	3348      	adds	r3, #72	; 0x48
 8001664:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	2b00      	cmp	r3, #0
 800166a:	d113      	bne.n	8001694 <HAL_PCD_IRQHandler+0x31c>
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3350      	adds	r3, #80	; 0x50
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d108      	bne.n	8001694 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800168c:	461a      	mov	r2, r3
 800168e:	2101      	movs	r1, #1
 8001690:	f004 ff14 	bl	80064bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	b2db      	uxtb	r3, r3
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f008 f94d 	bl	800993a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	015a      	lsls	r2, r3, #5
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b6:	461a      	mov	r2, r3
 80016b8:	2308      	movs	r3, #8
 80016ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	015a      	lsls	r2, r3, #5
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d2:	461a      	mov	r2, r3
 80016d4:	2310      	movs	r3, #16
 80016d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d008      	beq.n	80016f4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ee:	461a      	mov	r2, r3
 80016f0:	2340      	movs	r3, #64	; 0x40
 80016f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800170a:	461a      	mov	r2, r3
 800170c:	2302      	movs	r3, #2
 800170e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800171a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fc75 	bl	800200c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	f47f af49 	bne.w	80015c8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fdf9 	bl	8006332 <USB_ReadInterrupts>
 8001740:	4603      	mov	r3, r0
 8001742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800174a:	d122      	bne.n	8001792 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001772:	2100      	movs	r1, #0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fea5 	bl	80024c4 <HAL_PCDEx_LPM_Callback>
 800177a:	e002      	b.n	8001782 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f008 f949 	bl	8009a14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f004 fdcb 	bl	8006332 <USB_ReadInterrupts>
 800179c:	4603      	mov	r3, r0
 800179e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017a6:	d112      	bne.n	80017ce <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d102      	bne.n	80017be <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f008 f905 	bl	80099c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017cc:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 fdad 	bl	8006332 <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017e2:	d121      	bne.n	8001828 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80017f2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d111      	bne.n	8001822 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	f003 020f 	and.w	r2, r3, #15
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001818:	2101      	movs	r1, #1
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fe52 	bl	80024c4 <HAL_PCDEx_LPM_Callback>
 8001820:	e002      	b.n	8001828 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f008 f8d0 	bl	80099c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f004 fd80 	bl	8006332 <USB_ReadInterrupts>
 8001832:	4603      	mov	r3, r0
 8001834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800183c:	f040 80c7 	bne.w	80019ce <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2110      	movs	r1, #16
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fe60 	bl	8005520 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001864:	e056      	b.n	8001914 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	4413      	add	r3, r2
 800186e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001872:	461a      	mov	r2, r3
 8001874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001878:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188a:	0151      	lsls	r1, r2, #5
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	440a      	add	r2, r1
 8001890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001894:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001898:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018aa:	0151      	lsls	r1, r2, #5
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	440a      	add	r2, r1
 80018b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018bc:	015a      	lsls	r2, r3, #5
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c6:	461a      	mov	r2, r3
 80018c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018de:	0151      	lsls	r1, r2, #5
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	440a      	add	r2, r1
 80018e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fe:	0151      	lsls	r1, r2, #5
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	440a      	add	r2, r1
 8001904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001908:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800190c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001910:	3301      	adds	r3, #1
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191a:	429a      	cmp	r2, r3
 800191c:	d3a3      	bcc.n	8001866 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800192c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001930:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	2b00      	cmp	r3, #0
 8001938:	d016      	beq.n	8001968 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194a:	f043 030b 	orr.w	r3, r3, #11
 800194e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001960:	f043 030b 	orr.w	r3, r3, #11
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	e015      	b.n	8001994 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001976:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800197a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800197e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198e:	f043 030b 	orr.w	r3, r3, #11
 8001992:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019b8:	461a      	mov	r2, r3
 80019ba:	f004 fd7f 	bl	80064bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f004 fcad 	bl	8006332 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e2:	d124      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f004 fd43 	bl	8006474 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fdf5 	bl	80055e2 <USB_GetDevSpeed>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681c      	ldr	r4, [r3, #0]
 8001a04:	f000 ff28 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8001a08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4620      	mov	r0, r4
 8001a14:	f003 fb38 	bl	8005088 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f007 ffb6 	bl	800998a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fc7d 	bl	8006332 <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d10a      	bne.n	8001a58 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f007 ff93 	bl	800996e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f002 0208 	and.w	r2, r2, #8
 8001a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f004 fc68 	bl	8006332 <USB_ReadInterrupts>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a6c:	d10f      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4619      	mov	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f007 ffeb 	bl	8009a54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 fc4d 	bl	8006332 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f007 ffbe 	bl	8009a30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 fc32 	bl	8006332 <USB_ReadInterrupts>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad8:	d10a      	bne.n	8001af0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f007 ffcc 	bl	8009a78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 fc1c 	bl	8006332 <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d115      	bne.n	8001b30 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f007 ffbc 	bl	8009a94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	e000      	b.n	8001b30 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001b2e:	bf00      	nop
    }
  }
}
 8001b30:	3734      	adds	r7, #52	; 0x34
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}

08001b36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_PCD_SetAddress+0x1a>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e013      	b.n	8001b78 <HAL_PCD_SetAddress+0x42>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f004 fb8c 	bl	8006286 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	4608      	mov	r0, r1
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	70fb      	strb	r3, [r7, #3]
 8001b92:	460b      	mov	r3, r1
 8001b94:	803b      	strh	r3, [r7, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	da0f      	bge.n	8001bc6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	f003 020f 	and.w	r2, r3, #15
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	3338      	adds	r3, #56	; 0x38
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	3304      	adds	r3, #4
 8001bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	705a      	strb	r2, [r3, #1]
 8001bc4:	e00f      	b.n	8001be6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	f003 020f 	and.w	r2, r3, #15
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	3304      	adds	r3, #4
 8001bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bf2:	883a      	ldrh	r2, [r7, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	78ba      	ldrb	r2, [r7, #2]
 8001bfc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	785b      	ldrb	r3, [r3, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c10:	78bb      	ldrb	r3, [r7, #2]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d102      	bne.n	8001c1c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_PCD_EP_Open+0xaa>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e00e      	b.n	8001c48 <HAL_PCD_EP_Open+0xc8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68f9      	ldr	r1, [r7, #12]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fcf7 	bl	800562c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c46:	7afb      	ldrb	r3, [r7, #11]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	da0f      	bge.n	8001c84 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	f003 020f 	and.w	r2, r3, #15
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	3338      	adds	r3, #56	; 0x38
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	3304      	adds	r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	705a      	strb	r2, [r3, #1]
 8001c82:	e00f      	b.n	8001ca4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	f003 020f 	and.w	r2, r3, #15
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_PCD_EP_Close+0x6e>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e00e      	b.n	8001cdc <HAL_PCD_EP_Close+0x8c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68f9      	ldr	r1, [r7, #12]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fd35 	bl	800573c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	f003 020f 	and.w	r2, r3, #15
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2200      	movs	r2, #0
 8001d24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d102      	bne.n	8001d40 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	6979      	ldr	r1, [r7, #20]
 8001d58:	f004 f810 	bl	8005d7c <USB_EP0StartXfer>
 8001d5c:	e008      	b.n	8001d70 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6979      	ldr	r1, [r7, #20]
 8001d6c:	f003 fdc2 	bl	80058f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	f003 020f 	and.w	r2, r3, #15
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d9c:	681b      	ldr	r3, [r3, #0]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	460b      	mov	r3, r1
 8001db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dba:	7afb      	ldrb	r3, [r7, #11]
 8001dbc:	f003 020f 	and.w	r2, r3, #15
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	3338      	adds	r3, #56	; 0x38
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2201      	movs	r2, #1
 8001de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d102      	bne.n	8001e04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e04:	7afb      	ldrb	r3, [r7, #11]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	f003 ffae 	bl	8005d7c <USB_EP0StartXfer>
 8001e20:	e008      	b.n	8001e34 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6979      	ldr	r1, [r7, #20]
 8001e30:	f003 fd60 	bl	80058f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 020f 	and.w	r2, r3, #15
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d901      	bls.n	8001e5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e050      	b.n	8001efe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	da0f      	bge.n	8001e84 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 020f 	and.w	r2, r3, #15
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	3338      	adds	r3, #56	; 0x38
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	3304      	adds	r3, #4
 8001e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	705a      	strb	r2, [r3, #1]
 8001e82:	e00d      	b.n	8001ea0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	4613      	mov	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	1a9b      	subs	r3, r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	3304      	adds	r3, #4
 8001e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_PCD_EP_SetStall+0x82>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e01e      	b.n	8001efe <HAL_PCD_EP_SetStall+0xc0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68f9      	ldr	r1, [r7, #12]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 f905 	bl	80060de <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10a      	bne.n	8001ef4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	b2d9      	uxtb	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f004 fae4 	bl	80064bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 020f 	and.w	r2, r3, #15
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d901      	bls.n	8001f24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e042      	b.n	8001faa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	da0f      	bge.n	8001f4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 020f 	and.w	r2, r3, #15
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	3338      	adds	r3, #56	; 0x38
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	3304      	adds	r3, #4
 8001f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	705a      	strb	r2, [r3, #1]
 8001f4a:	e00f      	b.n	8001f6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	f003 020f 	and.w	r2, r3, #15
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	3304      	adds	r3, #4
 8001f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_PCD_EP_ClrStall+0x86>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e00e      	b.n	8001faa <HAL_PCD_EP_ClrStall+0xa4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68f9      	ldr	r1, [r7, #12]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 f90d 	bl	80061ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_PCD_EP_Flush+0x1a>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e01b      	b.n	8002004 <HAL_PCD_EP_Flush+0x52>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da09      	bge.n	8001ff0 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4610      	mov	r0, r2
 8001fea:	f003 fa99 	bl	8005520 <USB_FlushTxFifo>
 8001fee:	e004      	b.n	8001ffa <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 fab9 	bl	800556c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af02      	add	r7, sp, #8
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	3338      	adds	r3, #56	; 0x38
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	3304      	adds	r3, #4
 8002032:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	429a      	cmp	r2, r3
 800203e:	d901      	bls.n	8002044 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e06c      	b.n	800211e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	429a      	cmp	r2, r3
 8002058:	d902      	bls.n	8002060 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3303      	adds	r3, #3
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002068:	e02b      	b.n	80020c2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	429a      	cmp	r2, r3
 800207e:	d902      	bls.n	8002086 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3303      	adds	r3, #3
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	68d9      	ldr	r1, [r3, #12]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	4603      	mov	r3, r0
 80020a4:	6978      	ldr	r0, [r7, #20]
 80020a6:	f003 ffbc 	bl	8006022 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	441a      	add	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	441a      	add	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d809      	bhi.n	80020ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d203      	bcs.n	80020ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1be      	bne.n	800206a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d811      	bhi.n	800211c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	2201      	movs	r2, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	43db      	mvns	r3, r3
 8002112:	6939      	ldr	r1, [r7, #16]
 8002114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002118:	4013      	ands	r3, r2
 800211a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	333c      	adds	r3, #60	; 0x3c
 8002140:	3304      	adds	r3, #4
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	f040 80a0 	bne.w	80022a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4a72      	ldr	r2, [pc, #456]	; (8002338 <PCD_EP_OutXfrComplete_int+0x210>)
 800216e:	4293      	cmp	r3, r2
 8002170:	f240 80dd 	bls.w	800232e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80d7 	beq.w	800232e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218c:	461a      	mov	r2, r3
 800218e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002192:	6093      	str	r3, [r2, #8]
 8002194:	e0cb      	b.n	800232e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d009      	beq.n	80021b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ac:	461a      	mov	r2, r3
 80021ae:	2320      	movs	r3, #32
 80021b0:	6093      	str	r3, [r2, #8]
 80021b2:	e0bc      	b.n	800232e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 80b7 	bne.w	800232e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a5d      	ldr	r2, [pc, #372]	; (8002338 <PCD_EP_OutXfrComplete_int+0x210>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d90f      	bls.n	80021e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021de:	461a      	mov	r2, r3
 80021e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021e4:	6093      	str	r3, [r2, #8]
 80021e6:	e0a2      	b.n	800232e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	0159      	lsls	r1, r3, #5
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	440b      	add	r3, r1
 8002204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800220e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4403      	add	r3, r0
 800221e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002222:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4403      	add	r3, r0
 8002246:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4419      	add	r1, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4403      	add	r3, r0
 800225c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002260:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d114      	bne.n	8002292 <PCD_EP_OutXfrComplete_int+0x16a>
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d108      	bne.n	8002292 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800228a:	461a      	mov	r2, r3
 800228c:	2101      	movs	r1, #1
 800228e:	f004 f915 	bl	80064bc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	4619      	mov	r1, r3
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f007 fb33 	bl	8009904 <HAL_PCD_DataOutStageCallback>
 800229e:	e046      	b.n	800232e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4a26      	ldr	r2, [pc, #152]	; (800233c <PCD_EP_OutXfrComplete_int+0x214>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d124      	bne.n	80022f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022be:	461a      	mov	r2, r3
 80022c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c4:	6093      	str	r3, [r2, #8]
 80022c6:	e032      	b.n	800232e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022de:	461a      	mov	r2, r3
 80022e0:	2320      	movs	r3, #32
 80022e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	4619      	mov	r1, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f007 fb0a 	bl	8009904 <HAL_PCD_DataOutStageCallback>
 80022f0:	e01d      	b.n	800232e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d114      	bne.n	8002322 <PCD_EP_OutXfrComplete_int+0x1fa>
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d108      	bne.n	8002322 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800231a:	461a      	mov	r2, r3
 800231c:	2100      	movs	r1, #0
 800231e:	f004 f8cd 	bl	80064bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	4619      	mov	r1, r3
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f007 faeb 	bl	8009904 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	4f54300a 	.word	0x4f54300a
 800233c:	4f54310a 	.word	0x4f54310a

08002340 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	333c      	adds	r3, #60	; 0x3c
 8002358:	3304      	adds	r3, #4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4a15      	ldr	r2, [pc, #84]	; (80023c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d90e      	bls.n	8002394 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238c:	461a      	mov	r2, r3
 800238e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002392:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f007 faa3 	bl	80098e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d90c      	bls.n	80023bc <PCD_EP_OutSetupPacket_int+0x7c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d108      	bne.n	80023bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023b4:	461a      	mov	r2, r3
 80023b6:	2101      	movs	r1, #1
 80023b8:	f004 f880 	bl	80064bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	4f54300a 	.word	0x4f54300a

080023cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d107      	bne.n	80023fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023ea:	883b      	ldrh	r3, [r7, #0]
 80023ec:	0419      	lsls	r1, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
 80023f8:	e028      	b.n	800244c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	4413      	add	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e00d      	b.n	800242a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	3340      	adds	r3, #64	; 0x40
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4413      	add	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	3301      	adds	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	3b01      	subs	r3, #1
 8002430:	429a      	cmp	r2, r3
 8002432:	d3ec      	bcc.n	800240e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002434:	883b      	ldrh	r3, [r7, #0]
 8002436:	0418      	lsls	r0, r3, #16
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6819      	ldr	r1, [r3, #0]
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	3b01      	subs	r3, #1
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	4302      	orrs	r2, r0
 8002444:	3340      	adds	r3, #64	; 0x40
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ae:	f043 0303 	orr.w	r3, r3, #3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0cc      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b68      	ldr	r3, [pc, #416]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d90c      	bls.n	8002518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b65      	ldr	r3, [pc, #404]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b63      	ldr	r3, [pc, #396]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0b8      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a58      	ldr	r2, [pc, #352]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800253a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	494d      	ldr	r1, [pc, #308]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d044      	beq.n	80025fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d119      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e07f      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d003      	beq.n	800259a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002596:	2b03      	cmp	r3, #3
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259a:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06f      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e067      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ba:	4b37      	ldr	r3, [pc, #220]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f023 0203 	bic.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4934      	ldr	r1, [pc, #208]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025cc:	f7fe fa92 	bl	8000af4 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d4:	f7fe fa8e 	bl	8000af4 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e04f      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 020c 	and.w	r2, r3, #12
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d1eb      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d20c      	bcs.n	8002624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e032      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4916      	ldr	r1, [pc, #88]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002662:	f000 f821 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8002666:	4601      	mov	r1, r0
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	fa21 f303 	lsr.w	r3, r1, r3
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe f9f2 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00
 8002698:	40023800 	.word	0x40023800
 800269c:	0800a0b8 	.word	0x0800a0b8
 80026a0:	20000000 	.word	0x20000000
 80026a4:	20000004 	.word	0x20000004

080026a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026be:	4b63      	ldr	r3, [pc, #396]	; (800284c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d007      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x32>
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d008      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x38>
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 80b4 	bne.w	800283c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4b5e      	ldr	r3, [pc, #376]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026d6:	60bb      	str	r3, [r7, #8]
       break;
 80026d8:	e0b3      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026da:	4b5e      	ldr	r3, [pc, #376]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80026dc:	60bb      	str	r3, [r7, #8]
      break;
 80026de:	e0b0      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e0:	4b5a      	ldr	r3, [pc, #360]	; (800284c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ea:	4b58      	ldr	r3, [pc, #352]	; (800284c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d04a      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f6:	4b55      	ldr	r3, [pc, #340]	; (800284c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	f04f 0400 	mov.w	r4, #0
 8002700:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	ea03 0501 	and.w	r5, r3, r1
 800270c:	ea04 0602 	and.w	r6, r4, r2
 8002710:	4629      	mov	r1, r5
 8002712:	4632      	mov	r2, r6
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	f04f 0400 	mov.w	r4, #0
 800271c:	0154      	lsls	r4, r2, #5
 800271e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002722:	014b      	lsls	r3, r1, #5
 8002724:	4619      	mov	r1, r3
 8002726:	4622      	mov	r2, r4
 8002728:	1b49      	subs	r1, r1, r5
 800272a:	eb62 0206 	sbc.w	r2, r2, r6
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	f04f 0400 	mov.w	r4, #0
 8002736:	0194      	lsls	r4, r2, #6
 8002738:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800273c:	018b      	lsls	r3, r1, #6
 800273e:	1a5b      	subs	r3, r3, r1
 8002740:	eb64 0402 	sbc.w	r4, r4, r2
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	00e2      	lsls	r2, r4, #3
 800274e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002752:	00d9      	lsls	r1, r3, #3
 8002754:	460b      	mov	r3, r1
 8002756:	4614      	mov	r4, r2
 8002758:	195b      	adds	r3, r3, r5
 800275a:	eb44 0406 	adc.w	r4, r4, r6
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	0262      	lsls	r2, r4, #9
 8002768:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800276c:	0259      	lsls	r1, r3, #9
 800276e:	460b      	mov	r3, r1
 8002770:	4614      	mov	r4, r2
 8002772:	4618      	mov	r0, r3
 8002774:	4621      	mov	r1, r4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f04f 0400 	mov.w	r4, #0
 800277c:	461a      	mov	r2, r3
 800277e:	4623      	mov	r3, r4
 8002780:	f7fd fd4a 	bl	8000218 <__aeabi_uldivmod>
 8002784:	4603      	mov	r3, r0
 8002786:	460c      	mov	r4, r1
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	e049      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	f04f 0400 	mov.w	r4, #0
 8002796:	f240 11ff 	movw	r1, #511	; 0x1ff
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	ea03 0501 	and.w	r5, r3, r1
 80027a2:	ea04 0602 	and.w	r6, r4, r2
 80027a6:	4629      	mov	r1, r5
 80027a8:	4632      	mov	r2, r6
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	f04f 0400 	mov.w	r4, #0
 80027b2:	0154      	lsls	r4, r2, #5
 80027b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027b8:	014b      	lsls	r3, r1, #5
 80027ba:	4619      	mov	r1, r3
 80027bc:	4622      	mov	r2, r4
 80027be:	1b49      	subs	r1, r1, r5
 80027c0:	eb62 0206 	sbc.w	r2, r2, r6
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	f04f 0400 	mov.w	r4, #0
 80027cc:	0194      	lsls	r4, r2, #6
 80027ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027d2:	018b      	lsls	r3, r1, #6
 80027d4:	1a5b      	subs	r3, r3, r1
 80027d6:	eb64 0402 	sbc.w	r4, r4, r2
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	00e2      	lsls	r2, r4, #3
 80027e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027e8:	00d9      	lsls	r1, r3, #3
 80027ea:	460b      	mov	r3, r1
 80027ec:	4614      	mov	r4, r2
 80027ee:	195b      	adds	r3, r3, r5
 80027f0:	eb44 0406 	adc.w	r4, r4, r6
 80027f4:	f04f 0100 	mov.w	r1, #0
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	02a2      	lsls	r2, r4, #10
 80027fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002802:	0299      	lsls	r1, r3, #10
 8002804:	460b      	mov	r3, r1
 8002806:	4614      	mov	r4, r2
 8002808:	4618      	mov	r0, r3
 800280a:	4621      	mov	r1, r4
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f04f 0400 	mov.w	r4, #0
 8002812:	461a      	mov	r2, r3
 8002814:	4623      	mov	r3, r4
 8002816:	f7fd fcff 	bl	8000218 <__aeabi_uldivmod>
 800281a:	4603      	mov	r3, r0
 800281c:	460c      	mov	r4, r1
 800281e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	60bb      	str	r3, [r7, #8]
      break;
 800283a:	e002      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800283e:	60bb      	str	r3, [r7, #8]
      break;
 8002840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002842:	68bb      	ldr	r3, [r7, #8]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_GetHCLKFreq+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000

08002870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002894:	4b7a      	ldr	r3, [pc, #488]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	4977      	ldr	r1, [pc, #476]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80028c2:	4b6f      	ldr	r3, [pc, #444]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	496b      	ldr	r1, [pc, #428]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80028e0:	2301      	movs	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d022      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80028f0:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fe:	4960      	ldr	r1, [pc, #384]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800290e:	2301      	movs	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800291a:	d10c      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800291c:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800291e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002922:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	3b01      	subs	r3, #1
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	4954      	ldr	r1, [pc, #336]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d022      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8002942:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002948:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002950:	494b      	ldr	r1, [pc, #300]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002960:	2301      	movs	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800296c:	d10c      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800296e:	4b44      	ldr	r3, [pc, #272]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002974:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	3b01      	subs	r3, #1
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	493f      	ldr	r1, [pc, #252]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 808a 	beq.w	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4a38      	ldr	r2, [pc, #224]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80029b2:	4b34      	ldr	r3, [pc, #208]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029be:	f7fe f899 	bl	8000af4 <HAL_GetTick>
 80029c2:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029c6:	f7fe f895 	bl	8000af4 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1d1      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029d8:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029e4:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ec:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02f      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d028      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d114      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe f863 	bl	8000af4 <HAL_GetTick>
 8002a2e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe f85f 	bl	8000af4 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e199      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ee      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a60:	d114      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a76:	4902      	ldr	r1, [pc, #8]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]
 8002a7c:	e00c      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40007000 	.word	0x40007000
 8002a88:	42470e40 	.word	0x42470e40
 8002a8c:	4b89      	ldr	r3, [pc, #548]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a88      	ldr	r2, [pc, #544]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a96:	6093      	str	r3, [r2, #8]
 8002a98:	4b86      	ldr	r3, [pc, #536]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	4983      	ldr	r1, [pc, #524]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d004      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002abc:	4b7e      	ldr	r3, [pc, #504]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8002abe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002acc:	4b79      	ldr	r3, [pc, #484]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	4976      	ldr	r1, [pc, #472]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d011      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aee:	4b71      	ldr	r3, [pc, #452]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	496d      	ldr	r1, [pc, #436]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002b1e:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b24:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	4961      	ldr	r1, [pc, #388]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d004      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b80      	cmp	r3, #128	; 0x80
 8002b40:	f040 80c6 	bne.w	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b44:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b4a:	f7fd ffd3 	bl	8000af4 <HAL_GetTick>
 8002b4e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b52:	f7fd ffcf 	bl	8000af4 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e10b      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b64:	4b53      	ldr	r3, [pc, #332]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002b70:	4a53      	ldr	r2, [pc, #332]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b76:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d023      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d019      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb4:	d00e      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d019      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d115      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bd2:	d110      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	071b      	lsls	r3, r3, #28
 8002bee:	4931      	ldr	r1, [pc, #196]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d026      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d122      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c1e:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c24:	0e1b      	lsrs	r3, r3, #24
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	431a      	orrs	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	061b      	lsls	r3, r3, #24
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	071b      	lsls	r3, r3, #28
 8002c44:	491b      	ldr	r1, [pc, #108]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c52:	f023 021f 	bic.w	r2, r3, #31
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	4915      	ldr	r1, [pc, #84]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	019b      	lsls	r3, r3, #6
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	490a      	ldr	r1, [pc, #40]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c98:	f7fd ff2c 	bl	8000af4 <HAL_GetTick>
 8002c9c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c9e:	e011      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ca0:	f7fd ff28 	bl	8000af4 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d90a      	bls.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e064      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	424711e0 	.word	0x424711e0
 8002cbc:	42470068 	.word	0x42470068
 8002cc0:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0e7      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	4926      	ldr	r1, [pc, #152]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cfe:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d04:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	491d      	ldr	r1, [pc, #116]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002d20:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	4915      	ldr	r1, [pc, #84]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d48:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	490c      	ldr	r1, [pc, #48]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	4904      	ldr	r1, [pc, #16]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800

08002d88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d075      	beq.n	8002e8c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002da0:	4ba2      	ldr	r3, [pc, #648]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d00c      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dac:	4b9f      	ldr	r3, [pc, #636]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d112      	bne.n	8002dde <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db8:	4b9c      	ldr	r3, [pc, #624]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc4:	d10b      	bne.n	8002dde <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc6:	4b99      	ldr	r3, [pc, #612]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d05b      	beq.n	8002e8a <HAL_RCC_OscConfig+0x102>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d157      	bne.n	8002e8a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e20b      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de6:	d106      	bne.n	8002df6 <HAL_RCC_OscConfig+0x6e>
 8002de8:	4b90      	ldr	r3, [pc, #576]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a8f      	ldr	r2, [pc, #572]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	e01d      	b.n	8002e32 <HAL_RCC_OscConfig+0xaa>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RCC_OscConfig+0x92>
 8002e00:	4b8a      	ldr	r3, [pc, #552]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a89      	ldr	r2, [pc, #548]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b87      	ldr	r3, [pc, #540]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a86      	ldr	r2, [pc, #536]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	e00b      	b.n	8002e32 <HAL_RCC_OscConfig+0xaa>
 8002e1a:	4b84      	ldr	r3, [pc, #528]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a83      	ldr	r2, [pc, #524]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	4b81      	ldr	r3, [pc, #516]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d013      	beq.n	8002e62 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fd fe5b 	bl	8000af4 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e42:	f7fd fe57 	bl	8000af4 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b64      	cmp	r3, #100	; 0x64
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1d0      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e54:	4b75      	ldr	r3, [pc, #468]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0xba>
 8002e60:	e014      	b.n	8002e8c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fd fe47 	bl	8000af4 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6a:	f7fd fe43 	bl	8000af4 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b64      	cmp	r3, #100	; 0x64
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e1bc      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7c:	4b6b      	ldr	r3, [pc, #428]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0xe2>
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d063      	beq.n	8002f60 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e98:	4b64      	ldr	r3, [pc, #400]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea4:	4b61      	ldr	r3, [pc, #388]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d11c      	bne.n	8002eea <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb0:	4b5e      	ldr	r3, [pc, #376]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d116      	bne.n	8002eea <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebc:	4b5b      	ldr	r3, [pc, #364]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x14c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e190      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b55      	ldr	r3, [pc, #340]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4952      	ldr	r1, [pc, #328]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee8:	e03a      	b.n	8002f60 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d020      	beq.n	8002f34 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef2:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <HAL_RCC_OscConfig+0x2a8>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fd fdfc 	bl	8000af4 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f00:	f7fd fdf8 	bl	8000af4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e171      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f12:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4b43      	ldr	r3, [pc, #268]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	493f      	ldr	r1, [pc, #252]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
 8002f32:	e015      	b.n	8002f60 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f34:	4b3e      	ldr	r3, [pc, #248]	; (8003030 <HAL_RCC_OscConfig+0x2a8>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fd fddb 	bl	8000af4 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f42:	f7fd fdd7 	bl	8000af4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e150      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f54:	4b35      	ldr	r3, [pc, #212]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d030      	beq.n	8002fce <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d016      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f74:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fd fdbb 	bl	8000af4 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f82:	f7fd fdb7 	bl	8000af4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e130      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1fa>
 8002fa0:	e015      	b.n	8002fce <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa2:	4b24      	ldr	r3, [pc, #144]	; (8003034 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fd fda4 	bl	8000af4 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fd fda0 	bl	8000af4 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e119      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 809f 	beq.w	800311a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10f      	bne.n	800300c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_OscConfig+0x2a4>)
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003008:	2301      	movs	r3, #1
 800300a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_RCC_OscConfig+0x2b0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d120      	bne.n	800305a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003018:	4b07      	ldr	r3, [pc, #28]	; (8003038 <HAL_RCC_OscConfig+0x2b0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a06      	ldr	r2, [pc, #24]	; (8003038 <HAL_RCC_OscConfig+0x2b0>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003024:	f7fd fd66 	bl	8000af4 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	e010      	b.n	800304e <HAL_RCC_OscConfig+0x2c6>
 800302c:	40023800 	.word	0x40023800
 8003030:	42470000 	.word	0x42470000
 8003034:	42470e80 	.word	0x42470e80
 8003038:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7fd fd5a 	bl	8000af4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0d3      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304e:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <HAL_RCC_OscConfig+0x478>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d106      	bne.n	8003070 <HAL_RCC_OscConfig+0x2e8>
 8003062:	4b68      	ldr	r3, [pc, #416]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a67      	ldr	r2, [pc, #412]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	e01c      	b.n	80030aa <HAL_RCC_OscConfig+0x322>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_OscConfig+0x30a>
 8003078:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a61      	ldr	r2, [pc, #388]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	4b5f      	ldr	r3, [pc, #380]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a5e      	ldr	r2, [pc, #376]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
 8003090:	e00b      	b.n	80030aa <HAL_RCC_OscConfig+0x322>
 8003092:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a5b      	ldr	r2, [pc, #364]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	4b59      	ldr	r3, [pc, #356]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a58      	ldr	r2, [pc, #352]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d015      	beq.n	80030de <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b2:	f7fd fd1f 	bl	8000af4 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7fd fd1b 	bl	8000af4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e092      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	4b4c      	ldr	r3, [pc, #304]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ee      	beq.n	80030ba <HAL_RCC_OscConfig+0x332>
 80030dc:	e014      	b.n	8003108 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fd fd09 	bl	8000af4 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fd fd05 	bl	8000af4 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e07c      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fc:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ee      	bne.n	80030e6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003108:	7dfb      	ldrb	r3, [r7, #23]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d105      	bne.n	800311a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a3c      	ldr	r2, [pc, #240]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 8003114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d068      	beq.n	80031f4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003122:	4b38      	ldr	r3, [pc, #224]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b08      	cmp	r3, #8
 800312c:	d060      	beq.n	80031f0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d145      	bne.n	80031c2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003136:	4b34      	ldr	r3, [pc, #208]	; (8003208 <HAL_RCC_OscConfig+0x480>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fd fcda 	bl	8000af4 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003144:	f7fd fcd6 	bl	8000af4 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e04f      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003156:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	3b01      	subs	r3, #1
 800317c:	041b      	lsls	r3, r3, #16
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	071b      	lsls	r3, r3, #28
 800318e:	491d      	ldr	r1, [pc, #116]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003194:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_RCC_OscConfig+0x480>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7fd fcab 	bl	8000af4 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a2:	f7fd fca7 	bl	8000af4 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e020      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b4:	4b13      	ldr	r3, [pc, #76]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x41a>
 80031c0:	e018      	b.n	80031f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <HAL_RCC_OscConfig+0x480>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fd fc94 	bl	8000af4 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fd fc90 	bl	8000af4 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e009      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <HAL_RCC_OscConfig+0x47c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x448>
 80031ee:	e001      	b.n	80031f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40007000 	.word	0x40007000
 8003204:	40023800 	.word	0x40023800
 8003208:	42470060 	.word	0x42470060

0800320c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e022      	b.n	8003264 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fd facb 	bl	80007cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2203      	movs	r2, #3
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f814 	bl	800326c <HAL_SD_InitCard>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e00a      	b.n	8003264 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800326c:	b5b0      	push	{r4, r5, r7, lr}
 800326e:	b08e      	sub	sp, #56	; 0x38
 8003270:	af04      	add	r7, sp, #16
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003274:	2300      	movs	r3, #0
 8003276:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003288:	2376      	movs	r3, #118	; 0x76
 800328a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681d      	ldr	r5, [r3, #0]
 8003290:	466c      	mov	r4, sp
 8003292:	f107 0314 	add.w	r3, r7, #20
 8003296:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800329a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800329e:	f107 0308 	add.w	r3, r7, #8
 80032a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a4:	4628      	mov	r0, r5
 80032a6:	f001 f929 	bl	80044fc <SDIO_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80032b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e031      	b.n	8003320 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <HAL_SD_InitCard+0xbc>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 f961 	bl	800458e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_SD_InitCard+0xbc>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fefc 	bl	80040d0 <SD_PowerON>
 80032d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e013      	b.n	8003320 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fe1b 	bl	8003f34 <SD_InitCard>
 80032fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3728      	adds	r7, #40	; 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bdb0      	pop	{r4, r5, r7, pc}
 8003328:	422580a0 	.word	0x422580a0

0800332c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b092      	sub	sp, #72	; 0x48
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800333a:	f7fd fbdb 	bl	8000af4 <HAL_GetTick>
 800333e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d107      	bne.n	800335e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e1d7      	b.n	800370e <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	f040 81ca 	bne.w	8003700 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	441a      	add	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	429a      	cmp	r2, r3
 800337e:	d907      	bls.n	8003390 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e1be      	b.n	800370e <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2203      	movs	r2, #3
 8003394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2200      	movs	r2, #0
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d002      	beq.n	80033ae <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	025b      	lsls	r3, r3, #9
 80033ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 f97c 	bl	80046b4 <SDMMC_CmdBlockLength>
 80033bc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80033be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00f      	beq.n	80033e4 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a9a      	ldr	r2, [pc, #616]	; (8003634 <HAL_SD_ReadBlocks+0x308>)
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d2:	431a      	orrs	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e194      	b.n	800370e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	025b      	lsls	r3, r3, #9
 80033ee:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80033f0:	2390      	movs	r3, #144	; 0x90
 80033f2:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80033f4:	2302      	movs	r3, #2
 80033f6:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f107 0214 	add.w	r2, r7, #20
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f001 f926 	bl	800465c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d90a      	bls.n	800342c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2202      	movs	r2, #2
 800341a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003422:	4618      	mov	r0, r3
 8003424:	f001 f98a 	bl	800473c <SDMMC_CmdReadMultiBlock>
 8003428:	6478      	str	r0, [r7, #68]	; 0x44
 800342a:	e009      	b.n	8003440 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003438:	4618      	mov	r0, r3
 800343a:	f001 f95d 	bl	80046f8 <SDMMC_CmdReadSingleBlock>
 800343e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003442:	2b00      	cmp	r3, #0
 8003444:	d012      	beq.n	800346c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a7a      	ldr	r2, [pc, #488]	; (8003634 <HAL_SD_ReadBlocks+0x308>)
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003454:	431a      	orrs	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e150      	b.n	800370e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003470:	e061      	b.n	8003536 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d03c      	beq.n	80034fa <HAL_SD_ReadBlocks+0x1ce>
 8003480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d039      	beq.n	80034fa <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003486:	2300      	movs	r3, #0
 8003488:	643b      	str	r3, [r7, #64]	; 0x40
 800348a:	e033      	b.n	80034f4 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f001 f85e 	bl	8004552 <SDIO_ReadFIFO>
 8003496:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349a:	b2da      	uxtb	r2, r3
 800349c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a2:	3301      	adds	r3, #1
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a8:	3b01      	subs	r3, #1
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b8:	3301      	adds	r3, #1
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034be:	3b01      	subs	r3, #1
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ca:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ce:	3301      	adds	r3, #1
 80034d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d4:	3b01      	subs	r3, #1
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80034d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034da:	0e1b      	lsrs	r3, r3, #24
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	3301      	adds	r3, #1
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ea:	3b01      	subs	r3, #1
 80034ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80034ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f0:	3301      	adds	r3, #1
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
 80034f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f6:	2b07      	cmp	r3, #7
 80034f8:	d9c8      	bls.n	800348c <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80034fa:	f7fd fafb 	bl	8000af4 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003506:	429a      	cmp	r2, r3
 8003508:	d902      	bls.n	8003510 <HAL_SD_ReadBlocks+0x1e4>
 800350a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800350c:	2b00      	cmp	r3, #0
 800350e:	d112      	bne.n	8003536 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a47      	ldr	r2, [pc, #284]	; (8003634 <HAL_SD_ReadBlocks+0x308>)
 8003516:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0eb      	b.n	800370e <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003540:	2b00      	cmp	r3, #0
 8003542:	d096      	beq.n	8003472 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d022      	beq.n	8003598 <HAL_SD_ReadBlocks+0x26c>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d91f      	bls.n	8003598 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	2b03      	cmp	r3, #3
 800355e:	d01b      	beq.n	8003598 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f001 f94f 	bl	8004808 <SDMMC_CmdStopTransfer>
 800356a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800356c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356e:	2b00      	cmp	r3, #0
 8003570:	d012      	beq.n	8003598 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2f      	ldr	r2, [pc, #188]	; (8003634 <HAL_SD_ReadBlocks+0x308>)
 8003578:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0ba      	b.n	800370e <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d012      	beq.n	80035cc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a22      	ldr	r2, [pc, #136]	; (8003634 <HAL_SD_ReadBlocks+0x308>)
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	f043 0208 	orr.w	r2, r3, #8
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0a0      	b.n	800370e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d012      	beq.n	8003600 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a15      	ldr	r2, [pc, #84]	; (8003634 <HAL_SD_ReadBlocks+0x308>)
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	f043 0202 	orr.w	r2, r3, #2
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e086      	b.n	800370e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d063      	beq.n	80036d6 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a08      	ldr	r2, [pc, #32]	; (8003634 <HAL_SD_ReadBlocks+0x308>)
 8003614:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	f043 0220 	orr.w	r2, r3, #32
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e06c      	b.n	800370e <HAL_SD_ReadBlocks+0x3e2>
 8003634:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 ff88 	bl	8004552 <SDIO_ReadFIFO>
 8003642:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	b2da      	uxtb	r2, r3
 8003648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	3301      	adds	r3, #1
 8003650:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003654:	3b01      	subs	r3, #1
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	b2da      	uxtb	r2, r3
 800365e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003660:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003664:	3301      	adds	r3, #1
 8003666:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366a:	3b01      	subs	r3, #1
 800366c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	b2da      	uxtb	r2, r3
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	3301      	adds	r3, #1
 800367c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800367e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003680:	3b01      	subs	r3, #1
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	0e1b      	lsrs	r3, r3, #24
 8003688:	b2da      	uxtb	r2, r3
 800368a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003690:	3301      	adds	r3, #1
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003696:	3b01      	subs	r3, #1
 8003698:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800369a:	f7fd fa2b 	bl	8000af4 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d902      	bls.n	80036b0 <HAL_SD_ReadBlocks+0x384>
 80036aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d112      	bne.n	80036d6 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <HAL_SD_ReadBlocks+0x3ec>)
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e01b      	b.n	800370e <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_SD_ReadBlocks+0x3be>
 80036e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1a6      	bne.n	8003638 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e006      	b.n	800370e <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3748      	adds	r7, #72	; 0x48
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	004005ff 	.word	0x004005ff

0800371c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b092      	sub	sp, #72	; 0x48
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800372a:	f7fd f9e3 	bl	8000af4 <HAL_GetTick>
 800372e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d107      	bne.n	800374e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e182      	b.n	8003a54 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	f040 8175 	bne.w	8003a46 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	441a      	add	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	429a      	cmp	r2, r3
 800376e:	d907      	bls.n	8003780 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e169      	b.n	8003a54 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2203      	movs	r2, #3
 8003784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2200      	movs	r2, #0
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	2b01      	cmp	r3, #1
 8003796:	d002      	beq.n	800379e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379a:	025b      	lsls	r3, r3, #9
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 ff84 	bl	80046b4 <SDMMC_CmdBlockLength>
 80037ac:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80037ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00f      	beq.n	80037d4 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a9c      	ldr	r2, [pc, #624]	; (8003a2c <HAL_SD_WriteBlocks+0x310>)
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e13f      	b.n	8003a54 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	025b      	lsls	r3, r3, #9
 80037de:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80037e0:	2390      	movs	r3, #144	; 0x90
 80037e2:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80037e4:	2300      	movs	r3, #0
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80037ec:	2301      	movs	r3, #1
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f107 0218 	add.w	r2, r7, #24
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 ff2e 	bl	800465c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d90a      	bls.n	800381c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003812:	4618      	mov	r0, r3
 8003814:	f000 ffd6 	bl	80047c4 <SDMMC_CmdWriteMultiBlock>
 8003818:	6478      	str	r0, [r7, #68]	; 0x44
 800381a:	e009      	b.n	8003830 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2210      	movs	r2, #16
 8003820:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003828:	4618      	mov	r0, r3
 800382a:	f000 ffa9 	bl	8004780 <SDMMC_CmdWriteSingleBlock>
 800382e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003832:	2b00      	cmp	r3, #0
 8003834:	d012      	beq.n	800385c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a7c      	ldr	r2, [pc, #496]	; (8003a2c <HAL_SD_WriteBlocks+0x310>)
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0fb      	b.n	8003a54 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003860:	e065      	b.n	800392e <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d040      	beq.n	80038f2 <HAL_SD_WriteBlocks+0x1d6>
 8003870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d03d      	beq.n	80038f2 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003876:	2300      	movs	r3, #0
 8003878:	643b      	str	r3, [r7, #64]	; 0x40
 800387a:	e037      	b.n	80038ec <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003884:	3301      	adds	r3, #1
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388a:	3b01      	subs	r3, #1
 800388c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389c:	3301      	adds	r3, #1
 800389e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a2:	3b01      	subs	r3, #1
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	041a      	lsls	r2, r3, #16
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80038b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b4:	3301      	adds	r3, #1
 80038b6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ba:	3b01      	subs	r3, #1
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80038be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	061a      	lsls	r2, r3, #24
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80038ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038cc:	3301      	adds	r3, #1
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d2:	3b01      	subs	r3, #1
 80038d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f107 0214 	add.w	r2, r7, #20
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fe43 	bl	800456c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80038e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e8:	3301      	adds	r3, #1
 80038ea:	643b      	str	r3, [r7, #64]	; 0x40
 80038ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ee:	2b07      	cmp	r3, #7
 80038f0:	d9c4      	bls.n	800387c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80038f2:	f7fd f8ff 	bl	8000af4 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038fe:	429a      	cmp	r2, r3
 8003900:	d902      	bls.n	8003908 <HAL_SD_WriteBlocks+0x1ec>
 8003902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003904:	2b00      	cmp	r3, #0
 8003906:	d112      	bne.n	800392e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a47      	ldr	r2, [pc, #284]	; (8003a2c <HAL_SD_WriteBlocks+0x310>)
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003916:	431a      	orrs	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e092      	b.n	8003a54 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003934:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003938:	2b00      	cmp	r3, #0
 800393a:	d092      	beq.n	8003862 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d022      	beq.n	8003990 <HAL_SD_WriteBlocks+0x274>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d91f      	bls.n	8003990 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	2b03      	cmp	r3, #3
 8003956:	d01b      	beq.n	8003990 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f000 ff53 	bl	8004808 <SDMMC_CmdStopTransfer>
 8003962:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003966:	2b00      	cmp	r3, #0
 8003968:	d012      	beq.n	8003990 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2f      	ldr	r2, [pc, #188]	; (8003a2c <HAL_SD_WriteBlocks+0x310>)
 8003970:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003978:	431a      	orrs	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e061      	b.n	8003a54 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <HAL_SD_WriteBlocks+0x310>)
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	f043 0208 	orr.w	r2, r3, #8
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e047      	b.n	8003a54 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d012      	beq.n	80039f8 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <HAL_SD_WriteBlocks+0x310>)
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	f043 0202 	orr.w	r2, r3, #2
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e02d      	b.n	8003a54 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d014      	beq.n	8003a30 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a08      	ldr	r2, [pc, #32]	; (8003a2c <HAL_SD_WriteBlocks+0x310>)
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	f043 0210 	orr.w	r2, r3, #16
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e013      	b.n	8003a54 <HAL_SD_WriteBlocks+0x338>
 8003a2c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e006      	b.n	8003a54 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
  }
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3748      	adds	r7, #72	; 0x48
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a6a:	0f9b      	lsrs	r3, r3, #30
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a76:	0e9b      	lsrs	r3, r3, #26
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a88:	0e1b      	lsrs	r3, r3, #24
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9a:	0c1b      	lsrs	r3, r3, #16
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003abc:	0d1b      	lsrs	r3, r3, #20
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ada:	0bdb      	lsrs	r3, r3, #15
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aec:	0b9b      	lsrs	r3, r3, #14
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003afe:	0b5b      	lsrs	r3, r3, #13
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b10:	0b1b      	lsrs	r3, r3, #12
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d163      	bne.n	8003bf4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b30:	009a      	lsls	r2, r3, #2
 8003b32:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003b3c:	0f92      	lsrs	r2, r2, #30
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b48:	0edb      	lsrs	r3, r3, #27
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5a:	0e1b      	lsrs	r3, r3, #24
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b6c:	0d5b      	lsrs	r3, r3, #21
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b7e:	0c9b      	lsrs	r3, r3, #18
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b90:	0bdb      	lsrs	r3, r3, #15
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	7e1b      	ldrb	r3, [r3, #24]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003bbe:	fb02 f203 	mul.w	r2, r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	7a1b      	ldrb	r3, [r3, #8]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003be0:	0a52      	lsrs	r2, r2, #9
 8003be2:	fb02 f203 	mul.w	r2, r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf0:	661a      	str	r2, [r3, #96]	; 0x60
 8003bf2:	e031      	b.n	8003c58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d11d      	bne.n	8003c38 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	3301      	adds	r3, #1
 8003c18:	029a      	lsls	r2, r3, #10
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	661a      	str	r2, [r3, #96]	; 0x60
 8003c36:	e00f      	b.n	8003c58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a58      	ldr	r2, [pc, #352]	; (8003da0 <HAL_SD_GetCardCSD+0x344>)
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e09d      	b.n	8003d94 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c5c:	0b9b      	lsrs	r3, r3, #14
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6e:	09db      	lsrs	r3, r3, #7
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	0fdb      	lsrs	r3, r3, #31
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	0f5b      	lsrs	r3, r3, #29
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	0e9b      	lsrs	r3, r3, #26
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	0d9b      	lsrs	r3, r3, #22
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	0d5b      	lsrs	r3, r3, #21
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	0bdb      	lsrs	r3, r3, #15
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	0b9b      	lsrs	r3, r3, #14
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	0b5b      	lsrs	r3, r3, #13
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	0b1b      	lsrs	r3, r3, #12
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	0a9b      	lsrs	r3, r3, #10
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	004005ff 	.word	0x004005ff

08003da4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003dfc:	b5b0      	push	{r4, r5, r7, lr}
 8003dfe:	b08e      	sub	sp, #56	; 0x38
 8003e00:	af04      	add	r7, sp, #16
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2203      	movs	r2, #3
 8003e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d02e      	beq.n	8003e74 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1c:	d106      	bne.n	8003e2c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
 8003e2a:	e029      	b.n	8003e80 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e32:	d10a      	bne.n	8003e4a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa01 	bl	800423c <SD_WideBus_Enable>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
 8003e48:	e01a      	b.n	8003e80 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10a      	bne.n	8003e66 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fa3e 	bl	80042d2 <SD_WideBus_Disable>
 8003e56:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38
 8003e64:	e00c      	b.n	8003e80 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
 8003e72:	e005      	b.n	8003e80 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d009      	beq.n	8003e9c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e024      	b.n	8003ee6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681d      	ldr	r5, [r3, #0]
 8003ec2:	466c      	mov	r4, sp
 8003ec4:	f107 0318 	add.w	r3, r7, #24
 8003ec8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ecc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ed0:	f107 030c 	add.w	r3, r7, #12
 8003ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 fb10 	bl	80044fc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3728      	adds	r7, #40	; 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bdb0      	pop	{r4, r5, r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	004005ff 	.word	0x004005ff

08003ef4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003f00:	f107 030c 	add.w	r3, r7, #12
 8003f04:	4619      	mov	r1, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f970 	bl	80041ec <SD_SendStatus>
 8003f0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	0a5b      	lsrs	r3, r3, #9
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003f2a:	693b      	ldr	r3, [r7, #16]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f34:	b5b0      	push	{r4, r5, r7, lr}
 8003f36:	b094      	sub	sp, #80	; 0x50
 8003f38:	af04      	add	r7, sp, #16
 8003f3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fb31 	bl	80045ac <SDIO_GetPowerState>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f54:	e0b7      	b.n	80040c6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d02f      	beq.n	8003fbe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fd5a 	bl	8004a1c <SDMMC_CmdSendCID>
 8003f68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <SD_InitCard+0x40>
    {
      return errorstate;
 8003f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f72:	e0a8      	b.n	80040c6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fb5b 	bl	8004636 <SDIO_GetResponse>
 8003f80:	4602      	mov	r2, r0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2104      	movs	r1, #4
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fb52 	bl	8004636 <SDIO_GetResponse>
 8003f92:	4602      	mov	r2, r0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2108      	movs	r1, #8
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fb49 	bl	8004636 <SDIO_GetResponse>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	210c      	movs	r1, #12
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fb40 	bl	8004636 <SDIO_GetResponse>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d00d      	beq.n	8003fe2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f107 020e 	add.w	r2, r7, #14
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fd60 	bl	8004a96 <SDMMC_CmdSetRelAdd>
 8003fd6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <SD_InitCard+0xae>
    {
      return errorstate;
 8003fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe0:	e071      	b.n	80040c6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d036      	beq.n	8004058 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003fea:	89fb      	ldrh	r3, [r7, #14]
 8003fec:	461a      	mov	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f000 fd2a 	bl	8004a58 <SDMMC_CmdSendCSD>
 8004004:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <SD_InitCard+0xdc>
    {
      return errorstate;
 800400c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400e:	e05a      	b.n	80040c6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fb0d 	bl	8004636 <SDIO_GetResponse>
 800401c:	4602      	mov	r2, r0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2104      	movs	r1, #4
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fb04 	bl	8004636 <SDIO_GetResponse>
 800402e:	4602      	mov	r2, r0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2108      	movs	r1, #8
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fafb 	bl	8004636 <SDIO_GetResponse>
 8004040:	4602      	mov	r2, r0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	210c      	movs	r1, #12
 800404c:	4618      	mov	r0, r3
 800404e:	f000 faf2 	bl	8004636 <SDIO_GetResponse>
 8004052:	4602      	mov	r2, r0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2104      	movs	r1, #4
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fae9 	bl	8004636 <SDIO_GetResponse>
 8004064:	4603      	mov	r3, r0
 8004066:	0d1a      	lsrs	r2, r3, #20
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800406c:	f107 0310 	add.w	r3, r7, #16
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fcf2 	bl	8003a5c <HAL_SD_GetCardCSD>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800407e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004082:	e020      	b.n	80040c6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6819      	ldr	r1, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	041b      	lsls	r3, r3, #16
 800408e:	f04f 0400 	mov.w	r4, #0
 8004092:	461a      	mov	r2, r3
 8004094:	4623      	mov	r3, r4
 8004096:	4608      	mov	r0, r1
 8004098:	f000 fbd8 	bl	800484c <SDMMC_CmdSelDesel>
 800409c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800409e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <SD_InitCard+0x174>
  {
    return errorstate;
 80040a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a6:	e00e      	b.n	80040c6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681d      	ldr	r5, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	466c      	mov	r4, sp
 80040b0:	f103 0210 	add.w	r2, r3, #16
 80040b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80040b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040ba:	3304      	adds	r3, #4
 80040bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040be:	4628      	mov	r0, r5
 80040c0:	f000 fa1c 	bl	80044fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3740      	adds	r7, #64	; 0x40
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080040d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fbd2 	bl	8004892 <SDMMC_CmdGoIdleState>
 80040ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	e072      	b.n	80041e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fbe5 	bl	80048ce <SDMMC_CmdOperCond>
 8004104:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fbbb 	bl	8004892 <SDMMC_CmdGoIdleState>
 800411c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	e05b      	b.n	80041e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004132:	2b01      	cmp	r3, #1
 8004134:	d137      	bne.n	80041a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fbe5 	bl	800490c <SDMMC_CmdAppCommand>
 8004142:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d02d      	beq.n	80041a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800414a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800414e:	e047      	b.n	80041e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fbd8 	bl	800490c <SDMMC_CmdAppCommand>
 800415c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <SD_PowerON+0x98>
    {
      return errorstate;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	e03b      	b.n	80041e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	491e      	ldr	r1, [pc, #120]	; (80041e8 <SD_PowerON+0x118>)
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fbee 	bl	8004950 <SDMMC_CmdAppOperCommand>
 8004174:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800417c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004180:	e02e      	b.n	80041e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fa54 	bl	8004636 <SDIO_GetResponse>
 800418e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	0fdb      	lsrs	r3, r3, #31
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <SD_PowerON+0xcc>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <SD_PowerON+0xce>
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]

    count++;
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	3301      	adds	r3, #1
 80041a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d802      	bhi.n	80041b6 <SD_PowerON+0xe6>
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0cc      	beq.n	8004150 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80041bc:	4293      	cmp	r3, r2
 80041be:	d902      	bls.n	80041c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80041c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041c4:	e00c      	b.n	80041e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
 80041d6:	e002      	b.n	80041de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	c1100000 	.word	0xc1100000

080041ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d102      	bne.n	8004202 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80041fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004200:	e018      	b.n	8004234 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420a:	041b      	lsls	r3, r3, #16
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f000 fc62 	bl	8004ad8 <SDMMC_CmdSendStatus>
 8004214:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <SD_SendStatus+0x34>
  {
    return errorstate;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	e009      	b.n	8004234 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2100      	movs	r1, #0
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fa05 	bl	8004636 <SDIO_GetResponse>
 800422c:	4602      	mov	r2, r0
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	2300      	movs	r3, #0
 800424a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f9ef 	bl	8004636 <SDIO_GetResponse>
 8004258:	4603      	mov	r3, r0
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004262:	d102      	bne.n	800426a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004268:	e02f      	b.n	80042ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800426a:	f107 030c 	add.w	r3, r7, #12
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f879 	bl	8004368 <SD_FindSCR>
 8004276:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	e023      	b.n	80042ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01c      	beq.n	80042c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	041b      	lsls	r3, r3, #16
 8004296:	4619      	mov	r1, r3
 8004298:	4610      	mov	r0, r2
 800429a:	f000 fb37 	bl	800490c <SDMMC_CmdAppCommand>
 800429e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	e00f      	b.n	80042ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2102      	movs	r1, #2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fb70 	bl	8004996 <SDMMC_CmdBusWidth>
 80042b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	e003      	b.n	80042ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e001      	b.n	80042ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80042c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	2300      	movs	r3, #0
 80042e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 f9a4 	bl	8004636 <SDIO_GetResponse>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042f8:	d102      	bne.n	8004300 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80042fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042fe:	e02f      	b.n	8004360 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004300:	f107 030c 	add.w	r3, r7, #12
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f82e 	bl	8004368 <SD_FindSCR>
 800430c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	e023      	b.n	8004360 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01c      	beq.n	800435c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f000 faec 	bl	800490c <SDMMC_CmdAppCommand>
 8004334:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	e00f      	b.n	8004360 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fb25 	bl	8004996 <SDMMC_CmdBusWidth>
 800434c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	e003      	b.n	8004360 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004358:	2300      	movs	r3, #0
 800435a:	e001      	b.n	8004360 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800435c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b08f      	sub	sp, #60	; 0x3c
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004372:	f7fc fbbf 	bl	8000af4 <HAL_GetTick>
 8004376:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2108      	movs	r1, #8
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f990 	bl	80046b4 <SDMMC_CmdBlockLength>
 8004394:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	e0a9      	b.n	80044f4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f000 faad 	bl	800490c <SDMMC_CmdAppCommand>
 80043b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <SD_FindSCR+0x56>
  {
    return errorstate;
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	e09a      	b.n	80044f4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80043c4:	2308      	movs	r3, #8
 80043c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80043c8:	2330      	movs	r3, #48	; 0x30
 80043ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80043cc:	2302      	movs	r3, #2
 80043ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80043d4:	2301      	movs	r3, #1
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f107 0210 	add.w	r2, r7, #16
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f93a 	bl	800465c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 faf4 	bl	80049da <SDMMC_CmdSendSCR>
 80043f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d022      	beq.n	8004440 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	e07a      	b.n	80044f4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00e      	beq.n	800442a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6819      	ldr	r1, [r3, #0]
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	f107 0208 	add.w	r2, r7, #8
 8004418:	18d4      	adds	r4, r2, r3
 800441a:	4608      	mov	r0, r1
 800441c:	f000 f899 	bl	8004552 <SDIO_ReadFIFO>
 8004420:	4603      	mov	r3, r0
 8004422:	6023      	str	r3, [r4, #0]
      index++;
 8004424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004426:	3301      	adds	r3, #1
 8004428:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800442a:	f7fc fb63 	bl	8000af4 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d102      	bne.n	8004440 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800443a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800443e:	e059      	b.n	80044f4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004446:	f240 432a 	movw	r3, #1066	; 0x42a
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0d6      	beq.n	80043fe <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2208      	movs	r2, #8
 8004464:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004466:	2308      	movs	r3, #8
 8004468:	e044      	b.n	80044f4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2202      	movs	r2, #2
 800447e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004480:	2302      	movs	r3, #2
 8004482:	e037      	b.n	80044f4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2220      	movs	r2, #32
 8004498:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800449a:	2320      	movs	r3, #32
 800449c:	e02a      	b.n	80044f4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	061a      	lsls	r2, r3, #24
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	0a1b      	lsrs	r3, r3, #8
 80044ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80044be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	0e1b      	lsrs	r3, r3, #24
 80044c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	601a      	str	r2, [r3, #0]
    scr++;
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	3304      	adds	r3, #4
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	061a      	lsls	r2, r3, #24
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	0a1b      	lsrs	r3, r3, #8
 80044e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80044e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	0e1b      	lsrs	r3, r3, #24
 80044ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	373c      	adds	r7, #60	; 0x3c
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd90      	pop	{r4, r7, pc}

080044fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80044fc:	b084      	sub	sp, #16
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	f107 001c 	add.w	r0, r7, #28
 800450a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004512:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004514:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004516:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800451a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800451e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004522:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004526:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004536:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	b004      	add	sp, #16
 8004550:	4770      	bx	lr

08004552 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2203      	movs	r2, #3
 800459a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800459c:	2002      	movs	r0, #2
 800459e:	f7fc fab5 	bl	8000b0c <HAL_Delay>
  
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0303 	and.w	r3, r3, #3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80045e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80045ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80045f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004602:	f023 030f 	bic.w	r3, r3, #15
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	b2db      	uxtb	r3, r3
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3314      	adds	r3, #20
 8004644:	461a      	mov	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	4413      	add	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
}  
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004682:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004688:	431a      	orrs	r2, r3
                       Data->DPSM);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800468e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0

}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80046c2:	2310      	movs	r3, #16
 80046c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046c6:	2340      	movs	r3, #64	; 0x40
 80046c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046d4:	f107 0308 	add.w	r3, r7, #8
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff ff74 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	2110      	movs	r1, #16
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa40 	bl	8004b6c <SDMMC_GetCmdResp1>
 80046ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046ee:	69fb      	ldr	r3, [r7, #28]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004706:	2311      	movs	r3, #17
 8004708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800470a:	2340      	movs	r3, #64	; 0x40
 800470c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004716:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004718:	f107 0308 	add.w	r3, r7, #8
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ff52 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004724:	f241 3288 	movw	r2, #5000	; 0x1388
 8004728:	2111      	movs	r1, #17
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa1e 	bl	8004b6c <SDMMC_GetCmdResp1>
 8004730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004732:	69fb      	ldr	r3, [r7, #28]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800474a:	2312      	movs	r3, #18
 800474c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800474e:	2340      	movs	r3, #64	; 0x40
 8004750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800475c:	f107 0308 	add.w	r3, r7, #8
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff ff30 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004768:	f241 3288 	movw	r2, #5000	; 0x1388
 800476c:	2112      	movs	r1, #18
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f9fc 	bl	8004b6c <SDMMC_GetCmdResp1>
 8004774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004776:	69fb      	ldr	r3, [r7, #28]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3720      	adds	r7, #32
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800478e:	2318      	movs	r3, #24
 8004790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004792:	2340      	movs	r3, #64	; 0x40
 8004794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800479a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800479e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047a0:	f107 0308 	add.w	r3, r7, #8
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff ff0e 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	2118      	movs	r1, #24
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f9da 	bl	8004b6c <SDMMC_GetCmdResp1>
 80047b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047ba:	69fb      	ldr	r3, [r7, #28]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80047d2:	2319      	movs	r3, #25
 80047d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047d6:	2340      	movs	r3, #64	; 0x40
 80047d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047e4:	f107 0308 	add.w	r3, r7, #8
 80047e8:	4619      	mov	r1, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff feec 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	2119      	movs	r1, #25
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f9b8 	bl	8004b6c <SDMMC_GetCmdResp1>
 80047fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047fe:	69fb      	ldr	r3, [r7, #28]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004814:	230c      	movs	r3, #12
 8004816:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004818:	2340      	movs	r3, #64	; 0x40
 800481a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004824:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004826:	f107 0308 	add.w	r3, r7, #8
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff fecb 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004832:	4a05      	ldr	r2, [pc, #20]	; (8004848 <SDMMC_CmdStopTransfer+0x40>)
 8004834:	210c      	movs	r1, #12
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f998 	bl	8004b6c <SDMMC_GetCmdResp1>
 800483c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800483e:	69fb      	ldr	r3, [r7, #28]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3720      	adds	r7, #32
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	05f5e100 	.word	0x05f5e100

0800484c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800485c:	2307      	movs	r3, #7
 800485e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004860:	2340      	movs	r3, #64	; 0x40
 8004862:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800486c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800486e:	f107 0310 	add.w	r3, r7, #16
 8004872:	4619      	mov	r1, r3
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff fea7 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	2107      	movs	r1, #7
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f973 	bl	8004b6c <SDMMC_GetCmdResp1>
 8004886:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800488a:	4618      	mov	r0, r3
 800488c:	3728      	adds	r7, #40	; 0x28
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b088      	sub	sp, #32
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80048a2:	2300      	movs	r3, #0
 80048a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048b0:	f107 0308 	add.w	r3, r7, #8
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fe86 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f92d 	bl	8004b1c <SDMMC_GetCmdError>
 80048c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048c4:	69fb      	ldr	r3, [r7, #28]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3720      	adds	r7, #32
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b088      	sub	sp, #32
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80048d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80048da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80048dc:	2308      	movs	r3, #8
 80048de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048e0:	2340      	movs	r3, #64	; 0x40
 80048e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048ee:	f107 0308 	add.w	r3, r7, #8
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff fe67 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fb16 	bl	8004f2c <SDMMC_GetCmdResp7>
 8004900:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004902:	69fb      	ldr	r3, [r7, #28]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800491a:	2337      	movs	r3, #55	; 0x37
 800491c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800491e:	2340      	movs	r3, #64	; 0x40
 8004920:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800492a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800492c:	f107 0308 	add.w	r3, r7, #8
 8004930:	4619      	mov	r1, r3
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff fe48 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004938:	f241 3288 	movw	r2, #5000	; 0x1388
 800493c:	2137      	movs	r1, #55	; 0x37
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f914 	bl	8004b6c <SDMMC_GetCmdResp1>
 8004944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004946:	69fb      	ldr	r3, [r7, #28]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004966:	2329      	movs	r3, #41	; 0x29
 8004968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800496a:	2340      	movs	r3, #64	; 0x40
 800496c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004976:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004978:	f107 0308 	add.w	r3, r7, #8
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff fe22 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fa23 	bl	8004dd0 <SDMMC_GetCmdResp3>
 800498a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800498c:	69fb      	ldr	r3, [r7, #28]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b088      	sub	sp, #32
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80049a4:	2306      	movs	r3, #6
 80049a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049a8:	2340      	movs	r3, #64	; 0x40
 80049aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049b6:	f107 0308 	add.w	r3, r7, #8
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff fe03 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80049c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c6:	2106      	movs	r1, #6
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f8cf 	bl	8004b6c <SDMMC_GetCmdResp1>
 80049ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049d0:	69fb      	ldr	r3, [r7, #28]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b088      	sub	sp, #32
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80049e6:	2333      	movs	r3, #51	; 0x33
 80049e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049ea:	2340      	movs	r3, #64	; 0x40
 80049ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049f8:	f107 0308 	add.w	r3, r7, #8
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff fde2 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a08:	2133      	movs	r1, #51	; 0x33
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8ae 	bl	8004b6c <SDMMC_GetCmdResp1>
 8004a10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a12:	69fb      	ldr	r3, [r7, #28]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004a2c:	23c0      	movs	r3, #192	; 0xc0
 8004a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a3a:	f107 0308 	add.w	r3, r7, #8
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff fdc1 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f97c 	bl	8004d44 <SDMMC_GetCmdResp2>
 8004a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004a66:	2309      	movs	r3, #9
 8004a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004a6a:	23c0      	movs	r3, #192	; 0xc0
 8004a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a78:	f107 0308 	add.w	r3, r7, #8
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff fda2 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f95d 	bl	8004d44 <SDMMC_GetCmdResp2>
 8004a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b088      	sub	sp, #32
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004aa8:	2340      	movs	r3, #64	; 0x40
 8004aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ab4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ab6:	f107 0308 	add.w	r3, r7, #8
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff fd83 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	2103      	movs	r1, #3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f9bc 	bl	8004e44 <SDMMC_GetCmdResp6>
 8004acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ace:	69fb      	ldr	r3, [r7, #28]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004ae6:	230d      	movs	r3, #13
 8004ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004aea:	2340      	movs	r3, #64	; 0x40
 8004aec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004af8:	f107 0308 	add.w	r3, r7, #8
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff fd62 	bl	80045c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b08:	210d      	movs	r1, #13
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f82e 	bl	8004b6c <SDMMC_GetCmdResp1>
 8004b10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b12:	69fb      	ldr	r3, [r7, #28]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004b1c:	b490      	push	{r4, r7}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b24:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <SDMMC_GetCmdError+0x48>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a0f      	ldr	r2, [pc, #60]	; (8004b68 <SDMMC_GetCmdError+0x4c>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	0a5b      	lsrs	r3, r3, #9
 8004b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004b38:	4623      	mov	r3, r4
 8004b3a:	1e5c      	subs	r4, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b44:	e009      	b.n	8004b5a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f2      	beq.n	8004b38 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	22c5      	movs	r2, #197	; 0xc5
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc90      	pop	{r4, r7}
 8004b62:	4770      	bx	lr
 8004b64:	20000000 	.word	0x20000000
 8004b68:	10624dd3 	.word	0x10624dd3

08004b6c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	460b      	mov	r3, r1
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004b7a:	4b6f      	ldr	r3, [pc, #444]	; (8004d38 <SDMMC_GetCmdResp1+0x1cc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a6f      	ldr	r2, [pc, #444]	; (8004d3c <SDMMC_GetCmdResp1+0x1d0>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	0a5b      	lsrs	r3, r3, #9
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	1e5c      	subs	r4, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b98:	e0c9      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <SDMMC_GetCmdResp1+0x20>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1eb      	bne.n	8004b8c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	e0b1      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d004      	beq.n	8004be0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0a6      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	22c5      	movs	r2, #197	; 0xc5
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fd18 	bl	800461c <SDIO_GetCommandResponse>
 8004bec:	4603      	mov	r3, r0
 8004bee:	461a      	mov	r2, r3
 8004bf0:	7afb      	ldrb	r3, [r7, #11]
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d001      	beq.n	8004bfa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e099      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7ff fd1a 	bl	8004636 <SDIO_GetResponse>
 8004c02:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4b4e      	ldr	r3, [pc, #312]	; (8004d40 <SDMMC_GetCmdResp1+0x1d4>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e08d      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	da02      	bge.n	8004c1e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c1c:	e087      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004c28:	2340      	movs	r3, #64	; 0x40
 8004c2a:	e080      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	e079      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c48:	e071      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c58:	e069      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c68:	e061      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c78:	e059      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c88:	e051      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c98:	e049      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ca8:	e041      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb8:	e039      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cc8:	e031      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004cd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cd8:	e029      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004ce4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004ce8:	e021      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004cf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cf8:	e019      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004d04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d08:	e011      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004d14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d18:	e009      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004d24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004d28:	e001      	b.n	8004d2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd90      	pop	{r4, r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	10624dd3 	.word	0x10624dd3
 8004d40:	fdffe008 	.word	0xfdffe008

08004d44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004d44:	b490      	push	{r4, r7}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d4c:	4b1e      	ldr	r3, [pc, #120]	; (8004dc8 <SDMMC_GetCmdResp2+0x84>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <SDMMC_GetCmdResp2+0x88>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	0a5b      	lsrs	r3, r3, #9
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004d60:	4623      	mov	r3, r4
 8004d62:	1e5c      	subs	r4, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d6c:	e026      	b.n	8004dbc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d72:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <SDMMC_GetCmdResp2+0x1c>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1eb      	bne.n	8004d60 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2204      	movs	r2, #4
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d9a:	2304      	movs	r3, #4
 8004d9c:	e00e      	b.n	8004dbc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d004      	beq.n	8004db4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e003      	b.n	8004dbc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	22c5      	movs	r2, #197	; 0xc5
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc90      	pop	{r4, r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	20000000 	.word	0x20000000
 8004dcc:	10624dd3 	.word	0x10624dd3

08004dd0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004dd0:	b490      	push	{r4, r7}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <SDMMC_GetCmdResp3+0x6c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <SDMMC_GetCmdResp3+0x70>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	0a5b      	lsrs	r3, r3, #9
 8004de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004dec:	4623      	mov	r3, r4
 8004dee:	1e5c      	subs	r4, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004df4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004df8:	e01b      	b.n	8004e32 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <SDMMC_GetCmdResp3+0x1c>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1eb      	bne.n	8004dec <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d004      	beq.n	8004e2a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2204      	movs	r2, #4
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e26:	2304      	movs	r3, #4
 8004e28:	e003      	b.n	8004e32 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	22c5      	movs	r2, #197	; 0xc5
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc90      	pop	{r4, r7}
 8004e3a:	4770      	bx	lr
 8004e3c:	20000000 	.word	0x20000000
 8004e40:	10624dd3 	.word	0x10624dd3

08004e44 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004e44:	b590      	push	{r4, r7, lr}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e52:	4b34      	ldr	r3, [pc, #208]	; (8004f24 <SDMMC_GetCmdResp6+0xe0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a34      	ldr	r2, [pc, #208]	; (8004f28 <SDMMC_GetCmdResp6+0xe4>)
 8004e58:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5c:	0a5b      	lsrs	r3, r3, #9
 8004e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e62:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e66:	4623      	mov	r3, r4
 8004e68:	1e5c      	subs	r4, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d102      	bne.n	8004e74 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e72:	e052      	b.n	8004f1a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <SDMMC_GetCmdResp6+0x22>
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1eb      	bne.n	8004e66 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d004      	beq.n	8004ea4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	e03a      	b.n	8004f1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e02f      	b.n	8004f1a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff fbae 	bl	800461c <SDIO_GetCommandResponse>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	7afb      	ldrb	r3, [r7, #11]
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d001      	beq.n	8004ece <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e025      	b.n	8004f1a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	22c5      	movs	r2, #197	; 0xc5
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f7ff fbad 	bl	8004636 <SDIO_GetResponse>
 8004edc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	0c1b      	lsrs	r3, r3, #16
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e011      	b.n	8004f1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f04:	e009      	b.n	8004f1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f14:	e001      	b.n	8004f1a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd90      	pop	{r4, r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000000 	.word	0x20000000
 8004f28:	10624dd3 	.word	0x10624dd3

08004f2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004f2c:	b490      	push	{r4, r7}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <SDMMC_GetCmdResp7+0x90>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a21      	ldr	r2, [pc, #132]	; (8004fc0 <SDMMC_GetCmdResp7+0x94>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	0a5b      	lsrs	r3, r3, #9
 8004f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004f48:	4623      	mov	r3, r4
 8004f4a:	1e5c      	subs	r4, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f54:	e02c      	b.n	8004fb0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <SDMMC_GetCmdResp7+0x1c>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1eb      	bne.n	8004f48 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2204      	movs	r2, #4
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f82:	2304      	movs	r3, #4
 8004f84:	e014      	b.n	8004fb0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e009      	b.n	8004fb0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2240      	movs	r2, #64	; 0x40
 8004fac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004fae:	2300      	movs	r3, #0
  
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc90      	pop	{r4, r7}
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000000 	.word	0x20000000
 8004fc0:	10624dd3 	.word	0x10624dd3

08004fc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	f107 001c 	add.w	r0, r7, #28
 8004fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d122      	bne.n	8005022 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f001 faae 	bl	8006578 <USB_CoreReset>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]
 8005020:	e01a      	b.n	8005058 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 faa2 	bl	8006578 <USB_CoreReset>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
 800504a:	e005      	b.n	8005058 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	2b01      	cmp	r3, #1
 800505c:	d10b      	bne.n	8005076 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f043 0206 	orr.w	r2, r3, #6
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f043 0220 	orr.w	r2, r3, #32
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005082:	b004      	add	sp, #16
 8005084:	4770      	bx	lr
	...

08005088 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	4613      	mov	r3, r2
 8005094:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d165      	bne.n	8005168 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4a41      	ldr	r2, [pc, #260]	; (80051a4 <USB_SetTurnaroundTime+0x11c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d906      	bls.n	80050b2 <USB_SetTurnaroundTime+0x2a>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4a40      	ldr	r2, [pc, #256]	; (80051a8 <USB_SetTurnaroundTime+0x120>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d802      	bhi.n	80050b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050ac:	230f      	movs	r3, #15
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e062      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4a3c      	ldr	r2, [pc, #240]	; (80051a8 <USB_SetTurnaroundTime+0x120>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d906      	bls.n	80050c8 <USB_SetTurnaroundTime+0x40>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4a3b      	ldr	r2, [pc, #236]	; (80051ac <USB_SetTurnaroundTime+0x124>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d802      	bhi.n	80050c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050c2:	230e      	movs	r3, #14
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e057      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4a38      	ldr	r2, [pc, #224]	; (80051ac <USB_SetTurnaroundTime+0x124>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d906      	bls.n	80050de <USB_SetTurnaroundTime+0x56>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4a37      	ldr	r2, [pc, #220]	; (80051b0 <USB_SetTurnaroundTime+0x128>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d802      	bhi.n	80050de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050d8:	230d      	movs	r3, #13
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e04c      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4a33      	ldr	r2, [pc, #204]	; (80051b0 <USB_SetTurnaroundTime+0x128>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d906      	bls.n	80050f4 <USB_SetTurnaroundTime+0x6c>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4a32      	ldr	r2, [pc, #200]	; (80051b4 <USB_SetTurnaroundTime+0x12c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d802      	bhi.n	80050f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050ee:	230c      	movs	r3, #12
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e041      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4a2f      	ldr	r2, [pc, #188]	; (80051b4 <USB_SetTurnaroundTime+0x12c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d906      	bls.n	800510a <USB_SetTurnaroundTime+0x82>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4a2e      	ldr	r2, [pc, #184]	; (80051b8 <USB_SetTurnaroundTime+0x130>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d802      	bhi.n	800510a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005104:	230b      	movs	r3, #11
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e036      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4a2a      	ldr	r2, [pc, #168]	; (80051b8 <USB_SetTurnaroundTime+0x130>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d906      	bls.n	8005120 <USB_SetTurnaroundTime+0x98>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4a29      	ldr	r2, [pc, #164]	; (80051bc <USB_SetTurnaroundTime+0x134>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d802      	bhi.n	8005120 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800511a:	230a      	movs	r3, #10
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e02b      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4a26      	ldr	r2, [pc, #152]	; (80051bc <USB_SetTurnaroundTime+0x134>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d906      	bls.n	8005136 <USB_SetTurnaroundTime+0xae>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4a25      	ldr	r2, [pc, #148]	; (80051c0 <USB_SetTurnaroundTime+0x138>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d802      	bhi.n	8005136 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005130:	2309      	movs	r3, #9
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e020      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <USB_SetTurnaroundTime+0x138>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d906      	bls.n	800514c <USB_SetTurnaroundTime+0xc4>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <USB_SetTurnaroundTime+0x13c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d802      	bhi.n	800514c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005146:	2308      	movs	r3, #8
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e015      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <USB_SetTurnaroundTime+0x13c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d906      	bls.n	8005162 <USB_SetTurnaroundTime+0xda>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <USB_SetTurnaroundTime+0x140>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d802      	bhi.n	8005162 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800515c:	2307      	movs	r3, #7
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	e00a      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005162:	2306      	movs	r3, #6
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e007      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d102      	bne.n	8005174 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800516e:	2309      	movs	r3, #9
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	e001      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005174:	2309      	movs	r3, #9
 8005176:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	029b      	lsls	r3, r3, #10
 800518c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005190:	431a      	orrs	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	00d8acbf 	.word	0x00d8acbf
 80051a8:	00e4e1bf 	.word	0x00e4e1bf
 80051ac:	00f423ff 	.word	0x00f423ff
 80051b0:	0106737f 	.word	0x0106737f
 80051b4:	011a499f 	.word	0x011a499f
 80051b8:	01312cff 	.word	0x01312cff
 80051bc:	014ca43f 	.word	0x014ca43f
 80051c0:	016e35ff 	.word	0x016e35ff
 80051c4:	01a6ab1f 	.word	0x01a6ab1f
 80051c8:	01e847ff 	.word	0x01e847ff

080051cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f043 0201 	orr.w	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d106      	bne.n	800523c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	e00b      	b.n	8005254 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60da      	str	r2, [r3, #12]
 800524e:	e001      	b.n	8005254 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e003      	b.n	800525c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005254:	2032      	movs	r0, #50	; 0x32
 8005256:	f7fb fc59 	bl	8000b0c <HAL_Delay>

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005264:	b084      	sub	sp, #16
 8005266:	b580      	push	{r7, lr}
 8005268:	b086      	sub	sp, #24
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e009      	b.n	8005298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	3340      	adds	r3, #64	; 0x40
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	2200      	movs	r2, #0
 8005290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3301      	adds	r3, #1
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b0e      	cmp	r3, #14
 800529c:	d9f2      	bls.n	8005284 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800529e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11c      	bne.n	80052de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b2:	f043 0302 	orr.w	r3, r3, #2
 80052b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e005      	b.n	80052ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052f0:	461a      	mov	r2, r3
 80052f2:	2300      	movs	r3, #0
 80052f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fc:	4619      	mov	r1, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005304:	461a      	mov	r2, r3
 8005306:	680b      	ldr	r3, [r1, #0]
 8005308:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	2b01      	cmp	r3, #1
 800530e:	d10c      	bne.n	800532a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d104      	bne.n	8005320 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005316:	2100      	movs	r1, #0
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f949 	bl	80055b0 <USB_SetDevSpeed>
 800531e:	e008      	b.n	8005332 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005320:	2101      	movs	r1, #1
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f944 	bl	80055b0 <USB_SetDevSpeed>
 8005328:	e003      	b.n	8005332 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800532a:	2103      	movs	r1, #3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f93f 	bl	80055b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005332:	2110      	movs	r1, #16
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f8f3 	bl	8005520 <USB_FlushTxFifo>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f911 	bl	800556c <USB_FlushRxFifo>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535a:	461a      	mov	r2, r3
 800535c:	2300      	movs	r3, #0
 800535e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005366:	461a      	mov	r2, r3
 8005368:	2300      	movs	r3, #0
 800536a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005372:	461a      	mov	r2, r3
 8005374:	2300      	movs	r3, #0
 8005376:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005378:	2300      	movs	r3, #0
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	e043      	b.n	8005406 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005394:	d118      	bne.n	80053c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	461a      	mov	r2, r3
 80053aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	e013      	b.n	80053da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053be:	461a      	mov	r2, r3
 80053c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e008      	b.n	80053da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d4:	461a      	mov	r2, r3
 80053d6:	2300      	movs	r3, #0
 80053d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e6:	461a      	mov	r2, r3
 80053e8:	2300      	movs	r3, #0
 80053ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	461a      	mov	r2, r3
 80053fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	3301      	adds	r3, #1
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	429a      	cmp	r2, r3
 800540c:	d3b7      	bcc.n	800537e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800540e:	2300      	movs	r3, #0
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	e043      	b.n	800549c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800542a:	d118      	bne.n	800545e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10a      	bne.n	8005448 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	461a      	mov	r2, r3
 8005440:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	e013      	b.n	8005470 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	461a      	mov	r2, r3
 8005456:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	e008      	b.n	8005470 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	461a      	mov	r2, r3
 800546c:	2300      	movs	r3, #0
 800546e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547c:	461a      	mov	r2, r3
 800547e:	2300      	movs	r3, #0
 8005480:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548e:	461a      	mov	r2, r3
 8005490:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005494:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3301      	adds	r3, #1
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d3b7      	bcc.n	8005414 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d105      	bne.n	80054d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f043 0210 	orr.w	r2, r3, #16
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	4b0f      	ldr	r3, [pc, #60]	; (800551c <USB_DevInit+0x2b8>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f043 0208 	orr.w	r2, r3, #8
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d107      	bne.n	800550c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005504:	f043 0304 	orr.w	r3, r3, #4
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005518:	b004      	add	sp, #16
 800551a:	4770      	bx	lr
 800551c:	803c3800 	.word	0x803c3800

08005520 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	019b      	lsls	r3, r3, #6
 8005532:	f043 0220 	orr.w	r2, r3, #32
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a09      	ldr	r2, [pc, #36]	; (8005568 <USB_FlushTxFifo+0x48>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d901      	bls.n	800554c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e006      	b.n	800555a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b20      	cmp	r3, #32
 8005556:	d0f0      	beq.n	800553a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	00030d40 	.word	0x00030d40

0800556c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2210      	movs	r2, #16
 800557c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3301      	adds	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a09      	ldr	r2, [pc, #36]	; (80055ac <USB_FlushRxFifo+0x40>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d901      	bls.n	8005590 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e006      	b.n	800559e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b10      	cmp	r3, #16
 800559a:	d0f0      	beq.n	800557e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	00030d40 	.word	0x00030d40

080055b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d0:	4313      	orrs	r3, r2
 80055d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b087      	sub	sp, #28
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0306 	and.w	r3, r3, #6
 80055fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]
 8005606:	e00a      	b.n	800561e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d002      	beq.n	8005614 <USB_GetDevSpeed+0x32>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b06      	cmp	r3, #6
 8005612:	d102      	bne.n	800561a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005614:	2302      	movs	r3, #2
 8005616:	75fb      	strb	r3, [r7, #23]
 8005618:	e001      	b.n	800561e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800561a:	230f      	movs	r3, #15
 800561c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800561e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005620:	4618      	mov	r0, r3
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d13a      	bne.n	80056be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	2101      	movs	r1, #1
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	b29b      	uxth	r3, r3
 8005660:	68f9      	ldr	r1, [r7, #12]
 8005662:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005666:	4313      	orrs	r3, r2
 8005668:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d155      	bne.n	800572c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	78db      	ldrb	r3, [r3, #3]
 800569a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800569c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	059b      	lsls	r3, r3, #22
 80056a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056a4:	4313      	orrs	r3, r2
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	e036      	b.n	800572c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c4:	69da      	ldr	r2, [r3, #28]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	2101      	movs	r1, #1
 80056d0:	fa01 f303 	lsl.w	r3, r1, r3
 80056d4:	041b      	lsls	r3, r3, #16
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056dc:	4313      	orrs	r3, r2
 80056de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d11a      	bne.n	800572c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	78db      	ldrb	r3, [r3, #3]
 8005710:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005712:	430b      	orrs	r3, r1
 8005714:	4313      	orrs	r3, r2
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
	...

0800573c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d161      	bne.n	800581c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800576a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800576e:	d11f      	bne.n	80057b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800578e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	2101      	movs	r1, #1
 80057c2:	fa01 f303 	lsl.w	r3, r1, r3
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	43db      	mvns	r3, r3
 80057ca:	68f9      	ldr	r1, [r7, #12]
 80057cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d0:	4013      	ands	r3, r2
 80057d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	2101      	movs	r1, #1
 80057e6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	68f9      	ldr	r1, [r7, #12]
 80057f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f4:	4013      	ands	r3, r2
 80057f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	0159      	lsls	r1, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	440b      	add	r3, r1
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	4619      	mov	r1, r3
 8005814:	4b35      	ldr	r3, [pc, #212]	; (80058ec <USB_DeactivateEndpoint+0x1b0>)
 8005816:	4013      	ands	r3, r2
 8005818:	600b      	str	r3, [r1, #0]
 800581a:	e060      	b.n	80058de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800582e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005832:	d11f      	bne.n	8005874 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005852:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005872:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	2101      	movs	r1, #1
 8005886:	fa01 f303 	lsl.w	r3, r1, r3
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	43db      	mvns	r3, r3
 800588e:	68f9      	ldr	r1, [r7, #12]
 8005890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005894:	4013      	ands	r3, r2
 8005896:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	2101      	movs	r1, #1
 80058aa:	fa01 f303 	lsl.w	r3, r1, r3
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	43db      	mvns	r3, r3
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b8:	4013      	ands	r3, r2
 80058ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	0159      	lsls	r1, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	440b      	add	r3, r1
 80058d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d6:	4619      	mov	r1, r3
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <USB_DeactivateEndpoint+0x1b4>)
 80058da:	4013      	ands	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	ec337800 	.word	0xec337800
 80058f0:	eff37800 	.word	0xeff37800

080058f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	; 0x28
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	2b01      	cmp	r3, #1
 8005912:	f040 815c 	bne.w	8005bce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d132      	bne.n	8005984 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005938:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800593c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005940:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	440a      	add	r2, r1
 8005958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005960:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800597c:	0cdb      	lsrs	r3, r3, #19
 800597e:	04db      	lsls	r3, r3, #19
 8005980:	6113      	str	r3, [r2, #16]
 8005982:	e074      	b.n	8005a6e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	440a      	add	r2, r1
 800599a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800599e:	0cdb      	lsrs	r3, r3, #19
 80059a0:	04db      	lsls	r3, r3, #19
 80059a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6959      	ldr	r1, [r3, #20]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	440b      	add	r3, r1
 80059e0:	1e59      	subs	r1, r3, #1
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ea:	04d9      	lsls	r1, r3, #19
 80059ec:	4b9d      	ldr	r3, [pc, #628]	; (8005c64 <USB_EPStartXfer+0x370>)
 80059ee:	400b      	ands	r3, r1
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	0148      	lsls	r0, r1, #5
 80059f4:	69f9      	ldr	r1, [r7, #28]
 80059f6:	4401      	add	r1, r0
 80059f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059fc:	4313      	orrs	r3, r2
 80059fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a16:	69b9      	ldr	r1, [r7, #24]
 8005a18:	0148      	lsls	r0, r1, #5
 8005a1a:	69f9      	ldr	r1, [r7, #28]
 8005a1c:	4401      	add	r1, r0
 8005a1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a22:	4313      	orrs	r3, r2
 8005a24:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	78db      	ldrb	r3, [r3, #3]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d11f      	bne.n	8005a6e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a48:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a4c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	0151      	lsls	r1, r2, #5
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	440a      	add	r2, r1
 8005a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a6c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d14b      	bne.n	8005b0c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d009      	beq.n	8005a90 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	461a      	mov	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	78db      	ldrb	r3, [r3, #3]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d128      	bne.n	8005aea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d110      	bne.n	8005aca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	e00f      	b.n	8005aea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	e12f      	b.n	8005d6c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	78db      	ldrb	r3, [r3, #3]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d015      	beq.n	8005b60 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 8117 	beq.w	8005d6c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	2101      	movs	r1, #1
 8005b50:	fa01 f303 	lsl.w	r3, r1, r3
 8005b54:	69f9      	ldr	r1, [r7, #28]
 8005b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	634b      	str	r3, [r1, #52]	; 0x34
 8005b5e:	e105      	b.n	8005d6c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d110      	bne.n	8005b92 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	e00f      	b.n	8005bb2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	68d9      	ldr	r1, [r3, #12]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	b298      	uxth	r0, r3
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 fa2b 	bl	8006022 <USB_WritePacket>
 8005bcc:	e0ce      	b.n	8005d6c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be8:	0cdb      	lsrs	r3, r3, #19
 8005bea:	04db      	lsls	r3, r3, #19
 8005bec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d126      	bne.n	8005c68 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c30:	69b9      	ldr	r1, [r7, #24]
 8005c32:	0148      	lsls	r0, r1, #5
 8005c34:	69f9      	ldr	r1, [r7, #28]
 8005c36:	4401      	add	r1, r0
 8005c38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c5e:	6113      	str	r3, [r2, #16]
 8005c60:	e036      	b.n	8005cd0 <USB_EPStartXfer+0x3dc>
 8005c62:	bf00      	nop
 8005c64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	695a      	ldr	r2, [r3, #20]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4413      	add	r3, r2
 8005c72:	1e5a      	subs	r2, r3, #1
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	8afb      	ldrh	r3, [r7, #22]
 8005c8e:	04d9      	lsls	r1, r3, #19
 8005c90:	4b39      	ldr	r3, [pc, #228]	; (8005d78 <USB_EPStartXfer+0x484>)
 8005c92:	400b      	ands	r3, r1
 8005c94:	69b9      	ldr	r1, [r7, #24]
 8005c96:	0148      	lsls	r0, r1, #5
 8005c98:	69f9      	ldr	r1, [r7, #28]
 8005c9a:	4401      	add	r1, r0
 8005c9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	8af9      	ldrh	r1, [r7, #22]
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc0:	69b9      	ldr	r1, [r7, #24]
 8005cc2:	0148      	lsls	r0, r1, #5
 8005cc4:	69f9      	ldr	r1, [r7, #28]
 8005cc6:	4401      	add	r1, r0
 8005cc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d10d      	bne.n	8005cf2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	68d9      	ldr	r1, [r3, #12]
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	460a      	mov	r2, r1
 8005cf0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	78db      	ldrb	r3, [r3, #3]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d128      	bne.n	8005d4c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d110      	bne.n	8005d2c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	e00f      	b.n	8005d4c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3720      	adds	r7, #32
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	1ff80000 	.word	0x1ff80000

08005d7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4613      	mov	r3, r2
 8005d88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	f040 80cd 	bne.w	8005f38 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d132      	bne.n	8005e0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005de8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e04:	0cdb      	lsrs	r3, r3, #19
 8005e06:	04db      	lsls	r3, r3, #19
 8005e08:	6113      	str	r3, [r2, #16]
 8005e0a:	e04e      	b.n	8005eaa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e26:	0cdb      	lsrs	r3, r3, #19
 8005e28:	04db      	lsls	r3, r3, #19
 8005e2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d903      	bls.n	8005e64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e9a:	6939      	ldr	r1, [r7, #16]
 8005e9c:	0148      	lsls	r0, r1, #5
 8005e9e:	6979      	ldr	r1, [r7, #20]
 8005ea0:	4401      	add	r1, r0
 8005ea2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d11e      	bne.n	8005eee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d009      	beq.n	8005ecc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	e092      	b.n	8006014 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d07e      	beq.n	8006014 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	2101      	movs	r1, #1
 8005f28:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2c:	6979      	ldr	r1, [r7, #20]
 8005f2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f32:	4313      	orrs	r3, r2
 8005f34:	634b      	str	r3, [r1, #52]	; 0x34
 8005f36:	e06d      	b.n	8006014 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f52:	0cdb      	lsrs	r3, r3, #19
 8005f54:	04db      	lsls	r3, r3, #19
 8005f56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f7a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005faa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc2:	6939      	ldr	r1, [r7, #16]
 8005fc4:	0148      	lsls	r0, r1, #5
 8005fc6:	6979      	ldr	r1, [r7, #20]
 8005fc8:	4401      	add	r1, r0
 8005fca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d10d      	bne.n	8005ff4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d009      	beq.n	8005ff4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	68d9      	ldr	r1, [r3, #12]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	460a      	mov	r2, r1
 8005ff2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006012:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006022:	b480      	push	{r7}
 8006024:	b089      	sub	sp, #36	; 0x24
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	4611      	mov	r1, r2
 800602e:	461a      	mov	r2, r3
 8006030:	460b      	mov	r3, r1
 8006032:	71fb      	strb	r3, [r7, #7]
 8006034:	4613      	mov	r3, r2
 8006036:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006040:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006044:	2b00      	cmp	r3, #0
 8006046:	d11a      	bne.n	800607e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006048:	88bb      	ldrh	r3, [r7, #4]
 800604a:	3303      	adds	r3, #3
 800604c:	089b      	lsrs	r3, r3, #2
 800604e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006050:	2300      	movs	r3, #0
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	e00f      	b.n	8006076 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	031a      	lsls	r2, r3, #12
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	4413      	add	r3, r2
 800605e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006062:	461a      	mov	r2, r3
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6013      	str	r3, [r2, #0]
      pSrc++;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3304      	adds	r3, #4
 800606e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	3301      	adds	r3, #1
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	429a      	cmp	r2, r3
 800607c:	d3eb      	bcc.n	8006056 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3724      	adds	r7, #36	; 0x24
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800608c:	b480      	push	{r7}
 800608e:	b089      	sub	sp, #36	; 0x24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	3303      	adds	r3, #3
 80060a6:	089b      	lsrs	r3, r3, #2
 80060a8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	e00b      	b.n	80060c8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	3304      	adds	r3, #4
 80060c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	3301      	adds	r3, #1
 80060c6:	61bb      	str	r3, [r7, #24]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d3ef      	bcc.n	80060b0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80060d0:	69fb      	ldr	r3, [r7, #28]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3724      	adds	r7, #36	; 0x24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d12c      	bne.n	8006154 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	db12      	blt.n	8006132 <USB_EPSetStall+0x54>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00f      	beq.n	8006132 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006130:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	e02b      	b.n	80061ac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	db12      	blt.n	800618c <USB_EPSetStall+0xae>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00f      	beq.n	800618c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	440a      	add	r2, r1
 8006182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006186:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800618a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d128      	bne.n	8006228 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	78db      	ldrb	r3, [r3, #3]
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d003      	beq.n	8006206 <USB_EPClearStall+0x4c>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	78db      	ldrb	r3, [r3, #3]
 8006202:	2b02      	cmp	r3, #2
 8006204:	d138      	bne.n	8006278 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e027      	b.n	8006278 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	440a      	add	r2, r1
 800623e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006246:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	78db      	ldrb	r3, [r3, #3]
 800624c:	2b03      	cmp	r3, #3
 800624e:	d003      	beq.n	8006258 <USB_EPClearStall+0x9e>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	78db      	ldrb	r3, [r3, #3]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d10f      	bne.n	8006278 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006276:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062a8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062c0:	4313      	orrs	r3, r2
 80062c2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ec:	f023 0302 	bic.w	r3, r3, #2
 80062f0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80062f2:	2003      	movs	r0, #3
 80062f4:	f7fa fc0a 	bl	8000b0c <HAL_Delay>

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800631c:	f043 0302 	orr.w	r3, r3, #2
 8006320:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006322:	2003      	movs	r0, #3
 8006324:	f7fa fbf2 	bl	8000b0c <HAL_Delay>

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4013      	ands	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	4013      	ands	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	0c1b      	lsrs	r3, r3, #16
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4013      	ands	r3, r2
 80063ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	b29b      	uxth	r3, r3
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	4013      	ands	r3, r2
 80063ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063ee:	68bb      	ldr	r3, [r7, #8]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
 800642c:	01db      	lsls	r3, r3, #7
 800642e:	b2db      	uxtb	r3, r3
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4013      	ands	r3, r2
 8006448:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800644a:	68bb      	ldr	r3, [r7, #8]
}
 800644c:	4618      	mov	r0, r3
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	f003 0301 	and.w	r3, r3, #1
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006492:	f023 0307 	bic.w	r3, r3, #7
 8006496:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
	...

080064bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	460b      	mov	r3, r1
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	333c      	adds	r3, #60	; 0x3c
 80064d2:	3304      	adds	r3, #4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4a26      	ldr	r2, [pc, #152]	; (8006574 <USB_EP0_OutStart+0xb8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d90a      	bls.n	80064f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f0:	d101      	bne.n	80064f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e037      	b.n	8006566 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fc:	461a      	mov	r2, r3
 80064fe:	2300      	movs	r3, #0
 8006500:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006514:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006524:	f043 0318 	orr.w	r3, r3, #24
 8006528:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006538:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800653c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800653e:	7afb      	ldrb	r3, [r7, #11]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d10f      	bne.n	8006564 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654a:	461a      	mov	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006562:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	4f54300a 	.word	0x4f54300a

08006578 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4a13      	ldr	r2, [pc, #76]	; (80065dc <USB_CoreReset+0x64>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d901      	bls.n	8006596 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e01b      	b.n	80065ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	daf2      	bge.n	8006584 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f043 0201 	orr.w	r2, r3, #1
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3301      	adds	r3, #1
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4a09      	ldr	r2, [pc, #36]	; (80065dc <USB_CoreReset+0x64>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d901      	bls.n	80065c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e006      	b.n	80065ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d0f0      	beq.n	80065ae <USB_CoreReset+0x36>

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	00030d40 	.word	0x00030d40

080065e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80065e4:	4904      	ldr	r1, [pc, #16]	; (80065f8 <MX_FATFS_Init+0x18>)
 80065e6:	4805      	ldr	r0, [pc, #20]	; (80065fc <MX_FATFS_Init+0x1c>)
 80065e8:	f002 ff38 	bl	800945c <FATFS_LinkDriver>
 80065ec:	4603      	mov	r3, r0
 80065ee:	461a      	mov	r2, r3
 80065f0:	4b03      	ldr	r3, [pc, #12]	; (8006600 <MX_FATFS_Init+0x20>)
 80065f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80065f4:	bf00      	nop
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	200002b0 	.word	0x200002b0
 80065fc:	0800a0c8 	.word	0x0800a0c8
 8006600:	200002ac 	.word	0x200002ac

08006604 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800660e:	f000 f879 	bl	8006704 <BSP_SD_IsDetected>
 8006612:	4603      	mov	r3, r0
 8006614:	2b01      	cmp	r3, #1
 8006616:	d001      	beq.n	800661c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e012      	b.n	8006642 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800661c:	480b      	ldr	r0, [pc, #44]	; (800664c <BSP_SD_Init+0x48>)
 800661e:	f7fc fdf5 	bl	800320c <HAL_SD_Init>
 8006622:	4603      	mov	r3, r0
 8006624:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006626:	79fb      	ldrb	r3, [r7, #7]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d109      	bne.n	8006640 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800662c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006630:	4806      	ldr	r0, [pc, #24]	; (800664c <BSP_SD_Init+0x48>)
 8006632:	f7fd fbe3 	bl	8003dfc <HAL_SD_ConfigWideBusOperation>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006640:	79fb      	ldrb	r3, [r7, #7]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000204 	.word	0x20000204

08006650 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	68f9      	ldr	r1, [r7, #12]
 800666c:	4806      	ldr	r0, [pc, #24]	; (8006688 <BSP_SD_ReadBlocks+0x38>)
 800666e:	f7fc fe5d 	bl	800332c <HAL_SD_ReadBlocks>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800667c:	7dfb      	ldrb	r3, [r7, #23]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000204 	.word	0x20000204

0800668c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	68f9      	ldr	r1, [r7, #12]
 80066a8:	4806      	ldr	r0, [pc, #24]	; (80066c4 <BSP_SD_WriteBlocks+0x38>)
 80066aa:	f7fd f837 	bl	800371c <HAL_SD_WriteBlocks>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000204 	.word	0x20000204

080066c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80066cc:	4805      	ldr	r0, [pc, #20]	; (80066e4 <BSP_SD_GetCardState+0x1c>)
 80066ce:	f7fd fc11 	bl	8003ef4 <HAL_SD_GetCardState>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
}
 80066de:	4618      	mov	r0, r3
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000204 	.word	0x20000204

080066e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	4803      	ldr	r0, [pc, #12]	; (8006700 <BSP_SD_GetCardInfo+0x18>)
 80066f4:	f7fd fb56 	bl	8003da4 <HAL_SD_GetCardInfo>
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20000204 	.word	0x20000204

08006704 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800670a:	2301      	movs	r3, #1
 800670c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	b2db      	uxtb	r3, r3
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
	...

08006720 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800672a:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <SD_CheckStatus+0x38>)
 800672c:	2201      	movs	r2, #1
 800672e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006730:	f7ff ffca 	bl	80066c8 <BSP_SD_GetCardState>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d107      	bne.n	800674a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800673a:	4b07      	ldr	r3, [pc, #28]	; (8006758 <SD_CheckStatus+0x38>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f023 0301 	bic.w	r3, r3, #1
 8006744:	b2da      	uxtb	r2, r3
 8006746:	4b04      	ldr	r3, [pc, #16]	; (8006758 <SD_CheckStatus+0x38>)
 8006748:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800674a:	4b03      	ldr	r3, [pc, #12]	; (8006758 <SD_CheckStatus+0x38>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	b2db      	uxtb	r3, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20000009 	.word	0x20000009

0800675c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <SD_initialize+0x38>)
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800676c:	f7ff ff4a 	bl	8006604 <BSP_SD_Init>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d107      	bne.n	8006786 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff ffd1 	bl	8006720 <SD_CheckStatus>
 800677e:	4603      	mov	r3, r0
 8006780:	461a      	mov	r2, r3
 8006782:	4b04      	ldr	r3, [pc, #16]	; (8006794 <SD_initialize+0x38>)
 8006784:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006786:	4b03      	ldr	r3, [pc, #12]	; (8006794 <SD_initialize+0x38>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	b2db      	uxtb	r3, r3
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000009 	.word	0x20000009

08006798 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	4603      	mov	r3, r0
 80067a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff ffbb 	bl	8006720 <SD_CheckStatus>
 80067aa:	4603      	mov	r3, r0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80067c8:	f04f 33ff 	mov.w	r3, #4294967295
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	68b8      	ldr	r0, [r7, #8]
 80067d2:	f7ff ff3d 	bl	8006650 <BSP_SD_ReadBlocks>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d107      	bne.n	80067ec <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80067dc:	bf00      	nop
 80067de:	f7ff ff73 	bl	80066c8 <BSP_SD_GetCardState>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1fa      	bne.n	80067de <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b086      	sub	sp, #24
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	4603      	mov	r3, r0
 8006804:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800680a:	f04f 33ff 	mov.w	r3, #4294967295
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	68b8      	ldr	r0, [r7, #8]
 8006814:	f7ff ff3a 	bl	800668c <BSP_SD_WriteBlocks>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d107      	bne.n	800682e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800681e:	bf00      	nop
 8006820:	f7ff ff52 	bl	80066c8 <BSP_SD_GetCardState>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1fa      	bne.n	8006820 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800682e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08c      	sub	sp, #48	; 0x30
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	603a      	str	r2, [r7, #0]
 8006842:	71fb      	strb	r3, [r7, #7]
 8006844:	460b      	mov	r3, r1
 8006846:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800684e:	4b25      	ldr	r3, [pc, #148]	; (80068e4 <SD_ioctl+0xac>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <SD_ioctl+0x28>
 800685c:	2303      	movs	r3, #3
 800685e:	e03c      	b.n	80068da <SD_ioctl+0xa2>

  switch (cmd)
 8006860:	79bb      	ldrb	r3, [r7, #6]
 8006862:	2b03      	cmp	r3, #3
 8006864:	d834      	bhi.n	80068d0 <SD_ioctl+0x98>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <SD_ioctl+0x34>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	0800687d 	.word	0x0800687d
 8006870:	08006885 	.word	0x08006885
 8006874:	0800689d 	.word	0x0800689d
 8006878:	080068b7 	.word	0x080068b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006882:	e028      	b.n	80068d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006884:	f107 030c 	add.w	r3, r7, #12
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff ff2d 	bl	80066e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800688e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800689a:	e01c      	b.n	80068d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800689c:	f107 030c 	add.w	r3, r7, #12
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7ff ff21 	bl	80066e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80068b4:	e00f      	b.n	80068d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80068b6:	f107 030c 	add.w	r3, r7, #12
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff ff14 	bl	80066e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	0a5a      	lsrs	r2, r3, #9
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80068ce:	e002      	b.n	80068d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80068d0:	2304      	movs	r3, #4
 80068d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80068d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3730      	adds	r7, #48	; 0x30
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000009 	.word	0x20000009

080068e8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80068f4:	f44f 701d 	mov.w	r0, #628	; 0x274
 80068f8:	f003 fade 	bl	8009eb8 <malloc>
 80068fc:	4603      	mov	r3, r0
 80068fe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d105      	bne.n	8006912 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800690e:	2302      	movs	r3, #2
 8006910:	e034      	b.n	800697c <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	7c1b      	ldrb	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d115      	bne.n	800694e <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006926:	2202      	movs	r2, #2
 8006928:	2101      	movs	r1, #1
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f003 f92b 	bl	8009b86 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800693c:	2202      	movs	r2, #2
 800693e:	2181      	movs	r1, #129	; 0x81
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f003 f920 	bl	8009b86 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	871a      	strh	r2, [r3, #56]	; 0x38
 800694c:	e012      	b.n	8006974 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800694e:	2340      	movs	r3, #64	; 0x40
 8006950:	2202      	movs	r2, #2
 8006952:	2101      	movs	r1, #1
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f003 f916 	bl	8009b86 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006962:	2340      	movs	r3, #64	; 0x40
 8006964:	2202      	movs	r2, #2
 8006966:	2181      	movs	r1, #129	; 0x81
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f003 f90c 	bl	8009b86 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f98e 	bl	8006c96 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	460b      	mov	r3, r1
 800698e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006990:	2101      	movs	r1, #1
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f003 f91d 	bl	8009bd2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80069a0:	2181      	movs	r1, #129	; 0x81
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f003 f915 	bl	8009bd2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f9c7 	bl	8006d42 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d009      	beq.n	80069d2 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069c4:	4618      	mov	r0, r3
 80069c6:	f003 fa7f 	bl	8009ec8 <free>
    pdev->pClassData = NULL;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ec:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d04d      	beq.n	8006a9e <USBD_MSC_Setup+0xc2>
 8006a02:	2b20      	cmp	r3, #32
 8006a04:	f040 80c6 	bne.w	8006b94 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	2bfe      	cmp	r3, #254	; 0xfe
 8006a0e:	d002      	beq.n	8006a16 <USBD_MSC_Setup+0x3a>
 8006a10:	2bff      	cmp	r3, #255	; 0xff
 8006a12:	d024      	beq.n	8006a5e <USBD_MSC_Setup+0x82>
 8006a14:	e03b      	b.n	8006a8e <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	885b      	ldrh	r3, [r3, #2]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d118      	bne.n	8006a50 <USBD_MSC_Setup+0x74>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	88db      	ldrh	r3, [r3, #6]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d114      	bne.n	8006a50 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	da0f      	bge.n	8006a50 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	4798      	blx	r3
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2201      	movs	r2, #1
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f002 fc58 	bl	80092fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006a4e:	e025      	b.n	8006a9c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f002 fbe2 	bl	800921c <USBD_CtlError>
        ret = USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a5c:	e01e      	b.n	8006a9c <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	885b      	ldrh	r3, [r3, #2]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10c      	bne.n	8006a80 <USBD_MSC_Setup+0xa4>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	88db      	ldrh	r3, [r3, #6]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d108      	bne.n	8006a80 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	db03      	blt.n	8006a80 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f940 	bl	8006cfe <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006a7e:	e00d      	b.n	8006a9c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f002 fbca 	bl	800921c <USBD_CtlError>
        ret = USBD_FAIL;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a8c:	e006      	b.n	8006a9c <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f002 fbc3 	bl	800921c <USBD_CtlError>
      ret = USBD_FAIL;
 8006a96:	2303      	movs	r3, #3
 8006a98:	75fb      	strb	r3, [r7, #23]
      break;
 8006a9a:	bf00      	nop
    }
    break;
 8006a9c:	e081      	b.n	8006ba2 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b0b      	cmp	r3, #11
 8006aa4:	d86d      	bhi.n	8006b82 <USBD_MSC_Setup+0x1a6>
 8006aa6:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <USBD_MSC_Setup+0xd0>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006add 	.word	0x08006add
 8006ab0:	08006b53 	.word	0x08006b53
 8006ab4:	08006b83 	.word	0x08006b83
 8006ab8:	08006b83 	.word	0x08006b83
 8006abc:	08006b83 	.word	0x08006b83
 8006ac0:	08006b83 	.word	0x08006b83
 8006ac4:	08006b83 	.word	0x08006b83
 8006ac8:	08006b83 	.word	0x08006b83
 8006acc:	08006b83 	.word	0x08006b83
 8006ad0:	08006b83 	.word	0x08006b83
 8006ad4:	08006b05 	.word	0x08006b05
 8006ad8:	08006b2d 	.word	0x08006b2d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d107      	bne.n	8006af6 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ae6:	f107 030e 	add.w	r3, r7, #14
 8006aea:	2202      	movs	r2, #2
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f002 fc05 	bl	80092fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006af4:	e04d      	b.n	8006b92 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f002 fb8f 	bl	800921c <USBD_CtlError>
        ret = USBD_FAIL;
 8006afe:	2303      	movs	r3, #3
 8006b00:	75fb      	strb	r3, [r7, #23]
      break;
 8006b02:	e046      	b.n	8006b92 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d107      	bne.n	8006b1e <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3304      	adds	r3, #4
 8006b12:	2201      	movs	r2, #1
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f002 fbf1 	bl	80092fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006b1c:	e039      	b.n	8006b92 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f002 fb7b 	bl	800921c <USBD_CtlError>
        ret = USBD_FAIL;
 8006b26:	2303      	movs	r3, #3
 8006b28:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2a:	e032      	b.n	8006b92 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d106      	bne.n	8006b44 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	885b      	ldrh	r3, [r3, #2]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006b42:	e026      	b.n	8006b92 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f002 fb68 	bl	800921c <USBD_CtlError>
        ret = USBD_FAIL;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b50:	e01f      	b.n	8006b92 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d119      	bne.n	8006b90 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	885b      	ldrh	r3, [r3, #2]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d115      	bne.n	8006b90 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	889b      	ldrh	r3, [r3, #4]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f003 f84f 	bl	8009c10 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	889b      	ldrh	r3, [r3, #4]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fa5a 	bl	8007034 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8006b80:	e006      	b.n	8006b90 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f002 fb49 	bl	800921c <USBD_CtlError>
      ret = USBD_FAIL;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b8e:	e000      	b.n	8006b92 <USBD_MSC_Setup+0x1b6>
      break;
 8006b90:	bf00      	nop
    }
    break;
 8006b92:	e006      	b.n	8006ba2 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f002 fb40 	bl	800921c <USBD_CtlError>
    ret = USBD_FAIL;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	75fb      	strb	r3, [r7, #23]
    break;
 8006ba0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f8d1 	bl	8006d64 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f8f2 	bl	8006dc6 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006bfa:	4b03      	ldr	r3, [pc, #12]	; (8006c08 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	20000044 	.word	0x20000044

08006c0c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006c1a:	4b03      	ldr	r3, [pc, #12]	; (8006c28 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	20000064 	.word	0x20000064

08006c2c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006c3a:	4b03      	ldr	r3, [pc, #12]	; (8006c48 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	20000084 	.word	0x20000084

08006c4c <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	220a      	movs	r2, #10
 8006c58:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006c5a:	4b03      	ldr	r3, [pc, #12]	; (8006c68 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	200000a4 	.word	0x200000a4

08006c6c <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e004      	b.n	8006c8a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ca4:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f002 ff99 	bl	8009c10 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006cde:	2181      	movs	r1, #129	; 0x81
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f002 ff95 	bl	8009c10 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006cec:	231f      	movs	r3, #31
 8006cee:	2101      	movs	r1, #1
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f003 f856 	bl	8009da2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8006cf6:	bf00      	nop
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d0c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8006d1a:	2181      	movs	r1, #129	; 0x81
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f002 ffb5 	bl	8009c8c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8006d22:	2101      	movs	r1, #1
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f002 ffb1 	bl	8009c8c <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006d30:	231f      	movs	r3, #31
 8006d32:	2101      	movs	r1, #1
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f003 f834 	bl	8009da2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d50:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	721a      	strb	r2, [r3, #8]
}
 8006d58:	bf00      	nop
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d76:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	7a1b      	ldrb	r3, [r3, #8]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d004      	beq.n	8006d8a <MSC_BOT_DataIn+0x26>
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	db19      	blt.n	8006db8 <MSC_BOT_DataIn+0x54>
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	dc17      	bgt.n	8006db8 <MSC_BOT_DataIn+0x54>
 8006d88:	e011      	b.n	8006dae <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006d96:	461a      	mov	r2, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f973 	bl	8007084 <SCSI_ProcessCmd>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da0b      	bge.n	8006dbc <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006da4:	2101      	movs	r1, #1
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f8ea 	bl	8006f80 <MSC_BOT_SendCSW>
    }
    break;
 8006dac:	e006      	b.n	8006dbc <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006dae:	2100      	movs	r1, #0
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f8e5 	bl	8006f80 <MSC_BOT_SendCSW>
    break;
 8006db6:	e002      	b.n	8006dbe <MSC_BOT_DataIn+0x5a>

  default:
    break;
 8006db8:	bf00      	nop
 8006dba:	e000      	b.n	8006dbe <MSC_BOT_DataIn+0x5a>
    break;
 8006dbc:	bf00      	nop
  }
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dd8:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	7a1b      	ldrb	r3, [r3, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <MSC_BOT_DataOut+0x22>
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d004      	beq.n	8006df0 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006de6:	e015      	b.n	8006e14 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f817 	bl	8006e1c <MSC_BOT_CBW_Decode>
      break;
 8006dee:	e011      	b.n	8006e14 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f940 	bl	8007084 <SCSI_ProcessCmd>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	da03      	bge.n	8006e12 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8b7 	bl	8006f80 <MSC_BOT_SendCSW>
      break;
 8006e12:	bf00      	nop
  }
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e2a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006e44:	2101      	movs	r1, #1
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f002 ffcc 	bl	8009de4 <USBD_LL_GetRxDataSize>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b1f      	cmp	r3, #31
 8006e50:	d114      	bne.n	8006e7c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006e58:	4a32      	ldr	r2, [pc, #200]	; (8006f24 <MSC_BOT_CBW_Decode+0x108>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d10e      	bne.n	8006e7c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d809      	bhi.n	8006e7c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d004      	beq.n	8006e7c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d90e      	bls.n	8006e9a <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006e82:	2320      	movs	r3, #32
 8006e84:	2205      	movs	r2, #5
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fcc9 	bl	800781e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f8a0 	bl	8006fd8 <MSC_BOT_Abort>
 8006e98:	e041      	b.n	8006f1e <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f8eb 	bl	8007084 <SCSI_ProcessCmd>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	da0c      	bge.n	8006ece <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	7a1b      	ldrb	r3, [r3, #8]
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	d104      	bne.n	8006ec6 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f85e 	bl	8006f80 <MSC_BOT_SendCSW>
 8006ec4:	e02b      	b.n	8006f1e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f886 	bl	8006fd8 <MSC_BOT_Abort>
 8006ecc:	e027      	b.n	8006f1e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	7a1b      	ldrb	r3, [r3, #8]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d022      	beq.n	8006f1c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d01e      	beq.n	8006f1c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d01a      	beq.n	8006f1c <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f103 0110 	add.w	r1, r3, #16
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f814 	bl	8006f28 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006f00:	e00d      	b.n	8006f1e <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d104      	bne.n	8006f14 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f837 	bl	8006f80 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006f12:	e004      	b.n	8006f1e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f85f 	bl	8006fd8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006f1a:	e000      	b.n	8006f1e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8006f1c:	bf00      	nop
    }
  }
}
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	43425355 	.word	0x43425355

08006f28 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f3a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4293      	cmp	r3, r2
 8006f46:	bf28      	it	cs
 8006f48:	4613      	movcs	r3, r2
 8006f4a:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	1ad2      	subs	r2, r2, r3
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2204      	movs	r2, #4
 8006f68:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	2181      	movs	r1, #129	; 0x81
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f002 fef5 	bl	8009d60 <USBD_LL_Transmit>
}
 8006f76:	bf00      	nop
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f92:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4a0f      	ldr	r2, [pc, #60]	; (8006fd4 <MSC_BOT_SendCSW+0x54>)
 8006f98:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	78fa      	ldrb	r2, [r7, #3]
 8006fa0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8006fb0:	230d      	movs	r3, #13
 8006fb2:	2181      	movs	r1, #129	; 0x81
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f002 fed3 	bl	8009d60 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006fc0:	231f      	movs	r3, #31
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f002 feec 	bl	8009da2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8006fca:	bf00      	nop
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	53425355 	.word	0x53425355

08006fd8 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe6:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10c      	bne.n	800700c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007000:	2b00      	cmp	r3, #0
 8007002:	d103      	bne.n	800700c <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007004:	2101      	movs	r1, #1
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f002 fe21 	bl	8009c4e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800700c:	2181      	movs	r1, #129	; 0x81
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f002 fe1d 	bl	8009c4e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	7a5b      	ldrb	r3, [r3, #9]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d107      	bne.n	800702c <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800701c:	2181      	movs	r1, #129	; 0x81
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f002 fe15 	bl	8009c4e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007024:	2101      	movs	r1, #1
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f002 fe11 	bl	8009c4e <USBD_LL_StallEP>
  }
}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007046:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	7a5b      	ldrb	r3, [r3, #9]
 800704c:	2b02      	cmp	r3, #2
 800704e:	d108      	bne.n	8007062 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007050:	2181      	movs	r1, #129	; 0x81
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f002 fdfb 	bl	8009c4e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007058:	2101      	movs	r1, #1
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f002 fdf7 	bl	8009c4e <USBD_LL_StallEP>
 8007060:	e00d      	b.n	800707e <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007066:	2b00      	cmp	r3, #0
 8007068:	da08      	bge.n	800707c <MSC_BOT_CplClrFeature+0x48>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	7a5b      	ldrb	r3, [r3, #9]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d004      	beq.n	800707c <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007072:	2101      	movs	r1, #1
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff ff83 	bl	8006f80 <MSC_BOT_SendCSW>
 800707a:	e000      	b.n	800707e <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800707c:	bf00      	nop
  }
}
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	460b      	mov	r3, r1
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007098:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b25      	cmp	r3, #37	; 0x25
 80070a0:	d06e      	beq.n	8007180 <SCSI_ProcessCmd+0xfc>
 80070a2:	2b25      	cmp	r3, #37	; 0x25
 80070a4:	dc11      	bgt.n	80070ca <SCSI_ProcessCmd+0x46>
 80070a6:	2b1a      	cmp	r3, #26
 80070a8:	d04f      	beq.n	800714a <SCSI_ProcessCmd+0xc6>
 80070aa:	2b1a      	cmp	r3, #26
 80070ac:	dc06      	bgt.n	80070bc <SCSI_ProcessCmd+0x38>
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d027      	beq.n	8007102 <SCSI_ProcessCmd+0x7e>
 80070b2:	2b12      	cmp	r3, #18
 80070b4:	d02e      	beq.n	8007114 <SCSI_ProcessCmd+0x90>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01a      	beq.n	80070f0 <SCSI_ProcessCmd+0x6c>
 80070ba:	e0a0      	b.n	80071fe <SCSI_ProcessCmd+0x17a>
 80070bc:	2b1e      	cmp	r3, #30
 80070be:	d03b      	beq.n	8007138 <SCSI_ProcessCmd+0xb4>
 80070c0:	2b23      	cmp	r3, #35	; 0x23
 80070c2:	d054      	beq.n	800716e <SCSI_ProcessCmd+0xea>
 80070c4:	2b1b      	cmp	r3, #27
 80070c6:	d02e      	beq.n	8007126 <SCSI_ProcessCmd+0xa2>
 80070c8:	e099      	b.n	80071fe <SCSI_ProcessCmd+0x17a>
 80070ca:	2b5a      	cmp	r3, #90	; 0x5a
 80070cc:	d046      	beq.n	800715c <SCSI_ProcessCmd+0xd8>
 80070ce:	2b5a      	cmp	r3, #90	; 0x5a
 80070d0:	dc07      	bgt.n	80070e2 <SCSI_ProcessCmd+0x5e>
 80070d2:	2b2a      	cmp	r3, #42	; 0x2a
 80070d4:	d078      	beq.n	80071c8 <SCSI_ProcessCmd+0x144>
 80070d6:	2b2f      	cmp	r3, #47	; 0x2f
 80070d8:	f000 8088 	beq.w	80071ec <SCSI_ProcessCmd+0x168>
 80070dc:	2b28      	cmp	r3, #40	; 0x28
 80070de:	d061      	beq.n	80071a4 <SCSI_ProcessCmd+0x120>
 80070e0:	e08d      	b.n	80071fe <SCSI_ProcessCmd+0x17a>
 80070e2:	2ba8      	cmp	r3, #168	; 0xa8
 80070e4:	d067      	beq.n	80071b6 <SCSI_ProcessCmd+0x132>
 80070e6:	2baa      	cmp	r3, #170	; 0xaa
 80070e8:	d077      	beq.n	80071da <SCSI_ProcessCmd+0x156>
 80070ea:	2b9e      	cmp	r3, #158	; 0x9e
 80070ec:	d051      	beq.n	8007192 <SCSI_ProcessCmd+0x10e>
 80070ee:	e086      	b.n	80071fe <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80070f0:	7afb      	ldrb	r3, [r7, #11]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4619      	mov	r1, r3
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f893 	bl	8007222 <SCSI_TestUnitReady>
 80070fc:	4603      	mov	r3, r0
 80070fe:	75fb      	strb	r3, [r7, #23]
    break;
 8007100:	e089      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8007102:	7afb      	ldrb	r3, [r7, #11]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	4619      	mov	r1, r3
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fb0f 	bl	800772c <SCSI_RequestSense>
 800710e:	4603      	mov	r3, r0
 8007110:	75fb      	strb	r3, [r7, #23]
    break;
 8007112:	e080      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	4619      	mov	r1, r3
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 f8cc 	bl	80072b8 <SCSI_Inquiry>
 8007120:	4603      	mov	r3, r0
 8007122:	75fb      	strb	r3, [r7, #23]
    break;
 8007124:	e077      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	4619      	mov	r1, r3
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 fbb9 	bl	80078a4 <SCSI_StartStopUnit>
 8007132:	4603      	mov	r3, r0
 8007134:	75fb      	strb	r3, [r7, #23]
    break;
 8007136:	e06e      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8007138:	7afb      	ldrb	r3, [r7, #11]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	4619      	mov	r1, r3
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fbfb 	bl	800793a <SCSI_AllowPreventRemovable>
 8007144:	4603      	mov	r3, r0
 8007146:	75fb      	strb	r3, [r7, #23]
    break;
 8007148:	e065      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	4619      	mov	r1, r3
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fa9f 	bl	8007694 <SCSI_ModeSense6>
 8007156:	4603      	mov	r3, r0
 8007158:	75fb      	strb	r3, [r7, #23]
    break;
 800715a:	e05c      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4619      	mov	r1, r3
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 fabc 	bl	80076e0 <SCSI_ModeSense10>
 8007168:	4603      	mov	r3, r0
 800716a:	75fb      	strb	r3, [r7, #23]
    break;
 800716c:	e053      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	4619      	mov	r1, r3
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 fa20 	bl	80075ba <SCSI_ReadFormatCapacity>
 800717a:	4603      	mov	r3, r0
 800717c:	75fb      	strb	r3, [r7, #23]
    break;
 800717e:	e04a      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	4619      	mov	r1, r3
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f904 	bl	8007394 <SCSI_ReadCapacity10>
 800718c:	4603      	mov	r3, r0
 800718e:	75fb      	strb	r3, [r7, #23]
    break;
 8007190:	e041      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007192:	7afb      	ldrb	r3, [r7, #11]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	4619      	mov	r1, r3
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f96a 	bl	8007472 <SCSI_ReadCapacity16>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]
    break;
 80071a2:	e038      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	4619      	mov	r1, r3
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 fbe8 	bl	8007980 <SCSI_Read10>
 80071b0:	4603      	mov	r3, r0
 80071b2:	75fb      	strb	r3, [r7, #23]
    break;
 80071b4:	e02f      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 80071b6:	7afb      	ldrb	r3, [r7, #11]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	4619      	mov	r1, r3
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 fc79 	bl	8007ab4 <SCSI_Read12>
 80071c2:	4603      	mov	r3, r0
 80071c4:	75fb      	strb	r3, [r7, #23]
    break;
 80071c6:	e026      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4619      	mov	r1, r3
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fd15 	bl	8007bfe <SCSI_Write10>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]
    break;
 80071d8:	e01d      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 80071da:	7afb      	ldrb	r3, [r7, #11]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	4619      	mov	r1, r3
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 fdcb 	bl	8007d7c <SCSI_Write12>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]
    break;
 80071ea:	e014      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 80071ec:	7afb      	ldrb	r3, [r7, #11]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	4619      	mov	r1, r3
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fe91 	bl	8007f1a <SCSI_Verify10>
 80071f8:	4603      	mov	r3, r0
 80071fa:	75fb      	strb	r3, [r7, #23]
    break;
 80071fc:	e00b      	b.n	8007216 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80071fe:	7af9      	ldrb	r1, [r7, #11]
 8007200:	2320      	movs	r3, #32
 8007202:	2205      	movs	r2, #5
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fb0a 	bl	800781e <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2202      	movs	r2, #2
 800720e:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8007210:	23ff      	movs	r3, #255	; 0xff
 8007212:	75fb      	strb	r3, [r7, #23]
    break;
 8007214:	bf00      	nop
  }

  return ret;
 8007216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b086      	sub	sp, #24
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	460b      	mov	r3, r1
 800722c:	607a      	str	r2, [r7, #4]
 800722e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007236:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007248:	2320      	movs	r3, #32
 800724a:	2205      	movs	r2, #5
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fae6 	bl	800781e <SCSI_SenseCode>

    return -1;
 8007252:	f04f 33ff 	mov.w	r3, #4294967295
 8007256:	e02a      	b.n	80072ae <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800725e:	2b02      	cmp	r3, #2
 8007260:	d10b      	bne.n	800727a <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007262:	7af9      	ldrb	r1, [r7, #11]
 8007264:	233a      	movs	r3, #58	; 0x3a
 8007266:	2202      	movs	r2, #2
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fad8 	bl	800781e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2205      	movs	r2, #5
 8007272:	721a      	strb	r2, [r3, #8]
    return -1;
 8007274:	f04f 33ff 	mov.w	r3, #4294967295
 8007278:	e019      	b.n	80072ae <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	7afa      	ldrb	r2, [r7, #11]
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800728e:	7af9      	ldrb	r1, [r7, #11]
 8007290:	233a      	movs	r3, #58	; 0x3a
 8007292:	2202      	movs	r2, #2
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 fac2 	bl	800781e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2205      	movs	r2, #5
 800729e:	721a      	strb	r2, [r3, #8]

    return -1;
 80072a0:	f04f 33ff 	mov.w	r3, #4294967295
 80072a4:	e003      	b.n	80072ae <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2200      	movs	r2, #0
 80072aa:	60da      	str	r2, [r3, #12]

  return 0;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b088      	sub	sp, #32
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	460b      	mov	r3, r1
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072cc:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80072de:	2320      	movs	r3, #32
 80072e0:	2205      	movs	r2, #5
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fa9b 	bl	800781e <SCSI_SenseCode>
    return -1;
 80072e8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ec:	e04a      	b.n	8007384 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3301      	adds	r3, #1
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d020      	beq.n	800733e <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3302      	adds	r3, #2
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d105      	bne.n	8007312 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007306:	2206      	movs	r2, #6
 8007308:	4920      	ldr	r1, [pc, #128]	; (800738c <SCSI_Inquiry+0xd4>)
 800730a:	69b8      	ldr	r0, [r7, #24]
 800730c:	f000 ff50 	bl	80081b0 <SCSI_UpdateBotData>
 8007310:	e037      	b.n	8007382 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3302      	adds	r3, #2
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b80      	cmp	r3, #128	; 0x80
 800731a:	d105      	bne.n	8007328 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800731c:	2208      	movs	r2, #8
 800731e:	491c      	ldr	r1, [pc, #112]	; (8007390 <SCSI_Inquiry+0xd8>)
 8007320:	69b8      	ldr	r0, [r7, #24]
 8007322:	f000 ff45 	bl	80081b0 <SCSI_UpdateBotData>
 8007326:	e02c      	b.n	8007382 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800732e:	2324      	movs	r3, #36	; 0x24
 8007330:	2205      	movs	r2, #5
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 fa73 	bl	800781e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8007338:	f04f 33ff 	mov.w	r3, #4294967295
 800733c:	e022      	b.n	8007384 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007344:	69d9      	ldr	r1, [r3, #28]
 8007346:	7afa      	ldrb	r2, [r7, #11]
 8007348:	4613      	mov	r3, r2
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	3304      	adds	r3, #4
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	3305      	adds	r3, #5
 800735e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3304      	adds	r3, #4
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	8bfa      	ldrh	r2, [r7, #30]
 800736a:	429a      	cmp	r2, r3
 800736c:	d303      	bcc.n	8007376 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3304      	adds	r3, #4
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007376:	8bfb      	ldrh	r3, [r7, #30]
 8007378:	461a      	mov	r2, r3
 800737a:	6979      	ldr	r1, [r7, #20]
 800737c:	69b8      	ldr	r0, [r7, #24]
 800737e:	f000 ff17 	bl	80081b0 <SCSI_UpdateBotData>
  }

  return 0;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3720      	adds	r7, #32
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	200000b0 	.word	0x200000b0
 8007390:	200000b8 	.word	0x200000b8

08007394 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	460b      	mov	r3, r1
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a8:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80073be:	7af8      	ldrb	r0, [r7, #11]
 80073c0:	4798      	blx	r3
 80073c2:	4603      	mov	r3, r0
 80073c4:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80073c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <SCSI_ReadCapacity10+0x44>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d108      	bne.n	80073ea <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073d8:	7af9      	ldrb	r1, [r7, #11]
 80073da:	233a      	movs	r3, #58	; 0x3a
 80073dc:	2202      	movs	r2, #2
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 fa1d 	bl	800781e <SCSI_SenseCode>
    return -1;
 80073e4:	f04f 33ff 	mov.w	r3, #4294967295
 80073e8:	e03f      	b.n	800746a <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80073f0:	3b01      	subs	r3, #1
 80073f2:	0e1b      	lsrs	r3, r3, #24
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007400:	3b01      	subs	r3, #1
 8007402:	0c1b      	lsrs	r3, r3, #16
 8007404:	b2da      	uxtb	r2, r3
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007410:	3b01      	subs	r3, #1
 8007412:	0a1b      	lsrs	r3, r3, #8
 8007414:	b2da      	uxtb	r2, r3
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007420:	b2db      	uxtb	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b2da      	uxtb	r2, r3
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007430:	161b      	asrs	r3, r3, #24
 8007432:	b2da      	uxtb	r2, r3
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800743e:	141b      	asrs	r3, r3, #16
 8007440:	b2da      	uxtb	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800744c:	0a1b      	lsrs	r3, r3, #8
 800744e:	b29b      	uxth	r3, r3
 8007450:	b2da      	uxtb	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800745c:	b2da      	uxtb	r2, r3
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2208      	movs	r2, #8
 8007466:	60da      	str	r2, [r3, #12]

  return 0;
 8007468:	2300      	movs	r3, #0

}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b088      	sub	sp, #32
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	460b      	mov	r3, r1
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007486:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800749c:	7af8      	ldrb	r0, [r7, #11]
 800749e:	4798      	blx	r3
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80074a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d104      	bne.n	80074b6 <SCSI_ReadCapacity16+0x44>
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d108      	bne.n	80074c8 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80074b6:	7af9      	ldrb	r1, [r7, #11]
 80074b8:	233a      	movs	r3, #58	; 0x3a
 80074ba:	2202      	movs	r2, #2
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f9ae 	bl	800781e <SCSI_SenseCode>
    return -1;
 80074c2:	f04f 33ff 	mov.w	r3, #4294967295
 80074c6:	e074      	b.n	80075b2 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	330a      	adds	r3, #10
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	330b      	adds	r3, #11
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80074d8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	330c      	adds	r3, #12
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80074e2:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	320d      	adds	r2, #13
 80074e8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80074ea:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80074f0:	2300      	movs	r3, #0
 80074f2:	77fb      	strb	r3, [r7, #31]
 80074f4:	e007      	b.n	8007506 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 80074f6:	7ffb      	ldrb	r3, [r7, #31]
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	4413      	add	r3, r2
 80074fc:	2200      	movs	r2, #0
 80074fe:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007500:	7ffb      	ldrb	r3, [r7, #31]
 8007502:	3301      	adds	r3, #1
 8007504:	77fb      	strb	r3, [r7, #31]
 8007506:	7ffa      	ldrb	r2, [r7, #31]
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	429a      	cmp	r2, r3
 800750e:	d3f2      	bcc.n	80074f6 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007516:	3b01      	subs	r3, #1
 8007518:	0e1b      	lsrs	r3, r3, #24
 800751a:	b2da      	uxtb	r2, r3
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007526:	3b01      	subs	r3, #1
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	b2da      	uxtb	r2, r3
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007536:	3b01      	subs	r3, #1
 8007538:	0a1b      	lsrs	r3, r3, #8
 800753a:	b2da      	uxtb	r2, r3
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007546:	b2db      	uxtb	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007556:	161b      	asrs	r3, r3, #24
 8007558:	b2da      	uxtb	r2, r3
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007564:	141b      	asrs	r3, r3, #16
 8007566:	b2da      	uxtb	r2, r3
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007572:	0a1b      	lsrs	r3, r3, #8
 8007574:	b29b      	uxth	r3, r3
 8007576:	b2da      	uxtb	r2, r3
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007582:	b2da      	uxtb	r2, r3
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	330a      	adds	r3, #10
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	330b      	adds	r3, #11
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007598:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	330c      	adds	r3, #12
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80075a2:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	320d      	adds	r2, #13
 80075a8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80075aa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	60da      	str	r2, [r3, #12]

  return 0;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3720      	adds	r7, #32
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b088      	sub	sp, #32
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	460b      	mov	r3, r1
 80075c4:	607a      	str	r2, [r7, #4]
 80075c6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ce:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f107 0214 	add.w	r2, r7, #20
 80075dc:	f107 0110 	add.w	r1, r7, #16
 80075e0:	7af8      	ldrb	r0, [r7, #11]
 80075e2:	4798      	blx	r3
 80075e4:	4603      	mov	r3, r0
 80075e6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80075e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <SCSI_ReadFormatCapacity+0x40>
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d108      	bne.n	800760c <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80075fa:	7af9      	ldrb	r1, [r7, #11]
 80075fc:	233a      	movs	r3, #58	; 0x3a
 80075fe:	2202      	movs	r2, #2
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 f90c 	bl	800781e <SCSI_SenseCode>
    return -1;
 8007606:	f04f 33ff 	mov.w	r3, #4294967295
 800760a:	e03e      	b.n	800768a <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800760c:	2300      	movs	r3, #0
 800760e:	83fb      	strh	r3, [r7, #30]
 8007610:	e007      	b.n	8007622 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 8007612:	8bfb      	ldrh	r3, [r7, #30]
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	4413      	add	r3, r2
 8007618:	2200      	movs	r2, #0
 800761a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800761c:	8bfb      	ldrh	r3, [r7, #30]
 800761e:	3301      	adds	r3, #1
 8007620:	83fb      	strh	r3, [r7, #30]
 8007622:	8bfb      	ldrh	r3, [r7, #30]
 8007624:	2b0b      	cmp	r3, #11
 8007626:	d9f4      	bls.n	8007612 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2208      	movs	r2, #8
 800762c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	3b01      	subs	r3, #1
 8007632:	0e1b      	lsrs	r3, r3, #24
 8007634:	b2da      	uxtb	r2, r3
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	3b01      	subs	r3, #1
 800763e:	0c1b      	lsrs	r3, r3, #16
 8007640:	b2da      	uxtb	r2, r3
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	3b01      	subs	r3, #1
 800764a:	0a1b      	lsrs	r3, r3, #8
 800764c:	b2da      	uxtb	r2, r3
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	b2da      	uxtb	r2, r3
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2202      	movs	r2, #2
 8007662:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007664:	8abb      	ldrh	r3, [r7, #20]
 8007666:	141b      	asrs	r3, r3, #16
 8007668:	b2da      	uxtb	r2, r3
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800766e:	8abb      	ldrh	r3, [r7, #20]
 8007670:	0a1b      	lsrs	r3, r3, #8
 8007672:	b29b      	uxth	r3, r3
 8007674:	b2da      	uxtb	r2, r3
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800767a:	8abb      	ldrh	r3, [r7, #20]
 800767c:	b2da      	uxtb	r2, r3
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	220c      	movs	r2, #12
 8007686:	60da      	str	r2, [r3, #12]

  return 0;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3720      	adds	r7, #32
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	460b      	mov	r3, r1
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076a8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80076aa:	2317      	movs	r3, #23
 80076ac:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3304      	adds	r3, #4
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	8afa      	ldrh	r2, [r7, #22]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d303      	bcc.n	80076c4 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3304      	adds	r3, #4
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80076c4:	8afb      	ldrh	r3, [r7, #22]
 80076c6:	461a      	mov	r2, r3
 80076c8:	4904      	ldr	r1, [pc, #16]	; (80076dc <SCSI_ModeSense6+0x48>)
 80076ca:	6938      	ldr	r0, [r7, #16]
 80076cc:	f000 fd70 	bl	80081b0 <SCSI_UpdateBotData>

  return 0;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	200000c0 	.word	0x200000c0

080076e0 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	460b      	mov	r3, r1
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076f4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80076f6:	231b      	movs	r3, #27
 80076f8:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3308      	adds	r3, #8
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	8afa      	ldrh	r2, [r7, #22]
 8007704:	429a      	cmp	r2, r3
 8007706:	d303      	bcc.n	8007710 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3308      	adds	r3, #8
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8007710:	8afb      	ldrh	r3, [r7, #22]
 8007712:	461a      	mov	r2, r3
 8007714:	4904      	ldr	r1, [pc, #16]	; (8007728 <SCSI_ModeSense10+0x48>)
 8007716:	6938      	ldr	r0, [r7, #16]
 8007718:	f000 fd4a 	bl	80081b0 <SCSI_UpdateBotData>

  return 0;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	200000d8 	.word	0x200000d8

0800772c <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	460b      	mov	r3, r1
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007740:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007752:	2320      	movs	r3, #32
 8007754:	2205      	movs	r2, #5
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 f861 	bl	800781e <SCSI_SenseCode>
    return -1;
 800775c:	f04f 33ff 	mov.w	r3, #4294967295
 8007760:	e059      	b.n	8007816 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007762:	2300      	movs	r3, #0
 8007764:	75fb      	strb	r3, [r7, #23]
 8007766:	e007      	b.n	8007778 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4413      	add	r3, r2
 800776e:	2200      	movs	r2, #0
 8007770:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	3301      	adds	r3, #1
 8007776:	75fb      	strb	r3, [r7, #23]
 8007778:	7dfb      	ldrb	r3, [r7, #23]
 800777a:	2b11      	cmp	r3, #17
 800777c:	d9f4      	bls.n	8007768 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	2270      	movs	r2, #112	; 0x70
 8007782:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	220c      	movs	r2, #12
 8007788:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007796:	429a      	cmp	r2, r3
 8007798:	d02e      	beq.n	80077f8 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80077a0:	461a      	mov	r2, r3
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	3248      	adds	r2, #72	; 0x48
 80077a6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	3348      	adds	r3, #72	; 0x48
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	4413      	add	r3, r2
 80077bc:	791a      	ldrb	r2, [r3, #4]
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	3348      	adds	r3, #72	; 0x48
 80077cc:	00db      	lsls	r3, r3, #3
 80077ce:	4413      	add	r3, r2
 80077d0:	795a      	ldrb	r2, [r3, #5]
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80077dc:	3301      	adds	r3, #1
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d103      	bne.n	80077f8 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	2212      	movs	r2, #18
 80077fc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3304      	adds	r3, #4
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b12      	cmp	r3, #18
 8007806:	d805      	bhi.n	8007814 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3304      	adds	r3, #4
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	4608      	mov	r0, r1
 8007828:	4611      	mov	r1, r2
 800782a:	461a      	mov	r2, r3
 800782c:	4603      	mov	r3, r0
 800782e:	70fb      	strb	r3, [r7, #3]
 8007830:	460b      	mov	r3, r1
 8007832:	70bb      	strb	r3, [r7, #2]
 8007834:	4613      	mov	r3, r2
 8007836:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800783e:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007846:	461a      	mov	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3248      	adds	r2, #72	; 0x48
 800784c:	78b9      	ldrb	r1, [r7, #2]
 800784e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	3348      	adds	r3, #72	; 0x48
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4413      	add	r3, r2
 8007860:	787a      	ldrb	r2, [r7, #1]
 8007862:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	3348      	adds	r3, #72	; 0x48
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	4413      	add	r3, r2
 8007872:	2200      	movs	r2, #0
 8007874:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800787c:	3301      	adds	r3, #1
 800787e:	b2da      	uxtb	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800788c:	2b04      	cmp	r3, #4
 800788e:	d103      	bne.n	8007898 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 8007898:	bf00      	nop
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	460b      	mov	r3, r1
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078b8:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d10f      	bne.n	80078e4 <SCSI_StartStopUnit+0x40>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3304      	adds	r3, #4
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d108      	bne.n	80078e4 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80078d2:	7af9      	ldrb	r1, [r7, #11]
 80078d4:	2324      	movs	r3, #36	; 0x24
 80078d6:	2205      	movs	r2, #5
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f7ff ffa0 	bl	800781e <SCSI_SenseCode>

    return -1;
 80078de:	f04f 33ff 	mov.w	r3, #4294967295
 80078e2:	e026      	b.n	8007932 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3304      	adds	r3, #4
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d104      	bne.n	80078fc <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80078fa:	e016      	b.n	800792a <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d104      	bne.n	8007914 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2202      	movs	r2, #2
 800790e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007912:	e00a      	b.n	800792a <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3304      	adds	r3, #4
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	2b03      	cmp	r3, #3
 8007920:	d103      	bne.n	800792a <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2200      	movs	r2, #0
 800792e:	60da      	str	r2, [r3, #12]

  return 0;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800793a:	b480      	push	{r7}
 800793c:	b087      	sub	sp, #28
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	460b      	mov	r3, r1
 8007944:	607a      	str	r2, [r7, #4]
 8007946:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800794e:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007962:	e003      	b.n	800796c <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2200      	movs	r2, #0
 8007970:	60da      	str	r2, [r3, #12]

  return 0;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	460b      	mov	r3, r1
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007994:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	7a1b      	ldrb	r3, [r3, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d17c      	bne.n	8007a98 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80079a4:	b25b      	sxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	db0a      	blt.n	80079c0 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80079b0:	2320      	movs	r3, #32
 80079b2:	2205      	movs	r2, #5
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7ff ff32 	bl	800781e <SCSI_SenseCode>
      return -1;
 80079ba:	f04f 33ff 	mov.w	r3, #4294967295
 80079be:	e075      	b.n	8007aac <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d108      	bne.n	80079dc <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80079ca:	7af9      	ldrb	r1, [r7, #11]
 80079cc:	233a      	movs	r3, #58	; 0x3a
 80079ce:	2202      	movs	r2, #2
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f7ff ff24 	bl	800781e <SCSI_SenseCode>

      return -1;
 80079d6:	f04f 33ff 	mov.w	r3, #4294967295
 80079da:	e067      	b.n	8007aac <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	7afa      	ldrb	r2, [r7, #11]
 80079e6:	4610      	mov	r0, r2
 80079e8:	4798      	blx	r3
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d008      	beq.n	8007a02 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80079f0:	7af9      	ldrb	r1, [r7, #11]
 80079f2:	233a      	movs	r3, #58	; 0x3a
 80079f4:	2202      	movs	r2, #2
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7ff ff11 	bl	800781e <SCSI_SenseCode>
      return -1;
 80079fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007a00:	e054      	b.n	8007aac <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3302      	adds	r3, #2
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3303      	adds	r3, #3
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a12:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3304      	adds	r3, #4
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007a1c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	3205      	adds	r2, #5
 8007a22:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007a24:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3307      	adds	r3, #7
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	3208      	adds	r2, #8
 8007a38:	7812      	ldrb	r2, [r2, #0]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007a4e:	7af9      	ldrb	r1, [r7, #11]
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 fa95 	bl	8007f80 <SCSI_CheckAddressRange>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	da02      	bge.n	8007a62 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a60:	e024      	b.n	8007aac <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007a6e:	6979      	ldr	r1, [r7, #20]
 8007a70:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007a74:	fb01 f303 	mul.w	r3, r1, r3
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d00a      	beq.n	8007a92 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007a82:	2320      	movs	r3, #32
 8007a84:	2205      	movs	r2, #5
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff fec9 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a90:	e00c      	b.n	8007aac <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2202      	movs	r2, #2
 8007a96:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a9e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 fa8d 	bl	8007fc4 <SCSI_ProcessRead>
 8007aaa:	4603      	mov	r3, r0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	460b      	mov	r3, r1
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ac8:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	7a1b      	ldrb	r3, [r3, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f040 8087 	bne.w	8007be2 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007ada:	b25b      	sxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	db0a      	blt.n	8007af6 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007ae6:	2320      	movs	r3, #32
 8007ae8:	2205      	movs	r2, #5
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7ff fe97 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007af0:	f04f 33ff 	mov.w	r3, #4294967295
 8007af4:	e07f      	b.n	8007bf6 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d108      	bne.n	8007b12 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b00:	7af9      	ldrb	r1, [r7, #11]
 8007b02:	233a      	movs	r3, #58	; 0x3a
 8007b04:	2202      	movs	r2, #2
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7ff fe89 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b10:	e071      	b.n	8007bf6 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	7afa      	ldrb	r2, [r7, #11]
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d008      	beq.n	8007b38 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b26:	7af9      	ldrb	r1, [r7, #11]
 8007b28:	233a      	movs	r3, #58	; 0x3a
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff fe76 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007b32:	f04f 33ff 	mov.w	r3, #4294967295
 8007b36:	e05e      	b.n	8007bf6 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3302      	adds	r3, #2
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3303      	adds	r3, #3
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b48:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007b52:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	3205      	adds	r2, #5
 8007b58:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007b5a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3306      	adds	r3, #6
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3307      	adds	r3, #7
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007b72:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3308      	adds	r3, #8
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007b7c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	3209      	adds	r2, #9
 8007b82:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007b84:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007b98:	7af9      	ldrb	r1, [r7, #11]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 f9f0 	bl	8007f80 <SCSI_CheckAddressRange>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	da02      	bge.n	8007bac <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8007baa:	e024      	b.n	8007bf6 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007bb8:	6979      	ldr	r1, [r7, #20]
 8007bba:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007bbe:	fb01 f303 	mul.w	r3, r1, r3
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d00a      	beq.n	8007bdc <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007bcc:	2320      	movs	r3, #32
 8007bce:	2205      	movs	r2, #5
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f7ff fe24 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bda:	e00c      	b.n	8007bf6 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	2202      	movs	r2, #2
 8007be0:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007be8:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	4619      	mov	r1, r3
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 f9e8 	bl	8007fc4 <SCSI_ProcessRead>
 8007bf4:	4603      	mov	r3, r0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b086      	sub	sp, #24
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	460b      	mov	r3, r1
 8007c08:	607a      	str	r2, [r7, #4]
 8007c0a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c12:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	7a1b      	ldrb	r3, [r3, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f040 80a5 	bne.w	8007d68 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007c2e:	2320      	movs	r3, #32
 8007c30:	2205      	movs	r2, #5
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f7ff fdf3 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007c38:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3c:	e09a      	b.n	8007d74 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007c44:	b25b      	sxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	da0a      	bge.n	8007c60 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007c50:	2320      	movs	r3, #32
 8007c52:	2205      	movs	r2, #5
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff fde2 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5e:	e089      	b.n	8007d74 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	7afa      	ldrb	r2, [r7, #11]
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	4798      	blx	r3
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d008      	beq.n	8007c86 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c74:	7af9      	ldrb	r1, [r7, #11]
 8007c76:	233a      	movs	r3, #58	; 0x3a
 8007c78:	2202      	movs	r2, #2
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7ff fdcf 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007c80:	f04f 33ff 	mov.w	r3, #4294967295
 8007c84:	e076      	b.n	8007d74 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	7afa      	ldrb	r2, [r7, #11]
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d008      	beq.n	8007cac <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007c9a:	7af9      	ldrb	r1, [r7, #11]
 8007c9c:	2327      	movs	r3, #39	; 0x27
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff fdbc 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8007caa:	e063      	b.n	8007d74 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3302      	adds	r3, #2
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3303      	adds	r3, #3
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007cbc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007cc6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	3205      	adds	r2, #5
 8007ccc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007cce:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3307      	adds	r3, #7
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	3208      	adds	r2, #8
 8007ce2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cf8:	7af9      	ldrb	r1, [r7, #11]
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f940 	bl	8007f80 <SCSI_CheckAddressRange>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	da02      	bge.n	8007d0c <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007d06:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0a:	e033      	b.n	8007d74 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007d18:	fb02 f303 	mul.w	r3, r2, r3
 8007d1c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d00a      	beq.n	8007d40 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007d30:	2320      	movs	r3, #32
 8007d32:	2205      	movs	r2, #5
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f7ff fd72 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3e:	e019      	b.n	8007d74 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d46:	bf28      	it	cs
 8007d48:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007d4c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2201      	movs	r2, #1
 8007d52:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f103 0210 	add.w	r2, r3, #16
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f002 f81f 	bl	8009da2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	e005      	b.n	8007d74 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 8007d68:	7afb      	ldrb	r3, [r7, #11]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 f99c 	bl	80080aa <SCSI_ProcessWrite>
 8007d72:	4603      	mov	r3, r0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	460b      	mov	r3, r1
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d90:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	7a1b      	ldrb	r3, [r3, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f040 80b5 	bne.w	8007f06 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007dac:	2320      	movs	r3, #32
 8007dae:	2205      	movs	r2, #5
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f7ff fd34 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007db6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dba:	e0aa      	b.n	8007f12 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007dc2:	b25b      	sxtb	r3, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	da0a      	bge.n	8007dde <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007dce:	2320      	movs	r3, #32
 8007dd0:	2205      	movs	r2, #5
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f7ff fd23 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ddc:	e099      	b.n	8007f12 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	7afa      	ldrb	r2, [r7, #11]
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007df2:	7af9      	ldrb	r1, [r7, #11]
 8007df4:	233a      	movs	r3, #58	; 0x3a
 8007df6:	2202      	movs	r2, #2
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff fd10 	bl	800781e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2205      	movs	r2, #5
 8007e02:	721a      	strb	r2, [r3, #8]
      return -1;
 8007e04:	f04f 33ff 	mov.w	r3, #4294967295
 8007e08:	e083      	b.n	8007f12 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	7afa      	ldrb	r2, [r7, #11]
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00b      	beq.n	8007e36 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007e1e:	7af9      	ldrb	r1, [r7, #11]
 8007e20:	2327      	movs	r3, #39	; 0x27
 8007e22:	2202      	movs	r2, #2
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7ff fcfa 	bl	800781e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2205      	movs	r2, #5
 8007e2e:	721a      	strb	r2, [r3, #8]
      return -1;
 8007e30:	f04f 33ff 	mov.w	r3, #4294967295
 8007e34:	e06d      	b.n	8007f12 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3302      	adds	r3, #2
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3303      	adds	r3, #3
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e46:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007e50:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	3205      	adds	r2, #5
 8007e56:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007e58:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3306      	adds	r3, #6
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3307      	adds	r3, #7
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007e70:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3308      	adds	r3, #8
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007e7a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	3209      	adds	r2, #9
 8007e80:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007e82:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e96:	7af9      	ldrb	r1, [r7, #11]
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 f871 	bl	8007f80 <SCSI_CheckAddressRange>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	da02      	bge.n	8007eaa <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea8:	e033      	b.n	8007f12 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007eb6:	fb02 f303 	mul.w	r3, r2, r3
 8007eba:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d00a      	beq.n	8007ede <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007ece:	2320      	movs	r3, #32
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f7ff fca3 	bl	800781e <SCSI_SenseCode>
      return -1;
 8007ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8007edc:	e019      	b.n	8007f12 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ee4:	bf28      	it	cs
 8007ee6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007eea:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f103 0210 	add.w	r2, r3, #16
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2101      	movs	r1, #1
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f001 ff50 	bl	8009da2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e005      	b.n	8007f12 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 8007f06:	7afb      	ldrb	r3, [r7, #11]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 f8cd 	bl	80080aa <SCSI_ProcessWrite>
 8007f10:	4603      	mov	r3, r0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b086      	sub	sp, #24
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	460b      	mov	r3, r1
 8007f24:	607a      	str	r2, [r7, #4]
 8007f26:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f2e:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3301      	adds	r3, #1
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d008      	beq.n	8007f50 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007f3e:	7af9      	ldrb	r1, [r7, #11]
 8007f40:	2324      	movs	r3, #36	; 0x24
 8007f42:	2205      	movs	r2, #5
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f7ff fc6a 	bl	800781e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4e:	e013      	b.n	8007f78 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007f5c:	7af9      	ldrb	r1, [r7, #11]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 f80e 	bl	8007f80 <SCSI_CheckAddressRange>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da02      	bge.n	8007f70 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 8007f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6e:	e003      	b.n	8007f78 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2200      	movs	r2, #0
 8007f74:	60da      	str	r2, [r3, #12]

  return 0;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	607a      	str	r2, [r7, #4]
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f96:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	441a      	add	r2, r3
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d908      	bls.n	8007fba <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007fa8:	7af9      	ldrb	r1, [r7, #11]
 8007faa:	2321      	movs	r3, #33	; 0x21
 8007fac:	2205      	movs	r2, #5
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f7ff fc35 	bl	800781e <SCSI_SenseCode>
    return -1;
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb8:	e000      	b.n	8007fbc <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007fc4:	b590      	push	{r4, r7, lr}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007fe4:	fb02 f303 	mul.w	r3, r2, r3
 8007fe8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ff0:	bf28      	it	cs
 8007ff2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007ff6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ffe:	691c      	ldr	r4, [r3, #16]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f103 0110 	add.w	r1, r3, #16
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008012:	4618      	mov	r0, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800801a:	b29b      	uxth	r3, r3
 800801c:	78f8      	ldrb	r0, [r7, #3]
 800801e:	47a0      	blx	r4
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	da08      	bge.n	8008038 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008026:	78f9      	ldrb	r1, [r7, #3]
 8008028:	2311      	movs	r3, #17
 800802a:	2204      	movs	r2, #4
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff fbf6 	bl	800781e <SCSI_SenseCode>
    return -1;
 8008032:	f04f 33ff 	mov.w	r3, #4294967295
 8008036:	e034      	b.n	80080a2 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f103 0210 	add.w	r2, r3, #16
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2181      	movs	r1, #129	; 0x81
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 fe8c 	bl	8009d60 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008054:	4619      	mov	r1, r3
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	fbb3 f3f1 	udiv	r3, r3, r1
 800805c:	441a      	add	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008070:	4619      	mov	r1, r3
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	fbb3 f3f1 	udiv	r3, r3, r1
 8008078:	1ad2      	subs	r2, r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	1ad2      	subs	r2, r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2203      	movs	r2, #3
 800809e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd90      	pop	{r4, r7, pc}

080080aa <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80080aa:	b590      	push	{r4, r7, lr}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080bc:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80080ca:	fb02 f303 	mul.w	r3, r2, r3
 80080ce:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080d6:	bf28      	it	cs
 80080d8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80080dc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080e4:	695c      	ldr	r4, [r3, #20]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f103 0110 	add.w	r1, r3, #16
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80080f8:	4618      	mov	r0, r3
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008100:	b29b      	uxth	r3, r3
 8008102:	78f8      	ldrb	r0, [r7, #3]
 8008104:	47a0      	blx	r4
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	da08      	bge.n	800811e <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800810c:	78f9      	ldrb	r1, [r7, #3]
 800810e:	2303      	movs	r3, #3
 8008110:	2204      	movs	r2, #4
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff fb83 	bl	800781e <SCSI_SenseCode>
    return -1;
 8008118:	f04f 33ff 	mov.w	r3, #4294967295
 800811c:	e044      	b.n	80081a8 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800812a:	4619      	mov	r1, r3
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008132:	441a      	add	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008146:	4619      	mov	r1, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	fbb3 f3f1 	udiv	r3, r3, r1
 800814e:	1ad2      	subs	r2, r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	1ad2      	subs	r2, r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008170:	2100      	movs	r1, #0
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7fe ff04 	bl	8006f80 <MSC_BOT_SendCSW>
 8008178:	e015      	b.n	80081a6 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008186:	fb02 f303 	mul.w	r3, r2, r3
 800818a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800818e:	bf28      	it	cs
 8008190:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008194:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f103 0210 	add.w	r2, r3, #16
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2101      	movs	r1, #1
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fdfe 	bl	8009da2 <USBD_LL_PrepareReceive>
  }

  return 0;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd90      	pop	{r4, r7, pc}

080081b0 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	4613      	mov	r3, r2
 80081bc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80081c2:	8afa      	ldrh	r2, [r7, #22]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80081c8:	e00b      	b.n	80081e2 <SCSI_UpdateBotData+0x32>
  {
    len--;
 80081ca:	8afb      	ldrh	r3, [r7, #22]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80081d0:	8afb      	ldrh	r3, [r7, #22]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	441a      	add	r2, r3
 80081d6:	8afb      	ldrh	r3, [r7, #22]
 80081d8:	7811      	ldrb	r1, [r2, #0]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	4413      	add	r3, r2
 80081de:	460a      	mov	r2, r1
 80081e0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80081e2:	8afb      	ldrh	r3, [r7, #22]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1f0      	bne.n	80081ca <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b086      	sub	sp, #24
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	4613      	mov	r3, r2
 8008202:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800820a:	2303      	movs	r3, #3
 800820c:	e025      	b.n	800825a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	79fa      	ldrb	r2, [r7, #7]
 800824c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f001 fc2e 	bl	8009ab0 <USBD_LL_Init>
 8008254:	4603      	mov	r3, r0
 8008256:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008258:	7dfb      	ldrb	r3, [r7, #23]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008276:	2303      	movs	r3, #3
 8008278:	e010      	b.n	800829c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	f107 020e 	add.w	r2, r7, #14
 800828e:	4610      	mov	r0, r2
 8008290:	4798      	blx	r3
 8008292:	4602      	mov	r2, r0
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 fc4f 	bl	8009b50 <USBD_LL_Start>
 80082b2:	4603      	mov	r3, r0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082de:	2303      	movs	r3, #3
 80082e0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d009      	beq.n	8008300 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	78fa      	ldrb	r2, [r7, #3]
 80082f6:	4611      	mov	r1, r2
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3
 80082fc:	4603      	mov	r3, r0
 80082fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008300:	7bfb      	ldrb	r3, [r7, #15]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	78fa      	ldrb	r2, [r7, #3]
 800832a:	4611      	mov	r1, r2
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
  }

  return USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	4618      	mov	r0, r3
 800834e:	f000 ff2b 	bl	80091a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008360:	461a      	mov	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800836e:	f003 031f 	and.w	r3, r3, #31
 8008372:	2b01      	cmp	r3, #1
 8008374:	d00e      	beq.n	8008394 <USBD_LL_SetupStage+0x5a>
 8008376:	2b01      	cmp	r3, #1
 8008378:	d302      	bcc.n	8008380 <USBD_LL_SetupStage+0x46>
 800837a:	2b02      	cmp	r3, #2
 800837c:	d014      	beq.n	80083a8 <USBD_LL_SetupStage+0x6e>
 800837e:	e01d      	b.n	80083bc <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fa17 	bl	80087bc <USBD_StdDevReq>
 800838e:	4603      	mov	r3, r0
 8008390:	73fb      	strb	r3, [r7, #15]
      break;
 8008392:	e020      	b.n	80083d6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fa7b 	bl	8008898 <USBD_StdItfReq>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73fb      	strb	r3, [r7, #15]
      break;
 80083a6:	e016      	b.n	80083d6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fab7 	bl	8008924 <USBD_StdEPReq>
 80083b6:	4603      	mov	r3, r0
 80083b8:	73fb      	strb	r3, [r7, #15]
      break;
 80083ba:	e00c      	b.n	80083d6 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f001 fc3f 	bl	8009c4e <USBD_LL_StallEP>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]
      break;
 80083d4:	bf00      	nop
  }

  return ret;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	460b      	mov	r3, r1
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083ee:	7afb      	ldrb	r3, [r7, #11]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d137      	bne.n	8008464 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008402:	2b03      	cmp	r3, #3
 8008404:	d14a      	bne.n	800849c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	689a      	ldr	r2, [r3, #8]
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	429a      	cmp	r2, r3
 8008410:	d913      	bls.n	800843a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	1ad2      	subs	r2, r2, r3
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	4293      	cmp	r3, r2
 800842a:	bf28      	it	cs
 800842c:	4613      	movcs	r3, r2
 800842e:	461a      	mov	r2, r3
 8008430:	6879      	ldr	r1, [r7, #4]
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 ff8f 	bl	8009356 <USBD_CtlContinueRx>
 8008438:	e030      	b.n	800849c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800844c:	2b03      	cmp	r3, #3
 800844e:	d105      	bne.n	800845c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 ff8b 	bl	8009378 <USBD_CtlSendStatus>
 8008462:	e01b      	b.n	800849c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d013      	beq.n	8008498 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008476:	2b03      	cmp	r3, #3
 8008478:	d10e      	bne.n	8008498 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	7afa      	ldrb	r2, [r7, #11]
 8008484:	4611      	mov	r1, r2
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	4798      	blx	r3
 800848a:	4603      	mov	r3, r0
 800848c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800848e:	7dfb      	ldrb	r3, [r7, #23]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	e002      	b.n	800849e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008498:	2303      	movs	r3, #3
 800849a:	e000      	b.n	800849e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b086      	sub	sp, #24
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	460b      	mov	r3, r1
 80084b0:	607a      	str	r2, [r7, #4]
 80084b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80084b4:	7afb      	ldrb	r3, [r7, #11]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d16a      	bne.n	8008590 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3314      	adds	r3, #20
 80084be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d155      	bne.n	8008576 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d914      	bls.n	8008500 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	1ad2      	subs	r2, r2, r3
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 ff21 	bl	8009334 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084f2:	2300      	movs	r3, #0
 80084f4:	2200      	movs	r2, #0
 80084f6:	2100      	movs	r1, #0
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f001 fc52 	bl	8009da2 <USBD_LL_PrepareReceive>
 80084fe:	e03a      	b.n	8008576 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	429a      	cmp	r2, r3
 800850a:	d11c      	bne.n	8008546 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008514:	429a      	cmp	r2, r3
 8008516:	d316      	bcc.n	8008546 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008522:	429a      	cmp	r2, r3
 8008524:	d20f      	bcs.n	8008546 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008526:	2200      	movs	r2, #0
 8008528:	2100      	movs	r1, #0
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 ff02 	bl	8009334 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008538:	2300      	movs	r3, #0
 800853a:	2200      	movs	r2, #0
 800853c:	2100      	movs	r1, #0
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f001 fc2f 	bl	8009da2 <USBD_LL_PrepareReceive>
 8008544:	e017      	b.n	8008576 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008558:	2b03      	cmp	r3, #3
 800855a:	d105      	bne.n	8008568 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008568:	2180      	movs	r1, #128	; 0x80
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f001 fb6f 	bl	8009c4e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 ff14 	bl	800939e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800857c:	2b01      	cmp	r3, #1
 800857e:	d123      	bne.n	80085c8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f7ff fe9b 	bl	80082bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800858e:	e01b      	b.n	80085c8 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d013      	beq.n	80085c4 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d10e      	bne.n	80085c4 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	7afa      	ldrb	r2, [r7, #11]
 80085b0:	4611      	mov	r1, r2
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	4798      	blx	r3
 80085b6:	4603      	mov	r3, r0
 80085b8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	e002      	b.n	80085ca <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e000      	b.n	80085ca <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6852      	ldr	r2, [r2, #4]
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	4611      	mov	r1, r2
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008616:	2340      	movs	r3, #64	; 0x40
 8008618:	2200      	movs	r2, #0
 800861a:	2100      	movs	r1, #0
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 fab2 	bl	8009b86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2240      	movs	r2, #64	; 0x40
 800862e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008632:	2340      	movs	r3, #64	; 0x40
 8008634:	2200      	movs	r2, #0
 8008636:	2180      	movs	r1, #128	; 0x80
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 faa4 	bl	8009b86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2240      	movs	r2, #64	; 0x40
 8008648:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2204      	movs	r2, #4
 800868c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	d105      	bne.n	80086bc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d10b      	bne.n	80086f4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086fe:	b480      	push	{r7}
 8008700:	b083      	sub	sp, #12
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875e:	2b00      	cmp	r3, #0
 8008760:	d009      	beq.n	8008776 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	6852      	ldr	r2, [r2, #4]
 800876e:	b2d2      	uxtb	r2, r2
 8008770:	4611      	mov	r1, r2
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	4798      	blx	r3
  }

  return USBD_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	3301      	adds	r3, #1
 8008796:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800879e:	8a3b      	ldrh	r3, [r7, #16]
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	b21a      	sxth	r2, r3
 80087a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	b21b      	sxth	r3, r3
 80087ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087ae:	89fb      	ldrh	r3, [r7, #14]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	371c      	adds	r7, #28
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087d2:	2b20      	cmp	r3, #32
 80087d4:	d004      	beq.n	80087e0 <USBD_StdDevReq+0x24>
 80087d6:	2b40      	cmp	r3, #64	; 0x40
 80087d8:	d002      	beq.n	80087e0 <USBD_StdDevReq+0x24>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <USBD_StdDevReq+0x38>
 80087de:	e050      	b.n	8008882 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	4798      	blx	r3
 80087ee:	4603      	mov	r3, r0
 80087f0:	73fb      	strb	r3, [r7, #15]
    break;
 80087f2:	e04b      	b.n	800888c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	2b09      	cmp	r3, #9
 80087fa:	d83c      	bhi.n	8008876 <USBD_StdDevReq+0xba>
 80087fc:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <USBD_StdDevReq+0x48>)
 80087fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008802:	bf00      	nop
 8008804:	08008859 	.word	0x08008859
 8008808:	0800886d 	.word	0x0800886d
 800880c:	08008877 	.word	0x08008877
 8008810:	08008863 	.word	0x08008863
 8008814:	08008877 	.word	0x08008877
 8008818:	08008837 	.word	0x08008837
 800881c:	0800882d 	.word	0x0800882d
 8008820:	08008877 	.word	0x08008877
 8008824:	0800884f 	.word	0x0800884f
 8008828:	08008841 	.word	0x08008841
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f9ce 	bl	8008bd0 <USBD_GetDescriptor>
      break;
 8008834:	e024      	b.n	8008880 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fb33 	bl	8008ea4 <USBD_SetAddress>
      break;
 800883e:	e01f      	b.n	8008880 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fb70 	bl	8008f28 <USBD_SetConfig>
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]
      break;
 800884c:	e018      	b.n	8008880 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fc0d 	bl	8009070 <USBD_GetConfig>
      break;
 8008856:	e013      	b.n	8008880 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fc3c 	bl	80090d8 <USBD_GetStatus>
      break;
 8008860:	e00e      	b.n	8008880 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fc6a 	bl	800913e <USBD_SetFeature>
      break;
 800886a:	e009      	b.n	8008880 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fc79 	bl	8009166 <USBD_ClrFeature>
      break;
 8008874:	e004      	b.n	8008880 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fccf 	bl	800921c <USBD_CtlError>
      break;
 800887e:	bf00      	nop
    }
    break;
 8008880:	e004      	b.n	800888c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fcc9 	bl	800921c <USBD_CtlError>
    break;
 800888a:	bf00      	nop
  }

  return ret;
 800888c:	7bfb      	ldrb	r3, [r7, #15]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop

08008898 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088ae:	2b20      	cmp	r3, #32
 80088b0:	d003      	beq.n	80088ba <USBD_StdItfReq+0x22>
 80088b2:	2b40      	cmp	r3, #64	; 0x40
 80088b4:	d001      	beq.n	80088ba <USBD_StdItfReq+0x22>
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d12a      	bne.n	8008910 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c0:	3b01      	subs	r3, #1
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d81d      	bhi.n	8008902 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	889b      	ldrh	r3, [r3, #4]
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d813      	bhi.n	80088f8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
 80088de:	4603      	mov	r3, r0
 80088e0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	88db      	ldrh	r3, [r3, #6]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d110      	bne.n	800890c <USBD_StdItfReq+0x74>
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10d      	bne.n	800890c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fd41 	bl	8009378 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80088f6:	e009      	b.n	800890c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fc8e 	bl	800921c <USBD_CtlError>
      break;
 8008900:	e004      	b.n	800890c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fc89 	bl	800921c <USBD_CtlError>
      break;
 800890a:	e000      	b.n	800890e <USBD_StdItfReq+0x76>
      break;
 800890c:	bf00      	nop
    }
    break;
 800890e:	e004      	b.n	800891a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fc82 	bl	800921c <USBD_CtlError>
    break;
 8008918:	bf00      	nop
  }

  return ret;
 800891a:	7bfb      	ldrb	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	889b      	ldrh	r3, [r3, #4]
 8008936:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008940:	2b20      	cmp	r3, #32
 8008942:	d004      	beq.n	800894e <USBD_StdEPReq+0x2a>
 8008944:	2b40      	cmp	r3, #64	; 0x40
 8008946:	d002      	beq.n	800894e <USBD_StdEPReq+0x2a>
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00a      	beq.n	8008962 <USBD_StdEPReq+0x3e>
 800894c:	e135      	b.n	8008bba <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	4798      	blx	r3
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]
    break;
 8008960:	e130      	b.n	8008bc4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	785b      	ldrb	r3, [r3, #1]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d03e      	beq.n	80089e8 <USBD_StdEPReq+0xc4>
 800896a:	2b03      	cmp	r3, #3
 800896c:	d002      	beq.n	8008974 <USBD_StdEPReq+0x50>
 800896e:	2b00      	cmp	r3, #0
 8008970:	d077      	beq.n	8008a62 <USBD_StdEPReq+0x13e>
 8008972:	e11c      	b.n	8008bae <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897a:	2b02      	cmp	r3, #2
 800897c:	d002      	beq.n	8008984 <USBD_StdEPReq+0x60>
 800897e:	2b03      	cmp	r3, #3
 8008980:	d015      	beq.n	80089ae <USBD_StdEPReq+0x8a>
 8008982:	e02b      	b.n	80089dc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00c      	beq.n	80089a4 <USBD_StdEPReq+0x80>
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	2b80      	cmp	r3, #128	; 0x80
 800898e:	d009      	beq.n	80089a4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 f95a 	bl	8009c4e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800899a:	2180      	movs	r1, #128	; 0x80
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 f956 	bl	8009c4e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80089a2:	e020      	b.n	80089e6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fc38 	bl	800921c <USBD_CtlError>
        break;
 80089ac:	e01b      	b.n	80089e6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	885b      	ldrh	r3, [r3, #2]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10e      	bne.n	80089d4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00b      	beq.n	80089d4 <USBD_StdEPReq+0xb0>
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	2b80      	cmp	r3, #128	; 0x80
 80089c0:	d008      	beq.n	80089d4 <USBD_StdEPReq+0xb0>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	88db      	ldrh	r3, [r3, #6]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d104      	bne.n	80089d4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80089ca:	7bbb      	ldrb	r3, [r7, #14]
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 f93d 	bl	8009c4e <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fccf 	bl	8009378 <USBD_CtlSendStatus>

        break;
 80089da:	e004      	b.n	80089e6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fc1c 	bl	800921c <USBD_CtlError>
        break;
 80089e4:	bf00      	nop
      }
      break;
 80089e6:	e0e7      	b.n	8008bb8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d002      	beq.n	80089f8 <USBD_StdEPReq+0xd4>
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d015      	beq.n	8008a22 <USBD_StdEPReq+0xfe>
 80089f6:	e02d      	b.n	8008a54 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00c      	beq.n	8008a18 <USBD_StdEPReq+0xf4>
 80089fe:	7bbb      	ldrb	r3, [r7, #14]
 8008a00:	2b80      	cmp	r3, #128	; 0x80
 8008a02:	d009      	beq.n	8008a18 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 f920 	bl	8009c4e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a0e:	2180      	movs	r1, #128	; 0x80
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 f91c 	bl	8009c4e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008a16:	e023      	b.n	8008a60 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fbfe 	bl	800921c <USBD_CtlError>
        break;
 8008a20:	e01e      	b.n	8008a60 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	885b      	ldrh	r3, [r3, #2]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d119      	bne.n	8008a5e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d004      	beq.n	8008a3e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 f927 	bl	8009c8c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fc9a 	bl	8009378 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
        }
        break;
 8008a52:	e004      	b.n	8008a5e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fbe0 	bl	800921c <USBD_CtlError>
        break;
 8008a5c:	e000      	b.n	8008a60 <USBD_StdEPReq+0x13c>
        break;
 8008a5e:	bf00      	nop
      }
      break;
 8008a60:	e0aa      	b.n	8008bb8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d002      	beq.n	8008a72 <USBD_StdEPReq+0x14e>
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d032      	beq.n	8008ad6 <USBD_StdEPReq+0x1b2>
 8008a70:	e097      	b.n	8008ba2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d007      	beq.n	8008a88 <USBD_StdEPReq+0x164>
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	2b80      	cmp	r3, #128	; 0x80
 8008a7c:	d004      	beq.n	8008a88 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fbcb 	bl	800921c <USBD_CtlError>
          break;
 8008a86:	e091      	b.n	8008bac <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	da0b      	bge.n	8008aa8 <USBD_StdEPReq+0x184>
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a96:	4613      	mov	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	3310      	adds	r3, #16
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	e00b      	b.n	8008ac0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	4413      	add	r3, r2
 8008abe:	3304      	adds	r3, #4
 8008ac0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2202      	movs	r2, #2
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fc15 	bl	80092fe <USBD_CtlSendData>
        break;
 8008ad4:	e06a      	b.n	8008bac <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008ad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	da11      	bge.n	8008b02 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	f003 020f 	and.w	r2, r3, #15
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	440b      	add	r3, r1
 8008af0:	3324      	adds	r3, #36	; 0x24
 8008af2:	881b      	ldrh	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d117      	bne.n	8008b28 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fb8e 	bl	800921c <USBD_CtlError>
            break;
 8008b00:	e054      	b.n	8008bac <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	f003 020f 	and.w	r2, r3, #15
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d104      	bne.n	8008b28 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fb7b 	bl	800921c <USBD_CtlError>
            break;
 8008b26:	e041      	b.n	8008bac <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	da0b      	bge.n	8008b48 <USBD_StdEPReq+0x224>
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	3310      	adds	r3, #16
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	4413      	add	r3, r2
 8008b44:	3304      	adds	r3, #4
 8008b46:	e00b      	b.n	8008b60 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008b48:	7bbb      	ldrb	r3, [r7, #14]
 8008b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	3304      	adds	r3, #4
 8008b60:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <USBD_StdEPReq+0x24a>
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2b80      	cmp	r3, #128	; 0x80
 8008b6c:	d103      	bne.n	8008b76 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	e00e      	b.n	8008b94 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 f8a5 	bl	8009cca <USBD_LL_IsStallEP>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	e002      	b.n	8008b94 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2202      	movs	r2, #2
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fbaf 	bl	80092fe <USBD_CtlSendData>
          break;
 8008ba0:	e004      	b.n	8008bac <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fb39 	bl	800921c <USBD_CtlError>
        break;
 8008baa:	bf00      	nop
      }
      break;
 8008bac:	e004      	b.n	8008bb8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fb33 	bl	800921c <USBD_CtlError>
      break;
 8008bb6:	bf00      	nop
    }
    break;
 8008bb8:	e004      	b.n	8008bc4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fb2d 	bl	800921c <USBD_CtlError>
    break;
 8008bc2:	bf00      	nop
  }

  return ret;
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	885b      	ldrh	r3, [r3, #2]
 8008bea:	0a1b      	lsrs	r3, r3, #8
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	2b06      	cmp	r3, #6
 8008bf2:	f200 8128 	bhi.w	8008e46 <USBD_GetDescriptor+0x276>
 8008bf6:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <USBD_GetDescriptor+0x2c>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c19 	.word	0x08008c19
 8008c00:	08008c31 	.word	0x08008c31
 8008c04:	08008c71 	.word	0x08008c71
 8008c08:	08008e47 	.word	0x08008e47
 8008c0c:	08008e47 	.word	0x08008e47
 8008c10:	08008de7 	.word	0x08008de7
 8008c14:	08008e13 	.word	0x08008e13
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	7c12      	ldrb	r2, [r2, #16]
 8008c24:	f107 0108 	add.w	r1, r7, #8
 8008c28:	4610      	mov	r0, r2
 8008c2a:	4798      	blx	r3
 8008c2c:	60f8      	str	r0, [r7, #12]
    break;
 8008c2e:	e112      	b.n	8008e56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7c1b      	ldrb	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10d      	bne.n	8008c54 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c40:	f107 0208 	add.w	r2, r7, #8
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	2202      	movs	r2, #2
 8008c50:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008c52:	e100      	b.n	8008e56 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	f107 0208 	add.w	r2, r7, #8
 8008c60:	4610      	mov	r0, r2
 8008c62:	4798      	blx	r3
 8008c64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	701a      	strb	r2, [r3, #0]
    break;
 8008c6e:	e0f2      	b.n	8008e56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	885b      	ldrh	r3, [r3, #2]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b05      	cmp	r3, #5
 8008c78:	f200 80ac 	bhi.w	8008dd4 <USBD_GetDescriptor+0x204>
 8008c7c:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <USBD_GetDescriptor+0xb4>)
 8008c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c82:	bf00      	nop
 8008c84:	08008c9d 	.word	0x08008c9d
 8008c88:	08008cd1 	.word	0x08008cd1
 8008c8c:	08008d05 	.word	0x08008d05
 8008c90:	08008d39 	.word	0x08008d39
 8008c94:	08008d6d 	.word	0x08008d6d
 8008c98:	08008da1 	.word	0x08008da1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00b      	beq.n	8008cc0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	7c12      	ldrb	r2, [r2, #16]
 8008cb4:	f107 0108 	add.w	r1, r7, #8
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4798      	blx	r3
 8008cbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cbe:	e091      	b.n	8008de4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 faaa 	bl	800921c <USBD_CtlError>
        err++;
 8008cc8:	7afb      	ldrb	r3, [r7, #11]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	72fb      	strb	r3, [r7, #11]
      break;
 8008cce:	e089      	b.n	8008de4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	7c12      	ldrb	r2, [r2, #16]
 8008ce8:	f107 0108 	add.w	r1, r7, #8
 8008cec:	4610      	mov	r0, r2
 8008cee:	4798      	blx	r3
 8008cf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cf2:	e077      	b.n	8008de4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa90 	bl	800921c <USBD_CtlError>
        err++;
 8008cfc:	7afb      	ldrb	r3, [r7, #11]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	72fb      	strb	r3, [r7, #11]
      break;
 8008d02:	e06f      	b.n	8008de4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	7c12      	ldrb	r2, [r2, #16]
 8008d1c:	f107 0108 	add.w	r1, r7, #8
 8008d20:	4610      	mov	r0, r2
 8008d22:	4798      	blx	r3
 8008d24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d26:	e05d      	b.n	8008de4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa76 	bl	800921c <USBD_CtlError>
        err++;
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	3301      	adds	r3, #1
 8008d34:	72fb      	strb	r3, [r7, #11]
      break;
 8008d36:	e055      	b.n	8008de4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	7c12      	ldrb	r2, [r2, #16]
 8008d50:	f107 0108 	add.w	r1, r7, #8
 8008d54:	4610      	mov	r0, r2
 8008d56:	4798      	blx	r3
 8008d58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d5a:	e043      	b.n	8008de4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa5c 	bl	800921c <USBD_CtlError>
        err++;
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	3301      	adds	r3, #1
 8008d68:	72fb      	strb	r3, [r7, #11]
      break;
 8008d6a:	e03b      	b.n	8008de4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00b      	beq.n	8008d90 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	7c12      	ldrb	r2, [r2, #16]
 8008d84:	f107 0108 	add.w	r1, r7, #8
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4798      	blx	r3
 8008d8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d8e:	e029      	b.n	8008de4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa42 	bl	800921c <USBD_CtlError>
        err++;
 8008d98:	7afb      	ldrb	r3, [r7, #11]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	72fb      	strb	r3, [r7, #11]
      break;
 8008d9e:	e021      	b.n	8008de4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00b      	beq.n	8008dc4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	7c12      	ldrb	r2, [r2, #16]
 8008db8:	f107 0108 	add.w	r1, r7, #8
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4798      	blx	r3
 8008dc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dc2:	e00f      	b.n	8008de4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fa28 	bl	800921c <USBD_CtlError>
        err++;
 8008dcc:	7afb      	ldrb	r3, [r7, #11]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	72fb      	strb	r3, [r7, #11]
      break;
 8008dd2:	e007      	b.n	8008de4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa20 	bl	800921c <USBD_CtlError>
      err++;
 8008ddc:	7afb      	ldrb	r3, [r7, #11]
 8008dde:	3301      	adds	r3, #1
 8008de0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008de2:	bf00      	nop
    }
    break;
 8008de4:	e037      	b.n	8008e56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	7c1b      	ldrb	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d109      	bne.n	8008e02 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df6:	f107 0208 	add.w	r2, r7, #8
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	4798      	blx	r3
 8008dfe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e00:	e029      	b.n	8008e56 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fa09 	bl	800921c <USBD_CtlError>
      err++;
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	72fb      	strb	r3, [r7, #11]
    break;
 8008e10:	e021      	b.n	8008e56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7c1b      	ldrb	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10d      	bne.n	8008e36 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e22:	f107 0208 	add.w	r2, r7, #8
 8008e26:	4610      	mov	r0, r2
 8008e28:	4798      	blx	r3
 8008e2a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	2207      	movs	r2, #7
 8008e32:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e34:	e00f      	b.n	8008e56 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f9ef 	bl	800921c <USBD_CtlError>
      err++;
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	3301      	adds	r3, #1
 8008e42:	72fb      	strb	r3, [r7, #11]
    break;
 8008e44:	e007      	b.n	8008e56 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f9e7 	bl	800921c <USBD_CtlError>
    err++;
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
 8008e50:	3301      	adds	r3, #1
 8008e52:	72fb      	strb	r3, [r7, #11]
    break;
 8008e54:	bf00      	nop
  }

  if (err != 0U)
 8008e56:	7afb      	ldrb	r3, [r7, #11]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d11e      	bne.n	8008e9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	88db      	ldrh	r3, [r3, #6]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d016      	beq.n	8008e92 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008e64:	893b      	ldrh	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00e      	beq.n	8008e88 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88da      	ldrh	r2, [r3, #6]
 8008e6e:	893b      	ldrh	r3, [r7, #8]
 8008e70:	4293      	cmp	r3, r2
 8008e72:	bf28      	it	cs
 8008e74:	4613      	movcs	r3, r2
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e7a:	893b      	ldrh	r3, [r7, #8]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	68f9      	ldr	r1, [r7, #12]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fa3c 	bl	80092fe <USBD_CtlSendData>
 8008e86:	e009      	b.n	8008e9c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f9c6 	bl	800921c <USBD_CtlError>
 8008e90:	e004      	b.n	8008e9c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa70 	bl	8009378 <USBD_CtlSendStatus>
 8008e98:	e000      	b.n	8008e9c <USBD_GetDescriptor+0x2cc>
    return;
 8008e9a:	bf00      	nop
    }
  }
}
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop

08008ea4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	889b      	ldrh	r3, [r3, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d130      	bne.n	8008f18 <USBD_SetAddress+0x74>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	88db      	ldrh	r3, [r3, #6]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d12c      	bne.n	8008f18 <USBD_SetAddress+0x74>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	885b      	ldrh	r3, [r3, #2]
 8008ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8008ec4:	d828      	bhi.n	8008f18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	885b      	ldrh	r3, [r3, #2]
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d104      	bne.n	8008ee6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f99c 	bl	800921c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee4:	e01c      	b.n	8008f20 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	7bfa      	ldrb	r2, [r7, #15]
 8008eea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 ff15 	bl	8009d22 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fa3d 	bl	8009378 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d004      	beq.n	8008f0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f0c:	e008      	b.n	8008f20 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f16:	e003      	b.n	8008f20 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f97e 	bl	800921c <USBD_CtlError>
  }
}
 8008f20:	bf00      	nop
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	885b      	ldrh	r3, [r3, #2]
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	4b4b      	ldr	r3, [pc, #300]	; (800906c <USBD_SetConfig+0x144>)
 8008f3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f40:	4b4a      	ldr	r3, [pc, #296]	; (800906c <USBD_SetConfig+0x144>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d905      	bls.n	8008f54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f966 	bl	800921c <USBD_CtlError>
    return USBD_FAIL;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e087      	b.n	8009064 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d002      	beq.n	8008f64 <USBD_SetConfig+0x3c>
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d025      	beq.n	8008fae <USBD_SetConfig+0x86>
 8008f62:	e071      	b.n	8009048 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008f64:	4b41      	ldr	r3, [pc, #260]	; (800906c <USBD_SetConfig+0x144>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01c      	beq.n	8008fa6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008f6c:	4b3f      	ldr	r3, [pc, #252]	; (800906c <USBD_SetConfig+0x144>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	461a      	mov	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f76:	4b3d      	ldr	r3, [pc, #244]	; (800906c <USBD_SetConfig+0x144>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7ff f9a8 	bl	80082d2 <USBD_SetClassConfig>
 8008f82:	4603      	mov	r3, r0
 8008f84:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d004      	beq.n	8008f96 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f944 	bl	800921c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f94:	e065      	b.n	8009062 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f9ee 	bl	8009378 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2203      	movs	r2, #3
 8008fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008fa4:	e05d      	b.n	8009062 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f9e6 	bl	8009378 <USBD_CtlSendStatus>
    break;
 8008fac:	e059      	b.n	8009062 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008fae:	4b2f      	ldr	r3, [pc, #188]	; (800906c <USBD_SetConfig+0x144>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d112      	bne.n	8008fdc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008fbe:	4b2b      	ldr	r3, [pc, #172]	; (800906c <USBD_SetConfig+0x144>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fc8:	4b28      	ldr	r3, [pc, #160]	; (800906c <USBD_SetConfig+0x144>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff f99b 	bl	800830a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f9cf 	bl	8009378 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008fda:	e042      	b.n	8009062 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008fdc:	4b23      	ldr	r3, [pc, #140]	; (800906c <USBD_SetConfig+0x144>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d02a      	beq.n	8009040 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7ff f989 	bl	800830a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008ff8:	4b1c      	ldr	r3, [pc, #112]	; (800906c <USBD_SetConfig+0x144>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009002:	4b1a      	ldr	r3, [pc, #104]	; (800906c <USBD_SetConfig+0x144>)
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff f962 	bl	80082d2 <USBD_SetClassConfig>
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00f      	beq.n	8009038 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f8fe 	bl	800921c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff f96e 	bl	800830a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2202      	movs	r2, #2
 8009032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009036:	e014      	b.n	8009062 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f99d 	bl	8009378 <USBD_CtlSendStatus>
    break;
 800903e:	e010      	b.n	8009062 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f999 	bl	8009378 <USBD_CtlSendStatus>
    break;
 8009046:	e00c      	b.n	8009062 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f8e6 	bl	800921c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009050:	4b06      	ldr	r3, [pc, #24]	; (800906c <USBD_SetConfig+0x144>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff f957 	bl	800830a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800905c:	2303      	movs	r3, #3
 800905e:	73fb      	strb	r3, [r7, #15]
    break;
 8009060:	bf00      	nop
  }

  return ret;
 8009062:	7bfb      	ldrb	r3, [r7, #15]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	200001e8 	.word	0x200001e8

08009070 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	88db      	ldrh	r3, [r3, #6]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d004      	beq.n	800908c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f8c9 	bl	800921c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800908a:	e021      	b.n	80090d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009092:	2b01      	cmp	r3, #1
 8009094:	db17      	blt.n	80090c6 <USBD_GetConfig+0x56>
 8009096:	2b02      	cmp	r3, #2
 8009098:	dd02      	ble.n	80090a0 <USBD_GetConfig+0x30>
 800909a:	2b03      	cmp	r3, #3
 800909c:	d00b      	beq.n	80090b6 <USBD_GetConfig+0x46>
 800909e:	e012      	b.n	80090c6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3308      	adds	r3, #8
 80090aa:	2201      	movs	r2, #1
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f925 	bl	80092fe <USBD_CtlSendData>
      break;
 80090b4:	e00c      	b.n	80090d0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3304      	adds	r3, #4
 80090ba:	2201      	movs	r2, #1
 80090bc:	4619      	mov	r1, r3
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f91d 	bl	80092fe <USBD_CtlSendData>
      break;
 80090c4:	e004      	b.n	80090d0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f8a7 	bl	800921c <USBD_CtlError>
      break;
 80090ce:	bf00      	nop
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e8:	3b01      	subs	r3, #1
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d81e      	bhi.n	800912c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	88db      	ldrh	r3, [r3, #6]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d004      	beq.n	8009100 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f88f 	bl	800921c <USBD_CtlError>
      break;
 80090fe:	e01a      	b.n	8009136 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	f043 0202 	orr.w	r2, r3, #2
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	330c      	adds	r3, #12
 8009120:	2202      	movs	r2, #2
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f8ea 	bl	80092fe <USBD_CtlSendData>
    break;
 800912a:	e004      	b.n	8009136 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f874 	bl	800921c <USBD_CtlError>
    break;
 8009134:	bf00      	nop
  }
}
 8009136:	bf00      	nop
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	885b      	ldrh	r3, [r3, #2]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d106      	bne.n	800915e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f90d 	bl	8009378 <USBD_CtlSendStatus>
  }
}
 800915e:	bf00      	nop
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b082      	sub	sp, #8
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009176:	3b01      	subs	r3, #1
 8009178:	2b02      	cmp	r3, #2
 800917a:	d80b      	bhi.n	8009194 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	885b      	ldrh	r3, [r3, #2]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d10c      	bne.n	800919e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f8f3 	bl	8009378 <USBD_CtlSendStatus>
      }
      break;
 8009192:	e004      	b.n	800919e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f840 	bl	800921c <USBD_CtlError>
      break;
 800919c:	e000      	b.n	80091a0 <USBD_ClrFeature+0x3a>
      break;
 800919e:	bf00      	nop
  }
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	781a      	ldrb	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3301      	adds	r3, #1
 80091c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	781a      	ldrb	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3301      	adds	r3, #1
 80091d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7ff fad4 	bl	8008780 <SWAPBYTE>
 80091d8:	4603      	mov	r3, r0
 80091da:	461a      	mov	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	3301      	adds	r3, #1
 80091e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3301      	adds	r3, #1
 80091ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f7ff fac7 	bl	8008780 <SWAPBYTE>
 80091f2:	4603      	mov	r3, r0
 80091f4:	461a      	mov	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3301      	adds	r3, #1
 80091fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3301      	adds	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7ff faba 	bl	8008780 <SWAPBYTE>
 800920c:	4603      	mov	r3, r0
 800920e:	461a      	mov	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	80da      	strh	r2, [r3, #6]
}
 8009214:	bf00      	nop
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009226:	2180      	movs	r1, #128	; 0x80
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fd10 	bl	8009c4e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800922e:	2100      	movs	r1, #0
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fd0c 	bl	8009c4e <USBD_LL_StallEP>
}
 8009236:	bf00      	nop
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b086      	sub	sp, #24
 8009242:	af00      	add	r7, sp, #0
 8009244:	60f8      	str	r0, [r7, #12]
 8009246:	60b9      	str	r1, [r7, #8]
 8009248:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d036      	beq.n	80092c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009258:	6938      	ldr	r0, [r7, #16]
 800925a:	f000 f836 	bl	80092ca <USBD_GetLen>
 800925e:	4603      	mov	r3, r0
 8009260:	3301      	adds	r3, #1
 8009262:	b29b      	uxth	r3, r3
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	b29a      	uxth	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	4413      	add	r3, r2
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	7812      	ldrb	r2, [r2, #0]
 8009276:	701a      	strb	r2, [r3, #0]
  idx++;
 8009278:	7dfb      	ldrb	r3, [r7, #23]
 800927a:	3301      	adds	r3, #1
 800927c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	4413      	add	r3, r2
 8009284:	2203      	movs	r2, #3
 8009286:	701a      	strb	r2, [r3, #0]
  idx++;
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	3301      	adds	r3, #1
 800928c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800928e:	e013      	b.n	80092b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009290:	7dfb      	ldrb	r3, [r7, #23]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	4413      	add	r3, r2
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	7812      	ldrb	r2, [r2, #0]
 800929a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	3301      	adds	r3, #1
 80092a0:	613b      	str	r3, [r7, #16]
    idx++;
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	3301      	adds	r3, #1
 80092a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80092a8:	7dfb      	ldrb	r3, [r7, #23]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	4413      	add	r3, r2
 80092ae:	2200      	movs	r2, #0
 80092b0:	701a      	strb	r2, [r3, #0]
    idx++;
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	3301      	adds	r3, #1
 80092b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1e7      	bne.n	8009290 <USBD_GetString+0x52>
 80092c0:	e000      	b.n	80092c4 <USBD_GetString+0x86>
    return;
 80092c2:	bf00      	nop
  }
}
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b085      	sub	sp, #20
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80092da:	e005      	b.n	80092e8 <USBD_GetLen+0x1e>
  {
    len++;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	3301      	adds	r3, #1
 80092e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1f5      	bne.n	80092dc <USBD_GetLen+0x12>
  }

  return len;
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2202      	movs	r2, #2
 800930e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	2100      	movs	r1, #0
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fd1b 	bl	8009d60 <USBD_LL_Transmit>

  return USBD_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	2100      	movs	r1, #0
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 fd0a 	bl	8009d60 <USBD_LL_Transmit>

  return USBD_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b084      	sub	sp, #16
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	2100      	movs	r1, #0
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 fd1a 	bl	8009da2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2204      	movs	r2, #4
 8009384:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009388:	2300      	movs	r3, #0
 800938a:	2200      	movs	r2, #0
 800938c:	2100      	movs	r1, #0
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fce6 	bl	8009d60 <USBD_LL_Transmit>

  return USBD_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b082      	sub	sp, #8
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2205      	movs	r2, #5
 80093aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093ae:	2300      	movs	r3, #0
 80093b0:	2200      	movs	r2, #0
 80093b2:	2100      	movs	r1, #0
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fcf4 	bl	8009da2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b087      	sub	sp, #28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	4613      	mov	r3, r2
 80093d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80093d2:	2301      	movs	r3, #1
 80093d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80093da:	4b1f      	ldr	r3, [pc, #124]	; (8009458 <FATFS_LinkDriverEx+0x94>)
 80093dc:	7a5b      	ldrb	r3, [r3, #9]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d131      	bne.n	8009448 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80093e4:	4b1c      	ldr	r3, [pc, #112]	; (8009458 <FATFS_LinkDriverEx+0x94>)
 80093e6:	7a5b      	ldrb	r3, [r3, #9]
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	461a      	mov	r2, r3
 80093ec:	4b1a      	ldr	r3, [pc, #104]	; (8009458 <FATFS_LinkDriverEx+0x94>)
 80093ee:	2100      	movs	r1, #0
 80093f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80093f2:	4b19      	ldr	r3, [pc, #100]	; (8009458 <FATFS_LinkDriverEx+0x94>)
 80093f4:	7a5b      	ldrb	r3, [r3, #9]
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	4a17      	ldr	r2, [pc, #92]	; (8009458 <FATFS_LinkDriverEx+0x94>)
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009402:	4b15      	ldr	r3, [pc, #84]	; (8009458 <FATFS_LinkDriverEx+0x94>)
 8009404:	7a5b      	ldrb	r3, [r3, #9]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	461a      	mov	r2, r3
 800940a:	4b13      	ldr	r3, [pc, #76]	; (8009458 <FATFS_LinkDriverEx+0x94>)
 800940c:	4413      	add	r3, r2
 800940e:	79fa      	ldrb	r2, [r7, #7]
 8009410:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009412:	4b11      	ldr	r3, [pc, #68]	; (8009458 <FATFS_LinkDriverEx+0x94>)
 8009414:	7a5b      	ldrb	r3, [r3, #9]
 8009416:	b2db      	uxtb	r3, r3
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	b2d1      	uxtb	r1, r2
 800941c:	4a0e      	ldr	r2, [pc, #56]	; (8009458 <FATFS_LinkDriverEx+0x94>)
 800941e:	7251      	strb	r1, [r2, #9]
 8009420:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009422:	7dbb      	ldrb	r3, [r7, #22]
 8009424:	3330      	adds	r3, #48	; 0x30
 8009426:	b2da      	uxtb	r2, r3
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	3301      	adds	r3, #1
 8009430:	223a      	movs	r2, #58	; 0x3a
 8009432:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	3302      	adds	r3, #2
 8009438:	222f      	movs	r2, #47	; 0x2f
 800943a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	3303      	adds	r3, #3
 8009440:	2200      	movs	r2, #0
 8009442:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009448:	7dfb      	ldrb	r3, [r7, #23]
}
 800944a:	4618      	mov	r0, r3
 800944c:	371c      	adds	r7, #28
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	200001ec 	.word	0x200001ec

0800945c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009466:	2200      	movs	r2, #0
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff ffaa 	bl	80093c4 <FATFS_LinkDriverEx>
 8009470:	4603      	mov	r3, r0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
	...

0800947c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009480:	2200      	movs	r2, #0
 8009482:	4912      	ldr	r1, [pc, #72]	; (80094cc <MX_USB_DEVICE_Init+0x50>)
 8009484:	4812      	ldr	r0, [pc, #72]	; (80094d0 <MX_USB_DEVICE_Init+0x54>)
 8009486:	f7fe feb6 	bl	80081f6 <USBD_Init>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009490:	f7f7 f96c 	bl	800076c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8009494:	490f      	ldr	r1, [pc, #60]	; (80094d4 <MX_USB_DEVICE_Init+0x58>)
 8009496:	480e      	ldr	r0, [pc, #56]	; (80094d0 <MX_USB_DEVICE_Init+0x54>)
 8009498:	f7fe fee3 	bl	8008262 <USBD_RegisterClass>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094a2:	f7f7 f963 	bl	800076c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80094a6:	490c      	ldr	r1, [pc, #48]	; (80094d8 <MX_USB_DEVICE_Init+0x5c>)
 80094a8:	4809      	ldr	r0, [pc, #36]	; (80094d0 <MX_USB_DEVICE_Init+0x54>)
 80094aa:	f7fd fbdf 	bl	8006c6c <USBD_MSC_RegisterStorage>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80094b4:	f7f7 f95a 	bl	800076c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094b8:	4805      	ldr	r0, [pc, #20]	; (80094d0 <MX_USB_DEVICE_Init+0x54>)
 80094ba:	f7fe fef3 	bl	80082a4 <USBD_Start>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80094c4:	f7f7 f952 	bl	800076c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094c8:	bf00      	nop
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	200000f4 	.word	0x200000f4
 80094d0:	20000714 	.word	0x20000714
 80094d4:	2000000c 	.word	0x2000000c
 80094d8:	20000144 	.word	0x20000144

080094dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	4603      	mov	r3, r0
 80094e4:	6039      	str	r1, [r7, #0]
 80094e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	2212      	movs	r2, #18
 80094ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094ee:	4b03      	ldr	r3, [pc, #12]	; (80094fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	20000110 	.word	0x20000110

08009500 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	6039      	str	r1, [r7, #0]
 800950a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2204      	movs	r2, #4
 8009510:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009512:	4b03      	ldr	r3, [pc, #12]	; (8009520 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009514:	4618      	mov	r0, r3
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	20000124 	.word	0x20000124

08009524 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	6039      	str	r1, [r7, #0]
 800952e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d105      	bne.n	8009542 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	4907      	ldr	r1, [pc, #28]	; (8009558 <USBD_FS_ProductStrDescriptor+0x34>)
 800953a:	4808      	ldr	r0, [pc, #32]	; (800955c <USBD_FS_ProductStrDescriptor+0x38>)
 800953c:	f7ff fe7f 	bl	800923e <USBD_GetString>
 8009540:	e004      	b.n	800954c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	4904      	ldr	r1, [pc, #16]	; (8009558 <USBD_FS_ProductStrDescriptor+0x34>)
 8009546:	4805      	ldr	r0, [pc, #20]	; (800955c <USBD_FS_ProductStrDescriptor+0x38>)
 8009548:	f7ff fe79 	bl	800923e <USBD_GetString>
  }
  return USBD_StrDesc;
 800954c:	4b02      	ldr	r3, [pc, #8]	; (8009558 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	200009e4 	.word	0x200009e4
 800955c:	0800a074 	.word	0x0800a074

08009560 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	6039      	str	r1, [r7, #0]
 800956a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	4904      	ldr	r1, [pc, #16]	; (8009580 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009570:	4804      	ldr	r0, [pc, #16]	; (8009584 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009572:	f7ff fe64 	bl	800923e <USBD_GetString>
  return USBD_StrDesc;
 8009576:	4b02      	ldr	r3, [pc, #8]	; (8009580 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009578:	4618      	mov	r0, r3
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	200009e4 	.word	0x200009e4
 8009584:	0800a088 	.word	0x0800a088

08009588 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	6039      	str	r1, [r7, #0]
 8009592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	221a      	movs	r2, #26
 8009598:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800959a:	f000 f843 	bl	8009624 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800959e:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20000128 	.word	0x20000128

080095ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	6039      	str	r1, [r7, #0]
 80095b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d105      	bne.n	80095ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4907      	ldr	r1, [pc, #28]	; (80095e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095c2:	4808      	ldr	r0, [pc, #32]	; (80095e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095c4:	f7ff fe3b 	bl	800923e <USBD_GetString>
 80095c8:	e004      	b.n	80095d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	4904      	ldr	r1, [pc, #16]	; (80095e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095ce:	4805      	ldr	r0, [pc, #20]	; (80095e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095d0:	f7ff fe35 	bl	800923e <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d4:	4b02      	ldr	r3, [pc, #8]	; (80095e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	200009e4 	.word	0x200009e4
 80095e4:	0800a09c 	.word	0x0800a09c

080095e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	6039      	str	r1, [r7, #0]
 80095f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d105      	bne.n	8009606 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4907      	ldr	r1, [pc, #28]	; (800961c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095fe:	4808      	ldr	r0, [pc, #32]	; (8009620 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009600:	f7ff fe1d 	bl	800923e <USBD_GetString>
 8009604:	e004      	b.n	8009610 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	4904      	ldr	r1, [pc, #16]	; (800961c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800960a:	4805      	ldr	r0, [pc, #20]	; (8009620 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800960c:	f7ff fe17 	bl	800923e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009610:	4b02      	ldr	r3, [pc, #8]	; (800961c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200009e4 	.word	0x200009e4
 8009620:	0800a0a8 	.word	0x0800a0a8

08009624 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800962a:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <Get_SerialNum+0x44>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009630:	4b0e      	ldr	r3, [pc, #56]	; (800966c <Get_SerialNum+0x48>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009636:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <Get_SerialNum+0x4c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d009      	beq.n	800965e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800964a:	2208      	movs	r2, #8
 800964c:	4909      	ldr	r1, [pc, #36]	; (8009674 <Get_SerialNum+0x50>)
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 f814 	bl	800967c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009654:	2204      	movs	r2, #4
 8009656:	4908      	ldr	r1, [pc, #32]	; (8009678 <Get_SerialNum+0x54>)
 8009658:	68b8      	ldr	r0, [r7, #8]
 800965a:	f000 f80f 	bl	800967c <IntToUnicode>
  }
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	1fff7a10 	.word	0x1fff7a10
 800966c:	1fff7a14 	.word	0x1fff7a14
 8009670:	1fff7a18 	.word	0x1fff7a18
 8009674:	2000012a 	.word	0x2000012a
 8009678:	2000013a 	.word	0x2000013a

0800967c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4613      	mov	r3, r2
 8009688:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800968e:	2300      	movs	r3, #0
 8009690:	75fb      	strb	r3, [r7, #23]
 8009692:	e027      	b.n	80096e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	0f1b      	lsrs	r3, r3, #28
 8009698:	2b09      	cmp	r3, #9
 800969a:	d80b      	bhi.n	80096b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	0f1b      	lsrs	r3, r3, #28
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	005b      	lsls	r3, r3, #1
 80096a6:	4619      	mov	r1, r3
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	440b      	add	r3, r1
 80096ac:	3230      	adds	r2, #48	; 0x30
 80096ae:	b2d2      	uxtb	r2, r2
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	e00a      	b.n	80096ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	0f1b      	lsrs	r3, r3, #28
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	4619      	mov	r1, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	440b      	add	r3, r1
 80096c4:	3237      	adds	r2, #55	; 0x37
 80096c6:	b2d2      	uxtb	r2, r2
 80096c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	011b      	lsls	r3, r3, #4
 80096ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	3301      	adds	r3, #1
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	4413      	add	r3, r2
 80096da:	2200      	movs	r2, #0
 80096dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	3301      	adds	r3, #1
 80096e2:	75fb      	strb	r3, [r7, #23]
 80096e4:	7dfa      	ldrb	r2, [r7, #23]
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d3d3      	bcc.n	8009694 <IntToUnicode+0x18>
  }
}
 80096ec:	bf00      	nop
 80096ee:	371c      	adds	r7, #28
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8009702:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8009704:	4618      	mov	r0, r3
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  HAL_SD_GetCardInfo(&hsd, &SdCard);
 800971e:	490b      	ldr	r1, [pc, #44]	; (800974c <STORAGE_GetCapacity_FS+0x3c>)
 8009720:	480b      	ldr	r0, [pc, #44]	; (8009750 <STORAGE_GetCapacity_FS+0x40>)
 8009722:	f7fa fb3f 	bl	8003da4 <HAL_SD_GetCardInfo>
//SDCardInfo.CardCapacity / BLOCK_SIZE
	  *block_num  = SdCard.LogBlockNbr;
 8009726:	4b09      	ldr	r3, [pc, #36]	; (800974c <STORAGE_GetCapacity_FS+0x3c>)
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	601a      	str	r2, [r3, #0]
	  uint32_t a = SdCard.LogBlockNbr;
 800972e:	4b07      	ldr	r3, [pc, #28]	; (800974c <STORAGE_GetCapacity_FS+0x3c>)
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	617b      	str	r3, [r7, #20]
	  *block_size = (uint16_t)BLOCK_SIZE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800973a:	801a      	strh	r2, [r3, #0]
	  uint16_t b = BLOCK_SIZE;
 800973c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009740:	827b      	strh	r3, [r7, #18]
  return (USBD_OK);
 8009742:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009744:	4618      	mov	r0, r3
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20000288 	.word	0x20000288
 8009750:	20000204 	.word	0x20000204

08009754 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800975e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009776:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af02      	add	r7, sp, #8
 800978a:	60b9      	str	r1, [r7, #8]
 800978c:	607a      	str	r2, [r7, #4]
 800978e:	461a      	mov	r2, r3
 8009790:	4603      	mov	r3, r0
 8009792:	73fb      	strb	r3, [r7, #15]
 8009794:	4613      	mov	r3, r2
 8009796:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	//memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
	//HAL_SD_ReadBlocks(&hsd, (uint32_t*)buf, (uint64_t)(blk_addr * BLOCK_SIZE), BLOCK_SIZE, blk_len);
	HAL_SD_ReadBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
 8009798:	89ba      	ldrh	r2, [r7, #12]
 800979a:	230a      	movs	r3, #10
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	4613      	mov	r3, r2
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	68b9      	ldr	r1, [r7, #8]
 80097a4:	4803      	ldr	r0, [pc, #12]	; (80097b4 <STORAGE_Read_FS+0x30>)
 80097a6:	f7f9 fdc1 	bl	800332c <HAL_SD_ReadBlocks>
  return (USBD_OK);
 80097aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	20000204 	.word	0x20000204

080097b8 <STORAGE_Write_FS>:
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int timeout;
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af02      	add	r7, sp, #8
 80097be:	60b9      	str	r1, [r7, #8]
 80097c0:	607a      	str	r2, [r7, #4]
 80097c2:	461a      	mov	r2, r3
 80097c4:	4603      	mov	r3, r0
 80097c6:	73fb      	strb	r3, [r7, #15]
 80097c8:	4613      	mov	r3, r2
 80097ca:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	//memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
	//HAL_SD_WriteBlocks(&hsd, (uint32_t*)buf, (uint64_t)(blk_addr * BLOCK_SIZE), BLOCK_SIZE, blk_len);
	//HAL_SD_WriteBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
	if (HAL_SD_WriteBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10) == HAL_OK)
 80097cc:	89ba      	ldrh	r2, [r7, #12]
 80097ce:	230a      	movs	r3, #10
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	4613      	mov	r3, r2
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	68b9      	ldr	r1, [r7, #8]
 80097d8:	4811      	ldr	r0, [pc, #68]	; (8009820 <STORAGE_Write_FS+0x68>)
 80097da:	f7f9 ff9f 	bl	800371c <HAL_SD_WriteBlocks>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d117      	bne.n	8009814 <STORAGE_Write_FS+0x5c>
	{
	/* Wait that writing process is completed or a timeout occurs */

	timeout = HAL_GetTick();
 80097e4:	f7f7 f986 	bl	8000af4 <HAL_GetTick>
 80097e8:	4603      	mov	r3, r0
 80097ea:	461a      	mov	r2, r3
 80097ec:	4b0d      	ldr	r3, [pc, #52]	; (8009824 <STORAGE_Write_FS+0x6c>)
 80097ee:	601a      	str	r2, [r3, #0]

	while (HAL_GetTick() - timeout < 30000)
 80097f0:	e004      	b.n	80097fc <STORAGE_Write_FS+0x44>
	{
	if (BSP_SD_GetCardState() == 0)
 80097f2:	f7fc ff69 	bl	80066c8 <BSP_SD_GetCardState>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00a      	beq.n	8009812 <STORAGE_Write_FS+0x5a>
	while (HAL_GetTick() - timeout < 30000)
 80097fc:	f7f7 f97a 	bl	8000af4 <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	4b08      	ldr	r3, [pc, #32]	; (8009824 <STORAGE_Write_FS+0x6c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	f247 522f 	movw	r2, #29999	; 0x752f
 800980c:	4293      	cmp	r3, r2
 800980e:	d9f0      	bls.n	80097f2 <STORAGE_Write_FS+0x3a>
 8009810:	e000      	b.n	8009814 <STORAGE_Write_FS+0x5c>
	{

	break;
 8009812:	bf00      	nop
	}
	}
	}
  return (USBD_OK);
 8009814:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000204 	.word	0x20000204
 8009824:	20000be4 	.word	0x20000be4

08009828 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8009828:	b480      	push	{r7}
 800982a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800982c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800982e:	4618      	mov	r0, r3
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08a      	sub	sp, #40	; 0x28
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009840:	f107 0314 	add.w	r3, r7, #20
 8009844:	2200      	movs	r2, #0
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	605a      	str	r2, [r3, #4]
 800984a:	609a      	str	r2, [r3, #8]
 800984c:	60da      	str	r2, [r3, #12]
 800984e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009858:	d13a      	bne.n	80098d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800985a:	2300      	movs	r3, #0
 800985c:	613b      	str	r3, [r7, #16]
 800985e:	4b1e      	ldr	r3, [pc, #120]	; (80098d8 <HAL_PCD_MspInit+0xa0>)
 8009860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009862:	4a1d      	ldr	r2, [pc, #116]	; (80098d8 <HAL_PCD_MspInit+0xa0>)
 8009864:	f043 0301 	orr.w	r3, r3, #1
 8009868:	6313      	str	r3, [r2, #48]	; 0x30
 800986a:	4b1b      	ldr	r3, [pc, #108]	; (80098d8 <HAL_PCD_MspInit+0xa0>)
 800986c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	613b      	str	r3, [r7, #16]
 8009874:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009876:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800987a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800987c:	2302      	movs	r3, #2
 800987e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009880:	2300      	movs	r3, #0
 8009882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009884:	2303      	movs	r3, #3
 8009886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009888:	230a      	movs	r3, #10
 800988a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800988c:	f107 0314 	add.w	r3, r7, #20
 8009890:	4619      	mov	r1, r3
 8009892:	4812      	ldr	r0, [pc, #72]	; (80098dc <HAL_PCD_MspInit+0xa4>)
 8009894:	f7f7 fa6e 	bl	8000d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009898:	4b0f      	ldr	r3, [pc, #60]	; (80098d8 <HAL_PCD_MspInit+0xa0>)
 800989a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800989c:	4a0e      	ldr	r2, [pc, #56]	; (80098d8 <HAL_PCD_MspInit+0xa0>)
 800989e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a2:	6353      	str	r3, [r2, #52]	; 0x34
 80098a4:	2300      	movs	r3, #0
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	4b0b      	ldr	r3, [pc, #44]	; (80098d8 <HAL_PCD_MspInit+0xa0>)
 80098aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ac:	4a0a      	ldr	r2, [pc, #40]	; (80098d8 <HAL_PCD_MspInit+0xa0>)
 80098ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098b2:	6453      	str	r3, [r2, #68]	; 0x44
 80098b4:	4b08      	ldr	r3, [pc, #32]	; (80098d8 <HAL_PCD_MspInit+0xa0>)
 80098b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098bc:	60fb      	str	r3, [r7, #12]
 80098be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80098c0:	2200      	movs	r2, #0
 80098c2:	2100      	movs	r1, #0
 80098c4:	2043      	movs	r0, #67	; 0x43
 80098c6:	f7f7 fa1e 	bl	8000d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098ca:	2043      	movs	r0, #67	; 0x43
 80098cc:	f7f7 fa37 	bl	8000d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098d0:	bf00      	nop
 80098d2:	3728      	adds	r7, #40	; 0x28
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	40023800 	.word	0x40023800
 80098dc:	40020000 	.word	0x40020000

080098e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f7fe fd1f 	bl	800833a <USBD_LL_SetupStage>
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009916:	78fa      	ldrb	r2, [r7, #3]
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	4613      	mov	r3, r2
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	1a9b      	subs	r3, r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	440b      	add	r3, r1
 8009924:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	78fb      	ldrb	r3, [r7, #3]
 800992c:	4619      	mov	r1, r3
 800992e:	f7fe fd57 	bl	80083e0 <USBD_LL_DataOutStage>
}
 8009932:	bf00      	nop
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b082      	sub	sp, #8
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	460b      	mov	r3, r1
 8009944:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800994c:	78fa      	ldrb	r2, [r7, #3]
 800994e:	6879      	ldr	r1, [r7, #4]
 8009950:	4613      	mov	r3, r2
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	440b      	add	r3, r1
 800995a:	3348      	adds	r3, #72	; 0x48
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	78fb      	ldrb	r3, [r7, #3]
 8009960:	4619      	mov	r1, r3
 8009962:	f7fe fda0 	bl	80084a6 <USBD_LL_DataInStage>
}
 8009966:	bf00      	nop
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b082      	sub	sp, #8
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800997c:	4618      	mov	r0, r3
 800997e:	f7fe fea4 	bl	80086ca <USBD_LL_SOF>
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009992:	2301      	movs	r3, #1
 8009994:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	2b02      	cmp	r3, #2
 800999c:	d001      	beq.n	80099a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800999e:	f7f6 fee5 	bl	800076c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099a8:	7bfa      	ldrb	r2, [r7, #15]
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fe fe51 	bl	8008654 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe fe0a 	bl	80085d2 <USBD_LL_Reset>
}
 80099be:	bf00      	nop
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
	...

080099c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fe4c 	bl	8008674 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	6812      	ldr	r2, [r2, #0]
 80099ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099ee:	f043 0301 	orr.w	r3, r3, #1
 80099f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d005      	beq.n	8009a08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099fc:	4b04      	ldr	r3, [pc, #16]	; (8009a10 <HAL_PCD_SuspendCallback+0x48>)
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	4a03      	ldr	r2, [pc, #12]	; (8009a10 <HAL_PCD_SuspendCallback+0x48>)
 8009a02:	f043 0306 	orr.w	r3, r3, #6
 8009a06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	e000ed00 	.word	0xe000ed00

08009a14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe fe3b 	bl	800869e <USBD_LL_Resume>
}
 8009a28:	bf00      	nop
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a42:	78fa      	ldrb	r2, [r7, #3]
 8009a44:	4611      	mov	r1, r2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe fe66 	bl	8008718 <USBD_LL_IsoOUTIncomplete>
}
 8009a4c:	bf00      	nop
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a66:	78fa      	ldrb	r2, [r7, #3]
 8009a68:	4611      	mov	r1, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fe47 	bl	80086fe <USBD_LL_IsoINIncomplete>
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe fe53 	bl	8008732 <USBD_LL_DevConnected>
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fe fe50 	bl	8008748 <USBD_LL_DevDisconnected>
}
 8009aa8:	bf00      	nop
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d13f      	bne.n	8009b40 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ac0:	4a22      	ldr	r2, [pc, #136]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a20      	ldr	r2, [pc, #128]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009acc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ad0:	4b1e      	ldr	r3, [pc, #120]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009ad2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009ad6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009ad8:	4b1c      	ldr	r3, [pc, #112]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009ada:	2206      	movs	r2, #6
 8009adc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ade:	4b1b      	ldr	r3, [pc, #108]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ae4:	4b19      	ldr	r3, [pc, #100]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009aea:	4b18      	ldr	r3, [pc, #96]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009aec:	2202      	movs	r2, #2
 8009aee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009af0:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009af6:	4b15      	ldr	r3, [pc, #84]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009afc:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009b08:	4b10      	ldr	r3, [pc, #64]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b14:	480d      	ldr	r0, [pc, #52]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009b16:	f7f7 fad8 	bl	80010ca <HAL_PCD_Init>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8009b20:	f7f6 fe24 	bl	800076c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b24:	2180      	movs	r1, #128	; 0x80
 8009b26:	4809      	ldr	r0, [pc, #36]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009b28:	f7f8 fc97 	bl	800245a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b2c:	2240      	movs	r2, #64	; 0x40
 8009b2e:	2100      	movs	r1, #0
 8009b30:	4806      	ldr	r0, [pc, #24]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009b32:	f7f8 fc4b 	bl	80023cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009b36:	2280      	movs	r2, #128	; 0x80
 8009b38:	2101      	movs	r1, #1
 8009b3a:	4804      	ldr	r0, [pc, #16]	; (8009b4c <USBD_LL_Init+0x9c>)
 8009b3c:	f7f8 fc46 	bl	80023cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20000be8 	.word	0x20000be8

08009b50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7f7 fbd3 	bl	8001312 <HAL_PCD_Start>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 f94a 	bl	8009e0c <USBD_Get_USB_Status>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4611      	mov	r1, r2
 8009b92:	461a      	mov	r2, r3
 8009b94:	4603      	mov	r3, r0
 8009b96:	70fb      	strb	r3, [r7, #3]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	70bb      	strb	r3, [r7, #2]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009bae:	78bb      	ldrb	r3, [r7, #2]
 8009bb0:	883a      	ldrh	r2, [r7, #0]
 8009bb2:	78f9      	ldrb	r1, [r7, #3]
 8009bb4:	f7f7 ffe4 	bl	8001b80 <HAL_PCD_EP_Open>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 f924 	bl	8009e0c <USBD_Get_USB_Status>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bec:	78fa      	ldrb	r2, [r7, #3]
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7f8 f82d 	bl	8001c50 <HAL_PCD_EP_Close>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009bfa:	7bfb      	ldrb	r3, [r7, #15]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 f905 	bl	8009e0c <USBD_Get_USB_Status>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c20:	2300      	movs	r3, #0
 8009c22:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c2a:	78fa      	ldrb	r2, [r7, #3]
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7f8 f9bf 	bl	8001fb2 <HAL_PCD_EP_Flush>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 f8e6 	bl	8009e0c <USBD_Get_USB_Status>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	460b      	mov	r3, r1
 8009c58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c68:	78fa      	ldrb	r2, [r7, #3]
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7f8 f8e6 	bl	8001e3e <HAL_PCD_EP_SetStall>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 f8c7 	bl	8009e0c <USBD_Get_USB_Status>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ca6:	78fa      	ldrb	r2, [r7, #3]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7f8 f92b 	bl	8001f06 <HAL_PCD_EP_ClrStall>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 f8a8 	bl	8009e0c <USBD_Get_USB_Status>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b085      	sub	sp, #20
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cdc:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	da0b      	bge.n	8009cfe <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009ce6:	78fb      	ldrb	r3, [r7, #3]
 8009ce8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cec:	68f9      	ldr	r1, [r7, #12]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	00db      	lsls	r3, r3, #3
 8009cf2:	1a9b      	subs	r3, r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	440b      	add	r3, r1
 8009cf8:	333e      	adds	r3, #62	; 0x3e
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	e00b      	b.n	8009d16 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009cfe:	78fb      	ldrb	r3, [r7, #3]
 8009d00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d04:	68f9      	ldr	r1, [r7, #12]
 8009d06:	4613      	mov	r3, r2
 8009d08:	00db      	lsls	r3, r3, #3
 8009d0a:	1a9b      	subs	r3, r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	440b      	add	r3, r1
 8009d10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d14:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d3c:	78fa      	ldrb	r2, [r7, #3]
 8009d3e:	4611      	mov	r1, r2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7f7 fef8 	bl	8001b36 <HAL_PCD_SetAddress>
 8009d46:	4603      	mov	r3, r0
 8009d48:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 f85d 	bl	8009e0c <USBD_Get_USB_Status>
 8009d52:	4603      	mov	r3, r0
 8009d54:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	607a      	str	r2, [r7, #4]
 8009d6a:	603b      	str	r3, [r7, #0]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d7e:	7af9      	ldrb	r1, [r7, #11]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	f7f8 f811 	bl	8001daa <HAL_PCD_EP_Transmit>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 f83c 	bl	8009e0c <USBD_Get_USB_Status>
 8009d94:	4603      	mov	r3, r0
 8009d96:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009d98:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b086      	sub	sp, #24
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	603b      	str	r3, [r7, #0]
 8009dae:	460b      	mov	r3, r1
 8009db0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009dc0:	7af9      	ldrb	r1, [r7, #11]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	f7f7 ff8d 	bl	8001ce4 <HAL_PCD_EP_Receive>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009dce:	7dfb      	ldrb	r3, [r7, #23]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 f81b 	bl	8009e0c <USBD_Get_USB_Status>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009dda:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3718      	adds	r7, #24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009df6:	78fa      	ldrb	r2, [r7, #3]
 8009df8:	4611      	mov	r1, r2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7f7 ffbd 	bl	8001d7a <HAL_PCD_EP_GetRxCount>
 8009e00:	4603      	mov	r3, r0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	4603      	mov	r3, r0
 8009e14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e1a:	79fb      	ldrb	r3, [r7, #7]
 8009e1c:	2b03      	cmp	r3, #3
 8009e1e:	d817      	bhi.n	8009e50 <USBD_Get_USB_Status+0x44>
 8009e20:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <USBD_Get_USB_Status+0x1c>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009e39 	.word	0x08009e39
 8009e2c:	08009e3f 	.word	0x08009e3f
 8009e30:	08009e45 	.word	0x08009e45
 8009e34:	08009e4b 	.word	0x08009e4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e3c:	e00b      	b.n	8009e56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	73fb      	strb	r3, [r7, #15]
    break;
 8009e42:	e008      	b.n	8009e56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e44:	2301      	movs	r3, #1
 8009e46:	73fb      	strb	r3, [r7, #15]
    break;
 8009e48:	e005      	b.n	8009e56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4e:	e002      	b.n	8009e56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e50:	2303      	movs	r3, #3
 8009e52:	73fb      	strb	r3, [r7, #15]
    break;
 8009e54:	bf00      	nop
  }
  return usb_status;
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <__errno>:
 8009e64:	4b01      	ldr	r3, [pc, #4]	; (8009e6c <__errno+0x8>)
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20000164 	.word	0x20000164

08009e70 <__libc_init_array>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	4e0d      	ldr	r6, [pc, #52]	; (8009ea8 <__libc_init_array+0x38>)
 8009e74:	4c0d      	ldr	r4, [pc, #52]	; (8009eac <__libc_init_array+0x3c>)
 8009e76:	1ba4      	subs	r4, r4, r6
 8009e78:	10a4      	asrs	r4, r4, #2
 8009e7a:	2500      	movs	r5, #0
 8009e7c:	42a5      	cmp	r5, r4
 8009e7e:	d109      	bne.n	8009e94 <__libc_init_array+0x24>
 8009e80:	4e0b      	ldr	r6, [pc, #44]	; (8009eb0 <__libc_init_array+0x40>)
 8009e82:	4c0c      	ldr	r4, [pc, #48]	; (8009eb4 <__libc_init_array+0x44>)
 8009e84:	f000 f8ea 	bl	800a05c <_init>
 8009e88:	1ba4      	subs	r4, r4, r6
 8009e8a:	10a4      	asrs	r4, r4, #2
 8009e8c:	2500      	movs	r5, #0
 8009e8e:	42a5      	cmp	r5, r4
 8009e90:	d105      	bne.n	8009e9e <__libc_init_array+0x2e>
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e98:	4798      	blx	r3
 8009e9a:	3501      	adds	r5, #1
 8009e9c:	e7ee      	b.n	8009e7c <__libc_init_array+0xc>
 8009e9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ea2:	4798      	blx	r3
 8009ea4:	3501      	adds	r5, #1
 8009ea6:	e7f2      	b.n	8009e8e <__libc_init_array+0x1e>
 8009ea8:	0800a108 	.word	0x0800a108
 8009eac:	0800a108 	.word	0x0800a108
 8009eb0:	0800a108 	.word	0x0800a108
 8009eb4:	0800a10c 	.word	0x0800a10c

08009eb8 <malloc>:
 8009eb8:	4b02      	ldr	r3, [pc, #8]	; (8009ec4 <malloc+0xc>)
 8009eba:	4601      	mov	r1, r0
 8009ebc:	6818      	ldr	r0, [r3, #0]
 8009ebe:	f000 b861 	b.w	8009f84 <_malloc_r>
 8009ec2:	bf00      	nop
 8009ec4:	20000164 	.word	0x20000164

08009ec8 <free>:
 8009ec8:	4b02      	ldr	r3, [pc, #8]	; (8009ed4 <free+0xc>)
 8009eca:	4601      	mov	r1, r0
 8009ecc:	6818      	ldr	r0, [r3, #0]
 8009ece:	f000 b80b 	b.w	8009ee8 <_free_r>
 8009ed2:	bf00      	nop
 8009ed4:	20000164 	.word	0x20000164

08009ed8 <memset>:
 8009ed8:	4402      	add	r2, r0
 8009eda:	4603      	mov	r3, r0
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d100      	bne.n	8009ee2 <memset+0xa>
 8009ee0:	4770      	bx	lr
 8009ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ee6:	e7f9      	b.n	8009edc <memset+0x4>

08009ee8 <_free_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4605      	mov	r5, r0
 8009eec:	2900      	cmp	r1, #0
 8009eee:	d045      	beq.n	8009f7c <_free_r+0x94>
 8009ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef4:	1f0c      	subs	r4, r1, #4
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	bfb8      	it	lt
 8009efa:	18e4      	addlt	r4, r4, r3
 8009efc:	f000 f8ac 	bl	800a058 <__malloc_lock>
 8009f00:	4a1f      	ldr	r2, [pc, #124]	; (8009f80 <_free_r+0x98>)
 8009f02:	6813      	ldr	r3, [r2, #0]
 8009f04:	4610      	mov	r0, r2
 8009f06:	b933      	cbnz	r3, 8009f16 <_free_r+0x2e>
 8009f08:	6063      	str	r3, [r4, #4]
 8009f0a:	6014      	str	r4, [r2, #0]
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f12:	f000 b8a2 	b.w	800a05a <__malloc_unlock>
 8009f16:	42a3      	cmp	r3, r4
 8009f18:	d90c      	bls.n	8009f34 <_free_r+0x4c>
 8009f1a:	6821      	ldr	r1, [r4, #0]
 8009f1c:	1862      	adds	r2, r4, r1
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	bf04      	itt	eq
 8009f22:	681a      	ldreq	r2, [r3, #0]
 8009f24:	685b      	ldreq	r3, [r3, #4]
 8009f26:	6063      	str	r3, [r4, #4]
 8009f28:	bf04      	itt	eq
 8009f2a:	1852      	addeq	r2, r2, r1
 8009f2c:	6022      	streq	r2, [r4, #0]
 8009f2e:	6004      	str	r4, [r0, #0]
 8009f30:	e7ec      	b.n	8009f0c <_free_r+0x24>
 8009f32:	4613      	mov	r3, r2
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	b10a      	cbz	r2, 8009f3c <_free_r+0x54>
 8009f38:	42a2      	cmp	r2, r4
 8009f3a:	d9fa      	bls.n	8009f32 <_free_r+0x4a>
 8009f3c:	6819      	ldr	r1, [r3, #0]
 8009f3e:	1858      	adds	r0, r3, r1
 8009f40:	42a0      	cmp	r0, r4
 8009f42:	d10b      	bne.n	8009f5c <_free_r+0x74>
 8009f44:	6820      	ldr	r0, [r4, #0]
 8009f46:	4401      	add	r1, r0
 8009f48:	1858      	adds	r0, r3, r1
 8009f4a:	4282      	cmp	r2, r0
 8009f4c:	6019      	str	r1, [r3, #0]
 8009f4e:	d1dd      	bne.n	8009f0c <_free_r+0x24>
 8009f50:	6810      	ldr	r0, [r2, #0]
 8009f52:	6852      	ldr	r2, [r2, #4]
 8009f54:	605a      	str	r2, [r3, #4]
 8009f56:	4401      	add	r1, r0
 8009f58:	6019      	str	r1, [r3, #0]
 8009f5a:	e7d7      	b.n	8009f0c <_free_r+0x24>
 8009f5c:	d902      	bls.n	8009f64 <_free_r+0x7c>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	602b      	str	r3, [r5, #0]
 8009f62:	e7d3      	b.n	8009f0c <_free_r+0x24>
 8009f64:	6820      	ldr	r0, [r4, #0]
 8009f66:	1821      	adds	r1, r4, r0
 8009f68:	428a      	cmp	r2, r1
 8009f6a:	bf04      	itt	eq
 8009f6c:	6811      	ldreq	r1, [r2, #0]
 8009f6e:	6852      	ldreq	r2, [r2, #4]
 8009f70:	6062      	str	r2, [r4, #4]
 8009f72:	bf04      	itt	eq
 8009f74:	1809      	addeq	r1, r1, r0
 8009f76:	6021      	streq	r1, [r4, #0]
 8009f78:	605c      	str	r4, [r3, #4]
 8009f7a:	e7c7      	b.n	8009f0c <_free_r+0x24>
 8009f7c:	bd38      	pop	{r3, r4, r5, pc}
 8009f7e:	bf00      	nop
 8009f80:	200001f8 	.word	0x200001f8

08009f84 <_malloc_r>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	1ccd      	adds	r5, r1, #3
 8009f88:	f025 0503 	bic.w	r5, r5, #3
 8009f8c:	3508      	adds	r5, #8
 8009f8e:	2d0c      	cmp	r5, #12
 8009f90:	bf38      	it	cc
 8009f92:	250c      	movcc	r5, #12
 8009f94:	2d00      	cmp	r5, #0
 8009f96:	4606      	mov	r6, r0
 8009f98:	db01      	blt.n	8009f9e <_malloc_r+0x1a>
 8009f9a:	42a9      	cmp	r1, r5
 8009f9c:	d903      	bls.n	8009fa6 <_malloc_r+0x22>
 8009f9e:	230c      	movs	r3, #12
 8009fa0:	6033      	str	r3, [r6, #0]
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	bd70      	pop	{r4, r5, r6, pc}
 8009fa6:	f000 f857 	bl	800a058 <__malloc_lock>
 8009faa:	4a21      	ldr	r2, [pc, #132]	; (800a030 <_malloc_r+0xac>)
 8009fac:	6814      	ldr	r4, [r2, #0]
 8009fae:	4621      	mov	r1, r4
 8009fb0:	b991      	cbnz	r1, 8009fd8 <_malloc_r+0x54>
 8009fb2:	4c20      	ldr	r4, [pc, #128]	; (800a034 <_malloc_r+0xb0>)
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	b91b      	cbnz	r3, 8009fc0 <_malloc_r+0x3c>
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f000 f83d 	bl	800a038 <_sbrk_r>
 8009fbe:	6020      	str	r0, [r4, #0]
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f000 f838 	bl	800a038 <_sbrk_r>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d124      	bne.n	800a016 <_malloc_r+0x92>
 8009fcc:	230c      	movs	r3, #12
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f000 f842 	bl	800a05a <__malloc_unlock>
 8009fd6:	e7e4      	b.n	8009fa2 <_malloc_r+0x1e>
 8009fd8:	680b      	ldr	r3, [r1, #0]
 8009fda:	1b5b      	subs	r3, r3, r5
 8009fdc:	d418      	bmi.n	800a010 <_malloc_r+0x8c>
 8009fde:	2b0b      	cmp	r3, #11
 8009fe0:	d90f      	bls.n	800a002 <_malloc_r+0x7e>
 8009fe2:	600b      	str	r3, [r1, #0]
 8009fe4:	50cd      	str	r5, [r1, r3]
 8009fe6:	18cc      	adds	r4, r1, r3
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f000 f836 	bl	800a05a <__malloc_unlock>
 8009fee:	f104 000b 	add.w	r0, r4, #11
 8009ff2:	1d23      	adds	r3, r4, #4
 8009ff4:	f020 0007 	bic.w	r0, r0, #7
 8009ff8:	1ac3      	subs	r3, r0, r3
 8009ffa:	d0d3      	beq.n	8009fa4 <_malloc_r+0x20>
 8009ffc:	425a      	negs	r2, r3
 8009ffe:	50e2      	str	r2, [r4, r3]
 800a000:	e7d0      	b.n	8009fa4 <_malloc_r+0x20>
 800a002:	428c      	cmp	r4, r1
 800a004:	684b      	ldr	r3, [r1, #4]
 800a006:	bf16      	itet	ne
 800a008:	6063      	strne	r3, [r4, #4]
 800a00a:	6013      	streq	r3, [r2, #0]
 800a00c:	460c      	movne	r4, r1
 800a00e:	e7eb      	b.n	8009fe8 <_malloc_r+0x64>
 800a010:	460c      	mov	r4, r1
 800a012:	6849      	ldr	r1, [r1, #4]
 800a014:	e7cc      	b.n	8009fb0 <_malloc_r+0x2c>
 800a016:	1cc4      	adds	r4, r0, #3
 800a018:	f024 0403 	bic.w	r4, r4, #3
 800a01c:	42a0      	cmp	r0, r4
 800a01e:	d005      	beq.n	800a02c <_malloc_r+0xa8>
 800a020:	1a21      	subs	r1, r4, r0
 800a022:	4630      	mov	r0, r6
 800a024:	f000 f808 	bl	800a038 <_sbrk_r>
 800a028:	3001      	adds	r0, #1
 800a02a:	d0cf      	beq.n	8009fcc <_malloc_r+0x48>
 800a02c:	6025      	str	r5, [r4, #0]
 800a02e:	e7db      	b.n	8009fe8 <_malloc_r+0x64>
 800a030:	200001f8 	.word	0x200001f8
 800a034:	200001fc 	.word	0x200001fc

0800a038 <_sbrk_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4c06      	ldr	r4, [pc, #24]	; (800a054 <_sbrk_r+0x1c>)
 800a03c:	2300      	movs	r3, #0
 800a03e:	4605      	mov	r5, r0
 800a040:	4608      	mov	r0, r1
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	f7f6 fc84 	bl	8000950 <_sbrk>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_sbrk_r+0x1a>
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_sbrk_r+0x1a>
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	20000ff0 	.word	0x20000ff0

0800a058 <__malloc_lock>:
 800a058:	4770      	bx	lr

0800a05a <__malloc_unlock>:
 800a05a:	4770      	bx	lr

0800a05c <_init>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	bf00      	nop
 800a060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a062:	bc08      	pop	{r3}
 800a064:	469e      	mov	lr, r3
 800a066:	4770      	bx	lr

0800a068 <_fini>:
 800a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06a:	bf00      	nop
 800a06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06e:	bc08      	pop	{r3}
 800a070:	469e      	mov	lr, r3
 800a072:	4770      	bx	lr
