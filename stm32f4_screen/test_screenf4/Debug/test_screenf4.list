
test_screenf4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e00  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000712c  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b104  0800b104  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b104  0800b104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b10c  0800b10c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b10c  0800b10c  0001b10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b110  0800b110  0001b110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800b114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200000a0  0800b1b4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20000188  0800b1b4  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bffa  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fbf  00000000  00000000  0002c0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a80  00000000  00000000  0002e090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000948  00000000  00000000  0002eb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021fcc  00000000  00000000  0002f458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b98  00000000  00000000  00051424  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7e6f  00000000  00000000  0005afbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee8  00000000  00000000  00122ea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003fc0 	.word	0x08003fc0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a4 	.word	0x200000a4
 8000214:	08003fc0 	.word	0x08003fc0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <EPD_Init>:
#include <stdlib.h>
#include "epd2in7.h"

#include "epdif.h"

int EPD_Init(EPD* epd) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  epd->reset_pin = RST_PIN;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
  epd->dc_pin = DC_PIN;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2202      	movs	r2, #2
 800052a:	605a      	str	r2, [r3, #4]
  epd->cs_pin = CS_PIN;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  epd->busy_pin = BUSY_PIN;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2203      	movs	r2, #3
 8000536:	60da      	str	r2, [r3, #12]
  epd->width = EPD_WIDTH;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	611a      	str	r2, [r3, #16]
  epd->height = EPD_HEIGHT;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f44f 7294 	mov.w	r2, #296	; 0x128
 8000544:	615a      	str	r2, [r3, #20]
  
  /* this calls the peripheral hardware interface, see epdif */
  if (EpdInitCallback() != 0) {
 8000546:	f000 fa95 	bl	8000a74 <EpdInitCallback>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <EPD_Init+0x3e>
    return -1;
 8000550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000554:	e0ad      	b.n	80006b2 <EPD_Init+0x19a>
  }
  
    /* EPD hardware init start */
    EPD_Reset(epd);
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 f916 	bl	8000788 <EPD_Reset>
    EPD_SendCommand(epd, POWER_SETTING);
 800055c:	2101      	movs	r1, #1
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f000 f8d2 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x03);                  // VDS_EN, VDG_EN
 8000564:	2103      	movs	r1, #3
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f8e3 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x00);                  // VCOM_HV, VGHL_LV[1], VGHL_LV[0]
 800056c:	2100      	movs	r1, #0
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 f8df 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x2b);                  // VDH
 8000574:	212b      	movs	r1, #43	; 0x2b
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 f8db 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x2b);                  // VDL
 800057c:	212b      	movs	r1, #43	; 0x2b
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f8d7 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x09);                  // VDHR
 8000584:	2109      	movs	r1, #9
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f000 f8d3 	bl	8000732 <EPD_SendData>
    EPD_SendCommand(epd, BOOSTER_SOFT_START);
 800058c:	2106      	movs	r1, #6
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 f8ba 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x07);
 8000594:	2107      	movs	r1, #7
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f8cb 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x07);
 800059c:	2107      	movs	r1, #7
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 f8c7 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x17);
 80005a4:	2117      	movs	r1, #23
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f8c3 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 80005ac:	21f8      	movs	r1, #248	; 0xf8
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 f8aa 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x60);
 80005b4:	2160      	movs	r1, #96	; 0x60
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 f8bb 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0xA5);
 80005bc:	21a5      	movs	r1, #165	; 0xa5
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 f8b7 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 80005c4:	21f8      	movs	r1, #248	; 0xf8
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 f89e 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x89);
 80005cc:	2189      	movs	r1, #137	; 0x89
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f8af 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0xA5);
 80005d4:	21a5      	movs	r1, #165	; 0xa5
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f8ab 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 80005dc:	21f8      	movs	r1, #248	; 0xf8
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f892 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x90);
 80005e4:	2190      	movs	r1, #144	; 0x90
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 f8a3 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x00);
 80005ec:	2100      	movs	r1, #0
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f89f 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 80005f4:	21f8      	movs	r1, #248	; 0xf8
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f886 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x93);
 80005fc:	2193      	movs	r1, #147	; 0x93
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f897 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x2A);
 8000604:	212a      	movs	r1, #42	; 0x2a
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f893 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 800060c:	21f8      	movs	r1, #248	; 0xf8
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f87a 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0xA0);
 8000614:	21a0      	movs	r1, #160	; 0xa0
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f88b 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0xA5);
 800061c:	21a5      	movs	r1, #165	; 0xa5
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f887 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 8000624:	21f8      	movs	r1, #248	; 0xf8
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f86e 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0xA1);
 800062c:	21a1      	movs	r1, #161	; 0xa1
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f87f 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x00);
 8000634:	2100      	movs	r1, #0
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f87b 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 800063c:	21f8      	movs	r1, #248	; 0xf8
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f862 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x73);
 8000644:	2173      	movs	r1, #115	; 0x73
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f873 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x41);
 800064c:	2141      	movs	r1, #65	; 0x41
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f86f 	bl	8000732 <EPD_SendData>
    EPD_SendCommand(epd, PARTIAL_DISPLAY_REFRESH);
 8000654:	2116      	movs	r1, #22
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f856 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x00);
 800065c:	2100      	movs	r1, #0
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f867 	bl	8000732 <EPD_SendData>
    EPD_SendCommand(epd, POWER_ON);
 8000664:	2104      	movs	r1, #4
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 f84e 	bl	8000708 <EPD_SendCommand>
    EPD_WaitUntilIdle(epd);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f875 	bl	800075c <EPD_WaitUntilIdle>

    EPD_SendCommand(epd, PANEL_SETTING);
 8000672:	2100      	movs	r1, #0
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f847 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0xAF);        //KW-BF   KWR-AF    BWROTP 0f
 800067a:	21af      	movs	r1, #175	; 0xaf
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f858 	bl	8000732 <EPD_SendData>
    EPD_SendCommand(epd, PLL_CONTROL);
 8000682:	2130      	movs	r1, #48	; 0x30
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f83f 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x3A);       //3A 100HZ   29 150Hz 39 200HZ    31 171HZ
 800068a:	213a      	movs	r1, #58	; 0x3a
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 f850 	bl	8000732 <EPD_SendData>
    EPD_SendCommand(epd, VCM_DC_SETTING_REGISTER);
 8000692:	2182      	movs	r1, #130	; 0x82
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f837 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x12);
 800069a:	2112      	movs	r1, #18
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f848 	bl	8000732 <EPD_SendData>
    EPD_DelayMs(epd, 2);
 80006a2:	2102      	movs	r1, #2
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 f823 	bl	80006f0 <EPD_DelayMs>
    EPD_SetLut(epd);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 f88a 	bl	80007c4 <EPD_SetLut>
    /* EPD hardware init end */
    return 0;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <EPD_DigitalWrite>:

void EPD_DigitalWrite(EPD* epd, int pin, int value) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b084      	sub	sp, #16
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
  EpdDigitalWriteCallback(pin, value);
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	68b8      	ldr	r0, [r7, #8]
 80006ca:	f000 f957 	bl	800097c <EpdDigitalWriteCallback>
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <EPD_DigitalRead>:

int EPD_DigitalRead(EPD* epd, int pin) {
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	6039      	str	r1, [r7, #0]
  return EpdDigitalReadCallback(pin);
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f000 f977 	bl	80009d4 <EpdDigitalReadCallback>
 80006e6:	4603      	mov	r3, r0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <EPD_DelayMs>:

void EPD_DelayMs(EPD* epd, unsigned int delaytime) {  // 1ms
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  EpdDelayMsCallback(delaytime);
 80006fa:	6838      	ldr	r0, [r7, #0]
 80006fc:	f000 f988 	bl	8000a10 <EpdDelayMsCallback>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <EPD_SendCommand>:

void EPD_SendCommand(EPD* epd, unsigned char command) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, LOW);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffcc 	bl	80006ba <EPD_DigitalWrite>
  EpdSpiTransferCallback(command);
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f97f 	bl	8000a28 <EpdSpiTransferCallback>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <EPD_SendData>:

void EPD_SendData(EPD* epd, unsigned char data) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, HIGH);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	4619      	mov	r1, r3
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ffb7 	bl	80006ba <EPD_DigitalWrite>
  EpdSpiTransferCallback(data);
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f96a 	bl	8000a28 <EpdSpiTransferCallback>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <EPD_WaitUntilIdle>:

void EPD_WaitUntilIdle(EPD* epd) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  while(EPD_DigitalRead(epd, epd->busy_pin) == 0) {      //0: busy, 1: idle
 8000764:	e003      	b.n	800076e <EPD_WaitUntilIdle+0x12>
    EPD_DelayMs(epd, 100);
 8000766:	2164      	movs	r1, #100	; 0x64
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ffc1 	bl	80006f0 <EPD_DelayMs>
  while(EPD_DigitalRead(epd, epd->busy_pin) == 0) {      //0: busy, 1: idle
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	4619      	mov	r1, r3
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ffae 	bl	80006d6 <EPD_DigitalRead>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f2      	beq.n	8000766 <EPD_WaitUntilIdle+0xa>
  }      
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <EPD_Reset>:

void EPD_Reset(EPD* epd) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  EPD_DigitalWrite(epd, epd->reset_pin, LOW);                //module reset    
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff8e 	bl	80006ba <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);
 800079e:	21c8      	movs	r1, #200	; 0xc8
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ffa5 	bl	80006f0 <EPD_DelayMs>
  EPD_DigitalWrite(epd, epd->reset_pin, HIGH);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ff83 	bl	80006ba <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);    
 80007b4:	21c8      	movs	r1, #200	; 0xc8
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ff9a 	bl	80006f0 <EPD_DelayMs>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <EPD_SetLut>:

void EPD_SetLut(EPD* epd) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  unsigned int count;     
  EPD_SendCommand(epd, LUT_FOR_VCOM);                            //vcom
 80007cc:	2120      	movs	r1, #32
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff9a 	bl	8000708 <EPD_SendCommand>
  for(count = 0; count < 44; count++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e00a      	b.n	80007f0 <EPD_SetLut+0x2c>
    EPD_SendData(epd, lut_vcom_dc[count]);
 80007da:	4a33      	ldr	r2, [pc, #204]	; (80008a8 <EPD_SetLut+0xe4>)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4619      	mov	r1, r3
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ffa4 	bl	8000732 <EPD_SendData>
  for(count = 0; count < 44; count++) {
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b2b      	cmp	r3, #43	; 0x2b
 80007f4:	d9f1      	bls.n	80007da <EPD_SetLut+0x16>
  }
  
  EPD_SendCommand(epd, LUT_WHITE_TO_WHITE);                      //ww --
 80007f6:	2121      	movs	r1, #33	; 0x21
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff85 	bl	8000708 <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e00a      	b.n	800081a <EPD_SetLut+0x56>
    EPD_SendData(epd, lut_ww[count]);
 8000804:	4a29      	ldr	r2, [pc, #164]	; (80008ac <EPD_SetLut+0xe8>)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff8f 	bl	8000732 <EPD_SendData>
  for(count = 0; count < 42; count++) {
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2b29      	cmp	r3, #41	; 0x29
 800081e:	d9f1      	bls.n	8000804 <EPD_SetLut+0x40>
  }   
  
  EPD_SendCommand(epd, LUT_BLACK_TO_WHITE);                      //bw r
 8000820:	2122      	movs	r1, #34	; 0x22
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ff70 	bl	8000708 <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e00a      	b.n	8000844 <EPD_SetLut+0x80>
    EPD_SendData(epd, lut_bw[count]);
 800082e:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <EPD_SetLut+0xec>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4413      	add	r3, r2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4619      	mov	r1, r3
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff7a 	bl	8000732 <EPD_SendData>
  for(count = 0; count < 42; count++) {
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3301      	adds	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b29      	cmp	r3, #41	; 0x29
 8000848:	d9f1      	bls.n	800082e <EPD_SetLut+0x6a>
  } 

  EPD_SendCommand(epd, LUT_WHITE_TO_BLACK);                      //wb w
 800084a:	2123      	movs	r1, #35	; 0x23
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff5b 	bl	8000708 <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	e00a      	b.n	800086e <EPD_SetLut+0xaa>
    EPD_SendData(epd, lut_bb[count]);
 8000858:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <EPD_SetLut+0xf0>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff65 	bl	8000732 <EPD_SendData>
  for(count = 0; count < 42; count++) {
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3301      	adds	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2b29      	cmp	r3, #41	; 0x29
 8000872:	d9f1      	bls.n	8000858 <EPD_SetLut+0x94>
  } 

  EPD_SendCommand(epd, LUT_BLACK_TO_BLACK);                      //bb b
 8000874:	2124      	movs	r1, #36	; 0x24
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ff46 	bl	8000708 <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	e00a      	b.n	8000898 <EPD_SetLut+0xd4>
    EPD_SendData(epd, lut_wb[count]);
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <EPD_SetLut+0xf4>)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff50 	bl	8000732 <EPD_SendData>
  for(count = 0; count < 42; count++) {
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b29      	cmp	r3, #41	; 0x29
 800089c:	d9f1      	bls.n	8000882 <EPD_SetLut+0xbe>
  } 
}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	08003ff4 	.word	0x08003ff4
 80008ac:	08004020 	.word	0x08004020
 80008b0:	0800404c 	.word	0x0800404c
 80008b4:	08004078 	.word	0x08004078
 80008b8:	080040a4 	.word	0x080040a4

080008bc <EPD_DisplayFrame>:

void EPD_DisplayFrame(EPD* epd, const unsigned char* frame_buffer) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  if (frame_buffer != NULL) {
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d052      	beq.n	8000972 <EPD_DisplayFrame+0xb6>
    EPD_SendCommand(epd, DATA_START_TRANSMISSION_1);
 80008cc:	2110      	movs	r1, #16
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ff1a 	bl	8000708 <EPD_SendCommand>
    EPD_DelayMs(epd, 2);
 80008d4:	2102      	movs	r1, #2
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff0a 	bl	80006f0 <EPD_DelayMs>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e006      	b.n	80008f0 <EPD_DisplayFrame+0x34>
      EPD_SendData(epd, 0xFF);
 80008e2:	21ff      	movs	r1, #255	; 0xff
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff24 	bl	8000732 <EPD_SendData>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3301      	adds	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	da00      	bge.n	80008fa <EPD_DisplayFrame+0x3e>
 80008f8:	3307      	adds	r3, #7
 80008fa:	10db      	asrs	r3, r3, #3
 80008fc:	461a      	mov	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	fb03 f302 	mul.w	r3, r3, r2
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	429a      	cmp	r2, r3
 800090a:	dbea      	blt.n	80008e2 <EPD_DisplayFrame+0x26>
    }
    EPD_DelayMs(epd, 2);
 800090c:	2102      	movs	r1, #2
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff feee 	bl	80006f0 <EPD_DelayMs>
    EPD_SendCommand(epd, DATA_START_TRANSMISSION_2);
 8000914:	2113      	movs	r1, #19
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fef6 	bl	8000708 <EPD_SendCommand>
    EPD_DelayMs(epd, 2);
 800091c:	2102      	movs	r1, #2
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fee6 	bl	80006f0 <EPD_DelayMs>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	e00a      	b.n	8000940 <EPD_DisplayFrame+0x84>
      EPD_SendData(epd, frame_buffer[i]);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fefc 	bl	8000732 <EPD_SendData>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3301      	adds	r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	2b00      	cmp	r3, #0
 8000946:	da00      	bge.n	800094a <EPD_DisplayFrame+0x8e>
 8000948:	3307      	adds	r3, #7
 800094a:	10db      	asrs	r3, r3, #3
 800094c:	461a      	mov	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	fb03 f302 	mul.w	r3, r3, r2
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	429a      	cmp	r2, r3
 800095a:	dbe6      	blt.n	800092a <EPD_DisplayFrame+0x6e>
    }
    EPD_DelayMs(epd, 2);
 800095c:	2102      	movs	r1, #2
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff fec6 	bl	80006f0 <EPD_DelayMs>
    EPD_SendCommand(epd, DISPLAY_REFRESH);
 8000964:	2112      	movs	r1, #18
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fece 	bl	8000708 <EPD_SendCommand>
    EPD_WaitUntilIdle(epd);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fef5 	bl	800075c <EPD_WaitUntilIdle>
  }
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <EpdDigitalWriteCallback>:
  E_BUSY_Pin,
};

EPD_Pin pins[4];

void EpdDigitalWriteCallback(int pin_num, int value) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  if (value == HIGH) {
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d10e      	bne.n	80009aa <EpdDigitalWriteCallback+0x2e>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_SET);
 800098c:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <EpdDigitalWriteCallback+0x54>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <EpdDigitalWriteCallback+0x54>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4413      	add	r3, r2
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	f001 fbf2 	bl	800218c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
  }
}
 80009a8:	e00d      	b.n	80009c6 <EpdDigitalWriteCallback+0x4a>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 80009aa:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <EpdDigitalWriteCallback+0x54>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80009b2:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <EpdDigitalWriteCallback+0x54>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	4413      	add	r3, r2
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2200      	movs	r2, #0
 80009c0:	4619      	mov	r1, r3
 80009c2:	f001 fbe3 	bl	800218c <HAL_GPIO_WritePin>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000c8 	.word	0x200000c8

080009d4 <EpdDigitalReadCallback>:

int EpdDigitalReadCallback(int pin_num) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(pins[pin_num].port, pins[pin_num].pin) == GPIO_PIN_SET) {
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <EpdDigitalReadCallback+0x38>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80009e4:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <EpdDigitalReadCallback+0x38>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	4413      	add	r3, r2
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4619      	mov	r1, r3
 80009f2:	f001 fbb3 	bl	800215c <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d101      	bne.n	8000a00 <EpdDigitalReadCallback+0x2c>
    return HIGH;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <EpdDigitalReadCallback+0x2e>
  } else {
    return LOW;
 8000a00:	2300      	movs	r3, #0
  }
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000c8 	.word	0x200000c8

08000a10 <EpdDelayMsCallback>:

void EpdDelayMsCallback(unsigned int delaytime) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  HAL_Delay(delaytime);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f001 f905 	bl	8001c28 <HAL_Delay>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <EpdSpiTransferCallback>:

void EpdSpiTransferCallback(unsigned char data) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_RESET);
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <EpdSpiTransferCallback+0x44>)
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <EpdSpiTransferCallback+0x44>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f001 fba4 	bl	800218c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8000a44:	1df9      	adds	r1, r7, #7
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <EpdSpiTransferCallback+0x48>)
 8000a4e:	f002 f84f 	bl	8002af0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_SET);
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <EpdSpiTransferCallback+0x44>)
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <EpdSpiTransferCallback+0x44>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f001 fb94 	bl	800218c <HAL_GPIO_WritePin>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000c8 	.word	0x200000c8
 8000a70:	20000128 	.word	0x20000128

08000a74 <EpdInitCallback>:

int EpdInitCallback(void) {
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  pins[CS_PIN] = epd_cs_pin;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <EpdInitCallback+0x48>)
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <EpdInitCallback+0x4c>)
 8000a7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a80:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[RST_PIN] = epd_rst_pin;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <EpdInitCallback+0x48>)
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <EpdInitCallback+0x50>)
 8000a88:	3308      	adds	r3, #8
 8000a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a8e:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[DC_PIN] = epd_dc_pin;
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <EpdInitCallback+0x48>)
 8000a94:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <EpdInitCallback+0x54>)
 8000a96:	3310      	adds	r3, #16
 8000a98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a9c:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[BUSY_PIN] = epd_busy_pin;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <EpdInitCallback+0x48>)
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <EpdInitCallback+0x58>)
 8000aa4:	3318      	adds	r3, #24
 8000aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aaa:	e883 0003 	stmia.w	r3, {r0, r1}
  
  return 0;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200000c8 	.word	0x200000c8
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000010 	.word	0x20000010
 8000acc:	20000018 	.word	0x20000018

08000ad0 <Paint_Init>:
 */

#include "epdpaint.h"


void Paint_Init(Paint* paint, unsigned char* image, int width, int height) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
    paint->rotate = ROTATE_0;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
    paint->image = image;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	601a      	str	r2, [r3, #0]
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    paint->width = width % 8 ? width + 8 - (width % 8) : width;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00c      	beq.n	8000b0e <Paint_Init+0x3e>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f103 0208 	add.w	r2, r3, #8
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4259      	negs	r1, r3
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	f001 0107 	and.w	r1, r1, #7
 8000b06:	bf58      	it	pl
 8000b08:	424b      	negpl	r3, r1
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	e000      	b.n	8000b10 <Paint_Init+0x40>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	6053      	str	r3, [r2, #4]
    paint->height = height;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	609a      	str	r2, [r3, #8]
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <Paint_Clear>:

/**
 *  @brief: clear the image
 */
void Paint_Clear(Paint* paint, int colored) {
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
    for (int x = 0; x < paint->width; x++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e013      	b.n	8000b5e <Paint_Clear+0x38>
        for (int y = 0; y < paint->height; y++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	e008      	b.n	8000b4e <Paint_Clear+0x28>
            Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	68f9      	ldr	r1, [r7, #12]
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f814 	bl	8000b70 <Paint_DrawAbsolutePixel>
        for (int y = 0; y < paint->height; y++) {
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf1      	blt.n	8000b3c <Paint_Clear+0x16>
    for (int x = 0; x < paint->width; x++) {
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbe6      	blt.n	8000b36 <Paint_Clear+0x10>
        }
    }
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <Paint_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint_DrawAbsolutePixel(Paint* paint, int x, int y, int colored) {
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	603b      	str	r3, [r7, #0]
    if (x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db5f      	blt.n	8000c44 <Paint_DrawAbsolutePixel+0xd4>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	da5a      	bge.n	8000c44 <Paint_DrawAbsolutePixel+0xd4>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db57      	blt.n	8000c44 <Paint_DrawAbsolutePixel+0xd4>
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	da52      	bge.n	8000c44 <Paint_DrawAbsolutePixel+0xd4>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d026      	beq.n	8000bf2 <Paint_DrawAbsolutePixel+0x82>
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	fb01 f103 	mul.w	r1, r1, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	440b      	add	r3, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	da00      	bge.n	8000bbc <Paint_DrawAbsolutePixel+0x4c>
 8000bba:	3307      	adds	r3, #7
 8000bbc:	10db      	asrs	r3, r3, #3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4413      	add	r3, r2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4259      	negs	r1, r3
 8000bcc:	f003 0307 	and.w	r3, r3, #7
 8000bd0:	f001 0107 	and.w	r1, r1, #7
 8000bd4:	bf58      	it	pl
 8000bd6:	424b      	negpl	r3, r1
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	fa41 f303 	asr.w	r3, r1, r3
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b25a      	sxtb	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4601      	mov	r1, r0
 8000bea:	440b      	add	r3, r1
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e029      	b.n	8000c46 <Paint_DrawAbsolutePixel+0xd6>
        } else {
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	fb01 f103 	mul.w	r1, r1, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	440b      	add	r3, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	da00      	bge.n	8000c0a <Paint_DrawAbsolutePixel+0x9a>
 8000c08:	3307      	adds	r3, #7
 8000c0a:	10db      	asrs	r3, r3, #3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25a      	sxtb	r2, r3
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4259      	negs	r1, r3
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	f001 0107 	and.w	r1, r1, #7
 8000c22:	bf58      	it	pl
 8000c24:	424b      	negpl	r3, r1
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	fa41 f303 	asr.w	r3, r1, r3
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	4013      	ands	r3, r2
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4601      	mov	r1, r0
 8000c3c:	440b      	add	r3, r1
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e000      	b.n	8000c46 <Paint_DrawAbsolutePixel+0xd6>
        return;
 8000c44:	bf00      	nop
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <Paint_SetRotate>:

int Paint_GetRotate(Paint* paint) {
    return paint->rotate;
}

void Paint_SetRotate(Paint* paint, int rotate){
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
    paint->rotate = rotate;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	60da      	str	r2, [r3, #12]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <Paint_DrawPixel>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint_DrawPixel(Paint* paint, int x, int y, int colored) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
    int point_temp;
    if (paint->rotate == ROTATE_0) {
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d117      	bne.n	8000cb2 <Paint_DrawPixel+0x46>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f2c0 8081 	blt.w	8000d8c <Paint_DrawPixel+0x120>
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	da7b      	bge.n	8000d8c <Paint_DrawPixel+0x120>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db78      	blt.n	8000d8c <Paint_DrawPixel+0x120>
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	da73      	bge.n	8000d8c <Paint_DrawPixel+0x120>
            return;
        }
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff ff60 	bl	8000b70 <Paint_DrawAbsolutePixel>
 8000cb0:	e073      	b.n	8000d9a <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_90) {
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d11f      	bne.n	8000cfa <Paint_DrawPixel+0x8e>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db67      	blt.n	8000d90 <Paint_DrawPixel+0x124>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	da62      	bge.n	8000d90 <Paint_DrawPixel+0x124>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db5f      	blt.n	8000d90 <Paint_DrawPixel+0x124>
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	da5a      	bge.n	8000d90 <Paint_DrawPixel+0x124>
          return;
        }
        point_temp = x;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	617b      	str	r3, [r7, #20]
        x = paint->width - y;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	60bb      	str	r3, [r7, #8]
        y = point_temp;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f7ff ff3c 	bl	8000b70 <Paint_DrawAbsolutePixel>
 8000cf8:	e04f      	b.n	8000d9a <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_180) {
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d120      	bne.n	8000d44 <Paint_DrawPixel+0xd8>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db45      	blt.n	8000d94 <Paint_DrawPixel+0x128>
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	da40      	bge.n	8000d94 <Paint_DrawPixel+0x128>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db3d      	blt.n	8000d94 <Paint_DrawPixel+0x128>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	da38      	bge.n	8000d94 <Paint_DrawPixel+0x128>
          return;
        }
        x = paint->width - x;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	60bb      	str	r3, [r7, #8]
        y = paint->height - y;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f7ff ff17 	bl	8000b70 <Paint_DrawAbsolutePixel>
 8000d42:	e02a      	b.n	8000d9a <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_270) {
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d126      	bne.n	8000d9a <Paint_DrawPixel+0x12e>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db22      	blt.n	8000d98 <Paint_DrawPixel+0x12c>
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	da1d      	bge.n	8000d98 <Paint_DrawPixel+0x12c>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db1a      	blt.n	8000d98 <Paint_DrawPixel+0x12c>
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	da15      	bge.n	8000d98 <Paint_DrawPixel+0x12c>
          return;
        }
        point_temp = x;
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	617b      	str	r3, [r7, #20]
        x = y;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	60bb      	str	r3, [r7, #8]
        y = paint->height - point_temp;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	68b9      	ldr	r1, [r7, #8]
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f7ff fef3 	bl	8000b70 <Paint_DrawAbsolutePixel>
 8000d8a:	e006      	b.n	8000d9a <Paint_DrawPixel+0x12e>
            return;
 8000d8c:	bf00      	nop
 8000d8e:	e004      	b.n	8000d9a <Paint_DrawPixel+0x12e>
          return;
 8000d90:	bf00      	nop
 8000d92:	e002      	b.n	8000d9a <Paint_DrawPixel+0x12e>
          return;
 8000d94:	bf00      	nop
 8000d96:	e000      	b.n	8000d9a <Paint_DrawPixel+0x12e>
          return;
 8000d98:	bf00      	nop
    }
}
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Paint_DrawCharAt>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint_DrawCharAt(Paint* paint, int x, int y, char ascii_char, sFONT* font, int colored) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	70fb      	strb	r3, [r7, #3]
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	3b20      	subs	r3, #32
 8000db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000db4:	88d2      	ldrh	r2, [r2, #6]
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dbc:	8892      	ldrh	r2, [r2, #4]
 8000dbe:	08d2      	lsrs	r2, r2, #3
 8000dc0:	b292      	uxth	r2, r2
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dc6:	8892      	ldrh	r2, [r2, #4]
 8000dc8:	f002 0207 	and.w	r2, r2, #7
 8000dcc:	b292      	uxth	r2, r2
 8000dce:	2a00      	cmp	r2, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2201      	movne	r2, #1
 8000dd4:	2200      	moveq	r2, #0
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440a      	add	r2, r1
 8000dda:	fb02 f303 	mul.w	r3, r2, r3
 8000dde:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 8000de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4413      	add	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]

    for (j = 0; j < font->Height; j++) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	e040      	b.n	8000e72 <Paint_DrawCharAt+0xd2>
        for (i = 0; i < font->Width; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	e02a      	b.n	8000e4c <Paint_DrawCharAt+0xac>
            if (*ptr & (0x80 >> (i % 8))) {
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	425a      	negs	r2, r3
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	f002 0207 	and.w	r2, r2, #7
 8000e08:	bf58      	it	pl
 8000e0a:	4253      	negpl	r3, r2
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	fa42 f303 	asr.w	r3, r2, r3
 8000e12:	400b      	ands	r3, r1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d009      	beq.n	8000e2c <Paint_DrawCharAt+0x8c>
                Paint_DrawPixel(paint, x + i, y + j, colored);
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	18d1      	adds	r1, r2, r3
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	441a      	add	r2, r3
 8000e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff ff20 	bl	8000c6c <Paint_DrawPixel>
            }
            if (i % 8 == 7) {
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	425a      	negs	r2, r3
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	f002 0207 	and.w	r2, r2, #7
 8000e38:	bf58      	it	pl
 8000e3a:	4253      	negpl	r3, r2
 8000e3c:	2b07      	cmp	r3, #7
 8000e3e:	d102      	bne.n	8000e46 <Paint_DrawCharAt+0xa6>
                ptr++;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	61fb      	str	r3, [r7, #28]
 8000e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4e:	889b      	ldrh	r3, [r3, #4]
 8000e50:	461a      	mov	r2, r3
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	4293      	cmp	r3, r2
 8000e56:	dbce      	blt.n	8000df6 <Paint_DrawCharAt+0x56>
            }
        }
        if (font->Width % 8 != 0) {
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	889b      	ldrh	r3, [r3, #4]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <Paint_DrawCharAt+0xcc>
            ptr++;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e74:	88db      	ldrh	r3, [r3, #6]
 8000e76:	461a      	mov	r2, r3
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	dbb8      	blt.n	8000df0 <Paint_DrawCharAt+0x50>
        }
    }
}
 8000e7e:	bf00      	nop
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <Paint_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint_DrawStringAt(Paint* paint, int x, int y, const char* text, sFONT* font, int colored) {
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b08a      	sub	sp, #40	; 0x28
 8000e8a:	af02      	add	r7, sp, #8
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	603b      	str	r3, [r7, #0]
    const char* p_text = text;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	617b      	str	r3, [r7, #20]
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8000ea0:	e017      	b.n	8000ed2 <Paint_DrawStringAt+0x4c>
        /* Display one character on EPD */
        Paint_DrawCharAt(paint, refcolumn, y, *p_text, font, colored);
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6979      	ldr	r1, [r7, #20]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff ff73 	bl	8000da0 <Paint_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 8000eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebc:	889b      	ldrh	r3, [r3, #4]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
        counter++;
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1e3      	bne.n	8000ea2 <Paint_DrawStringAt+0x1c>
    }
}
 8000eda:	bf00      	nop
 8000edc:	3720      	adds	r7, #32
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <Paint_DrawLine>:

/**
*  @brief: this draws a line on the frame buffer
*/
void Paint_DrawLine(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b08a      	sub	sp, #40	; 0x28
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int dx = x1 - x0 >= 0 ? x1 - x0 : x0 - x1;
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	bfb8      	it	lt
 8000efa:	425b      	neglt	r3, r3
 8000efc:	623b      	str	r3, [r7, #32]
    int sx = x0 < x1 ? 1 : -1;
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	da01      	bge.n	8000f0a <Paint_DrawLine+0x28>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e001      	b.n	8000f0e <Paint_DrawLine+0x2c>
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f0e:	61fb      	str	r3, [r7, #28]
    int dy = y1 - y0 <= 0 ? y1 - y0 : y0 - y1;
 8000f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bfb8      	it	lt
 8000f1a:	425b      	neglt	r3, r3
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	61bb      	str	r3, [r7, #24]
    int sy = y0 < y1 ? 1 : -1;
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f24:	429a      	cmp	r2, r3
 8000f26:	da01      	bge.n	8000f2c <Paint_DrawLine+0x4a>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e001      	b.n	8000f30 <Paint_DrawLine+0x4e>
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f30:	617b      	str	r3, [r7, #20]
    int err = dx + dy;
 8000f32:	6a3a      	ldr	r2, [r7, #32]
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	4413      	add	r3, r2
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24

    while((x0 != x1) && (y0 != y1)) {
 8000f3a:	e01f      	b.n	8000f7c <Paint_DrawLine+0x9a>
        Paint_DrawPixel(paint, x0, y0 , colored);
 8000f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f7ff fe92 	bl	8000c6c <Paint_DrawPixel>
        if (2 * err >= dy) {     
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	dc07      	bgt.n	8000f62 <Paint_DrawLine+0x80>
            err += dy;
 8000f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	4413      	add	r3, r2
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
            x0 += sx;
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60bb      	str	r3, [r7, #8]
        }
        if (2 * err <= dx) {
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	6a3a      	ldr	r2, [r7, #32]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	db07      	blt.n	8000f7c <Paint_DrawLine+0x9a>
            err += dx; 
 8000f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	4413      	add	r3, r2
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
            y0 += sy;
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	4413      	add	r3, r2
 8000f7a:	607b      	str	r3, [r7, #4]
    while((x0 != x1) && (y0 != y1)) {
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d003      	beq.n	8000f8c <Paint_DrawLine+0xaa>
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d1d7      	bne.n	8000f3c <Paint_DrawLine+0x5a>
        }
    }
}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <Paint_DrawHorizontalLine>:

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint_DrawHorizontalLine(Paint* paint, int x, int y, int line_width, int colored) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	603b      	str	r3, [r7, #0]
    int i;
    for (i = x; i < x + line_width; i++) {
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	e008      	b.n	8000fba <Paint_DrawHorizontalLine+0x26>
        Paint_DrawPixel(paint, i, y, colored);
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6979      	ldr	r1, [r7, #20]
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f7ff fe5c 	bl	8000c6c <Paint_DrawPixel>
    for (i = x; i < x + line_width; i++) {
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dbf0      	blt.n	8000fa8 <Paint_DrawHorizontalLine+0x14>
    }
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <Paint_DrawVerticalLine>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint_DrawVerticalLine(Paint* paint, int x, int y, int line_height, int colored) {
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	603b      	str	r3, [r7, #0]
    int i;
    for (i = y; i < y + line_height; i++) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e008      	b.n	8000ff4 <Paint_DrawVerticalLine+0x26>
        Paint_DrawPixel(paint, x, i, colored);
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff fe3f 	bl	8000c6c <Paint_DrawPixel>
    for (i = y; i < y + line_height; i++) {
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf0      	blt.n	8000fe2 <Paint_DrawVerticalLine+0x14>
    }
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Paint_DrawRectangle>:

/**
*  @brief: this draws a rectangle
*/
void Paint_DrawRectangle(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af02      	add	r7, sp, #8
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
    int min_x, min_y, max_x, max_y;
    min_x = x1 > x0 ? x0 : x1;
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4293      	cmp	r3, r2
 800101c:	bfa8      	it	ge
 800101e:	4613      	movge	r3, r2
 8001020:	61fb      	str	r3, [r7, #28]
    max_x = x1 > x0 ? x1 : x0;
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	4293      	cmp	r3, r2
 8001028:	bfb8      	it	lt
 800102a:	4613      	movlt	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
    min_y = y1 > y0 ? y0 : y1;
 800102e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4293      	cmp	r3, r2
 8001034:	bfa8      	it	ge
 8001036:	4613      	movge	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
    max_y = y1 > y0 ? y1 : y0;
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103e:	4293      	cmp	r3, r2
 8001040:	bfb8      	it	lt
 8001042:	4613      	movlt	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
    
    Paint_DrawHorizontalLine(paint, min_x, min_y, max_x - min_x + 1, colored);
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4613      	mov	r3, r2
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	69f9      	ldr	r1, [r7, #28]
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f7ff ff9b 	bl	8000f94 <Paint_DrawHorizontalLine>
    Paint_DrawHorizontalLine(paint, min_x, max_y, max_x - min_x + 1, colored);
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	69f9      	ldr	r1, [r7, #28]
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f7ff ff8f 	bl	8000f94 <Paint_DrawHorizontalLine>
    Paint_DrawVerticalLine(paint, min_x, min_y, max_y - min_y + 1, colored);
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4613      	mov	r3, r2
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	69f9      	ldr	r1, [r7, #28]
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f7ff ffa0 	bl	8000fce <Paint_DrawVerticalLine>
    Paint_DrawVerticalLine(paint, max_x, min_y, max_y - min_y + 1, colored);
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4613      	mov	r3, r2
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff ff94 	bl	8000fce <Paint_DrawVerticalLine>
}
 80010a6:	bf00      	nop
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <Paint_DrawFilledRectangle>:

/**
*  @brief: this draws a filled rectangle
*/
void Paint_DrawFilledRectangle(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b08c      	sub	sp, #48	; 0x30
 80010b2:	af02      	add	r7, sp, #8
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	603b      	str	r3, [r7, #0]
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4293      	cmp	r3, r2
 80010c2:	bfa8      	it	ge
 80010c4:	4613      	movge	r3, r2
 80010c6:	623b      	str	r3, [r7, #32]
    max_x = x1 > x0 ? x1 : x0;
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	4293      	cmp	r3, r2
 80010ce:	bfb8      	it	lt
 80010d0:	4613      	movlt	r3, r2
 80010d2:	61fb      	str	r3, [r7, #28]
    min_y = y1 > y0 ? y0 : y1;
 80010d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4293      	cmp	r3, r2
 80010da:	bfa8      	it	ge
 80010dc:	4613      	movge	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
    max_y = y1 > y0 ? y1 : y0;
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e4:	4293      	cmp	r3, r2
 80010e6:	bfb8      	it	lt
 80010e8:	4613      	movlt	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
    
    for (i = min_x; i <= max_x; i++) {
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
 80010f0:	e00e      	b.n	8001110 <Paint_DrawFilledRectangle+0x62>
      Paint_DrawVerticalLine(paint, i, min_y, max_y - min_y + 1, colored);
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	4613      	mov	r3, r2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff ff62 	bl	8000fce <Paint_DrawVerticalLine>
    for (i = min_x; i <= max_x; i++) {
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	3301      	adds	r3, #1
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
 8001110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	429a      	cmp	r2, r3
 8001116:	ddec      	ble.n	80010f2 <Paint_DrawFilledRectangle+0x44>
    }
}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <Paint_DrawCircle>:

/**
*  @brief: this draws a circle
*/
void Paint_DrawCircle(Paint* paint, int x, int y, int radius, int colored) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int x_pos = -radius;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	425b      	negs	r3, r3
 8001132:	61fb      	str	r3, [r7, #28]
    int y_pos = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
    int err = 2 - 2 * radius;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f1c3 0301 	rsb	r3, r3, #1
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	617b      	str	r3, [r7, #20]
    int e2;

    do {
        Paint_DrawPixel(paint, x - x_pos, y + y_pos, colored);
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	1ad1      	subs	r1, r2, r3
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	441a      	add	r2, r3
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff fd8b 	bl	8000c6c <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y + y_pos, colored);
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	18d1      	adds	r1, r2, r3
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	441a      	add	r2, r3
 8001162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff fd81 	bl	8000c6c <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y - y_pos, colored);
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	18d1      	adds	r1, r2, r3
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	1ad2      	subs	r2, r2, r3
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f7ff fd77 	bl	8000c6c <Paint_DrawPixel>
        Paint_DrawPixel(paint, x - x_pos, y - y_pos, colored);
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	1ad1      	subs	r1, r2, r3
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	1ad2      	subs	r2, r2, r3
 800118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7ff fd6d 	bl	8000c6c <Paint_DrawPixel>
        e2 = err;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	613b      	str	r3, [r7, #16]
        if (e2 <= y_pos) {
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	429a      	cmp	r2, r3
 800119c:	dc13      	bgt.n	80011c6 <Paint_DrawCircle+0xa6>
            err += ++y_pos * 2 + 1;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	3301      	adds	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	3301      	adds	r3, #1
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4413      	add	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
            if(-x_pos == y_pos && e2 <= x_pos) {
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	425b      	negs	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d105      	bne.n	80011c6 <Paint_DrawCircle+0xa6>
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	429a      	cmp	r2, r3
 80011c0:	dc01      	bgt.n	80011c6 <Paint_DrawCircle+0xa6>
              e2 = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
            }
        }
        if (e2 > x_pos) {
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dd08      	ble.n	80011e0 <Paint_DrawCircle+0xc0>
            err += ++x_pos * 2 + 1;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	3301      	adds	r3, #1
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4413      	add	r3, r2
 80011de:	617b      	str	r3, [r7, #20]
        }
    } while (x_pos <= 0);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	ddad      	ble.n	8001142 <Paint_DrawCircle+0x22>
}
 80011e6:	bf00      	nop
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <Paint_DrawFilledCircle>:

/**
*  @brief: this draws a filled circle
*/
void Paint_DrawFilledCircle(Paint* paint, int x, int y, int radius, int colored) {
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b08a      	sub	sp, #40	; 0x28
 80011f2:	af02      	add	r7, sp, #8
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int x_pos = -radius;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	425b      	negs	r3, r3
 8001200:	61fb      	str	r3, [r7, #28]
    int y_pos = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
    int err = 2 - 2 * radius;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f1c3 0301 	rsb	r3, r3, #1
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	617b      	str	r3, [r7, #20]
    int e2;

    do {
        Paint_DrawPixel(paint, x - x_pos, y + y_pos, colored);
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	1ad1      	subs	r1, r2, r3
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	441a      	add	r2, r3
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff fd24 	bl	8000c6c <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y + y_pos, colored);
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	18d1      	adds	r1, r2, r3
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	441a      	add	r2, r3
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff fd1a 	bl	8000c6c <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y - y_pos, colored);
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	18d1      	adds	r1, r2, r3
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	1ad2      	subs	r2, r2, r3
 8001244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff fd10 	bl	8000c6c <Paint_DrawPixel>
        Paint_DrawPixel(paint, x - x_pos, y - y_pos, colored);
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	1ad1      	subs	r1, r2, r3
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	1ad2      	subs	r2, r2, r3
 8001258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff fd06 	bl	8000c6c <Paint_DrawPixel>
        Paint_DrawHorizontalLine(paint, x + x_pos, y + y_pos, 2 * (-x_pos) + 1, colored);
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	18d1      	adds	r1, r2, r3
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	18d0      	adds	r0, r2, r3
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	4613      	mov	r3, r2
 8001270:	07db      	lsls	r3, r3, #31
 8001272:	1a9b      	subs	r3, r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	4613      	mov	r3, r2
 800127e:	4602      	mov	r2, r0
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f7ff fe87 	bl	8000f94 <Paint_DrawHorizontalLine>
        Paint_DrawHorizontalLine(paint, x + x_pos, y - y_pos, 2 * (-x_pos) + 1, colored);
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	18d1      	adds	r1, r2, r3
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad0      	subs	r0, r2, r3
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	4613      	mov	r3, r2
 8001296:	07db      	lsls	r3, r3, #31
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4613      	mov	r3, r2
 80012a4:	4602      	mov	r2, r0
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff fe74 	bl	8000f94 <Paint_DrawHorizontalLine>
        e2 = err;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
        if (e2 <= y_pos) {
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dc13      	bgt.n	80012e0 <Paint_DrawFilledCircle+0xf2>
            err += ++y_pos * 2 + 1;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	3301      	adds	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	3301      	adds	r3, #1
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	4413      	add	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]
            if(-x_pos == y_pos && e2 <= x_pos) {
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	425b      	negs	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d105      	bne.n	80012e0 <Paint_DrawFilledCircle+0xf2>
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	429a      	cmp	r2, r3
 80012da:	dc01      	bgt.n	80012e0 <Paint_DrawFilledCircle+0xf2>
                e2 = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
            }
        }
        if(e2 > x_pos) {
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dd08      	ble.n	80012fa <Paint_DrawFilledCircle+0x10c>
            err += ++x_pos * 2 + 1;
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	3301      	adds	r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	3301      	adds	r3, #1
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	4413      	add	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]
        }
    } while(x_pos <= 0);
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dd87      	ble.n	8001210 <Paint_DrawFilledCircle+0x22>
}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	; 0x38
 800130c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	unsigned char* frame_buffer = (unsigned char*)malloc(EPD_WIDTH * EPD_HEIGHT / 8);
 800130e:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8001312:	f002 f9dd 	bl	80036d0 <malloc>
 8001316:	4603      	mov	r3, r0
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131a:	f000 fc13 	bl	8001b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131e:	f000 f8bd 	bl	800149c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 f985 	bl	8001630 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001326:	f000 f923 	bl	8001570 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800132a:	f000 f957 	bl	80015dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  EPD epd;
  EPD_Init(&epd);
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f8f0 	bl	8000518 <EPD_Init>
    if (EPD_Init(&epd) != 0) {
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8eb 	bl	8000518 <EPD_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <main+0x4c>
        printf("e-Paper init failed\n");
 8001348:	484e      	ldr	r0, [pc, #312]	; (8001484 <main+0x17c>)
 800134a:	f002 fad5 	bl	80038f8 <puts>
        return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001352:	e093      	b.n	800147c <main+0x174>
      }

      Paint paint;
      Paint_Init(&paint, frame_buffer, epd.width, epd.height);
 8001354:	6a3a      	ldr	r2, [r7, #32]
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	4638      	mov	r0, r7
 800135a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800135c:	f7ff fbb8 	bl	8000ad0 <Paint_Init>
      Paint_Clear(&paint, UNCOLORED);
 8001360:	463b      	mov	r3, r7
 8001362:	2101      	movs	r1, #1
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fbde 	bl	8000b26 <Paint_Clear>

      /* Draw something to the frame buffer */
      /* For simplicity, the arguments are explicit numerical coordinates */
      Paint_SetRotate(&paint, ROTATE_0);
 800136a:	463b      	mov	r3, r7
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fc6e 	bl	8000c50 <Paint_SetRotate>
      Paint_DrawStringAt(&paint, 4, 50, "TZ", &Font20, COLORED);
 8001374:	4638      	mov	r0, r7
 8001376:	2300      	movs	r3, #0
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	4b43      	ldr	r3, [pc, #268]	; (8001488 <main+0x180>)
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4b43      	ldr	r3, [pc, #268]	; (800148c <main+0x184>)
 8001380:	2232      	movs	r2, #50	; 0x32
 8001382:	2104      	movs	r1, #4
 8001384:	f7ff fd7f 	bl	8000e86 <Paint_DrawStringAt>
      Paint_DrawRectangle(&paint, 10, 130, 50, 180, COLORED);
 8001388:	4638      	mov	r0, r7
 800138a:	2300      	movs	r3, #0
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	23b4      	movs	r3, #180	; 0xb4
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2332      	movs	r3, #50	; 0x32
 8001394:	2282      	movs	r2, #130	; 0x82
 8001396:	210a      	movs	r1, #10
 8001398:	f7ff fe36 	bl	8001008 <Paint_DrawRectangle>
      Paint_DrawLine(&paint, 10, 130, 50, 180, COLORED);
 800139c:	4638      	mov	r0, r7
 800139e:	2300      	movs	r3, #0
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	23b4      	movs	r3, #180	; 0xb4
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2332      	movs	r3, #50	; 0x32
 80013a8:	2282      	movs	r2, #130	; 0x82
 80013aa:	210a      	movs	r1, #10
 80013ac:	f7ff fd99 	bl	8000ee2 <Paint_DrawLine>
      Paint_DrawLine(&paint, 50, 130, 10, 180, COLORED);
 80013b0:	4638      	mov	r0, r7
 80013b2:	2300      	movs	r3, #0
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	23b4      	movs	r3, #180	; 0xb4
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	230a      	movs	r3, #10
 80013bc:	2282      	movs	r2, #130	; 0x82
 80013be:	2132      	movs	r1, #50	; 0x32
 80013c0:	f7ff fd8f 	bl	8000ee2 <Paint_DrawLine>
      Paint_DrawCircle(&paint, 100, 150, 25, COLORED);
 80013c4:	4638      	mov	r0, r7
 80013c6:	2300      	movs	r3, #0
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2319      	movs	r3, #25
 80013cc:	2296      	movs	r2, #150	; 0x96
 80013ce:	2164      	movs	r1, #100	; 0x64
 80013d0:	f7ff fea6 	bl	8001120 <Paint_DrawCircle>
      Paint_DrawFilledRectangle(&paint, 10, 200, 50, 250, COLORED);
 80013d4:	4638      	mov	r0, r7
 80013d6:	2300      	movs	r3, #0
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	23fa      	movs	r3, #250	; 0xfa
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2332      	movs	r3, #50	; 0x32
 80013e0:	22c8      	movs	r2, #200	; 0xc8
 80013e2:	210a      	movs	r1, #10
 80013e4:	f7ff fe63 	bl	80010ae <Paint_DrawFilledRectangle>
      Paint_DrawFilledRectangle(&paint, 0, 76, 176, 96, COLORED);
 80013e8:	4638      	mov	r0, r7
 80013ea:	2300      	movs	r3, #0
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	2360      	movs	r3, #96	; 0x60
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	23b0      	movs	r3, #176	; 0xb0
 80013f4:	224c      	movs	r2, #76	; 0x4c
 80013f6:	2100      	movs	r1, #0
 80013f8:	f7ff fe59 	bl	80010ae <Paint_DrawFilledRectangle>
      Paint_DrawFilledCircle(&paint, 100, 220, 25, COLORED);
 80013fc:	4638      	mov	r0, r7
 80013fe:	2300      	movs	r3, #0
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2319      	movs	r3, #25
 8001404:	22dc      	movs	r2, #220	; 0xdc
 8001406:	2164      	movs	r1, #100	; 0x64
 8001408:	f7ff fef1 	bl	80011ee <Paint_DrawFilledCircle>
      Paint_DrawStringAt(&paint, 18, 80, "NB!", &Font16, UNCOLORED);
 800140c:	4638      	mov	r0, r7
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <main+0x188>)
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <main+0x18c>)
 8001418:	2250      	movs	r2, #80	; 0x50
 800141a:	2112      	movs	r1, #18
 800141c:	f7ff fd33 	bl	8000e86 <Paint_DrawStringAt>

      Paint_Clear(&paint, UNCOLORED);
 8001420:	463b      	mov	r3, r7
 8001422:	2101      	movs	r1, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fb7e 	bl	8000b26 <Paint_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* USER CODE END WHILE */
      for (int i = 0; i <sizeof(qie); i++){
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142e:	e01a      	b.n	8001466 <main+0x15e>
          		if (qie[i] == 1){
 8001430:	4a19      	ldr	r2, [pc, #100]	; (8001498 <main+0x190>)
 8001432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001434:	4413      	add	r3, r2
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d111      	bne.n	8001460 <main+0x158>
          		   Paint_DrawPixel(&paint, i%128,i/128,COLORED);
 800143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143e:	425a      	negs	r2, r3
 8001440:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8001444:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8001448:	bf58      	it	pl
 800144a:	4259      	negpl	r1, r3
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	2b00      	cmp	r3, #0
 8001450:	da00      	bge.n	8001454 <main+0x14c>
 8001452:	337f      	adds	r3, #127	; 0x7f
 8001454:	11db      	asrs	r3, r3, #7
 8001456:	461a      	mov	r2, r3
 8001458:	4638      	mov	r0, r7
 800145a:	2300      	movs	r3, #0
 800145c:	f7ff fc06 	bl	8000c6c <Paint_DrawPixel>
      for (int i = 0; i <sizeof(qie); i++){
 8001460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001462:	3301      	adds	r3, #1
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	f5b3 4faa 	cmp.w	r3, #21760	; 0x5500
 800146c:	d3e0      	bcc.n	8001430 <main+0x128>

          /* Infinite loop */
          /* USER CODE BEGIN WHILE */

          /* USER CODE END WHILE */
          EPD_DisplayFrame(&epd, frame_buffer);
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fa21 	bl	80008bc <EPD_DisplayFrame>
 800147a:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800147c:	4618      	mov	r0, r3
 800147e:	3730      	adds	r7, #48	; 0x30
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	08003fd8 	.word	0x08003fd8
 8001488:	20000028 	.word	0x20000028
 800148c:	08003fec 	.word	0x08003fec
 8001490:	20000020 	.word	0x20000020
 8001494:	08003ff0 	.word	0x08003ff0
 8001498:	08005b88 	.word	0x08005b88

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	; 0x50
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	2234      	movs	r2, #52	; 0x34
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 f918 	bl	80036e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <SystemClock_Config+0xcc>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a27      	ldr	r2, [pc, #156]	; (8001568 <SystemClock_Config+0xcc>)
 80014ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <SystemClock_Config+0xcc>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014dc:	2300      	movs	r3, #0
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <SystemClock_Config+0xd0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <SystemClock_Config+0xd0>)
 80014e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <SystemClock_Config+0xd0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fc:	2301      	movs	r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001500:	2310      	movs	r3, #16
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001504:	2302      	movs	r3, #2
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001508:	2300      	movs	r3, #0
 800150a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800150c:	2308      	movs	r3, #8
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001510:	2360      	movs	r3, #96	; 0x60
 8001512:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001514:	2302      	movs	r3, #2
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001518:	2308      	movs	r3, #8
 800151a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4618      	mov	r0, r3
 8001526:	f001 f83d 	bl	80025a4 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001530:	f000 f920 	bl	8001774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	2101      	movs	r1, #1
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fe36 	bl	80021c0 <HAL_RCC_ClockConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800155a:	f000 f90b 	bl	8001774 <Error_Handler>
  }
}
 800155e:	bf00      	nop
 8001560:	3750      	adds	r7, #80	; 0x50
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40007000 	.word	0x40007000

08001570 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_SPI1_Init+0x64>)
 8001576:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <MX_SPI1_Init+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_SPI1_Init+0x64>)
 800157c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001580:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_SPI1_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_SPI1_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_SPI1_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_SPI1_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_SPI1_Init+0x64>)
 800159c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_SPI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_SPI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_SPI1_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_SPI1_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_SPI1_Init+0x64>)
 80015bc:	220a      	movs	r2, #10
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_SPI1_Init+0x64>)
 80015c2:	f001 fa31 	bl	8002a28 <HAL_SPI_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015cc:	f000 f8d2 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000128 	.word	0x20000128
 80015d8:	40013000 	.word	0x40013000

080015dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_USART1_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 8001614:	f001 fc4c 	bl	8002eb0 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f000 f8a9 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200000e8 	.word	0x200000e8
 800162c:	40011000 	.word	0x40011000

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b45      	ldr	r3, [pc, #276]	; (8001760 <MX_GPIO_Init+0x130>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a44      	ldr	r2, [pc, #272]	; (8001760 <MX_GPIO_Init+0x130>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b42      	ldr	r3, [pc, #264]	; (8001760 <MX_GPIO_Init+0x130>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <MX_GPIO_Init+0x130>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a3d      	ldr	r2, [pc, #244]	; (8001760 <MX_GPIO_Init+0x130>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <MX_GPIO_Init+0x130>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <MX_GPIO_Init+0x130>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a36      	ldr	r2, [pc, #216]	; (8001760 <MX_GPIO_Init+0x130>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <MX_GPIO_Init+0x130>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <MX_GPIO_Init+0x130>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a2f      	ldr	r2, [pc, #188]	; (8001760 <MX_GPIO_Init+0x130>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <MX_GPIO_Init+0x130>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f248 0180 	movw	r1, #32896	; 0x8080
 80016bc:	4829      	ldr	r0, [pc, #164]	; (8001764 <MX_GPIO_Init+0x134>)
 80016be:	f000 fd65 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, E_DC_Pin|E_RST_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80016c8:	4827      	ldr	r0, [pc, #156]	; (8001768 <MX_GPIO_Init+0x138>)
 80016ca:	f000 fd5f 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d4:	4b25      	ldr	r3, [pc, #148]	; (800176c <MX_GPIO_Init+0x13c>)
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4821      	ldr	r0, [pc, #132]	; (8001768 <MX_GPIO_Init+0x138>)
 80016e4:	f000 fba8 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_Pin P2_Pin E_BUSY_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P2_Pin|E_BUSY_Pin;
 80016e8:	f242 0306 	movw	r3, #8198	; 0x2006
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4819      	ldr	r0, [pc, #100]	; (8001764 <MX_GPIO_Init+0x134>)
 80016fe:	f000 fb9b 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = E_CS_Pin|LD2_Pin;
 8001702:	f248 0380 	movw	r3, #32896	; 0x8080
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4812      	ldr	r0, [pc, #72]	; (8001764 <MX_GPIO_Init+0x134>)
 800171c:	f000 fb8c 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_DC_Pin E_RST_Pin */
  GPIO_InitStruct.Pin = E_DC_Pin|E_RST_Pin;
 8001720:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <MX_GPIO_Init+0x138>)
 800173a:	f000 fb7d 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin P4_Pin */
  GPIO_InitStruct.Pin = P3_Pin|P4_Pin;
 800173e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001748:	2301      	movs	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	4807      	ldr	r0, [pc, #28]	; (8001770 <MX_GPIO_Init+0x140>)
 8001754:	f000 fb70 	bl	8001e38 <HAL_GPIO_Init>

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	40020400 	.word	0x40020400
 8001768:	40020800 	.word	0x40020800
 800176c:	10110000 	.word	0x10110000
 8001770:	40020000 	.word	0x40020000

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_MspInit+0x4c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_MspInit+0x4c>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_MspInit+0x4c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a28      	ldr	r2, [pc, #160]	; (8001894 <HAL_SPI_MspInit+0xc0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d149      	bne.n	800188a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_SPI_MspInit+0xc4>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a26      	ldr	r2, [pc, #152]	; (8001898 <HAL_SPI_MspInit+0xc4>)
 8001800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_SPI_MspInit+0xc4>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_SPI_MspInit+0xc4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <HAL_SPI_MspInit+0xc4>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_SPI_MspInit+0xc4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_SPI_MspInit+0xc4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_SPI_MspInit+0xc4>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_SPI_MspInit+0xc4>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800185a:	2305      	movs	r3, #5
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <HAL_SPI_MspInit+0xc8>)
 8001866:	f000 fae7 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800186a:	2308      	movs	r3, #8
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800187a:	2305      	movs	r3, #5
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4806      	ldr	r0, [pc, #24]	; (80018a0 <HAL_SPI_MspInit+0xcc>)
 8001886:	f000 fad7 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40013000 	.word	0x40013000
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020400 	.word	0x40020400

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_UART_MspInit+0x84>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12c      	bne.n	8001920 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_UART_MspInit+0x88>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_UART_MspInit+0x88>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_UART_MspInit+0x88>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_UART_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_UART_MspInit+0x88>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_UART_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001910:	2307      	movs	r3, #7
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_UART_MspInit+0x8c>)
 800191c:	f000 fa8c 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	; 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40011000 	.word	0x40011000
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 f92e 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e00a      	b.n	80019b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019a2:	f3af 8000 	nop.w
 80019a6:	4601      	mov	r1, r0
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	60ba      	str	r2, [r7, #8]
 80019ae:	b2ca      	uxtb	r2, r1
 80019b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbf0      	blt.n	80019a2 <_read+0x12>
	}

return len;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e009      	b.n	80019f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	60ba      	str	r2, [r7, #8]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf1      	blt.n	80019dc <_write+0x12>
	}
	return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_close>:

int _close(int file)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	return -1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_isatty>:

int _isatty(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
	return 1;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <_sbrk+0x50>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x16>
		heap_end = &end;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <_sbrk+0x50>)
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <_sbrk+0x54>)
 8001a80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <_sbrk+0x50>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <_sbrk+0x50>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	466a      	mov	r2, sp
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d907      	bls.n	8001aa6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a96:	f001 fdf1 	bl	800367c <__errno>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa4:	e006      	b.n	8001ab4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <_sbrk+0x50>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a03      	ldr	r2, [pc, #12]	; (8001abc <_sbrk+0x50>)
 8001ab0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200000bc 	.word	0x200000bc
 8001ac0:	20000188 	.word	0x20000188

08001ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <SystemInit+0x28>)
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ace:	4a07      	ldr	r2, [pc, #28]	; (8001aec <SystemInit+0x28>)
 8001ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SystemInit+0x28>)
 8001ada:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ade:	609a      	str	r2, [r3, #8]
#endif
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001af4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001af6:	e003      	b.n	8001b00 <LoopCopyDataInit>

08001af8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001afa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001afc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001afe:	3104      	adds	r1, #4

08001b00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b08:	d3f6      	bcc.n	8001af8 <CopyDataInit>
  ldr  r2, =_sbss
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b0c:	e002      	b.n	8001b14 <LoopFillZerobss>

08001b0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001b0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b10:	f842 3b04 	str.w	r3, [r2], #4

08001b14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b18:	d3f9      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b1a:	f7ff ffd3 	bl	8001ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f001 fdb3 	bl	8003688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b22:	f7ff fbf1 	bl	8001308 <main>
  bx  lr    
 8001b26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b28:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001b2c:	0800b114 	.word	0x0800b114
  ldr  r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b34:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8001b38:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8001b3c:	20000188 	.word	0x20000188

08001b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <HAL_Init+0x40>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_Init+0x40>)
 8001b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_Init+0x40>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 f92f 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 f808 	bl	8001b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b78:	f7ff fe04 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x54>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_InitTick+0x58>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f939 	bl	8001e1e <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bc4:	f000 f90f 	bl	8001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_InitTick+0x5c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000030 	.word	0x20000030
 8001be0:	20000038 	.word	0x20000038
 8001be4:	20000034 	.word	0x20000034

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000038 	.word	0x20000038
 8001c0c:	20000180 	.word	0x20000180

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000180 	.word	0x20000180

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_Delay+0x40>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000038 	.word	0x20000038

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	; (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff47 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff5c 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff8e 	bl	8001d24 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffb0 	bl	8001d8c <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e165      	b.n	8002120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 8154 	bne.w	800211a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d00b      	beq.n	8001e92 <HAL_GPIO_Init+0x5a>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e86:	2b11      	cmp	r3, #17
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b12      	cmp	r3, #18
 8001e90:	d130      	bne.n	8001ef4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0201 	and.w	r2, r3, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0xfc>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b12      	cmp	r3, #18
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80ae 	beq.w	800211a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b5c      	ldr	r3, [pc, #368]	; (8002134 <HAL_GPIO_Init+0x2fc>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a5b      	ldr	r2, [pc, #364]	; (8002134 <HAL_GPIO_Init+0x2fc>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_GPIO_Init+0x2fc>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a57      	ldr	r2, [pc, #348]	; (8002138 <HAL_GPIO_Init+0x300>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4e      	ldr	r2, [pc, #312]	; (800213c <HAL_GPIO_Init+0x304>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d025      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4d      	ldr	r2, [pc, #308]	; (8002140 <HAL_GPIO_Init+0x308>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d01f      	beq.n	800204e <HAL_GPIO_Init+0x216>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4c      	ldr	r2, [pc, #304]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d019      	beq.n	800204a <HAL_GPIO_Init+0x212>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4b      	ldr	r2, [pc, #300]	; (8002148 <HAL_GPIO_Init+0x310>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4a      	ldr	r2, [pc, #296]	; (800214c <HAL_GPIO_Init+0x314>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00d      	beq.n	8002042 <HAL_GPIO_Init+0x20a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a49      	ldr	r2, [pc, #292]	; (8002150 <HAL_GPIO_Init+0x318>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x206>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a48      	ldr	r2, [pc, #288]	; (8002154 <HAL_GPIO_Init+0x31c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_GPIO_Init+0x202>
 8002036:	2306      	movs	r3, #6
 8002038:	e00c      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800203a:	2307      	movs	r3, #7
 800203c:	e00a      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800203e:	2305      	movs	r3, #5
 8002040:	e008      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 8002042:	2304      	movs	r3, #4
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 8002046:	2303      	movs	r3, #3
 8002048:	e004      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800204a:	2302      	movs	r3, #2
 800204c:	e002      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 8002052:	2300      	movs	r3, #0
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f002 0203 	and.w	r2, r2, #3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4093      	lsls	r3, r2
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002064:	4934      	ldr	r1, [pc, #208]	; (8002138 <HAL_GPIO_Init+0x300>)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002072:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_GPIO_Init+0x320>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002096:	4a30      	ldr	r2, [pc, #192]	; (8002158 <HAL_GPIO_Init+0x320>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <HAL_GPIO_Init+0x320>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c0:	4a25      	ldr	r2, [pc, #148]	; (8002158 <HAL_GPIO_Init+0x320>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_GPIO_Init+0x320>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <HAL_GPIO_Init+0x320>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_GPIO_Init+0x320>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a10      	ldr	r2, [pc, #64]	; (8002158 <HAL_GPIO_Init+0x320>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3301      	adds	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b0f      	cmp	r3, #15
 8002124:	f67f ae96 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002128:	bf00      	nop
 800212a:	3724      	adds	r7, #36	; 0x24
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40013c00 	.word	0x40013c00

0800215c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	887b      	ldrh	r3, [r7, #2]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e001      	b.n	800217e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
 8002198:	4613      	mov	r3, r2
 800219a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800219c:	787b      	ldrb	r3, [r7, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a8:	e003      	b.n	80021b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	041a      	lsls	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	619a      	str	r2, [r3, #24]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0cc      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d4:	4b68      	ldr	r3, [pc, #416]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d90c      	bls.n	80021fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b65      	ldr	r3, [pc, #404]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b63      	ldr	r3, [pc, #396]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0b8      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d020      	beq.n	800224a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002214:	4b59      	ldr	r3, [pc, #356]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4a58      	ldr	r2, [pc, #352]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800221e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800222c:	4b53      	ldr	r3, [pc, #332]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a52      	ldr	r2, [pc, #328]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002238:	4b50      	ldr	r3, [pc, #320]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	494d      	ldr	r1, [pc, #308]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d044      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d119      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e07f      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d003      	beq.n	800227e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227a:	2b03      	cmp	r3, #3
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227e:	4b3f      	ldr	r3, [pc, #252]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e06f      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228e:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e067      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800229e:	4b37      	ldr	r3, [pc, #220]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 0203 	bic.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4934      	ldr	r1, [pc, #208]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b0:	f7ff fcae 	bl	8001c10 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7ff fcaa 	bl	8001c10 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e04f      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 020c 	and.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1eb      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d20c      	bcs.n	8002308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b22      	ldr	r3, [pc, #136]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e032      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4916      	ldr	r1, [pc, #88]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	490e      	ldr	r1, [pc, #56]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002346:	f000 f821 	bl	800238c <HAL_RCC_GetSysClockFreq>
 800234a:	4601      	mov	r1, r0
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	fa21 f303 	lsr.w	r3, r1, r3
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fc0e 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023c00 	.word	0x40023c00
 800237c:	40023800 	.word	0x40023800
 8002380:	0800b088 	.word	0x0800b088
 8002384:	20000030 	.word	0x20000030
 8002388:	20000034 	.word	0x20000034

0800238c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	2300      	movs	r3, #0
 800239c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a2:	4b63      	ldr	r3, [pc, #396]	; (8002530 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d007      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0x32>
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d008      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x38>
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 80b4 	bne.w	8002520 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b8:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023ba:	60bb      	str	r3, [r7, #8]
       break;
 80023bc:	e0b3      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023be:	4b5e      	ldr	r3, [pc, #376]	; (8002538 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80023c0:	60bb      	str	r3, [r7, #8]
      break;
 80023c2:	e0b0      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c4:	4b5a      	ldr	r3, [pc, #360]	; (8002530 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ce:	4b58      	ldr	r3, [pc, #352]	; (8002530 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d04a      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023da:	4b55      	ldr	r3, [pc, #340]	; (8002530 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	099b      	lsrs	r3, r3, #6
 80023e0:	f04f 0400 	mov.w	r4, #0
 80023e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	ea03 0501 	and.w	r5, r3, r1
 80023f0:	ea04 0602 	and.w	r6, r4, r2
 80023f4:	4629      	mov	r1, r5
 80023f6:	4632      	mov	r2, r6
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	f04f 0400 	mov.w	r4, #0
 8002400:	0154      	lsls	r4, r2, #5
 8002402:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002406:	014b      	lsls	r3, r1, #5
 8002408:	4619      	mov	r1, r3
 800240a:	4622      	mov	r2, r4
 800240c:	1b49      	subs	r1, r1, r5
 800240e:	eb62 0206 	sbc.w	r2, r2, r6
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	f04f 0400 	mov.w	r4, #0
 800241a:	0194      	lsls	r4, r2, #6
 800241c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002420:	018b      	lsls	r3, r1, #6
 8002422:	1a5b      	subs	r3, r3, r1
 8002424:	eb64 0402 	sbc.w	r4, r4, r2
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	00e2      	lsls	r2, r4, #3
 8002432:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002436:	00d9      	lsls	r1, r3, #3
 8002438:	460b      	mov	r3, r1
 800243a:	4614      	mov	r4, r2
 800243c:	195b      	adds	r3, r3, r5
 800243e:	eb44 0406 	adc.w	r4, r4, r6
 8002442:	f04f 0100 	mov.w	r1, #0
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	0262      	lsls	r2, r4, #9
 800244c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002450:	0259      	lsls	r1, r3, #9
 8002452:	460b      	mov	r3, r1
 8002454:	4614      	mov	r4, r2
 8002456:	4618      	mov	r0, r3
 8002458:	4621      	mov	r1, r4
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f04f 0400 	mov.w	r4, #0
 8002460:	461a      	mov	r2, r3
 8002462:	4623      	mov	r3, r4
 8002464:	f7fd fed8 	bl	8000218 <__aeabi_uldivmod>
 8002468:	4603      	mov	r3, r0
 800246a:	460c      	mov	r4, r1
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	e049      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	f04f 0400 	mov.w	r4, #0
 800247a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	ea03 0501 	and.w	r5, r3, r1
 8002486:	ea04 0602 	and.w	r6, r4, r2
 800248a:	4629      	mov	r1, r5
 800248c:	4632      	mov	r2, r6
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	f04f 0400 	mov.w	r4, #0
 8002496:	0154      	lsls	r4, r2, #5
 8002498:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800249c:	014b      	lsls	r3, r1, #5
 800249e:	4619      	mov	r1, r3
 80024a0:	4622      	mov	r2, r4
 80024a2:	1b49      	subs	r1, r1, r5
 80024a4:	eb62 0206 	sbc.w	r2, r2, r6
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	f04f 0400 	mov.w	r4, #0
 80024b0:	0194      	lsls	r4, r2, #6
 80024b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024b6:	018b      	lsls	r3, r1, #6
 80024b8:	1a5b      	subs	r3, r3, r1
 80024ba:	eb64 0402 	sbc.w	r4, r4, r2
 80024be:	f04f 0100 	mov.w	r1, #0
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	00e2      	lsls	r2, r4, #3
 80024c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024cc:	00d9      	lsls	r1, r3, #3
 80024ce:	460b      	mov	r3, r1
 80024d0:	4614      	mov	r4, r2
 80024d2:	195b      	adds	r3, r3, r5
 80024d4:	eb44 0406 	adc.w	r4, r4, r6
 80024d8:	f04f 0100 	mov.w	r1, #0
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	02a2      	lsls	r2, r4, #10
 80024e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024e6:	0299      	lsls	r1, r3, #10
 80024e8:	460b      	mov	r3, r1
 80024ea:	4614      	mov	r4, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	4621      	mov	r1, r4
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f04f 0400 	mov.w	r4, #0
 80024f6:	461a      	mov	r2, r3
 80024f8:	4623      	mov	r3, r4
 80024fa:	f7fd fe8d 	bl	8000218 <__aeabi_uldivmod>
 80024fe:	4603      	mov	r3, r0
 8002500:	460c      	mov	r4, r1
 8002502:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	3301      	adds	r3, #1
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	60bb      	str	r3, [r7, #8]
      break;
 800251e:	e002      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002522:	60bb      	str	r3, [r7, #8]
      break;
 8002524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002526:	68bb      	ldr	r3, [r7, #8]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	00f42400 	.word	0x00f42400
 8002538:	007a1200 	.word	0x007a1200

0800253c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_RCC_GetHCLKFreq+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000030 	.word	0x20000030

08002554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002558:	f7ff fff0 	bl	800253c <HAL_RCC_GetHCLKFreq>
 800255c:	4601      	mov	r1, r0
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	0a9b      	lsrs	r3, r3, #10
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4a03      	ldr	r2, [pc, #12]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	0800b098 	.word	0x0800b098

0800257c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002580:	f7ff ffdc 	bl	800253c <HAL_RCC_GetHCLKFreq>
 8002584:	4601      	mov	r1, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	0b5b      	lsrs	r3, r3, #13
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4a03      	ldr	r2, [pc, #12]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	0800b098 	.word	0x0800b098

080025a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d075      	beq.n	80026a8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025bc:	4ba2      	ldr	r3, [pc, #648]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d00c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c8:	4b9f      	ldr	r3, [pc, #636]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d112      	bne.n	80025fa <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d4:	4b9c      	ldr	r3, [pc, #624]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e0:	d10b      	bne.n	80025fa <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e2:	4b99      	ldr	r3, [pc, #612]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d05b      	beq.n	80026a6 <HAL_RCC_OscConfig+0x102>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d157      	bne.n	80026a6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e20b      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x6e>
 8002604:	4b90      	ldr	r3, [pc, #576]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a8f      	ldr	r2, [pc, #572]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e01d      	b.n	800264e <HAL_RCC_OscConfig+0xaa>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x92>
 800261c:	4b8a      	ldr	r3, [pc, #552]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a89      	ldr	r2, [pc, #548]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b87      	ldr	r3, [pc, #540]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a86      	ldr	r2, [pc, #536]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e00b      	b.n	800264e <HAL_RCC_OscConfig+0xaa>
 8002636:	4b84      	ldr	r3, [pc, #528]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a83      	ldr	r2, [pc, #524]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800263c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b81      	ldr	r3, [pc, #516]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a80      	ldr	r2, [pc, #512]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d013      	beq.n	800267e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7ff fadb 	bl	8001c10 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265e:	f7ff fad7 	bl	8001c10 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b64      	cmp	r3, #100	; 0x64
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1d0      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002670:	4b75      	ldr	r3, [pc, #468]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0xba>
 800267c:	e014      	b.n	80026a8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7ff fac7 	bl	8001c10 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002686:	f7ff fac3 	bl	8001c10 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b64      	cmp	r3, #100	; 0x64
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e1bc      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002698:	4b6b      	ldr	r3, [pc, #428]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0xe2>
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d063      	beq.n	800277c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026b4:	4b64      	ldr	r3, [pc, #400]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c0:	4b61      	ldr	r3, [pc, #388]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d11c      	bne.n	8002706 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026cc:	4b5e      	ldr	r3, [pc, #376]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d116      	bne.n	8002706 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d8:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_OscConfig+0x14c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e190      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b55      	ldr	r3, [pc, #340]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4952      	ldr	r1, [pc, #328]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002704:	e03a      	b.n	800277c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d020      	beq.n	8002750 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270e:	4b4f      	ldr	r3, [pc, #316]	; (800284c <HAL_RCC_OscConfig+0x2a8>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7ff fa7c 	bl	8001c10 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271c:	f7ff fa78 	bl	8001c10 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e171      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272e:	4b46      	ldr	r3, [pc, #280]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b43      	ldr	r3, [pc, #268]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	493f      	ldr	r1, [pc, #252]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
 800274e:	e015      	b.n	800277c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002750:	4b3e      	ldr	r3, [pc, #248]	; (800284c <HAL_RCC_OscConfig+0x2a8>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7ff fa5b 	bl	8001c10 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275e:	f7ff fa57 	bl	8001c10 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e150      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002770:	4b35      	ldr	r3, [pc, #212]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d030      	beq.n	80027ea <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d016      	beq.n	80027be <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002790:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002796:	f7ff fa3b 	bl	8001c10 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279e:	f7ff fa37 	bl	8001c10 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e130      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b0:	4b25      	ldr	r3, [pc, #148]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80027b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x1fa>
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7ff fa24 	bl	8001c10 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027cc:	f7ff fa20 	bl	8001c10 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e119      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027de:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80027e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 809f 	beq.w	8002936 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f8:	2300      	movs	r3, #0
 80027fa:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10f      	bne.n	8002828 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002816:	6413      	str	r3, [r2, #64]	; 0x40
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002824:	2301      	movs	r3, #1
 8002826:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCC_OscConfig+0x2b0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d120      	bne.n	8002876 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <HAL_RCC_OscConfig+0x2b0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a06      	ldr	r2, [pc, #24]	; (8002854 <HAL_RCC_OscConfig+0x2b0>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002840:	f7ff f9e6 	bl	8001c10 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002846:	e010      	b.n	800286a <HAL_RCC_OscConfig+0x2c6>
 8002848:	40023800 	.word	0x40023800
 800284c:	42470000 	.word	0x42470000
 8002850:	42470e80 	.word	0x42470e80
 8002854:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002858:	f7ff f9da 	bl	8001c10 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0d3      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <HAL_RCC_OscConfig+0x478>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d106      	bne.n	800288c <HAL_RCC_OscConfig+0x2e8>
 800287e:	4b68      	ldr	r3, [pc, #416]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	4a67      	ldr	r2, [pc, #412]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6713      	str	r3, [r2, #112]	; 0x70
 800288a:	e01c      	b.n	80028c6 <HAL_RCC_OscConfig+0x322>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b05      	cmp	r3, #5
 8002892:	d10c      	bne.n	80028ae <HAL_RCC_OscConfig+0x30a>
 8002894:	4b62      	ldr	r3, [pc, #392]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	4a61      	ldr	r2, [pc, #388]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	6713      	str	r3, [r2, #112]	; 0x70
 80028a0:	4b5f      	ldr	r3, [pc, #380]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a5e      	ldr	r2, [pc, #376]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
 80028ac:	e00b      	b.n	80028c6 <HAL_RCC_OscConfig+0x322>
 80028ae:	4b5c      	ldr	r3, [pc, #368]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a5b      	ldr	r2, [pc, #364]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ba:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d015      	beq.n	80028fa <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7ff f99f 	bl	8001c10 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7ff f99b 	bl	8001c10 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e092      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ec:	4b4c      	ldr	r3, [pc, #304]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ee      	beq.n	80028d6 <HAL_RCC_OscConfig+0x332>
 80028f8:	e014      	b.n	8002924 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7ff f989 	bl	8001c10 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7ff f985 	bl	8001c10 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e07c      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002918:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ee      	bne.n	8002902 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292a:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a3c      	ldr	r2, [pc, #240]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d068      	beq.n	8002a10 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293e:	4b38      	ldr	r3, [pc, #224]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b08      	cmp	r3, #8
 8002948:	d060      	beq.n	8002a0c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d145      	bne.n	80029de <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <HAL_RCC_OscConfig+0x480>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7ff f95a 	bl	8001c10 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7ff f956 	bl	8001c10 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e04f      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	019b      	lsls	r3, r3, #6
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	3b01      	subs	r3, #1
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	071b      	lsls	r3, r3, #28
 80029aa:	491d      	ldr	r1, [pc, #116]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b0:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <HAL_RCC_OscConfig+0x480>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7ff f92b 	bl	8001c10 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029be:	f7ff f927 	bl	8001c10 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e020      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x41a>
 80029dc:	e018      	b.n	8002a10 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_RCC_OscConfig+0x480>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7ff f914 	bl	8001c10 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ec:	f7ff f910 	bl	8001c10 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e009      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_RCC_OscConfig+0x47c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x448>
 8002a0a:	e001      	b.n	8002a10 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	40023800 	.word	0x40023800
 8002a24:	42470060 	.word	0x42470060

08002a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e056      	b.n	8002ae8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7fe febd 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	ea42 0103 	orr.w	r1, r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	f003 0104 	and.w	r1, r3, #4
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69da      	ldr	r2, [r3, #28]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_SPI_Transmit+0x22>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e11e      	b.n	8002d50 <HAL_SPI_Transmit+0x260>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b1a:	f7ff f879 	bl	8001c10 <HAL_GetTick>
 8002b1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d002      	beq.n	8002b36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
 8002b32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b34:	e103      	b.n	8002d3e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_SPI_Transmit+0x52>
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d102      	bne.n	8002b48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b46:	e0fa      	b.n	8002d3e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	88fa      	ldrh	r2, [r7, #6]
 8002b66:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b8e:	d107      	bne.n	8002ba0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d007      	beq.n	8002bbe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc6:	d14b      	bne.n	8002c60 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_Transmit+0xe6>
 8002bd0:	8afb      	ldrh	r3, [r7, #22]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d13e      	bne.n	8002c54 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	881a      	ldrh	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	1c9a      	adds	r2, r3, #2
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bfa:	e02b      	b.n	8002c54 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d112      	bne.n	8002c30 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	881a      	ldrh	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	1c9a      	adds	r2, r3, #2
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c2e:	e011      	b.n	8002c54 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c30:	f7fe ffee 	bl	8001c10 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d803      	bhi.n	8002c48 <HAL_SPI_Transmit+0x158>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c46:	d102      	bne.n	8002c4e <HAL_SPI_Transmit+0x15e>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c52:	e074      	b.n	8002d3e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ce      	bne.n	8002bfc <HAL_SPI_Transmit+0x10c>
 8002c5e:	e04c      	b.n	8002cfa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_SPI_Transmit+0x17e>
 8002c68:	8afb      	ldrh	r3, [r7, #22]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d140      	bne.n	8002cf0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	330c      	adds	r3, #12
 8002c78:	7812      	ldrb	r2, [r2, #0]
 8002c7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c94:	e02c      	b.n	8002cf0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d113      	bne.n	8002ccc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	330c      	adds	r3, #12
 8002cae:	7812      	ldrb	r2, [r2, #0]
 8002cb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cca:	e011      	b.n	8002cf0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ccc:	f7fe ffa0 	bl	8001c10 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d803      	bhi.n	8002ce4 <HAL_SPI_Transmit+0x1f4>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce2:	d102      	bne.n	8002cea <HAL_SPI_Transmit+0x1fa>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cee:	e026      	b.n	8002d3e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1cd      	bne.n	8002c96 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	6839      	ldr	r1, [r7, #0]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f894 	bl	8002e2c <SPI_EndRxTxTransaction>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	77fb      	strb	r3, [r7, #31]
 8002d3a:	e000      	b.n	8002d3e <HAL_SPI_Transmit+0x24e>
  }

error:
 8002d3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3720      	adds	r7, #32
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d68:	e04c      	b.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d70:	d048      	beq.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d72:	f7fe ff4d 	bl	8001c10 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d902      	bls.n	8002d88 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d13d      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002da0:	d111      	bne.n	8002dc6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002daa:	d004      	beq.n	8002db6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db4:	d107      	bne.n	8002dc6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dce:	d10f      	bne.n	8002df0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e00f      	b.n	8002e24 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d1a3      	bne.n	8002d6a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <SPI_EndRxTxTransaction+0x7c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <SPI_EndRxTxTransaction+0x80>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	0d5b      	lsrs	r3, r3, #21
 8002e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e48:	fb02 f303 	mul.w	r3, r2, r3
 8002e4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e56:	d112      	bne.n	8002e7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7ff ff78 	bl	8002d58 <SPI_WaitFlagStateUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d016      	beq.n	8002e9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e00f      	b.n	8002e9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e94:	2b80      	cmp	r3, #128	; 0x80
 8002e96:	d0f2      	beq.n	8002e7e <SPI_EndRxTxTransaction+0x52>
 8002e98:	e000      	b.n	8002e9c <SPI_EndRxTxTransaction+0x70>
        break;
 8002e9a:	bf00      	nop
  }

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000030 	.word	0x20000030
 8002eac:	165e9f81 	.word	0x165e9f81

08002eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e03f      	b.n	8002f42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fce4 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f829 	bl	8002f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f50:	b085      	sub	sp, #20
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f8e:	f023 030c 	bic.w	r3, r3, #12
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	68f9      	ldr	r1, [r7, #12]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fba:	f040 8199 	bne.w	80032f0 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4ac6      	ldr	r2, [pc, #792]	; (80032dc <UART_SetConfig+0x390>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00f      	beq.n	8002fe8 <UART_SetConfig+0x9c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4ac4      	ldr	r2, [pc, #784]	; (80032e0 <UART_SetConfig+0x394>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00a      	beq.n	8002fe8 <UART_SetConfig+0x9c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4ac3      	ldr	r2, [pc, #780]	; (80032e4 <UART_SetConfig+0x398>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d005      	beq.n	8002fe8 <UART_SetConfig+0x9c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4ac1      	ldr	r2, [pc, #772]	; (80032e8 <UART_SetConfig+0x39c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	f040 80bd 	bne.w	8003162 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fe8:	f7ff fac8 	bl	800257c <HAL_RCC_GetPCLK2Freq>
 8002fec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	461d      	mov	r5, r3
 8002ff2:	f04f 0600 	mov.w	r6, #0
 8002ff6:	46a8      	mov	r8, r5
 8002ff8:	46b1      	mov	r9, r6
 8002ffa:	eb18 0308 	adds.w	r3, r8, r8
 8002ffe:	eb49 0409 	adc.w	r4, r9, r9
 8003002:	4698      	mov	r8, r3
 8003004:	46a1      	mov	r9, r4
 8003006:	eb18 0805 	adds.w	r8, r8, r5
 800300a:	eb49 0906 	adc.w	r9, r9, r6
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800301a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800301e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003022:	4688      	mov	r8, r1
 8003024:	4691      	mov	r9, r2
 8003026:	eb18 0005 	adds.w	r0, r8, r5
 800302a:	eb49 0106 	adc.w	r1, r9, r6
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	461d      	mov	r5, r3
 8003034:	f04f 0600 	mov.w	r6, #0
 8003038:	196b      	adds	r3, r5, r5
 800303a:	eb46 0406 	adc.w	r4, r6, r6
 800303e:	461a      	mov	r2, r3
 8003040:	4623      	mov	r3, r4
 8003042:	f7fd f8e9 	bl	8000218 <__aeabi_uldivmod>
 8003046:	4603      	mov	r3, r0
 8003048:	460c      	mov	r4, r1
 800304a:	461a      	mov	r2, r3
 800304c:	4ba7      	ldr	r3, [pc, #668]	; (80032ec <UART_SetConfig+0x3a0>)
 800304e:	fba3 2302 	umull	r2, r3, r3, r2
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	461d      	mov	r5, r3
 800305c:	f04f 0600 	mov.w	r6, #0
 8003060:	46a9      	mov	r9, r5
 8003062:	46b2      	mov	sl, r6
 8003064:	eb19 0309 	adds.w	r3, r9, r9
 8003068:	eb4a 040a 	adc.w	r4, sl, sl
 800306c:	4699      	mov	r9, r3
 800306e:	46a2      	mov	sl, r4
 8003070:	eb19 0905 	adds.w	r9, r9, r5
 8003074:	eb4a 0a06 	adc.w	sl, sl, r6
 8003078:	f04f 0100 	mov.w	r1, #0
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003084:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003088:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800308c:	4689      	mov	r9, r1
 800308e:	4692      	mov	sl, r2
 8003090:	eb19 0005 	adds.w	r0, r9, r5
 8003094:	eb4a 0106 	adc.w	r1, sl, r6
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	461d      	mov	r5, r3
 800309e:	f04f 0600 	mov.w	r6, #0
 80030a2:	196b      	adds	r3, r5, r5
 80030a4:	eb46 0406 	adc.w	r4, r6, r6
 80030a8:	461a      	mov	r2, r3
 80030aa:	4623      	mov	r3, r4
 80030ac:	f7fd f8b4 	bl	8000218 <__aeabi_uldivmod>
 80030b0:	4603      	mov	r3, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b8d      	ldr	r3, [pc, #564]	; (80032ec <UART_SetConfig+0x3a0>)
 80030b8:	fba3 1302 	umull	r1, r3, r3, r2
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	2164      	movs	r1, #100	; 0x64
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	3332      	adds	r3, #50	; 0x32
 80030ca:	4a88      	ldr	r2, [pc, #544]	; (80032ec <UART_SetConfig+0x3a0>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030d8:	4498      	add	r8, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	461d      	mov	r5, r3
 80030de:	f04f 0600 	mov.w	r6, #0
 80030e2:	46a9      	mov	r9, r5
 80030e4:	46b2      	mov	sl, r6
 80030e6:	eb19 0309 	adds.w	r3, r9, r9
 80030ea:	eb4a 040a 	adc.w	r4, sl, sl
 80030ee:	4699      	mov	r9, r3
 80030f0:	46a2      	mov	sl, r4
 80030f2:	eb19 0905 	adds.w	r9, r9, r5
 80030f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800310a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800310e:	4689      	mov	r9, r1
 8003110:	4692      	mov	sl, r2
 8003112:	eb19 0005 	adds.w	r0, r9, r5
 8003116:	eb4a 0106 	adc.w	r1, sl, r6
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	461d      	mov	r5, r3
 8003120:	f04f 0600 	mov.w	r6, #0
 8003124:	196b      	adds	r3, r5, r5
 8003126:	eb46 0406 	adc.w	r4, r6, r6
 800312a:	461a      	mov	r2, r3
 800312c:	4623      	mov	r3, r4
 800312e:	f7fd f873 	bl	8000218 <__aeabi_uldivmod>
 8003132:	4603      	mov	r3, r0
 8003134:	460c      	mov	r4, r1
 8003136:	461a      	mov	r2, r3
 8003138:	4b6c      	ldr	r3, [pc, #432]	; (80032ec <UART_SetConfig+0x3a0>)
 800313a:	fba3 1302 	umull	r1, r3, r3, r2
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2164      	movs	r1, #100	; 0x64
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	3332      	adds	r3, #50	; 0x32
 800314c:	4a67      	ldr	r2, [pc, #412]	; (80032ec <UART_SetConfig+0x3a0>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	f003 0207 	and.w	r2, r3, #7
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4442      	add	r2, r8
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	e27d      	b.n	800365e <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003162:	f7ff f9f7 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8003166:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	461d      	mov	r5, r3
 800316c:	f04f 0600 	mov.w	r6, #0
 8003170:	46a8      	mov	r8, r5
 8003172:	46b1      	mov	r9, r6
 8003174:	eb18 0308 	adds.w	r3, r8, r8
 8003178:	eb49 0409 	adc.w	r4, r9, r9
 800317c:	4698      	mov	r8, r3
 800317e:	46a1      	mov	r9, r4
 8003180:	eb18 0805 	adds.w	r8, r8, r5
 8003184:	eb49 0906 	adc.w	r9, r9, r6
 8003188:	f04f 0100 	mov.w	r1, #0
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003194:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003198:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800319c:	4688      	mov	r8, r1
 800319e:	4691      	mov	r9, r2
 80031a0:	eb18 0005 	adds.w	r0, r8, r5
 80031a4:	eb49 0106 	adc.w	r1, r9, r6
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	461d      	mov	r5, r3
 80031ae:	f04f 0600 	mov.w	r6, #0
 80031b2:	196b      	adds	r3, r5, r5
 80031b4:	eb46 0406 	adc.w	r4, r6, r6
 80031b8:	461a      	mov	r2, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	f7fd f82c 	bl	8000218 <__aeabi_uldivmod>
 80031c0:	4603      	mov	r3, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b49      	ldr	r3, [pc, #292]	; (80032ec <UART_SetConfig+0x3a0>)
 80031c8:	fba3 2302 	umull	r2, r3, r3, r2
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	461d      	mov	r5, r3
 80031d6:	f04f 0600 	mov.w	r6, #0
 80031da:	46a9      	mov	r9, r5
 80031dc:	46b2      	mov	sl, r6
 80031de:	eb19 0309 	adds.w	r3, r9, r9
 80031e2:	eb4a 040a 	adc.w	r4, sl, sl
 80031e6:	4699      	mov	r9, r3
 80031e8:	46a2      	mov	sl, r4
 80031ea:	eb19 0905 	adds.w	r9, r9, r5
 80031ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80031f2:	f04f 0100 	mov.w	r1, #0
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003202:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003206:	4689      	mov	r9, r1
 8003208:	4692      	mov	sl, r2
 800320a:	eb19 0005 	adds.w	r0, r9, r5
 800320e:	eb4a 0106 	adc.w	r1, sl, r6
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	461d      	mov	r5, r3
 8003218:	f04f 0600 	mov.w	r6, #0
 800321c:	196b      	adds	r3, r5, r5
 800321e:	eb46 0406 	adc.w	r4, r6, r6
 8003222:	461a      	mov	r2, r3
 8003224:	4623      	mov	r3, r4
 8003226:	f7fc fff7 	bl	8000218 <__aeabi_uldivmod>
 800322a:	4603      	mov	r3, r0
 800322c:	460c      	mov	r4, r1
 800322e:	461a      	mov	r2, r3
 8003230:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <UART_SetConfig+0x3a0>)
 8003232:	fba3 1302 	umull	r1, r3, r3, r2
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2164      	movs	r1, #100	; 0x64
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	3332      	adds	r3, #50	; 0x32
 8003244:	4a29      	ldr	r2, [pc, #164]	; (80032ec <UART_SetConfig+0x3a0>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003252:	4498      	add	r8, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	461d      	mov	r5, r3
 8003258:	f04f 0600 	mov.w	r6, #0
 800325c:	46a9      	mov	r9, r5
 800325e:	46b2      	mov	sl, r6
 8003260:	eb19 0309 	adds.w	r3, r9, r9
 8003264:	eb4a 040a 	adc.w	r4, sl, sl
 8003268:	4699      	mov	r9, r3
 800326a:	46a2      	mov	sl, r4
 800326c:	eb19 0905 	adds.w	r9, r9, r5
 8003270:	eb4a 0a06 	adc.w	sl, sl, r6
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003280:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003284:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003288:	4689      	mov	r9, r1
 800328a:	4692      	mov	sl, r2
 800328c:	eb19 0005 	adds.w	r0, r9, r5
 8003290:	eb4a 0106 	adc.w	r1, sl, r6
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	461d      	mov	r5, r3
 800329a:	f04f 0600 	mov.w	r6, #0
 800329e:	196b      	adds	r3, r5, r5
 80032a0:	eb46 0406 	adc.w	r4, r6, r6
 80032a4:	461a      	mov	r2, r3
 80032a6:	4623      	mov	r3, r4
 80032a8:	f7fc ffb6 	bl	8000218 <__aeabi_uldivmod>
 80032ac:	4603      	mov	r3, r0
 80032ae:	460c      	mov	r4, r1
 80032b0:	461a      	mov	r2, r3
 80032b2:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <UART_SetConfig+0x3a0>)
 80032b4:	fba3 1302 	umull	r1, r3, r3, r2
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	2164      	movs	r1, #100	; 0x64
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	3332      	adds	r3, #50	; 0x32
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <UART_SetConfig+0x3a0>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	f003 0207 	and.w	r2, r3, #7
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4442      	add	r2, r8
 80032d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80032da:	e1c0      	b.n	800365e <UART_SetConfig+0x712>
 80032dc:	40011000 	.word	0x40011000
 80032e0:	40011400 	.word	0x40011400
 80032e4:	40011800 	.word	0x40011800
 80032e8:	40011c00 	.word	0x40011c00
 80032ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4adc      	ldr	r2, [pc, #880]	; (8003668 <UART_SetConfig+0x71c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00f      	beq.n	800331a <UART_SetConfig+0x3ce>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4adb      	ldr	r2, [pc, #876]	; (800366c <UART_SetConfig+0x720>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00a      	beq.n	800331a <UART_SetConfig+0x3ce>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4ad9      	ldr	r2, [pc, #868]	; (8003670 <UART_SetConfig+0x724>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d005      	beq.n	800331a <UART_SetConfig+0x3ce>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4ad8      	ldr	r2, [pc, #864]	; (8003674 <UART_SetConfig+0x728>)
 8003314:	4293      	cmp	r3, r2
 8003316:	f040 80d1 	bne.w	80034bc <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800331a:	f7ff f92f 	bl	800257c <HAL_RCC_GetPCLK2Freq>
 800331e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	469a      	mov	sl, r3
 8003324:	f04f 0b00 	mov.w	fp, #0
 8003328:	46d0      	mov	r8, sl
 800332a:	46d9      	mov	r9, fp
 800332c:	eb18 0308 	adds.w	r3, r8, r8
 8003330:	eb49 0409 	adc.w	r4, r9, r9
 8003334:	4698      	mov	r8, r3
 8003336:	46a1      	mov	r9, r4
 8003338:	eb18 080a 	adds.w	r8, r8, sl
 800333c:	eb49 090b 	adc.w	r9, r9, fp
 8003340:	f04f 0100 	mov.w	r1, #0
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800334c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003350:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003354:	4688      	mov	r8, r1
 8003356:	4691      	mov	r9, r2
 8003358:	eb1a 0508 	adds.w	r5, sl, r8
 800335c:	eb4b 0609 	adc.w	r6, fp, r9
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4619      	mov	r1, r3
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	f04f 0400 	mov.w	r4, #0
 8003372:	0094      	lsls	r4, r2, #2
 8003374:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003378:	008b      	lsls	r3, r1, #2
 800337a:	461a      	mov	r2, r3
 800337c:	4623      	mov	r3, r4
 800337e:	4628      	mov	r0, r5
 8003380:	4631      	mov	r1, r6
 8003382:	f7fc ff49 	bl	8000218 <__aeabi_uldivmod>
 8003386:	4603      	mov	r3, r0
 8003388:	460c      	mov	r4, r1
 800338a:	461a      	mov	r2, r3
 800338c:	4bba      	ldr	r3, [pc, #744]	; (8003678 <UART_SetConfig+0x72c>)
 800338e:	fba3 2302 	umull	r2, r3, r3, r2
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	469b      	mov	fp, r3
 800339c:	f04f 0c00 	mov.w	ip, #0
 80033a0:	46d9      	mov	r9, fp
 80033a2:	46e2      	mov	sl, ip
 80033a4:	eb19 0309 	adds.w	r3, r9, r9
 80033a8:	eb4a 040a 	adc.w	r4, sl, sl
 80033ac:	4699      	mov	r9, r3
 80033ae:	46a2      	mov	sl, r4
 80033b0:	eb19 090b 	adds.w	r9, r9, fp
 80033b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033b8:	f04f 0100 	mov.w	r1, #0
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033cc:	4689      	mov	r9, r1
 80033ce:	4692      	mov	sl, r2
 80033d0:	eb1b 0509 	adds.w	r5, fp, r9
 80033d4:	eb4c 060a 	adc.w	r6, ip, sl
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4619      	mov	r1, r3
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	f04f 0400 	mov.w	r4, #0
 80033ea:	0094      	lsls	r4, r2, #2
 80033ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033f0:	008b      	lsls	r3, r1, #2
 80033f2:	461a      	mov	r2, r3
 80033f4:	4623      	mov	r3, r4
 80033f6:	4628      	mov	r0, r5
 80033f8:	4631      	mov	r1, r6
 80033fa:	f7fc ff0d 	bl	8000218 <__aeabi_uldivmod>
 80033fe:	4603      	mov	r3, r0
 8003400:	460c      	mov	r4, r1
 8003402:	461a      	mov	r2, r3
 8003404:	4b9c      	ldr	r3, [pc, #624]	; (8003678 <UART_SetConfig+0x72c>)
 8003406:	fba3 1302 	umull	r1, r3, r3, r2
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2164      	movs	r1, #100	; 0x64
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	3332      	adds	r3, #50	; 0x32
 8003418:	4a97      	ldr	r2, [pc, #604]	; (8003678 <UART_SetConfig+0x72c>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003424:	4498      	add	r8, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	469b      	mov	fp, r3
 800342a:	f04f 0c00 	mov.w	ip, #0
 800342e:	46d9      	mov	r9, fp
 8003430:	46e2      	mov	sl, ip
 8003432:	eb19 0309 	adds.w	r3, r9, r9
 8003436:	eb4a 040a 	adc.w	r4, sl, sl
 800343a:	4699      	mov	r9, r3
 800343c:	46a2      	mov	sl, r4
 800343e:	eb19 090b 	adds.w	r9, r9, fp
 8003442:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003452:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003456:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800345a:	4689      	mov	r9, r1
 800345c:	4692      	mov	sl, r2
 800345e:	eb1b 0509 	adds.w	r5, fp, r9
 8003462:	eb4c 060a 	adc.w	r6, ip, sl
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4619      	mov	r1, r3
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f04f 0400 	mov.w	r4, #0
 8003478:	0094      	lsls	r4, r2, #2
 800347a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800347e:	008b      	lsls	r3, r1, #2
 8003480:	461a      	mov	r2, r3
 8003482:	4623      	mov	r3, r4
 8003484:	4628      	mov	r0, r5
 8003486:	4631      	mov	r1, r6
 8003488:	f7fc fec6 	bl	8000218 <__aeabi_uldivmod>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	461a      	mov	r2, r3
 8003492:	4b79      	ldr	r3, [pc, #484]	; (8003678 <UART_SetConfig+0x72c>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	4a74      	ldr	r2, [pc, #464]	; (8003678 <UART_SetConfig+0x72c>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	f003 020f 	and.w	r2, r3, #15
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4442      	add	r2, r8
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	e0d0      	b.n	800365e <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80034bc:	f7ff f84a 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 80034c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	469a      	mov	sl, r3
 80034c6:	f04f 0b00 	mov.w	fp, #0
 80034ca:	46d0      	mov	r8, sl
 80034cc:	46d9      	mov	r9, fp
 80034ce:	eb18 0308 	adds.w	r3, r8, r8
 80034d2:	eb49 0409 	adc.w	r4, r9, r9
 80034d6:	4698      	mov	r8, r3
 80034d8:	46a1      	mov	r9, r4
 80034da:	eb18 080a 	adds.w	r8, r8, sl
 80034de:	eb49 090b 	adc.w	r9, r9, fp
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034f6:	4688      	mov	r8, r1
 80034f8:	4691      	mov	r9, r2
 80034fa:	eb1a 0508 	adds.w	r5, sl, r8
 80034fe:	eb4b 0609 	adc.w	r6, fp, r9
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4619      	mov	r1, r3
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	f04f 0400 	mov.w	r4, #0
 8003514:	0094      	lsls	r4, r2, #2
 8003516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800351a:	008b      	lsls	r3, r1, #2
 800351c:	461a      	mov	r2, r3
 800351e:	4623      	mov	r3, r4
 8003520:	4628      	mov	r0, r5
 8003522:	4631      	mov	r1, r6
 8003524:	f7fc fe78 	bl	8000218 <__aeabi_uldivmod>
 8003528:	4603      	mov	r3, r0
 800352a:	460c      	mov	r4, r1
 800352c:	461a      	mov	r2, r3
 800352e:	4b52      	ldr	r3, [pc, #328]	; (8003678 <UART_SetConfig+0x72c>)
 8003530:	fba3 2302 	umull	r2, r3, r3, r2
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	469b      	mov	fp, r3
 800353e:	f04f 0c00 	mov.w	ip, #0
 8003542:	46d9      	mov	r9, fp
 8003544:	46e2      	mov	sl, ip
 8003546:	eb19 0309 	adds.w	r3, r9, r9
 800354a:	eb4a 040a 	adc.w	r4, sl, sl
 800354e:	4699      	mov	r9, r3
 8003550:	46a2      	mov	sl, r4
 8003552:	eb19 090b 	adds.w	r9, r9, fp
 8003556:	eb4a 0a0c 	adc.w	sl, sl, ip
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800356a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800356e:	4689      	mov	r9, r1
 8003570:	4692      	mov	sl, r2
 8003572:	eb1b 0509 	adds.w	r5, fp, r9
 8003576:	eb4c 060a 	adc.w	r6, ip, sl
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4619      	mov	r1, r3
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	f04f 0400 	mov.w	r4, #0
 800358c:	0094      	lsls	r4, r2, #2
 800358e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003592:	008b      	lsls	r3, r1, #2
 8003594:	461a      	mov	r2, r3
 8003596:	4623      	mov	r3, r4
 8003598:	4628      	mov	r0, r5
 800359a:	4631      	mov	r1, r6
 800359c:	f7fc fe3c 	bl	8000218 <__aeabi_uldivmod>
 80035a0:	4603      	mov	r3, r0
 80035a2:	460c      	mov	r4, r1
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b34      	ldr	r3, [pc, #208]	; (8003678 <UART_SetConfig+0x72c>)
 80035a8:	fba3 1302 	umull	r1, r3, r3, r2
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	2164      	movs	r1, #100	; 0x64
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	3332      	adds	r3, #50	; 0x32
 80035ba:	4a2f      	ldr	r2, [pc, #188]	; (8003678 <UART_SetConfig+0x72c>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c6:	4498      	add	r8, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	469b      	mov	fp, r3
 80035cc:	f04f 0c00 	mov.w	ip, #0
 80035d0:	46d9      	mov	r9, fp
 80035d2:	46e2      	mov	sl, ip
 80035d4:	eb19 0309 	adds.w	r3, r9, r9
 80035d8:	eb4a 040a 	adc.w	r4, sl, sl
 80035dc:	4699      	mov	r9, r3
 80035de:	46a2      	mov	sl, r4
 80035e0:	eb19 090b 	adds.w	r9, r9, fp
 80035e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035e8:	f04f 0100 	mov.w	r1, #0
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035fc:	4689      	mov	r9, r1
 80035fe:	4692      	mov	sl, r2
 8003600:	eb1b 0509 	adds.w	r5, fp, r9
 8003604:	eb4c 060a 	adc.w	r6, ip, sl
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4619      	mov	r1, r3
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	f04f 0400 	mov.w	r4, #0
 800361a:	0094      	lsls	r4, r2, #2
 800361c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003620:	008b      	lsls	r3, r1, #2
 8003622:	461a      	mov	r2, r3
 8003624:	4623      	mov	r3, r4
 8003626:	4628      	mov	r0, r5
 8003628:	4631      	mov	r1, r6
 800362a:	f7fc fdf5 	bl	8000218 <__aeabi_uldivmod>
 800362e:	4603      	mov	r3, r0
 8003630:	460c      	mov	r4, r1
 8003632:	461a      	mov	r2, r3
 8003634:	4b10      	ldr	r3, [pc, #64]	; (8003678 <UART_SetConfig+0x72c>)
 8003636:	fba3 1302 	umull	r1, r3, r3, r2
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2164      	movs	r1, #100	; 0x64
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	3332      	adds	r3, #50	; 0x32
 8003648:	4a0b      	ldr	r2, [pc, #44]	; (8003678 <UART_SetConfig+0x72c>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4442      	add	r2, r8
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	e7ff      	b.n	800365e <UART_SetConfig+0x712>
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003668:	40011000 	.word	0x40011000
 800366c:	40011400 	.word	0x40011400
 8003670:	40011800 	.word	0x40011800
 8003674:	40011c00 	.word	0x40011c00
 8003678:	51eb851f 	.word	0x51eb851f

0800367c <__errno>:
 800367c:	4b01      	ldr	r3, [pc, #4]	; (8003684 <__errno+0x8>)
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	2000003c 	.word	0x2000003c

08003688 <__libc_init_array>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	4e0d      	ldr	r6, [pc, #52]	; (80036c0 <__libc_init_array+0x38>)
 800368c:	4c0d      	ldr	r4, [pc, #52]	; (80036c4 <__libc_init_array+0x3c>)
 800368e:	1ba4      	subs	r4, r4, r6
 8003690:	10a4      	asrs	r4, r4, #2
 8003692:	2500      	movs	r5, #0
 8003694:	42a5      	cmp	r5, r4
 8003696:	d109      	bne.n	80036ac <__libc_init_array+0x24>
 8003698:	4e0b      	ldr	r6, [pc, #44]	; (80036c8 <__libc_init_array+0x40>)
 800369a:	4c0c      	ldr	r4, [pc, #48]	; (80036cc <__libc_init_array+0x44>)
 800369c:	f000 fc90 	bl	8003fc0 <_init>
 80036a0:	1ba4      	subs	r4, r4, r6
 80036a2:	10a4      	asrs	r4, r4, #2
 80036a4:	2500      	movs	r5, #0
 80036a6:	42a5      	cmp	r5, r4
 80036a8:	d105      	bne.n	80036b6 <__libc_init_array+0x2e>
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
 80036ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036b0:	4798      	blx	r3
 80036b2:	3501      	adds	r5, #1
 80036b4:	e7ee      	b.n	8003694 <__libc_init_array+0xc>
 80036b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ba:	4798      	blx	r3
 80036bc:	3501      	adds	r5, #1
 80036be:	e7f2      	b.n	80036a6 <__libc_init_array+0x1e>
 80036c0:	0800b10c 	.word	0x0800b10c
 80036c4:	0800b10c 	.word	0x0800b10c
 80036c8:	0800b10c 	.word	0x0800b10c
 80036cc:	0800b110 	.word	0x0800b110

080036d0 <malloc>:
 80036d0:	4b02      	ldr	r3, [pc, #8]	; (80036dc <malloc+0xc>)
 80036d2:	4601      	mov	r1, r0
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	f000 b859 	b.w	800378c <_malloc_r>
 80036da:	bf00      	nop
 80036dc:	2000003c 	.word	0x2000003c

080036e0 <memset>:
 80036e0:	4402      	add	r2, r0
 80036e2:	4603      	mov	r3, r0
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d100      	bne.n	80036ea <memset+0xa>
 80036e8:	4770      	bx	lr
 80036ea:	f803 1b01 	strb.w	r1, [r3], #1
 80036ee:	e7f9      	b.n	80036e4 <memset+0x4>

080036f0 <_free_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	4605      	mov	r5, r0
 80036f4:	2900      	cmp	r1, #0
 80036f6:	d045      	beq.n	8003784 <_free_r+0x94>
 80036f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036fc:	1f0c      	subs	r4, r1, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bfb8      	it	lt
 8003702:	18e4      	addlt	r4, r4, r3
 8003704:	f000 fbae 	bl	8003e64 <__malloc_lock>
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <_free_r+0x98>)
 800370a:	6813      	ldr	r3, [r2, #0]
 800370c:	4610      	mov	r0, r2
 800370e:	b933      	cbnz	r3, 800371e <_free_r+0x2e>
 8003710:	6063      	str	r3, [r4, #4]
 8003712:	6014      	str	r4, [r2, #0]
 8003714:	4628      	mov	r0, r5
 8003716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800371a:	f000 bba4 	b.w	8003e66 <__malloc_unlock>
 800371e:	42a3      	cmp	r3, r4
 8003720:	d90c      	bls.n	800373c <_free_r+0x4c>
 8003722:	6821      	ldr	r1, [r4, #0]
 8003724:	1862      	adds	r2, r4, r1
 8003726:	4293      	cmp	r3, r2
 8003728:	bf04      	itt	eq
 800372a:	681a      	ldreq	r2, [r3, #0]
 800372c:	685b      	ldreq	r3, [r3, #4]
 800372e:	6063      	str	r3, [r4, #4]
 8003730:	bf04      	itt	eq
 8003732:	1852      	addeq	r2, r2, r1
 8003734:	6022      	streq	r2, [r4, #0]
 8003736:	6004      	str	r4, [r0, #0]
 8003738:	e7ec      	b.n	8003714 <_free_r+0x24>
 800373a:	4613      	mov	r3, r2
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	b10a      	cbz	r2, 8003744 <_free_r+0x54>
 8003740:	42a2      	cmp	r2, r4
 8003742:	d9fa      	bls.n	800373a <_free_r+0x4a>
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	1858      	adds	r0, r3, r1
 8003748:	42a0      	cmp	r0, r4
 800374a:	d10b      	bne.n	8003764 <_free_r+0x74>
 800374c:	6820      	ldr	r0, [r4, #0]
 800374e:	4401      	add	r1, r0
 8003750:	1858      	adds	r0, r3, r1
 8003752:	4282      	cmp	r2, r0
 8003754:	6019      	str	r1, [r3, #0]
 8003756:	d1dd      	bne.n	8003714 <_free_r+0x24>
 8003758:	6810      	ldr	r0, [r2, #0]
 800375a:	6852      	ldr	r2, [r2, #4]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	4401      	add	r1, r0
 8003760:	6019      	str	r1, [r3, #0]
 8003762:	e7d7      	b.n	8003714 <_free_r+0x24>
 8003764:	d902      	bls.n	800376c <_free_r+0x7c>
 8003766:	230c      	movs	r3, #12
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	e7d3      	b.n	8003714 <_free_r+0x24>
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	1821      	adds	r1, r4, r0
 8003770:	428a      	cmp	r2, r1
 8003772:	bf04      	itt	eq
 8003774:	6811      	ldreq	r1, [r2, #0]
 8003776:	6852      	ldreq	r2, [r2, #4]
 8003778:	6062      	str	r2, [r4, #4]
 800377a:	bf04      	itt	eq
 800377c:	1809      	addeq	r1, r1, r0
 800377e:	6021      	streq	r1, [r4, #0]
 8003780:	605c      	str	r4, [r3, #4]
 8003782:	e7c7      	b.n	8003714 <_free_r+0x24>
 8003784:	bd38      	pop	{r3, r4, r5, pc}
 8003786:	bf00      	nop
 8003788:	200000c0 	.word	0x200000c0

0800378c <_malloc_r>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	1ccd      	adds	r5, r1, #3
 8003790:	f025 0503 	bic.w	r5, r5, #3
 8003794:	3508      	adds	r5, #8
 8003796:	2d0c      	cmp	r5, #12
 8003798:	bf38      	it	cc
 800379a:	250c      	movcc	r5, #12
 800379c:	2d00      	cmp	r5, #0
 800379e:	4606      	mov	r6, r0
 80037a0:	db01      	blt.n	80037a6 <_malloc_r+0x1a>
 80037a2:	42a9      	cmp	r1, r5
 80037a4:	d903      	bls.n	80037ae <_malloc_r+0x22>
 80037a6:	230c      	movs	r3, #12
 80037a8:	6033      	str	r3, [r6, #0]
 80037aa:	2000      	movs	r0, #0
 80037ac:	bd70      	pop	{r4, r5, r6, pc}
 80037ae:	f000 fb59 	bl	8003e64 <__malloc_lock>
 80037b2:	4a21      	ldr	r2, [pc, #132]	; (8003838 <_malloc_r+0xac>)
 80037b4:	6814      	ldr	r4, [r2, #0]
 80037b6:	4621      	mov	r1, r4
 80037b8:	b991      	cbnz	r1, 80037e0 <_malloc_r+0x54>
 80037ba:	4c20      	ldr	r4, [pc, #128]	; (800383c <_malloc_r+0xb0>)
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	b91b      	cbnz	r3, 80037c8 <_malloc_r+0x3c>
 80037c0:	4630      	mov	r0, r6
 80037c2:	f000 f8a1 	bl	8003908 <_sbrk_r>
 80037c6:	6020      	str	r0, [r4, #0]
 80037c8:	4629      	mov	r1, r5
 80037ca:	4630      	mov	r0, r6
 80037cc:	f000 f89c 	bl	8003908 <_sbrk_r>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d124      	bne.n	800381e <_malloc_r+0x92>
 80037d4:	230c      	movs	r3, #12
 80037d6:	6033      	str	r3, [r6, #0]
 80037d8:	4630      	mov	r0, r6
 80037da:	f000 fb44 	bl	8003e66 <__malloc_unlock>
 80037de:	e7e4      	b.n	80037aa <_malloc_r+0x1e>
 80037e0:	680b      	ldr	r3, [r1, #0]
 80037e2:	1b5b      	subs	r3, r3, r5
 80037e4:	d418      	bmi.n	8003818 <_malloc_r+0x8c>
 80037e6:	2b0b      	cmp	r3, #11
 80037e8:	d90f      	bls.n	800380a <_malloc_r+0x7e>
 80037ea:	600b      	str	r3, [r1, #0]
 80037ec:	50cd      	str	r5, [r1, r3]
 80037ee:	18cc      	adds	r4, r1, r3
 80037f0:	4630      	mov	r0, r6
 80037f2:	f000 fb38 	bl	8003e66 <__malloc_unlock>
 80037f6:	f104 000b 	add.w	r0, r4, #11
 80037fa:	1d23      	adds	r3, r4, #4
 80037fc:	f020 0007 	bic.w	r0, r0, #7
 8003800:	1ac3      	subs	r3, r0, r3
 8003802:	d0d3      	beq.n	80037ac <_malloc_r+0x20>
 8003804:	425a      	negs	r2, r3
 8003806:	50e2      	str	r2, [r4, r3]
 8003808:	e7d0      	b.n	80037ac <_malloc_r+0x20>
 800380a:	428c      	cmp	r4, r1
 800380c:	684b      	ldr	r3, [r1, #4]
 800380e:	bf16      	itet	ne
 8003810:	6063      	strne	r3, [r4, #4]
 8003812:	6013      	streq	r3, [r2, #0]
 8003814:	460c      	movne	r4, r1
 8003816:	e7eb      	b.n	80037f0 <_malloc_r+0x64>
 8003818:	460c      	mov	r4, r1
 800381a:	6849      	ldr	r1, [r1, #4]
 800381c:	e7cc      	b.n	80037b8 <_malloc_r+0x2c>
 800381e:	1cc4      	adds	r4, r0, #3
 8003820:	f024 0403 	bic.w	r4, r4, #3
 8003824:	42a0      	cmp	r0, r4
 8003826:	d005      	beq.n	8003834 <_malloc_r+0xa8>
 8003828:	1a21      	subs	r1, r4, r0
 800382a:	4630      	mov	r0, r6
 800382c:	f000 f86c 	bl	8003908 <_sbrk_r>
 8003830:	3001      	adds	r0, #1
 8003832:	d0cf      	beq.n	80037d4 <_malloc_r+0x48>
 8003834:	6025      	str	r5, [r4, #0]
 8003836:	e7db      	b.n	80037f0 <_malloc_r+0x64>
 8003838:	200000c0 	.word	0x200000c0
 800383c:	200000c4 	.word	0x200000c4

08003840 <_puts_r>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	460e      	mov	r6, r1
 8003844:	4605      	mov	r5, r0
 8003846:	b118      	cbz	r0, 8003850 <_puts_r+0x10>
 8003848:	6983      	ldr	r3, [r0, #24]
 800384a:	b90b      	cbnz	r3, 8003850 <_puts_r+0x10>
 800384c:	f000 fa1c 	bl	8003c88 <__sinit>
 8003850:	69ab      	ldr	r3, [r5, #24]
 8003852:	68ac      	ldr	r4, [r5, #8]
 8003854:	b913      	cbnz	r3, 800385c <_puts_r+0x1c>
 8003856:	4628      	mov	r0, r5
 8003858:	f000 fa16 	bl	8003c88 <__sinit>
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <_puts_r+0xac>)
 800385e:	429c      	cmp	r4, r3
 8003860:	d117      	bne.n	8003892 <_puts_r+0x52>
 8003862:	686c      	ldr	r4, [r5, #4]
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	071b      	lsls	r3, r3, #28
 8003868:	d51d      	bpl.n	80038a6 <_puts_r+0x66>
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	b1db      	cbz	r3, 80038a6 <_puts_r+0x66>
 800386e:	3e01      	subs	r6, #1
 8003870:	68a3      	ldr	r3, [r4, #8]
 8003872:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003876:	3b01      	subs	r3, #1
 8003878:	60a3      	str	r3, [r4, #8]
 800387a:	b9e9      	cbnz	r1, 80038b8 <_puts_r+0x78>
 800387c:	2b00      	cmp	r3, #0
 800387e:	da2e      	bge.n	80038de <_puts_r+0x9e>
 8003880:	4622      	mov	r2, r4
 8003882:	210a      	movs	r1, #10
 8003884:	4628      	mov	r0, r5
 8003886:	f000 f84f 	bl	8003928 <__swbuf_r>
 800388a:	3001      	adds	r0, #1
 800388c:	d011      	beq.n	80038b2 <_puts_r+0x72>
 800388e:	200a      	movs	r0, #10
 8003890:	e011      	b.n	80038b6 <_puts_r+0x76>
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <_puts_r+0xb0>)
 8003894:	429c      	cmp	r4, r3
 8003896:	d101      	bne.n	800389c <_puts_r+0x5c>
 8003898:	68ac      	ldr	r4, [r5, #8]
 800389a:	e7e3      	b.n	8003864 <_puts_r+0x24>
 800389c:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <_puts_r+0xb4>)
 800389e:	429c      	cmp	r4, r3
 80038a0:	bf08      	it	eq
 80038a2:	68ec      	ldreq	r4, [r5, #12]
 80038a4:	e7de      	b.n	8003864 <_puts_r+0x24>
 80038a6:	4621      	mov	r1, r4
 80038a8:	4628      	mov	r0, r5
 80038aa:	f000 f88f 	bl	80039cc <__swsetup_r>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d0dd      	beq.n	800386e <_puts_r+0x2e>
 80038b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	da04      	bge.n	80038c6 <_puts_r+0x86>
 80038bc:	69a2      	ldr	r2, [r4, #24]
 80038be:	429a      	cmp	r2, r3
 80038c0:	dc06      	bgt.n	80038d0 <_puts_r+0x90>
 80038c2:	290a      	cmp	r1, #10
 80038c4:	d004      	beq.n	80038d0 <_puts_r+0x90>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	6022      	str	r2, [r4, #0]
 80038cc:	7019      	strb	r1, [r3, #0]
 80038ce:	e7cf      	b.n	8003870 <_puts_r+0x30>
 80038d0:	4622      	mov	r2, r4
 80038d2:	4628      	mov	r0, r5
 80038d4:	f000 f828 	bl	8003928 <__swbuf_r>
 80038d8:	3001      	adds	r0, #1
 80038da:	d1c9      	bne.n	8003870 <_puts_r+0x30>
 80038dc:	e7e9      	b.n	80038b2 <_puts_r+0x72>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	200a      	movs	r0, #10
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	6022      	str	r2, [r4, #0]
 80038e6:	7018      	strb	r0, [r3, #0]
 80038e8:	e7e5      	b.n	80038b6 <_puts_r+0x76>
 80038ea:	bf00      	nop
 80038ec:	0800b0c4 	.word	0x0800b0c4
 80038f0:	0800b0e4 	.word	0x0800b0e4
 80038f4:	0800b0a4 	.word	0x0800b0a4

080038f8 <puts>:
 80038f8:	4b02      	ldr	r3, [pc, #8]	; (8003904 <puts+0xc>)
 80038fa:	4601      	mov	r1, r0
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	f7ff bf9f 	b.w	8003840 <_puts_r>
 8003902:	bf00      	nop
 8003904:	2000003c 	.word	0x2000003c

08003908 <_sbrk_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4c06      	ldr	r4, [pc, #24]	; (8003924 <_sbrk_r+0x1c>)
 800390c:	2300      	movs	r3, #0
 800390e:	4605      	mov	r5, r0
 8003910:	4608      	mov	r0, r1
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	f7fe f8aa 	bl	8001a6c <_sbrk>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_sbrk_r+0x1a>
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	b103      	cbz	r3, 8003922 <_sbrk_r+0x1a>
 8003920:	602b      	str	r3, [r5, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	20000184 	.word	0x20000184

08003928 <__swbuf_r>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	460e      	mov	r6, r1
 800392c:	4614      	mov	r4, r2
 800392e:	4605      	mov	r5, r0
 8003930:	b118      	cbz	r0, 800393a <__swbuf_r+0x12>
 8003932:	6983      	ldr	r3, [r0, #24]
 8003934:	b90b      	cbnz	r3, 800393a <__swbuf_r+0x12>
 8003936:	f000 f9a7 	bl	8003c88 <__sinit>
 800393a:	4b21      	ldr	r3, [pc, #132]	; (80039c0 <__swbuf_r+0x98>)
 800393c:	429c      	cmp	r4, r3
 800393e:	d12a      	bne.n	8003996 <__swbuf_r+0x6e>
 8003940:	686c      	ldr	r4, [r5, #4]
 8003942:	69a3      	ldr	r3, [r4, #24]
 8003944:	60a3      	str	r3, [r4, #8]
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	071a      	lsls	r2, r3, #28
 800394a:	d52e      	bpl.n	80039aa <__swbuf_r+0x82>
 800394c:	6923      	ldr	r3, [r4, #16]
 800394e:	b363      	cbz	r3, 80039aa <__swbuf_r+0x82>
 8003950:	6923      	ldr	r3, [r4, #16]
 8003952:	6820      	ldr	r0, [r4, #0]
 8003954:	1ac0      	subs	r0, r0, r3
 8003956:	6963      	ldr	r3, [r4, #20]
 8003958:	b2f6      	uxtb	r6, r6
 800395a:	4283      	cmp	r3, r0
 800395c:	4637      	mov	r7, r6
 800395e:	dc04      	bgt.n	800396a <__swbuf_r+0x42>
 8003960:	4621      	mov	r1, r4
 8003962:	4628      	mov	r0, r5
 8003964:	f000 f926 	bl	8003bb4 <_fflush_r>
 8003968:	bb28      	cbnz	r0, 80039b6 <__swbuf_r+0x8e>
 800396a:	68a3      	ldr	r3, [r4, #8]
 800396c:	3b01      	subs	r3, #1
 800396e:	60a3      	str	r3, [r4, #8]
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	6022      	str	r2, [r4, #0]
 8003976:	701e      	strb	r6, [r3, #0]
 8003978:	6963      	ldr	r3, [r4, #20]
 800397a:	3001      	adds	r0, #1
 800397c:	4283      	cmp	r3, r0
 800397e:	d004      	beq.n	800398a <__swbuf_r+0x62>
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	07db      	lsls	r3, r3, #31
 8003984:	d519      	bpl.n	80039ba <__swbuf_r+0x92>
 8003986:	2e0a      	cmp	r6, #10
 8003988:	d117      	bne.n	80039ba <__swbuf_r+0x92>
 800398a:	4621      	mov	r1, r4
 800398c:	4628      	mov	r0, r5
 800398e:	f000 f911 	bl	8003bb4 <_fflush_r>
 8003992:	b190      	cbz	r0, 80039ba <__swbuf_r+0x92>
 8003994:	e00f      	b.n	80039b6 <__swbuf_r+0x8e>
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <__swbuf_r+0x9c>)
 8003998:	429c      	cmp	r4, r3
 800399a:	d101      	bne.n	80039a0 <__swbuf_r+0x78>
 800399c:	68ac      	ldr	r4, [r5, #8]
 800399e:	e7d0      	b.n	8003942 <__swbuf_r+0x1a>
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <__swbuf_r+0xa0>)
 80039a2:	429c      	cmp	r4, r3
 80039a4:	bf08      	it	eq
 80039a6:	68ec      	ldreq	r4, [r5, #12]
 80039a8:	e7cb      	b.n	8003942 <__swbuf_r+0x1a>
 80039aa:	4621      	mov	r1, r4
 80039ac:	4628      	mov	r0, r5
 80039ae:	f000 f80d 	bl	80039cc <__swsetup_r>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d0cc      	beq.n	8003950 <__swbuf_r+0x28>
 80039b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80039ba:	4638      	mov	r0, r7
 80039bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039be:	bf00      	nop
 80039c0:	0800b0c4 	.word	0x0800b0c4
 80039c4:	0800b0e4 	.word	0x0800b0e4
 80039c8:	0800b0a4 	.word	0x0800b0a4

080039cc <__swsetup_r>:
 80039cc:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <__swsetup_r+0xcc>)
 80039ce:	b570      	push	{r4, r5, r6, lr}
 80039d0:	681d      	ldr	r5, [r3, #0]
 80039d2:	4606      	mov	r6, r0
 80039d4:	460c      	mov	r4, r1
 80039d6:	b125      	cbz	r5, 80039e2 <__swsetup_r+0x16>
 80039d8:	69ab      	ldr	r3, [r5, #24]
 80039da:	b913      	cbnz	r3, 80039e2 <__swsetup_r+0x16>
 80039dc:	4628      	mov	r0, r5
 80039de:	f000 f953 	bl	8003c88 <__sinit>
 80039e2:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <__swsetup_r+0xd0>)
 80039e4:	429c      	cmp	r4, r3
 80039e6:	d10f      	bne.n	8003a08 <__swsetup_r+0x3c>
 80039e8:	686c      	ldr	r4, [r5, #4]
 80039ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	0715      	lsls	r5, r2, #28
 80039f2:	d42c      	bmi.n	8003a4e <__swsetup_r+0x82>
 80039f4:	06d0      	lsls	r0, r2, #27
 80039f6:	d411      	bmi.n	8003a1c <__swsetup_r+0x50>
 80039f8:	2209      	movs	r2, #9
 80039fa:	6032      	str	r2, [r6, #0]
 80039fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a00:	81a3      	strh	r3, [r4, #12]
 8003a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a06:	e03e      	b.n	8003a86 <__swsetup_r+0xba>
 8003a08:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <__swsetup_r+0xd4>)
 8003a0a:	429c      	cmp	r4, r3
 8003a0c:	d101      	bne.n	8003a12 <__swsetup_r+0x46>
 8003a0e:	68ac      	ldr	r4, [r5, #8]
 8003a10:	e7eb      	b.n	80039ea <__swsetup_r+0x1e>
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <__swsetup_r+0xd8>)
 8003a14:	429c      	cmp	r4, r3
 8003a16:	bf08      	it	eq
 8003a18:	68ec      	ldreq	r4, [r5, #12]
 8003a1a:	e7e6      	b.n	80039ea <__swsetup_r+0x1e>
 8003a1c:	0751      	lsls	r1, r2, #29
 8003a1e:	d512      	bpl.n	8003a46 <__swsetup_r+0x7a>
 8003a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a22:	b141      	cbz	r1, 8003a36 <__swsetup_r+0x6a>
 8003a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a28:	4299      	cmp	r1, r3
 8003a2a:	d002      	beq.n	8003a32 <__swsetup_r+0x66>
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	f7ff fe5f 	bl	80036f0 <_free_r>
 8003a32:	2300      	movs	r3, #0
 8003a34:	6363      	str	r3, [r4, #52]	; 0x34
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a3c:	81a3      	strh	r3, [r4, #12]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	6063      	str	r3, [r4, #4]
 8003a42:	6923      	ldr	r3, [r4, #16]
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	89a3      	ldrh	r3, [r4, #12]
 8003a48:	f043 0308 	orr.w	r3, r3, #8
 8003a4c:	81a3      	strh	r3, [r4, #12]
 8003a4e:	6923      	ldr	r3, [r4, #16]
 8003a50:	b94b      	cbnz	r3, 8003a66 <__swsetup_r+0x9a>
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5c:	d003      	beq.n	8003a66 <__swsetup_r+0x9a>
 8003a5e:	4621      	mov	r1, r4
 8003a60:	4630      	mov	r0, r6
 8003a62:	f000 f9bf 	bl	8003de4 <__smakebuf_r>
 8003a66:	89a2      	ldrh	r2, [r4, #12]
 8003a68:	f012 0301 	ands.w	r3, r2, #1
 8003a6c:	d00c      	beq.n	8003a88 <__swsetup_r+0xbc>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60a3      	str	r3, [r4, #8]
 8003a72:	6963      	ldr	r3, [r4, #20]
 8003a74:	425b      	negs	r3, r3
 8003a76:	61a3      	str	r3, [r4, #24]
 8003a78:	6923      	ldr	r3, [r4, #16]
 8003a7a:	b953      	cbnz	r3, 8003a92 <__swsetup_r+0xc6>
 8003a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a80:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003a84:	d1ba      	bne.n	80039fc <__swsetup_r+0x30>
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
 8003a88:	0792      	lsls	r2, r2, #30
 8003a8a:	bf58      	it	pl
 8003a8c:	6963      	ldrpl	r3, [r4, #20]
 8003a8e:	60a3      	str	r3, [r4, #8]
 8003a90:	e7f2      	b.n	8003a78 <__swsetup_r+0xac>
 8003a92:	2000      	movs	r0, #0
 8003a94:	e7f7      	b.n	8003a86 <__swsetup_r+0xba>
 8003a96:	bf00      	nop
 8003a98:	2000003c 	.word	0x2000003c
 8003a9c:	0800b0c4 	.word	0x0800b0c4
 8003aa0:	0800b0e4 	.word	0x0800b0e4
 8003aa4:	0800b0a4 	.word	0x0800b0a4

08003aa8 <__sflush_r>:
 8003aa8:	898a      	ldrh	r2, [r1, #12]
 8003aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aae:	4605      	mov	r5, r0
 8003ab0:	0710      	lsls	r0, r2, #28
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	d458      	bmi.n	8003b68 <__sflush_r+0xc0>
 8003ab6:	684b      	ldr	r3, [r1, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	dc05      	bgt.n	8003ac8 <__sflush_r+0x20>
 8003abc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	dc02      	bgt.n	8003ac8 <__sflush_r+0x20>
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003aca:	2e00      	cmp	r6, #0
 8003acc:	d0f9      	beq.n	8003ac2 <__sflush_r+0x1a>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ad4:	682f      	ldr	r7, [r5, #0]
 8003ad6:	6a21      	ldr	r1, [r4, #32]
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	d032      	beq.n	8003b42 <__sflush_r+0x9a>
 8003adc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	075a      	lsls	r2, r3, #29
 8003ae2:	d505      	bpl.n	8003af0 <__sflush_r+0x48>
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	1ac0      	subs	r0, r0, r3
 8003ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003aea:	b10b      	cbz	r3, 8003af0 <__sflush_r+0x48>
 8003aec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003aee:	1ac0      	subs	r0, r0, r3
 8003af0:	2300      	movs	r3, #0
 8003af2:	4602      	mov	r2, r0
 8003af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003af6:	6a21      	ldr	r1, [r4, #32]
 8003af8:	4628      	mov	r0, r5
 8003afa:	47b0      	blx	r6
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	d106      	bne.n	8003b10 <__sflush_r+0x68>
 8003b02:	6829      	ldr	r1, [r5, #0]
 8003b04:	291d      	cmp	r1, #29
 8003b06:	d848      	bhi.n	8003b9a <__sflush_r+0xf2>
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <__sflush_r+0x108>)
 8003b0a:	40ca      	lsrs	r2, r1
 8003b0c:	07d6      	lsls	r6, r2, #31
 8003b0e:	d544      	bpl.n	8003b9a <__sflush_r+0xf2>
 8003b10:	2200      	movs	r2, #0
 8003b12:	6062      	str	r2, [r4, #4]
 8003b14:	04d9      	lsls	r1, r3, #19
 8003b16:	6922      	ldr	r2, [r4, #16]
 8003b18:	6022      	str	r2, [r4, #0]
 8003b1a:	d504      	bpl.n	8003b26 <__sflush_r+0x7e>
 8003b1c:	1c42      	adds	r2, r0, #1
 8003b1e:	d101      	bne.n	8003b24 <__sflush_r+0x7c>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b903      	cbnz	r3, 8003b26 <__sflush_r+0x7e>
 8003b24:	6560      	str	r0, [r4, #84]	; 0x54
 8003b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b28:	602f      	str	r7, [r5, #0]
 8003b2a:	2900      	cmp	r1, #0
 8003b2c:	d0c9      	beq.n	8003ac2 <__sflush_r+0x1a>
 8003b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b32:	4299      	cmp	r1, r3
 8003b34:	d002      	beq.n	8003b3c <__sflush_r+0x94>
 8003b36:	4628      	mov	r0, r5
 8003b38:	f7ff fdda 	bl	80036f0 <_free_r>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	6360      	str	r0, [r4, #52]	; 0x34
 8003b40:	e7c0      	b.n	8003ac4 <__sflush_r+0x1c>
 8003b42:	2301      	movs	r3, #1
 8003b44:	4628      	mov	r0, r5
 8003b46:	47b0      	blx	r6
 8003b48:	1c41      	adds	r1, r0, #1
 8003b4a:	d1c8      	bne.n	8003ade <__sflush_r+0x36>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0c5      	beq.n	8003ade <__sflush_r+0x36>
 8003b52:	2b1d      	cmp	r3, #29
 8003b54:	d001      	beq.n	8003b5a <__sflush_r+0xb2>
 8003b56:	2b16      	cmp	r3, #22
 8003b58:	d101      	bne.n	8003b5e <__sflush_r+0xb6>
 8003b5a:	602f      	str	r7, [r5, #0]
 8003b5c:	e7b1      	b.n	8003ac2 <__sflush_r+0x1a>
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	e7ad      	b.n	8003ac4 <__sflush_r+0x1c>
 8003b68:	690f      	ldr	r7, [r1, #16]
 8003b6a:	2f00      	cmp	r7, #0
 8003b6c:	d0a9      	beq.n	8003ac2 <__sflush_r+0x1a>
 8003b6e:	0793      	lsls	r3, r2, #30
 8003b70:	680e      	ldr	r6, [r1, #0]
 8003b72:	bf08      	it	eq
 8003b74:	694b      	ldreq	r3, [r1, #20]
 8003b76:	600f      	str	r7, [r1, #0]
 8003b78:	bf18      	it	ne
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	eba6 0807 	sub.w	r8, r6, r7
 8003b80:	608b      	str	r3, [r1, #8]
 8003b82:	f1b8 0f00 	cmp.w	r8, #0
 8003b86:	dd9c      	ble.n	8003ac2 <__sflush_r+0x1a>
 8003b88:	4643      	mov	r3, r8
 8003b8a:	463a      	mov	r2, r7
 8003b8c:	6a21      	ldr	r1, [r4, #32]
 8003b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b90:	4628      	mov	r0, r5
 8003b92:	47b0      	blx	r6
 8003b94:	2800      	cmp	r0, #0
 8003b96:	dc06      	bgt.n	8003ba6 <__sflush_r+0xfe>
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b9e:	81a3      	strh	r3, [r4, #12]
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba4:	e78e      	b.n	8003ac4 <__sflush_r+0x1c>
 8003ba6:	4407      	add	r7, r0
 8003ba8:	eba8 0800 	sub.w	r8, r8, r0
 8003bac:	e7e9      	b.n	8003b82 <__sflush_r+0xda>
 8003bae:	bf00      	nop
 8003bb0:	20400001 	.word	0x20400001

08003bb4 <_fflush_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	690b      	ldr	r3, [r1, #16]
 8003bb8:	4605      	mov	r5, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	b1db      	cbz	r3, 8003bf6 <_fflush_r+0x42>
 8003bbe:	b118      	cbz	r0, 8003bc8 <_fflush_r+0x14>
 8003bc0:	6983      	ldr	r3, [r0, #24]
 8003bc2:	b90b      	cbnz	r3, 8003bc8 <_fflush_r+0x14>
 8003bc4:	f000 f860 	bl	8003c88 <__sinit>
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <_fflush_r+0x48>)
 8003bca:	429c      	cmp	r4, r3
 8003bcc:	d109      	bne.n	8003be2 <_fflush_r+0x2e>
 8003bce:	686c      	ldr	r4, [r5, #4]
 8003bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bd4:	b17b      	cbz	r3, 8003bf6 <_fflush_r+0x42>
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	4628      	mov	r0, r5
 8003bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bde:	f7ff bf63 	b.w	8003aa8 <__sflush_r>
 8003be2:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <_fflush_r+0x4c>)
 8003be4:	429c      	cmp	r4, r3
 8003be6:	d101      	bne.n	8003bec <_fflush_r+0x38>
 8003be8:	68ac      	ldr	r4, [r5, #8]
 8003bea:	e7f1      	b.n	8003bd0 <_fflush_r+0x1c>
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <_fflush_r+0x50>)
 8003bee:	429c      	cmp	r4, r3
 8003bf0:	bf08      	it	eq
 8003bf2:	68ec      	ldreq	r4, [r5, #12]
 8003bf4:	e7ec      	b.n	8003bd0 <_fflush_r+0x1c>
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	bd38      	pop	{r3, r4, r5, pc}
 8003bfa:	bf00      	nop
 8003bfc:	0800b0c4 	.word	0x0800b0c4
 8003c00:	0800b0e4 	.word	0x0800b0e4
 8003c04:	0800b0a4 	.word	0x0800b0a4

08003c08 <std>:
 8003c08:	2300      	movs	r3, #0
 8003c0a:	b510      	push	{r4, lr}
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c12:	6083      	str	r3, [r0, #8]
 8003c14:	8181      	strh	r1, [r0, #12]
 8003c16:	6643      	str	r3, [r0, #100]	; 0x64
 8003c18:	81c2      	strh	r2, [r0, #14]
 8003c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c1e:	6183      	str	r3, [r0, #24]
 8003c20:	4619      	mov	r1, r3
 8003c22:	2208      	movs	r2, #8
 8003c24:	305c      	adds	r0, #92	; 0x5c
 8003c26:	f7ff fd5b 	bl	80036e0 <memset>
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <std+0x38>)
 8003c2c:	6263      	str	r3, [r4, #36]	; 0x24
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <std+0x3c>)
 8003c30:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <std+0x40>)
 8003c34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <std+0x44>)
 8003c38:	6224      	str	r4, [r4, #32]
 8003c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8003c3c:	bd10      	pop	{r4, pc}
 8003c3e:	bf00      	nop
 8003c40:	08003e69 	.word	0x08003e69
 8003c44:	08003e8b 	.word	0x08003e8b
 8003c48:	08003ec3 	.word	0x08003ec3
 8003c4c:	08003ee7 	.word	0x08003ee7

08003c50 <_cleanup_r>:
 8003c50:	4901      	ldr	r1, [pc, #4]	; (8003c58 <_cleanup_r+0x8>)
 8003c52:	f000 b885 	b.w	8003d60 <_fwalk_reent>
 8003c56:	bf00      	nop
 8003c58:	08003bb5 	.word	0x08003bb5

08003c5c <__sfmoreglue>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	1e4a      	subs	r2, r1, #1
 8003c60:	2568      	movs	r5, #104	; 0x68
 8003c62:	4355      	muls	r5, r2
 8003c64:	460e      	mov	r6, r1
 8003c66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c6a:	f7ff fd8f 	bl	800378c <_malloc_r>
 8003c6e:	4604      	mov	r4, r0
 8003c70:	b140      	cbz	r0, 8003c84 <__sfmoreglue+0x28>
 8003c72:	2100      	movs	r1, #0
 8003c74:	e9c0 1600 	strd	r1, r6, [r0]
 8003c78:	300c      	adds	r0, #12
 8003c7a:	60a0      	str	r0, [r4, #8]
 8003c7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c80:	f7ff fd2e 	bl	80036e0 <memset>
 8003c84:	4620      	mov	r0, r4
 8003c86:	bd70      	pop	{r4, r5, r6, pc}

08003c88 <__sinit>:
 8003c88:	6983      	ldr	r3, [r0, #24]
 8003c8a:	b510      	push	{r4, lr}
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	bb33      	cbnz	r3, 8003cde <__sinit+0x56>
 8003c90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003c94:	6503      	str	r3, [r0, #80]	; 0x50
 8003c96:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <__sinit+0x58>)
 8003c98:	4a12      	ldr	r2, [pc, #72]	; (8003ce4 <__sinit+0x5c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6282      	str	r2, [r0, #40]	; 0x28
 8003c9e:	4298      	cmp	r0, r3
 8003ca0:	bf04      	itt	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	6183      	streq	r3, [r0, #24]
 8003ca6:	f000 f81f 	bl	8003ce8 <__sfp>
 8003caa:	6060      	str	r0, [r4, #4]
 8003cac:	4620      	mov	r0, r4
 8003cae:	f000 f81b 	bl	8003ce8 <__sfp>
 8003cb2:	60a0      	str	r0, [r4, #8]
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f000 f817 	bl	8003ce8 <__sfp>
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60e0      	str	r0, [r4, #12]
 8003cbe:	2104      	movs	r1, #4
 8003cc0:	6860      	ldr	r0, [r4, #4]
 8003cc2:	f7ff ffa1 	bl	8003c08 <std>
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	2109      	movs	r1, #9
 8003cca:	68a0      	ldr	r0, [r4, #8]
 8003ccc:	f7ff ff9c 	bl	8003c08 <std>
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	2112      	movs	r1, #18
 8003cd4:	68e0      	ldr	r0, [r4, #12]
 8003cd6:	f7ff ff97 	bl	8003c08 <std>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61a3      	str	r3, [r4, #24]
 8003cde:	bd10      	pop	{r4, pc}
 8003ce0:	0800b0a0 	.word	0x0800b0a0
 8003ce4:	08003c51 	.word	0x08003c51

08003ce8 <__sfp>:
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <__sfp+0x70>)
 8003cec:	681e      	ldr	r6, [r3, #0]
 8003cee:	69b3      	ldr	r3, [r6, #24]
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	b913      	cbnz	r3, 8003cfa <__sfp+0x12>
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f7ff ffc7 	bl	8003c88 <__sinit>
 8003cfa:	3648      	adds	r6, #72	; 0x48
 8003cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	d503      	bpl.n	8003d0c <__sfp+0x24>
 8003d04:	6833      	ldr	r3, [r6, #0]
 8003d06:	b133      	cbz	r3, 8003d16 <__sfp+0x2e>
 8003d08:	6836      	ldr	r6, [r6, #0]
 8003d0a:	e7f7      	b.n	8003cfc <__sfp+0x14>
 8003d0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d10:	b16d      	cbz	r5, 8003d2e <__sfp+0x46>
 8003d12:	3468      	adds	r4, #104	; 0x68
 8003d14:	e7f4      	b.n	8003d00 <__sfp+0x18>
 8003d16:	2104      	movs	r1, #4
 8003d18:	4638      	mov	r0, r7
 8003d1a:	f7ff ff9f 	bl	8003c5c <__sfmoreglue>
 8003d1e:	6030      	str	r0, [r6, #0]
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d1f1      	bne.n	8003d08 <__sfp+0x20>
 8003d24:	230c      	movs	r3, #12
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4604      	mov	r4, r0
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <__sfp+0x74>)
 8003d30:	6665      	str	r5, [r4, #100]	; 0x64
 8003d32:	e9c4 5500 	strd	r5, r5, [r4]
 8003d36:	60a5      	str	r5, [r4, #8]
 8003d38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003d3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003d40:	2208      	movs	r2, #8
 8003d42:	4629      	mov	r1, r5
 8003d44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d48:	f7ff fcca 	bl	80036e0 <memset>
 8003d4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d54:	e7e9      	b.n	8003d2a <__sfp+0x42>
 8003d56:	bf00      	nop
 8003d58:	0800b0a0 	.word	0x0800b0a0
 8003d5c:	ffff0001 	.word	0xffff0001

08003d60 <_fwalk_reent>:
 8003d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d64:	4680      	mov	r8, r0
 8003d66:	4689      	mov	r9, r1
 8003d68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d6c:	2600      	movs	r6, #0
 8003d6e:	b914      	cbnz	r4, 8003d76 <_fwalk_reent+0x16>
 8003d70:	4630      	mov	r0, r6
 8003d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003d7a:	3f01      	subs	r7, #1
 8003d7c:	d501      	bpl.n	8003d82 <_fwalk_reent+0x22>
 8003d7e:	6824      	ldr	r4, [r4, #0]
 8003d80:	e7f5      	b.n	8003d6e <_fwalk_reent+0xe>
 8003d82:	89ab      	ldrh	r3, [r5, #12]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d907      	bls.n	8003d98 <_fwalk_reent+0x38>
 8003d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	d003      	beq.n	8003d98 <_fwalk_reent+0x38>
 8003d90:	4629      	mov	r1, r5
 8003d92:	4640      	mov	r0, r8
 8003d94:	47c8      	blx	r9
 8003d96:	4306      	orrs	r6, r0
 8003d98:	3568      	adds	r5, #104	; 0x68
 8003d9a:	e7ee      	b.n	8003d7a <_fwalk_reent+0x1a>

08003d9c <__swhatbuf_r>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	460e      	mov	r6, r1
 8003da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da4:	2900      	cmp	r1, #0
 8003da6:	b096      	sub	sp, #88	; 0x58
 8003da8:	4614      	mov	r4, r2
 8003daa:	461d      	mov	r5, r3
 8003dac:	da07      	bge.n	8003dbe <__swhatbuf_r+0x22>
 8003dae:	2300      	movs	r3, #0
 8003db0:	602b      	str	r3, [r5, #0]
 8003db2:	89b3      	ldrh	r3, [r6, #12]
 8003db4:	061a      	lsls	r2, r3, #24
 8003db6:	d410      	bmi.n	8003dda <__swhatbuf_r+0x3e>
 8003db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dbc:	e00e      	b.n	8003ddc <__swhatbuf_r+0x40>
 8003dbe:	466a      	mov	r2, sp
 8003dc0:	f000 f8b8 	bl	8003f34 <_fstat_r>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	dbf2      	blt.n	8003dae <__swhatbuf_r+0x12>
 8003dc8:	9a01      	ldr	r2, [sp, #4]
 8003dca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003dce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003dd2:	425a      	negs	r2, r3
 8003dd4:	415a      	adcs	r2, r3
 8003dd6:	602a      	str	r2, [r5, #0]
 8003dd8:	e7ee      	b.n	8003db8 <__swhatbuf_r+0x1c>
 8003dda:	2340      	movs	r3, #64	; 0x40
 8003ddc:	2000      	movs	r0, #0
 8003dde:	6023      	str	r3, [r4, #0]
 8003de0:	b016      	add	sp, #88	; 0x58
 8003de2:	bd70      	pop	{r4, r5, r6, pc}

08003de4 <__smakebuf_r>:
 8003de4:	898b      	ldrh	r3, [r1, #12]
 8003de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003de8:	079d      	lsls	r5, r3, #30
 8003dea:	4606      	mov	r6, r0
 8003dec:	460c      	mov	r4, r1
 8003dee:	d507      	bpl.n	8003e00 <__smakebuf_r+0x1c>
 8003df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	6123      	str	r3, [r4, #16]
 8003df8:	2301      	movs	r3, #1
 8003dfa:	6163      	str	r3, [r4, #20]
 8003dfc:	b002      	add	sp, #8
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	ab01      	add	r3, sp, #4
 8003e02:	466a      	mov	r2, sp
 8003e04:	f7ff ffca 	bl	8003d9c <__swhatbuf_r>
 8003e08:	9900      	ldr	r1, [sp, #0]
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f7ff fcbd 	bl	800378c <_malloc_r>
 8003e12:	b948      	cbnz	r0, 8003e28 <__smakebuf_r+0x44>
 8003e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e18:	059a      	lsls	r2, r3, #22
 8003e1a:	d4ef      	bmi.n	8003dfc <__smakebuf_r+0x18>
 8003e1c:	f023 0303 	bic.w	r3, r3, #3
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	81a3      	strh	r3, [r4, #12]
 8003e26:	e7e3      	b.n	8003df0 <__smakebuf_r+0xc>
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <__smakebuf_r+0x7c>)
 8003e2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	6020      	str	r0, [r4, #0]
 8003e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e34:	81a3      	strh	r3, [r4, #12]
 8003e36:	9b00      	ldr	r3, [sp, #0]
 8003e38:	6163      	str	r3, [r4, #20]
 8003e3a:	9b01      	ldr	r3, [sp, #4]
 8003e3c:	6120      	str	r0, [r4, #16]
 8003e3e:	b15b      	cbz	r3, 8003e58 <__smakebuf_r+0x74>
 8003e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e44:	4630      	mov	r0, r6
 8003e46:	f000 f887 	bl	8003f58 <_isatty_r>
 8003e4a:	b128      	cbz	r0, 8003e58 <__smakebuf_r+0x74>
 8003e4c:	89a3      	ldrh	r3, [r4, #12]
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	81a3      	strh	r3, [r4, #12]
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	431d      	orrs	r5, r3
 8003e5c:	81a5      	strh	r5, [r4, #12]
 8003e5e:	e7cd      	b.n	8003dfc <__smakebuf_r+0x18>
 8003e60:	08003c51 	.word	0x08003c51

08003e64 <__malloc_lock>:
 8003e64:	4770      	bx	lr

08003e66 <__malloc_unlock>:
 8003e66:	4770      	bx	lr

08003e68 <__sread>:
 8003e68:	b510      	push	{r4, lr}
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e70:	f000 f894 	bl	8003f9c <_read_r>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	bfab      	itete	ge
 8003e78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e7a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e7c:	181b      	addge	r3, r3, r0
 8003e7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e82:	bfac      	ite	ge
 8003e84:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e86:	81a3      	strhlt	r3, [r4, #12]
 8003e88:	bd10      	pop	{r4, pc}

08003e8a <__swrite>:
 8003e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8e:	461f      	mov	r7, r3
 8003e90:	898b      	ldrh	r3, [r1, #12]
 8003e92:	05db      	lsls	r3, r3, #23
 8003e94:	4605      	mov	r5, r0
 8003e96:	460c      	mov	r4, r1
 8003e98:	4616      	mov	r6, r2
 8003e9a:	d505      	bpl.n	8003ea8 <__swrite+0x1e>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea4:	f000 f868 	bl	8003f78 <_lseek_r>
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	4632      	mov	r2, r6
 8003eb6:	463b      	mov	r3, r7
 8003eb8:	4628      	mov	r0, r5
 8003eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ebe:	f000 b817 	b.w	8003ef0 <_write_r>

08003ec2 <__sseek>:
 8003ec2:	b510      	push	{r4, lr}
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eca:	f000 f855 	bl	8003f78 <_lseek_r>
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	bf15      	itete	ne
 8003ed4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ede:	81a3      	strheq	r3, [r4, #12]
 8003ee0:	bf18      	it	ne
 8003ee2:	81a3      	strhne	r3, [r4, #12]
 8003ee4:	bd10      	pop	{r4, pc}

08003ee6 <__sclose>:
 8003ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eea:	f000 b813 	b.w	8003f14 <_close_r>
	...

08003ef0 <_write_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4c07      	ldr	r4, [pc, #28]	; (8003f10 <_write_r+0x20>)
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	4608      	mov	r0, r1
 8003ef8:	4611      	mov	r1, r2
 8003efa:	2200      	movs	r2, #0
 8003efc:	6022      	str	r2, [r4, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	f7fd fd63 	bl	80019ca <_write>
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	d102      	bne.n	8003f0e <_write_r+0x1e>
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	b103      	cbz	r3, 8003f0e <_write_r+0x1e>
 8003f0c:	602b      	str	r3, [r5, #0]
 8003f0e:	bd38      	pop	{r3, r4, r5, pc}
 8003f10:	20000184 	.word	0x20000184

08003f14 <_close_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4c06      	ldr	r4, [pc, #24]	; (8003f30 <_close_r+0x1c>)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4605      	mov	r5, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	6023      	str	r3, [r4, #0]
 8003f20:	f7fd fd6f 	bl	8001a02 <_close>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_close_r+0x1a>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_close_r+0x1a>
 8003f2c:	602b      	str	r3, [r5, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	20000184 	.word	0x20000184

08003f34 <_fstat_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4c07      	ldr	r4, [pc, #28]	; (8003f54 <_fstat_r+0x20>)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	f7fd fd6a 	bl	8001a1a <_fstat>
 8003f46:	1c43      	adds	r3, r0, #1
 8003f48:	d102      	bne.n	8003f50 <_fstat_r+0x1c>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	b103      	cbz	r3, 8003f50 <_fstat_r+0x1c>
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	bd38      	pop	{r3, r4, r5, pc}
 8003f52:	bf00      	nop
 8003f54:	20000184 	.word	0x20000184

08003f58 <_isatty_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4c06      	ldr	r4, [pc, #24]	; (8003f74 <_isatty_r+0x1c>)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	4605      	mov	r5, r0
 8003f60:	4608      	mov	r0, r1
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	f7fd fd69 	bl	8001a3a <_isatty>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_isatty_r+0x1a>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_isatty_r+0x1a>
 8003f70:	602b      	str	r3, [r5, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	20000184 	.word	0x20000184

08003f78 <_lseek_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	4c07      	ldr	r4, [pc, #28]	; (8003f98 <_lseek_r+0x20>)
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	4608      	mov	r0, r1
 8003f80:	4611      	mov	r1, r2
 8003f82:	2200      	movs	r2, #0
 8003f84:	6022      	str	r2, [r4, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f7fd fd62 	bl	8001a50 <_lseek>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_lseek_r+0x1e>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_lseek_r+0x1e>
 8003f94:	602b      	str	r3, [r5, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	20000184 	.word	0x20000184

08003f9c <_read_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4c07      	ldr	r4, [pc, #28]	; (8003fbc <_read_r+0x20>)
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	4608      	mov	r0, r1
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	6022      	str	r2, [r4, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f7fd fcf0 	bl	8001990 <_read>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_read_r+0x1e>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_read_r+0x1e>
 8003fb8:	602b      	str	r3, [r5, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	20000184 	.word	0x20000184

08003fc0 <_init>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	bf00      	nop
 8003fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc6:	bc08      	pop	{r3}
 8003fc8:	469e      	mov	lr, r3
 8003fca:	4770      	bx	lr

08003fcc <_fini>:
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	bf00      	nop
 8003fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd2:	bc08      	pop	{r3}
 8003fd4:	469e      	mov	lr, r3
 8003fd6:	4770      	bx	lr
