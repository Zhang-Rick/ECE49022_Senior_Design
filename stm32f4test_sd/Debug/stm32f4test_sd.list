
stm32f4test_sd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006624  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  080067fc  080067fc  000167fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd4  08006cd4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cdc  08006cdc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cdc  08006cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004404  20000024  08006d08  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004428  08006d08  00024428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec40  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000220e  00000000  00000000  0002ec94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  00030ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  000318a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000217b4  00000000  00000000  00032180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b324  00000000  00000000  00053934  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4b21  00000000  00000000  0005ec58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002850  00000000  00000000  001237f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080067e4 	.word	0x080067e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	080067e4 	.word	0x080067e4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 b972 	b.w	8000cf0 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	4688      	mov	r8, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d14b      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a32:	428a      	cmp	r2, r1
 8000a34:	4615      	mov	r5, r2
 8000a36:	d967      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	b14a      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a3e:	f1c2 0720 	rsb	r7, r2, #32
 8000a42:	fa01 f302 	lsl.w	r3, r1, r2
 8000a46:	fa20 f707 	lsr.w	r7, r0, r7
 8000a4a:	4095      	lsls	r5, r2
 8000a4c:	ea47 0803 	orr.w	r8, r7, r3
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a5c:	fa1f fc85 	uxth.w	ip, r5
 8000a60:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a68:	fb07 f10c 	mul.w	r1, r7, ip
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18eb      	adds	r3, r5, r3
 8000a72:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a76:	f080 811b 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8118 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000a80:	3f02      	subs	r7, #2
 8000a82:	442b      	add	r3, r5
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a98:	45a4      	cmp	ip, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	192c      	adds	r4, r5, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aa2:	f080 8107 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	f240 8104 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000aac:	3802      	subs	r0, #2
 8000aae:	442c      	add	r4, r5
 8000ab0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ab4:	eba4 040c 	sub.w	r4, r4, ip
 8000ab8:	2700      	movs	r7, #0
 8000aba:	b11e      	cbz	r6, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d909      	bls.n	8000ae2 <__udivmoddi4+0xbe>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80eb 	beq.w	8000caa <__udivmoddi4+0x286>
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	e9c6 0100 	strd	r0, r1, [r6]
 8000ada:	4638      	mov	r0, r7
 8000adc:	4639      	mov	r1, r7
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	fab3 f783 	clz	r7, r3
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d147      	bne.n	8000b7a <__udivmoddi4+0x156>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xd0>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 80fa 	bhi.w	8000ce8 <__udivmoddi4+0x2c4>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb61 0303 	sbc.w	r3, r1, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	4698      	mov	r8, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d0e0      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b02:	e9c6 4800 	strd	r4, r8, [r6]
 8000b06:	e7dd      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b08:	b902      	cbnz	r2, 8000b0c <__udivmoddi4+0xe8>
 8000b0a:	deff      	udf	#255	; 0xff
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 808f 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b16:	1b49      	subs	r1, r1, r5
 8000b18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1c:	fa1f f885 	uxth.w	r8, r5
 8000b20:	2701      	movs	r7, #1
 8000b22:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb08 f10c 	mul.w	r1, r8, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	f200 80cd 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b46:	4684      	mov	ip, r0
 8000b48:	1a59      	subs	r1, r3, r1
 8000b4a:	b2a3      	uxth	r3, r4
 8000b4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b50:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b58:	fb08 f800 	mul.w	r8, r8, r0
 8000b5c:	45a0      	cmp	r8, r4
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x14c>
 8000b60:	192c      	adds	r4, r5, r4
 8000b62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x14a>
 8000b68:	45a0      	cmp	r8, r4
 8000b6a:	f200 80b6 	bhi.w	8000cda <__udivmoddi4+0x2b6>
 8000b6e:	4618      	mov	r0, r3
 8000b70:	eba4 0408 	sub.w	r4, r4, r8
 8000b74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b78:	e79f      	b.n	8000aba <__udivmoddi4+0x96>
 8000b7a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b7e:	40bb      	lsls	r3, r7
 8000b80:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b84:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b88:	fa01 f407 	lsl.w	r4, r1, r7
 8000b8c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b90:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b94:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b98:	4325      	orrs	r5, r4
 8000b9a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b9e:	0c2c      	lsrs	r4, r5, #16
 8000ba0:	fb08 3319 	mls	r3, r8, r9, r3
 8000ba4:	fa1f fa8e 	uxth.w	sl, lr
 8000ba8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bac:	fb09 f40a 	mul.w	r4, r9, sl
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bb6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bc0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bc4:	f080 8087 	bcs.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f240 8084 	bls.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bce:	f1a9 0902 	sub.w	r9, r9, #2
 8000bd2:	4473      	add	r3, lr
 8000bd4:	1b1b      	subs	r3, r3, r4
 8000bd6:	b2ad      	uxth	r5, r5
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000be4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000be8:	45a2      	cmp	sl, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1e 0404 	adds.w	r4, lr, r4
 8000bf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bf4:	d26b      	bcs.n	8000cce <__udivmoddi4+0x2aa>
 8000bf6:	45a2      	cmp	sl, r4
 8000bf8:	d969      	bls.n	8000cce <__udivmoddi4+0x2aa>
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	4474      	add	r4, lr
 8000bfe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c02:	fba0 8902 	umull	r8, r9, r0, r2
 8000c06:	eba4 040a 	sub.w	r4, r4, sl
 8000c0a:	454c      	cmp	r4, r9
 8000c0c:	46c2      	mov	sl, r8
 8000c0e:	464b      	mov	r3, r9
 8000c10:	d354      	bcc.n	8000cbc <__udivmoddi4+0x298>
 8000c12:	d051      	beq.n	8000cb8 <__udivmoddi4+0x294>
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d069      	beq.n	8000cec <__udivmoddi4+0x2c8>
 8000c18:	ebb1 050a 	subs.w	r5, r1, sl
 8000c1c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c20:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c24:	40fd      	lsrs	r5, r7
 8000c26:	40fc      	lsrs	r4, r7
 8000c28:	ea4c 0505 	orr.w	r5, ip, r5
 8000c2c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c30:	2700      	movs	r7, #0
 8000c32:	e747      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000c34:	f1c2 0320 	rsb	r3, r2, #32
 8000c38:	fa20 f703 	lsr.w	r7, r0, r3
 8000c3c:	4095      	lsls	r5, r2
 8000c3e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c42:	fa21 f303 	lsr.w	r3, r1, r3
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	4338      	orrs	r0, r7
 8000c4c:	0c01      	lsrs	r1, r0, #16
 8000c4e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c52:	fa1f f885 	uxth.w	r8, r5
 8000c56:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5e:	fb07 f308 	mul.w	r3, r7, r8
 8000c62:	428b      	cmp	r3, r1
 8000c64:	fa04 f402 	lsl.w	r4, r4, r2
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x256>
 8000c6a:	1869      	adds	r1, r5, r1
 8000c6c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c70:	d22f      	bcs.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d92d      	bls.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c76:	3f02      	subs	r7, #2
 8000c78:	4429      	add	r1, r5
 8000c7a:	1acb      	subs	r3, r1, r3
 8000c7c:	b281      	uxth	r1, r0
 8000c7e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c82:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c86:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8a:	fb00 f308 	mul.w	r3, r0, r8
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x27e>
 8000c92:	1869      	adds	r1, r5, r1
 8000c94:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c98:	d217      	bcs.n	8000cca <__udivmoddi4+0x2a6>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d915      	bls.n	8000cca <__udivmoddi4+0x2a6>
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	4429      	add	r1, r5
 8000ca2:	1ac9      	subs	r1, r1, r3
 8000ca4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ca8:	e73b      	b.n	8000b22 <__udivmoddi4+0xfe>
 8000caa:	4637      	mov	r7, r6
 8000cac:	4630      	mov	r0, r6
 8000cae:	e709      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cb0:	4607      	mov	r7, r0
 8000cb2:	e6e7      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	e6fb      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb8:	4541      	cmp	r1, r8
 8000cba:	d2ab      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cbc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cc0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	e7a4      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000cca:	4660      	mov	r0, ip
 8000ccc:	e7e9      	b.n	8000ca2 <__udivmoddi4+0x27e>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	e795      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd2:	4667      	mov	r7, ip
 8000cd4:	e7d1      	b.n	8000c7a <__udivmoddi4+0x256>
 8000cd6:	4681      	mov	r9, r0
 8000cd8:	e77c      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	442c      	add	r4, r5
 8000cde:	e747      	b.n	8000b70 <__udivmoddi4+0x14c>
 8000ce0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ce4:	442b      	add	r3, r5
 8000ce6:	e72f      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce8:	4638      	mov	r0, r7
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xda>
 8000cec:	4637      	mov	r7, r6
 8000cee:	e6e9      	b.n	8000ac4 <__udivmoddi4+0xa0>

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <SELECT>:

#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4
/* SPI Chip Select */
static void SELECT(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <SELECT+0x14>)
 8000cfe:	f001 fa91 	bl	8002224 <HAL_GPIO_WritePin>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40020000 	.word	0x40020000

08000d0c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2110      	movs	r1, #16
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <DESELECT+0x14>)
 8000d16:	f001 fa85 	bl	8002224 <HAL_GPIO_WritePin>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020000 	.word	0x40020000

08000d24 <SPI_TxByte>:



/* SPI data transfer */
static void SPI_TxByte(BYTE data)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d2e:	bf00      	nop
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <SPI_TxByte+0x30>)
 8000d32:	f002 f9cb 	bl	80030cc <HAL_SPI_GetState>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d1f9      	bne.n	8000d30 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000d3c:	1df9      	adds	r1, r7, #7
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	2201      	movs	r2, #1
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <SPI_TxByte+0x30>)
 8000d46:	f001 feeb 	bl	8002b20 <HAL_SPI_Transmit>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20001320 	.word	0x20001320

08000d58 <SPI_RxByte>:

/* SPI data send / receive return type function*/
static uint8_t SPI_RxByte(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000d5e:	23ff      	movs	r3, #255	; 0xff
 8000d60:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d66:	bf00      	nop
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <SPI_RxByte+0x38>)
 8000d6a:	f002 f9af 	bl	80030cc <HAL_SPI_GetState>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d1f9      	bne.n	8000d68 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000d74:	1dba      	adds	r2, r7, #6
 8000d76:	1df9      	adds	r1, r7, #7
 8000d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <SPI_RxByte+0x38>)
 8000d82:	f002 f801 	bl	8002d88 <HAL_SPI_TransmitReceive>
  
  return data;
 8000d86:	79bb      	ldrb	r3, [r7, #6]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20001320 	.word	0x20001320

08000d94 <SPI_RxBytePtr>:

/* SPI data send / receive pointer type function */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000d9c:	f7ff ffdc 	bl	8000d58 <SPI_RxByte>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	701a      	strb	r2, [r3, #0]
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <SD_ReadyWait>:


/* Standby SD card Ready */
static uint8_t SD_ReadyWait(void) 
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500 ms counter ready */
  Timer2 = 50;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <SD_ReadyWait+0x34>)
 8000db8:	2232      	movs	r2, #50	; 0x32
 8000dba:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000dbc:	f7ff ffcc 	bl	8000d58 <SPI_RxByte>
  
  do
  {
    /* SPI communication until a value of 0xFF is received */
    res = SPI_RxByte();
 8000dc0:	f7ff ffca 	bl	8000d58 <SPI_RxByte>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	2bff      	cmp	r3, #255	; 0xff
 8000dcc:	d004      	beq.n	8000dd8 <SD_ReadyWait+0x28>
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <SD_ReadyWait+0x34>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f3      	bne.n	8000dc0 <SD_ReadyWait+0x10>
  
  return res;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200023b0 	.word	0x200023b0

08000de8 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000dee:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* In the Deselect state, the SPI message is transmitted to the standby state. */
  DESELECT();
 8000df4:	f7ff ff8a 	bl	8000d0c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	e005      	b.n	8000e0a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000dfe:	20ff      	movs	r0, #255	; 0xff
 8000e00:	f7ff ff90 	bl	8000d24 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	3301      	adds	r3, #1
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	2b09      	cmp	r3, #9
 8000e0e:	ddf6      	ble.n	8000dfe <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000e10:	f7ff ff70 	bl	8000cf4 <SELECT>
  
  /* Initial GO_IDLE_STATE state transition */
  cmd_arg[0] = (CMD0 | 0x40);
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000e28:	2395      	movs	r3, #149	; 0x95
 8000e2a:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission */
  for (int i = 0; i < 6; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	e009      	b.n	8000e46 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000e32:	1d3a      	adds	r2, r7, #4
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff72 	bl	8000d24 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b05      	cmp	r3, #5
 8000e4a:	ddf2      	ble.n	8000e32 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000e4c:	e002      	b.n	8000e54 <SD_PowerOn+0x6c>
  {
    Count--;
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000e54:	f7ff ff80 	bl	8000d58 <SPI_RxByte>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d002      	beq.n	8000e64 <SD_PowerOn+0x7c>
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f4      	bne.n	8000e4e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000e64:	f7ff ff52 	bl	8000d0c <DESELECT>
  SPI_TxByte(0XFF);
 8000e68:	20ff      	movs	r0, #255	; 0xff
 8000e6a:	f7ff ff5b 	bl	8000d24 <SPI_TxByte>
  
  PowerFlag = 1;
 8000e6e:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <SD_PowerOn+0x94>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000041 	.word	0x20000041

08000e80 <SD_PowerOff>:

/*
Power off */
static void SD_PowerOff(void) 
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <SD_PowerOff+0x14>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	20000041 	.word	0x20000041

08000e98 <SD_CheckPower>:

/* Check power status*/
static uint8_t SD_CheckPower(void) 
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <SD_CheckPower+0x14>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000041 	.word	0x20000041

08000eb0 <SD_RxDataBlock>:

/*Receive data packet */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms timer */
  Timer1 = 10;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <SD_RxDataBlock+0x68>)
 8000ebc:	220a      	movs	r2, #10
 8000ebe:	701a      	strb	r2, [r3, #0]
  
  /* 
Answer waiting */		
  do 
  {    
    token = SPI_RxByte();
 8000ec0:	f7ff ff4a 	bl	8000d58 <SPI_RxByte>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	2bff      	cmp	r3, #255	; 0xff
 8000ecc:	d104      	bne.n	8000ed8 <SD_RxDataBlock+0x28>
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <SD_RxDataBlock+0x68>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1f3      	bne.n	8000ec0 <SD_RxDataBlock+0x10>
  
  /* Error processing when receiving Token other than 0xFE */
  if(token != 0xFE)
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	2bfe      	cmp	r3, #254	; 0xfe
 8000edc:	d001      	beq.n	8000ee2 <SD_RxDataBlock+0x32>
    return FALSE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e016      	b.n	8000f10 <SD_RxDataBlock+0x60>
  
  /*
Receiving data into a buffer */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff53 	bl	8000d94 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff4d 	bl	8000d94 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3b02      	subs	r3, #2
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1ed      	bne.n	8000ee2 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* Ignore CRC*/
 8000f06:	f7ff ff27 	bl	8000d58 <SPI_RxByte>
  SPI_RxByte();
 8000f0a:	f7ff ff25 	bl	8000d58 <SPI_RxByte>
  
  return TRUE;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200023b1 	.word	0x200023b1

08000f1c <SD_TxDataBlock>:

/*Data transmission packet */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	737b      	strb	r3, [r7, #13]
    
  /* Waiting for SD card preparation */
  if (SD_ReadyWait() != 0xFF)
 8000f2c:	f7ff ff40 	bl	8000db0 <SD_ReadyWait>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2bff      	cmp	r3, #255	; 0xff
 8000f34:	d001      	beq.n	8000f3a <SD_TxDataBlock+0x1e>
    return FALSE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e040      	b.n	8000fbc <SD_TxDataBlock+0xa0>
  
  /*Token transfer */
  SPI_TxByte(token);      
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fef1 	bl	8000d24 <SPI_TxByte>
  
  /* For data token */
  if (token != 0xFD) 
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	2bfd      	cmp	r3, #253	; 0xfd
 8000f46:	d031      	beq.n	8000fac <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73bb      	strb	r3, [r7, #14]
    
    /* 512 byte data transmission */
    do 
    { 
      SPI_TxByte(*buff++);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fee5 	bl	8000d24 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fede 	bl	8000d24 <SPI_TxByte>
    } while (--wc);
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1eb      	bne.n	8000f4c <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /*Ignore CRC */
 8000f74:	f7ff fef0 	bl	8000d58 <SPI_RxByte>
    SPI_RxByte();
 8000f78:	f7ff feee 	bl	8000d58 <SPI_RxByte>
    
    /* Receive Date Response*/        
    while (i <= 64) 
 8000f7c:	e00b      	b.n	8000f96 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000f7e:	f7ff feeb 	bl	8000d58 <SPI_RxByte>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73fb      	strb	r3, [r7, #15]
      
      /* Error response processing */
      if ((resp & 0x1F) == 0x05) 
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	f003 031f 	and.w	r3, r3, #31
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d006      	beq.n	8000f9e <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000f90:	7b7b      	ldrb	r3, [r7, #13]
 8000f92:	3301      	adds	r3, #1
 8000f94:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000f96:	7b7b      	ldrb	r3, [r7, #13]
 8000f98:	2b40      	cmp	r3, #64	; 0x40
 8000f9a:	d9f0      	bls.n	8000f7e <SD_TxDataBlock+0x62>
 8000f9c:	e000      	b.n	8000fa0 <SD_TxDataBlock+0x84>
        break;
 8000f9e:	bf00      	nop
    }
    
    /*SPI receive buffer clear*/
    while (SPI_RxByte() == 0);
 8000fa0:	bf00      	nop
 8000fa2:	f7ff fed9 	bl	8000d58 <SPI_RxByte>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0fa      	beq.n	8000fa2 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	2b05      	cmp	r3, #5
 8000fb4:	d101      	bne.n	8000fba <SD_TxDataBlock+0x9e>
    return TRUE;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD packet transmission */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /*SD card standby */
  if (SD_ReadyWait() != 0xFF)
 8000fd0:	f7ff feee 	bl	8000db0 <SD_ReadyWait>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2bff      	cmp	r3, #255	; 0xff
 8000fd8:	d001      	beq.n	8000fde <SD_SendCmd+0x1a>
    return 0xFF;
 8000fda:	23ff      	movs	r3, #255	; 0xff
 8000fdc:	e040      	b.n	8001060 <SD_SendCmd+0x9c>
  
  /* Command packet transmission */
  SPI_TxByte(cmd); 			/* Command */
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fe9f 	bl	8000d24 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	0e1b      	lsrs	r3, r3, #24
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fe99 	bl	8000d24 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe93 	bl	8000d24 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fe8d 	bl	8000d24 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fe88 	bl	8000d24 <SPI_TxByte>
  
  /* 
Prepare CRC by command */
  crc = 0;  
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b40      	cmp	r3, #64	; 0x40
 800101c:	d101      	bne.n	8001022 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800101e:	2395      	movs	r3, #149	; 0x95
 8001020:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b48      	cmp	r3, #72	; 0x48
 8001026:	d101      	bne.n	800102c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001028:	2387      	movs	r3, #135	; 0x87
 800102a:	73fb      	strb	r3, [r7, #15]
  
  /* CRC transmission */
  SPI_TxByte(crc);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fe78 	bl	8000d24 <SPI_TxByte>
  
  /* 
For the CMD12 Stop Reading command, discard one response byte */
  if (cmd == CMD12)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b4c      	cmp	r3, #76	; 0x4c
 8001038:	d101      	bne.n	800103e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800103a:	f7ff fe8d 	bl	8000d58 <SPI_RxByte>
  
  /* And receives normal data within 10 times. */
  uint8_t n = 10; 
 800103e:	230a      	movs	r3, #10
 8001040:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001042:	f7ff fe89 	bl	8000d58 <SPI_RxByte>
 8001046:	4603      	mov	r3, r0
 8001048:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800104a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800104e:	2b00      	cmp	r3, #0
 8001050:	da05      	bge.n	800105e <SD_SendCmd+0x9a>
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	3b01      	subs	r3, #1
 8001056:	73bb      	strb	r3, [r7, #14]
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f1      	bne.n	8001042 <SD_SendCmd+0x7e>
  
  return res;
 800105e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <SD_disk_initialize>:
  Used in the user_diskio.c file.
-----------------------------------------------------------------------*/

/* SD card initialization */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 
Only one type of drive is supported*/
  if(drv)
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001078:	2301      	movs	r3, #1
 800107a:	e0d5      	b.n	8001228 <SD_disk_initialize+0x1c0>
  
  /*No SD card inserted */
  if(Stat & STA_NODISK)
 800107c:	4b6c      	ldr	r3, [pc, #432]	; (8001230 <SD_disk_initialize+0x1c8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <SD_disk_initialize+0x2a>
    return Stat;        
 800108a:	4b69      	ldr	r3, [pc, #420]	; (8001230 <SD_disk_initialize+0x1c8>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	e0ca      	b.n	8001228 <SD_disk_initialize+0x1c0>
  
  /* SD card Power On */
  SD_PowerOn();         
 8001092:	f7ff fea9 	bl	8000de8 <SD_PowerOn>
  
  /*For SPI communication Chip Select */
  SELECT();             
 8001096:	f7ff fe2d 	bl	8000cf4 <SELECT>
  
  /* SD card type variable initialization*/
  type = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	73bb      	strb	r3, [r7, #14]
  
  /* Idle state entry */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800109e:	2100      	movs	r1, #0
 80010a0:	2040      	movs	r0, #64	; 0x40
 80010a2:	f7ff ff8f 	bl	8000fc4 <SD_SendCmd>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 80a5 	bne.w	80011f8 <SD_disk_initialize+0x190>
  { 
    /*Timer 1 second set */
    Timer1 = 100;
 80010ae:	4b61      	ldr	r3, [pc, #388]	; (8001234 <SD_disk_initialize+0x1cc>)
 80010b0:	2264      	movs	r2, #100	; 0x64
 80010b2:	701a      	strb	r2, [r3, #0]
    
    /* Confirm SD interface operation condition*/
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80010b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010b8:	2048      	movs	r0, #72	; 0x48
 80010ba:	f7ff ff83 	bl	8000fc4 <SD_SendCmd>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d158      	bne.n	8001176 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e00c      	b.n	80010e4 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80010ca:	7bfc      	ldrb	r4, [r7, #15]
 80010cc:	f7ff fe44 	bl	8000d58 <SPI_RxByte>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4423      	add	r3, r4
 80010da:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	3301      	adds	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d9ef      	bls.n	80010ca <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80010ea:	7abb      	ldrb	r3, [r7, #10]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 8083 	bne.w	80011f8 <SD_disk_initialize+0x190>
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	2baa      	cmp	r3, #170	; 0xaa
 80010f6:	d17f      	bne.n	80011f8 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V Voltage Range Operation */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80010f8:	2100      	movs	r1, #0
 80010fa:	2077      	movs	r0, #119	; 0x77
 80010fc:	f7ff ff62 	bl	8000fc4 <SD_SendCmd>
 8001100:	4603      	mov	r3, r0
 8001102:	2b01      	cmp	r3, #1
 8001104:	d807      	bhi.n	8001116 <SD_disk_initialize+0xae>
 8001106:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800110a:	2069      	movs	r0, #105	; 0x69
 800110c:	f7ff ff5a 	bl	8000fc4 <SD_SendCmd>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001116:	4b47      	ldr	r3, [pc, #284]	; (8001234 <SD_disk_initialize+0x1cc>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1eb      	bne.n	80010f8 <SD_disk_initialize+0x90>
 8001120:	e000      	b.n	8001124 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001122:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001124:	4b43      	ldr	r3, [pc, #268]	; (8001234 <SD_disk_initialize+0x1cc>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d064      	beq.n	80011f8 <SD_disk_initialize+0x190>
 800112e:	2100      	movs	r1, #0
 8001130:	207a      	movs	r0, #122	; 0x7a
 8001132:	f7ff ff47 	bl	8000fc4 <SD_SendCmd>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d15d      	bne.n	80011f8 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e00c      	b.n	800115c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001142:	7bfc      	ldrb	r4, [r7, #15]
 8001144:	f7ff fe08 	bl	8000d58 <SPI_RxByte>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4423      	add	r3, r4
 8001152:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	3301      	adds	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d9ef      	bls.n	8001142 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001162:	7a3b      	ldrb	r3, [r7, #8]
 8001164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SD_disk_initialize+0x108>
 800116c:	2306      	movs	r3, #6
 800116e:	e000      	b.n	8001172 <SD_disk_initialize+0x10a>
 8001170:	2302      	movs	r3, #2
 8001172:	73bb      	strb	r3, [r7, #14]
 8001174:	e040      	b.n	80011f8 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001176:	2100      	movs	r1, #0
 8001178:	2077      	movs	r0, #119	; 0x77
 800117a:	f7ff ff23 	bl	8000fc4 <SD_SendCmd>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d808      	bhi.n	8001196 <SD_disk_initialize+0x12e>
 8001184:	2100      	movs	r1, #0
 8001186:	2069      	movs	r0, #105	; 0x69
 8001188:	f7ff ff1c 	bl	8000fc4 <SD_SendCmd>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d801      	bhi.n	8001196 <SD_disk_initialize+0x12e>
 8001192:	2302      	movs	r3, #2
 8001194:	e000      	b.n	8001198 <SD_disk_initialize+0x130>
 8001196:	2301      	movs	r3, #1
 8001198:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d10e      	bne.n	80011be <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80011a0:	2100      	movs	r1, #0
 80011a2:	2077      	movs	r0, #119	; 0x77
 80011a4:	f7ff ff0e 	bl	8000fc4 <SD_SendCmd>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d80e      	bhi.n	80011cc <SD_disk_initialize+0x164>
 80011ae:	2100      	movs	r1, #0
 80011b0:	2069      	movs	r0, #105	; 0x69
 80011b2:	f7ff ff07 	bl	8000fc4 <SD_SendCmd>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d107      	bne.n	80011cc <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80011bc:	e00d      	b.n	80011da <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80011be:	2100      	movs	r1, #0
 80011c0:	2041      	movs	r0, #65	; 0x41
 80011c2:	f7ff feff 	bl	8000fc4 <SD_SendCmd>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <SD_disk_initialize+0x1cc>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1e1      	bne.n	800119a <SD_disk_initialize+0x132>
 80011d6:	e000      	b.n	80011da <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80011d8:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <SD_disk_initialize+0x1cc>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d007      	beq.n	80011f4 <SD_disk_initialize+0x18c>
 80011e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e8:	2050      	movs	r0, #80	; 0x50
 80011ea:	f7ff feeb 	bl	8000fc4 <SD_SendCmd>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SD_disk_initialize+0x190>
      {
        /*Select block length */
        type = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80011f8:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <SD_disk_initialize+0x1d0>)
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80011fe:	f7ff fd85 	bl	8000d0c <DESELECT>
  
  SPI_RxByte(); /*Idle state transition(Release DO) */
 8001202:	f7ff fda9 	bl	8000d58 <SPI_RxByte>
  
  if (type) 
 8001206:	7bbb      	ldrb	r3, [r7, #14]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d008      	beq.n	800121e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <SD_disk_initialize+0x1c8>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f023 0301 	bic.w	r3, r3, #1
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SD_disk_initialize+0x1c8>)
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e001      	b.n	8001222 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800121e:	f7ff fe2f 	bl	8000e80 <SD_PowerOff>
  }
  
  return Stat;
 8001222:	4b03      	ldr	r3, [pc, #12]	; (8001230 <SD_disk_initialize+0x1c8>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	200023b1 	.word	0x200023b1
 8001238:	20000040 	.word	0x20000040

0800123c <SD_disk_status>:

/*Check disk status*/
DSTATUS SD_disk_status(BYTE drv) 
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SD_disk_status+0x14>
    return STA_NOINIT; 
 800124c:	2301      	movs	r3, #1
 800124e:	e002      	b.n	8001256 <SD_disk_status+0x1a>
  
  return Stat;
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SD_disk_status+0x28>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000000 	.word	0x20000000

08001268 <SD_disk_read>:

/*Reading Sectors */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <SD_disk_read+0x1c>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <SD_disk_read+0x20>
    return RES_PARERR;
 8001284:	2304      	movs	r3, #4
 8001286:	e051      	b.n	800132c <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <SD_disk_read+0xcc>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001296:	2303      	movs	r3, #3
 8001298:	e048      	b.n	800132c <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800129a:	4b27      	ldr	r3, [pc, #156]	; (8001338 <SD_disk_read+0xd0>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <SD_disk_read+0x44>
    sector *= 512;      /* Change designated sector to Byte addressing unit*/
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	025b      	lsls	r3, r3, #9
 80012aa:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80012ac:	f7ff fd22 	bl	8000cf4 <SELECT>
  
  if (count == 1) 
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d111      	bne.n	80012da <SD_disk_read+0x72>
  { 
    /* Single block reading */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	2051      	movs	r0, #81	; 0x51
 80012ba:	f7ff fe83 	bl	8000fc4 <SD_SendCmd>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d129      	bne.n	8001318 <SD_disk_read+0xb0>
 80012c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c8:	68b8      	ldr	r0, [r7, #8]
 80012ca:	f7ff fdf1 	bl	8000eb0 <SD_RxDataBlock>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d021      	beq.n	8001318 <SD_disk_read+0xb0>
      count = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	e01e      	b.n	8001318 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* Multiblock Read */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	2052      	movs	r0, #82	; 0x52
 80012de:	f7ff fe71 	bl	8000fc4 <SD_SendCmd>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d117      	bne.n	8001318 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80012e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ec:	68b8      	ldr	r0, [r7, #8]
 80012ee:	f7ff fddf 	bl	8000eb0 <SD_RxDataBlock>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00a      	beq.n	800130e <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012fe:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3b01      	subs	r3, #1
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1ed      	bne.n	80012e8 <SD_disk_read+0x80>
 800130c:	e000      	b.n	8001310 <SD_disk_read+0xa8>
          break;
 800130e:	bf00      	nop
      
      /*STOP_TRANSMISSION, after reading all blocks, */
      SD_SendCmd(CMD12, 0); 
 8001310:	2100      	movs	r1, #0
 8001312:	204c      	movs	r0, #76	; 0x4c
 8001314:	f7ff fe56 	bl	8000fc4 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001318:	f7ff fcf8 	bl	8000d0c <DESELECT>
  SPI_RxByte(); /* Idle state (Release DO) */
 800131c:	f7ff fd1c 	bl	8000d58 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf14      	ite	ne
 8001326:	2301      	movne	r3, #1
 8001328:	2300      	moveq	r3, #0
 800132a:	b2db      	uxtb	r3, r3
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000040 	.word	0x20000040

0800133c <SD_disk_write>:

/* Sector writing*/
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4603      	mov	r3, r0
 800134a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <SD_disk_write+0x1c>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <SD_disk_write+0x20>
    return RES_PARERR;
 8001358:	2304      	movs	r3, #4
 800135a:	e06b      	b.n	8001434 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 800135c:	4b37      	ldr	r3, [pc, #220]	; (800143c <SD_disk_write+0x100>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800136a:	2303      	movs	r3, #3
 800136c:	e062      	b.n	8001434 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 800136e:	4b33      	ldr	r3, [pc, #204]	; (800143c <SD_disk_write+0x100>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SD_disk_write+0x44>
    return RES_WRPRT;
 800137c:	2302      	movs	r3, #2
 800137e:	e059      	b.n	8001434 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <SD_disk_write+0x104>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <SD_disk_write+0x56>
    sector *= 512; /*Change designated sector to Byte addressing unit */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	025b      	lsls	r3, r3, #9
 8001390:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001392:	f7ff fcaf 	bl	8000cf4 <SELECT>
  
  if (count == 1) 
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d110      	bne.n	80013be <SD_disk_write+0x82>
  { 
    /* Single block writing */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	2058      	movs	r0, #88	; 0x58
 80013a0:	f7ff fe10 	bl	8000fc4 <SD_SendCmd>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d13a      	bne.n	8001420 <SD_disk_write+0xe4>
 80013aa:	21fe      	movs	r1, #254	; 0xfe
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	f7ff fdb5 	bl	8000f1c <SD_TxDataBlock>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d033      	beq.n	8001420 <SD_disk_write+0xe4>
      count = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	e030      	b.n	8001420 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* Multiblock Writing */
    if (CardType & 2) 
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <SD_disk_write+0x104>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80013ca:	2100      	movs	r1, #0
 80013cc:	2077      	movs	r0, #119	; 0x77
 80013ce:	f7ff fdf9 	bl	8000fc4 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80013d2:	6839      	ldr	r1, [r7, #0]
 80013d4:	2057      	movs	r0, #87	; 0x57
 80013d6:	f7ff fdf5 	bl	8000fc4 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	2059      	movs	r0, #89	; 0x59
 80013de:	f7ff fdf1 	bl	8000fc4 <SD_SendCmd>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d11b      	bne.n	8001420 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80013e8:	21fc      	movs	r1, #252	; 0xfc
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	f7ff fd96 	bl	8000f1c <SD_TxDataBlock>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00a      	beq.n	800140c <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013fc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	3b01      	subs	r3, #1
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1ee      	bne.n	80013e8 <SD_disk_write+0xac>
 800140a:	e000      	b.n	800140e <SD_disk_write+0xd2>
          break;
 800140c:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800140e:	21fd      	movs	r1, #253	; 0xfd
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fd83 	bl	8000f1c <SD_TxDataBlock>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <SD_disk_write+0xe4>
      {        
        count = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001420:	f7ff fc74 	bl	8000d0c <DESELECT>
  SPI_RxByte();
 8001424:	f7ff fc98 	bl	8000d58 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf14      	ite	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2300      	moveq	r3, #0
 8001432:	b2db      	uxtb	r3, r3
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000040 	.word	0x20000040

08001444 <SD_disk_ioctl>:
#endif /* _READONLY */

/* Other functions */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b08b      	sub	sp, #44	; 0x2c
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	603a      	str	r2, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	460b      	mov	r3, r1
 8001452:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800145e:	2304      	movs	r3, #4
 8001460:	e117      	b.n	8001692 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	2b05      	cmp	r3, #5
 800146c:	d126      	bne.n	80014bc <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d00e      	beq.n	8001494 <SD_disk_ioctl+0x50>
 8001476:	2b02      	cmp	r3, #2
 8001478:	d012      	beq.n	80014a0 <SD_disk_ioctl+0x5c>
 800147a:	2b00      	cmp	r3, #0
 800147c:	d11a      	bne.n	80014b4 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 800147e:	f7ff fd0b 	bl	8000e98 <SD_CheckPower>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8001488:	f7ff fcfa 	bl	8000e80 <SD_PowerOff>
      res = RES_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001492:	e0fc      	b.n	800168e <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8001494:	f7ff fca8 	bl	8000de8 <SD_PowerOn>
      res = RES_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800149e:	e0f6      	b.n	800168e <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	1c5c      	adds	r4, r3, #1
 80014a4:	f7ff fcf8 	bl	8000e98 <SD_CheckPower>
 80014a8:	4603      	mov	r3, r0
 80014aa:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014b2:	e0ec      	b.n	800168e <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 80014b4:	2304      	movs	r3, #4
 80014b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014ba:	e0e8      	b.n	800168e <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80014bc:	4b77      	ldr	r3, [pc, #476]	; (800169c <SD_disk_ioctl+0x258>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0e1      	b.n	8001692 <SD_disk_ioctl+0x24e>
    
    SELECT();
 80014ce:	f7ff fc11 	bl	8000cf4 <SELECT>
    
    switch (ctrl) 
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	2b0d      	cmp	r3, #13
 80014d6:	f200 80cb 	bhi.w	8001670 <SD_disk_ioctl+0x22c>
 80014da:	a201      	add	r2, pc, #4	; (adr r2, 80014e0 <SD_disk_ioctl+0x9c>)
 80014dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e0:	080015db 	.word	0x080015db
 80014e4:	08001519 	.word	0x08001519
 80014e8:	080015cb 	.word	0x080015cb
 80014ec:	08001671 	.word	0x08001671
 80014f0:	08001671 	.word	0x08001671
 80014f4:	08001671 	.word	0x08001671
 80014f8:	08001671 	.word	0x08001671
 80014fc:	08001671 	.word	0x08001671
 8001500:	08001671 	.word	0x08001671
 8001504:	08001671 	.word	0x08001671
 8001508:	08001671 	.word	0x08001671
 800150c:	080015ed 	.word	0x080015ed
 8001510:	08001611 	.word	0x08001611
 8001514:	08001635 	.word	0x08001635
    {
    case GET_SECTOR_COUNT: 
      /* 	Number of Sectors in SD Card (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001518:	2100      	movs	r1, #0
 800151a:	2049      	movs	r0, #73	; 0x49
 800151c:	f7ff fd52 	bl	8000fc4 <SD_SendCmd>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	f040 80a8 	bne.w	8001678 <SD_disk_ioctl+0x234>
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2110      	movs	r1, #16
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fcbe 	bl	8000eb0 <SD_RxDataBlock>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 809e 	beq.w	8001678 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 800153c:	7b3b      	ldrb	r3, [r7, #12]
 800153e:	099b      	lsrs	r3, r3, #6
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d10e      	bne.n	8001564 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001546:	7d7b      	ldrb	r3, [r7, #21]
 8001548:	b29a      	uxth	r2, r3
 800154a:	7d3b      	ldrb	r3, [r7, #20]
 800154c:	b29b      	uxth	r3, r3
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b29b      	uxth	r3, r3
 8001552:	4413      	add	r3, r2
 8001554:	b29b      	uxth	r3, r3
 8001556:	3301      	adds	r3, #1
 8001558:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800155a:	8bfb      	ldrh	r3, [r7, #30]
 800155c:	029a      	lsls	r2, r3, #10
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e02e      	b.n	80015c2 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001564:	7c7b      	ldrb	r3, [r7, #17]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	b2da      	uxtb	r2, r3
 800156c:	7dbb      	ldrb	r3, [r7, #22]
 800156e:	09db      	lsrs	r3, r3, #7
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4413      	add	r3, r2
 8001574:	b2da      	uxtb	r2, r3
 8001576:	7d7b      	ldrb	r3, [r7, #21]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f003 0306 	and.w	r3, r3, #6
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4413      	add	r3, r2
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3302      	adds	r3, #2
 8001588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800158c:	7d3b      	ldrb	r3, [r7, #20]
 800158e:	099b      	lsrs	r3, r3, #6
 8001590:	b2db      	uxtb	r3, r3
 8001592:	b29a      	uxth	r2, r3
 8001594:	7cfb      	ldrb	r3, [r7, #19]
 8001596:	b29b      	uxth	r3, r3
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	b29b      	uxth	r3, r3
 800159c:	4413      	add	r3, r2
 800159e:	b29a      	uxth	r2, r3
 80015a0:	7cbb      	ldrb	r3, [r7, #18]
 80015a2:	029b      	lsls	r3, r3, #10
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80015b4:	8bfa      	ldrh	r2, [r7, #30]
 80015b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ba:	3b09      	subs	r3, #9
 80015bc:	409a      	lsls	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80015c8:	e056      	b.n	8001678 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /*Unit size of the sector (WORD) */
      *(WORD*) buff = 512;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015d8:	e055      	b.n	8001686 <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* Write synchronization */
      if (SD_ReadyWait() == 0xFF)
 80015da:	f7ff fbe9 	bl	8000db0 <SD_ReadyWait>
 80015de:	4603      	mov	r3, r0
 80015e0:	2bff      	cmp	r3, #255	; 0xff
 80015e2:	d14b      	bne.n	800167c <SD_disk_ioctl+0x238>
        res = RES_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015ea:	e047      	b.n	800167c <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* Receiving CSD information(16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80015ec:	2100      	movs	r1, #0
 80015ee:	2049      	movs	r0, #73	; 0x49
 80015f0:	f7ff fce8 	bl	8000fc4 <SD_SendCmd>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d142      	bne.n	8001680 <SD_disk_ioctl+0x23c>
 80015fa:	2110      	movs	r1, #16
 80015fc:	6a38      	ldr	r0, [r7, #32]
 80015fe:	f7ff fc57 	bl	8000eb0 <SD_RxDataBlock>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d03b      	beq.n	8001680 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800160e:	e037      	b.n	8001680 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* Receiving CID information(16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001610:	2100      	movs	r1, #0
 8001612:	204a      	movs	r0, #74	; 0x4a
 8001614:	f7ff fcd6 	bl	8000fc4 <SD_SendCmd>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d132      	bne.n	8001684 <SD_disk_ioctl+0x240>
 800161e:	2110      	movs	r1, #16
 8001620:	6a38      	ldr	r0, [r7, #32]
 8001622:	f7ff fc45 	bl	8000eb0 <SD_RxDataBlock>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d02b      	beq.n	8001684 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001632:	e027      	b.n	8001684 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* Receive OCR information(4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001634:	2100      	movs	r1, #0
 8001636:	207a      	movs	r0, #122	; 0x7a
 8001638:	f7ff fcc4 	bl	8000fc4 <SD_SendCmd>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001648:	e00b      	b.n	8001662 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 800164a:	6a3c      	ldr	r4, [r7, #32]
 800164c:	1c63      	adds	r3, r4, #1
 800164e:	623b      	str	r3, [r7, #32]
 8001650:	f7ff fb82 	bl	8000d58 <SPI_RxByte>
 8001654:	4603      	mov	r3, r0
 8001656:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001658:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800165c:	3301      	adds	r3, #1
 800165e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001666:	2b03      	cmp	r3, #3
 8001668:	d9ef      	bls.n	800164a <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001670:	2304      	movs	r3, #4
 8001672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001676:	e006      	b.n	8001686 <SD_disk_ioctl+0x242>
      break;
 8001678:	bf00      	nop
 800167a:	e004      	b.n	8001686 <SD_disk_ioctl+0x242>
      break;
 800167c:	bf00      	nop
 800167e:	e002      	b.n	8001686 <SD_disk_ioctl+0x242>
      break;
 8001680:	bf00      	nop
 8001682:	e000      	b.n	8001686 <SD_disk_ioctl+0x242>
      break;
 8001684:	bf00      	nop
    }
    
    DESELECT();
 8001686:	f7ff fb41 	bl	8000d0c <DESELECT>
    SPI_RxByte();
 800168a:	f7ff fb65 	bl	8000d58 <SPI_RxByte>
  }
  
  return res;
 800168e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001692:	4618      	mov	r0, r3
 8001694:	372c      	adds	r7, #44	; 0x2c
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	bf00      	nop
 800169c:	20000000 	.word	0x20000000

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b598      	push	{r3, r4, r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a4:	f000 fac8 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a8:	f000 f8d6 	bl	8001858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ac:	f000 f97e 	bl	80019ac <MX_GPIO_Init>
  MX_SPI1_Init();
 80016b0:	f000 f942 	bl	8001938 <MX_SPI1_Init>
  MX_FATFS_Init();
 80016b4:	f001 fdc4 	bl	8003240 <MX_FATFS_Init>

  // USER CODE BEGIN 2

  if(f_mount(&fs, "", 0) != FR_OK)
 80016b8:	2200      	movs	r2, #0
 80016ba:	4958      	ldr	r1, [pc, #352]	; (800181c <main+0x17c>)
 80016bc:	4858      	ldr	r0, [pc, #352]	; (8001820 <main+0x180>)
 80016be:	f004 f807 	bl	80056d0 <f_mount>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d004      	beq.n	80016d2 <main+0x32>
     _Error_Handler(__FILE__, __LINE__);
 80016c8:	216b      	movs	r1, #107	; 0x6b
 80016ca:	4856      	ldr	r0, [pc, #344]	; (8001824 <main+0x184>)
 80016cc:	f000 f9b0 	bl	8001a30 <_Error_Handler>
 80016d0:	e008      	b.n	80016e4 <main+0x44>
  else  fres = f_mount(&fs, "", 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	4951      	ldr	r1, [pc, #324]	; (800181c <main+0x17c>)
 80016d6:	4852      	ldr	r0, [pc, #328]	; (8001820 <main+0x180>)
 80016d8:	f003 fffa 	bl	80056d0 <f_mount>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	4b51      	ldr	r3, [pc, #324]	; (8001828 <main+0x188>)
 80016e2:	701a      	strb	r2, [r3, #0]

   // Open file to write
   if(f_open(&fs, "out.txt",  FA_READ | FA_WRITE) != FR_OK)
 80016e4:	2203      	movs	r2, #3
 80016e6:	4951      	ldr	r1, [pc, #324]	; (800182c <main+0x18c>)
 80016e8:	484d      	ldr	r0, [pc, #308]	; (8001820 <main+0x180>)
 80016ea:	f004 f837 	bl	800575c <f_open>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <main+0x5e>
     _Error_Handler(__FILE__, __LINE__);
 80016f4:	2170      	movs	r1, #112	; 0x70
 80016f6:	484b      	ldr	r0, [pc, #300]	; (8001824 <main+0x184>)
 80016f8:	f000 f99a 	bl	8001a30 <_Error_Handler>
 80016fc:	e008      	b.n	8001710 <main+0x70>
   else fres = f_open(&fil, "second.py", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80016fe:	2213      	movs	r2, #19
 8001700:	494b      	ldr	r1, [pc, #300]	; (8001830 <main+0x190>)
 8001702:	484c      	ldr	r0, [pc, #304]	; (8001834 <main+0x194>)
 8001704:	f004 f82a 	bl	800575c <f_open>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b46      	ldr	r3, [pc, #280]	; (8001828 <main+0x188>)
 800170e:	701a      	strb	r2, [r3, #0]
   // Check free space
   if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 8001710:	4a49      	ldr	r2, [pc, #292]	; (8001838 <main+0x198>)
 8001712:	494a      	ldr	r1, [pc, #296]	; (800183c <main+0x19c>)
 8001714:	4841      	ldr	r0, [pc, #260]	; (800181c <main+0x17c>)
 8001716:	f004 fd88 	bl	800622a <f_getfree>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <main+0x88>
     _Error_Handler(__FILE__, __LINE__);
 8001720:	2174      	movs	r1, #116	; 0x74
 8001722:	4840      	ldr	r0, [pc, #256]	; (8001824 <main+0x184>)
 8001724:	f000 f984 	bl	8001a30 <_Error_Handler>

   total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <main+0x198>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	3b02      	subs	r3, #2
 8001730:	4a41      	ldr	r2, [pc, #260]	; (8001838 <main+0x198>)
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	8952      	ldrh	r2, [r2, #10]
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe feae 	bl	800049c <__aeabi_ui2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <main+0x1a0>)
 8001746:	f7fe ff23 	bl	8000590 <__aeabi_dmul>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	f7ff f92f 	bl	80009b4 <__aeabi_d2uiz>
 8001756:	4602      	mov	r2, r0
 8001758:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <main+0x1a4>)
 800175a:	601a      	str	r2, [r3, #0]
   free1 = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <main+0x198>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	895b      	ldrh	r3, [r3, #10]
 8001762:	461a      	mov	r2, r3
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <main+0x19c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fb03 f302 	mul.w	r3, r3, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fe95 	bl	800049c <__aeabi_ui2d>
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <main+0x1a0>)
 8001778:	f7fe ff0a 	bl	8000590 <__aeabi_dmul>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	4618      	mov	r0, r3
 8001782:	4621      	mov	r1, r4
 8001784:	f7ff f916 	bl	80009b4 <__aeabi_d2uiz>
 8001788:	4602      	mov	r2, r0
 800178a:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <main+0x1a8>)
 800178c:	601a      	str	r2, [r3, #0]

   // Free space is less than 1kb
   if(free1 < 1)
 800178e:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <main+0x1a8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <main+0xfe>
     _Error_Handler(__FILE__, __LINE__);
 8001796:	217b      	movs	r1, #123	; 0x7b
 8001798:	4822      	ldr	r0, [pc, #136]	; (8001824 <main+0x184>)
 800179a:	f000 f949 	bl	8001a30 <_Error_Handler>

   //Writing text
   f_puts("SAKET\n", &fil);
 800179e:	4925      	ldr	r1, [pc, #148]	; (8001834 <main+0x194>)
 80017a0:	482a      	ldr	r0, [pc, #168]	; (800184c <main+0x1ac>)
 80017a2:	f004 feac 	bl	80064fe <f_puts>
   f_puts("KIRANGE!!!", &fil);
 80017a6:	4923      	ldr	r1, [pc, #140]	; (8001834 <main+0x194>)
 80017a8:	4829      	ldr	r0, [pc, #164]	; (8001850 <main+0x1b0>)
 80017aa:	f004 fea8 	bl	80064fe <f_puts>

   // Close file
   if(f_close(&fil) != FR_OK)
 80017ae:	4821      	ldr	r0, [pc, #132]	; (8001834 <main+0x194>)
 80017b0:	f004 fd11 	bl	80061d6 <f_close>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <main+0x122>
     _Error_Handler(__FILE__, __LINE__);
 80017ba:	2183      	movs	r1, #131	; 0x83
 80017bc:	4819      	ldr	r0, [pc, #100]	; (8001824 <main+0x184>)
 80017be:	f000 f937 	bl	8001a30 <_Error_Handler>

   // Open file to read
   if(f_open(&fil, "second.py", FA_READ) != FR_OK)
 80017c2:	2201      	movs	r2, #1
 80017c4:	491a      	ldr	r1, [pc, #104]	; (8001830 <main+0x190>)
 80017c6:	481b      	ldr	r0, [pc, #108]	; (8001834 <main+0x194>)
 80017c8:	f003 ffc8 	bl	800575c <f_open>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <main+0x13a>
     _Error_Handler(__FILE__, __LINE__);
 80017d2:	2187      	movs	r1, #135	; 0x87
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <main+0x184>)
 80017d6:	f000 f92b 	bl	8001a30 <_Error_Handler>

   while(f_gets(buffer, sizeof(buffer), &fil))
 80017da:	bf00      	nop
 80017dc:	4a15      	ldr	r2, [pc, #84]	; (8001834 <main+0x194>)
 80017de:	2164      	movs	r1, #100	; 0x64
 80017e0:	481c      	ldr	r0, [pc, #112]	; (8001854 <main+0x1b4>)
 80017e2:	f004 fdd7 	bl	8006394 <f_gets>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f7      	bne.n	80017dc <main+0x13c>
   {
     //printf("%s", buffer);
   }

   // Close file
   if(f_close(&fil) != FR_OK)
 80017ec:	4811      	ldr	r0, [pc, #68]	; (8001834 <main+0x194>)
 80017ee:	f004 fcf2 	bl	80061d6 <f_close>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <main+0x160>
     _Error_Handler(__FILE__, __LINE__);
 80017f8:	2190      	movs	r1, #144	; 0x90
 80017fa:	480a      	ldr	r0, [pc, #40]	; (8001824 <main+0x184>)
 80017fc:	f000 f918 	bl	8001a30 <_Error_Handler>

   // Unmount SDCARD
   if(f_mount(NULL, "", 1) != FR_OK)
 8001800:	2201      	movs	r2, #1
 8001802:	4906      	ldr	r1, [pc, #24]	; (800181c <main+0x17c>)
 8001804:	2000      	movs	r0, #0
 8001806:	f003 ff63 	bl	80056d0 <f_mount>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <main+0x178>
     _Error_Handler(__FILE__, __LINE__);
 8001810:	2194      	movs	r1, #148	; 0x94
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <main+0x184>)
 8001814:	f000 f90c 	bl	8001a30 <_Error_Handler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001818:	e7fe      	b.n	8001818 <main+0x178>
 800181a:	bf00      	nop
 800181c:	080067fc 	.word	0x080067fc
 8001820:	2000027c 	.word	0x2000027c
 8001824:	08006800 	.word	0x08006800
 8001828:	2000137c 	.word	0x2000137c
 800182c:	08006814 	.word	0x08006814
 8001830:	0800681c 	.word	0x0800681c
 8001834:	20001380 	.word	0x20001380
 8001838:	2000131c 	.word	0x2000131c
 800183c:	20000278 	.word	0x20000278
 8001840:	3fe00000 	.word	0x3fe00000
 8001844:	20001378 	.word	0x20001378
 8001848:	200012b4 	.word	0x200012b4
 800184c:	08006828 	.word	0x08006828
 8001850:	08006830 	.word	0x08006830
 8001854:	200012b8 	.word	0x200012b8

08001858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b094      	sub	sp, #80	; 0x50
 800185c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	2234      	movs	r2, #52	; 0x34
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f004 ffb4 	bl	80067d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <SystemClock_Config+0xd4>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	4a29      	ldr	r2, [pc, #164]	; (800192c <SystemClock_Config+0xd4>)
 8001886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188a:	6413      	str	r3, [r2, #64]	; 0x40
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <SystemClock_Config+0xd4>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001898:	2300      	movs	r3, #0
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	4b24      	ldr	r3, [pc, #144]	; (8001930 <SystemClock_Config+0xd8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a23      	ldr	r2, [pc, #140]	; (8001930 <SystemClock_Config+0xd8>)
 80018a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <SystemClock_Config+0xd8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018be:	2302      	movs	r3, #2
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018c8:	2308      	movs	r3, #8
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 80018cc:	2390      	movs	r3, #144	; 0x90
 80018ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018d8:	2302      	movs	r3, #2
 80018da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fe77 	bl	80025d4 <HAL_RCC_OscConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <SystemClock_Config+0x9c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80018ec:	21cb      	movs	r1, #203	; 0xcb
 80018ee:	4811      	ldr	r0, [pc, #68]	; (8001934 <SystemClock_Config+0xdc>)
 80018f0:	f000 f89e 	bl	8001a30 <_Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f4:	230f      	movs	r3, #15
 80018f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f8:	2302      	movs	r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001904:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	2102      	movs	r1, #2
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fca1 	bl	8002258 <HAL_RCC_ClockConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <SystemClock_Config+0xcc>
  {
    _Error_Handler(__FILE__, __LINE__);
 800191c:	21d8      	movs	r1, #216	; 0xd8
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <SystemClock_Config+0xdc>)
 8001920:	f000 f886 	bl	8001a30 <_Error_Handler>
  }
}
 8001924:	bf00      	nop
 8001926:	3750      	adds	r7, #80	; 0x50
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000
 8001934:	08006800 	.word	0x08006800

08001938 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_SPI1_Init+0x68>)
 800193e:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <MX_SPI1_Init+0x6c>)
 8001940:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <MX_SPI1_Init+0x68>)
 8001944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001948:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_SPI1_Init+0x68>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <MX_SPI1_Init+0x68>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_SPI1_Init+0x68>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_SPI1_Init+0x68>)
 800195e:	2200      	movs	r2, #0
 8001960:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_SPI1_Init+0x68>)
 8001964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001968:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <MX_SPI1_Init+0x68>)
 800196c:	2200      	movs	r2, #0
 800196e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_SPI1_Init+0x68>)
 8001972:	2200      	movs	r2, #0
 8001974:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <MX_SPI1_Init+0x68>)
 8001978:	2200      	movs	r2, #0
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_SPI1_Init+0x68>)
 800197e:	2200      	movs	r2, #0
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <MX_SPI1_Init+0x68>)
 8001984:	220a      	movs	r2, #10
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_SPI1_Init+0x68>)
 800198a:	f001 f865 	bl	8002a58 <HAL_SPI_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <MX_SPI1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001994:	21fa      	movs	r1, #250	; 0xfa
 8001996:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_SPI1_Init+0x70>)
 8001998:	f000 f84a 	bl	8001a30 <_Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20001320 	.word	0x20001320
 80019a4:	40013000 	.word	0x40013000
 80019a8:	08006800 	.word	0x08006800

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_GPIO_Init+0x7c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <MX_GPIO_Init+0x7c>)
 80019cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <MX_GPIO_Init+0x7c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_GPIO_Init+0x7c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <MX_GPIO_Init+0x7c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_GPIO_Init+0x7c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2110      	movs	r1, #16
 80019fe:	480b      	ldr	r0, [pc, #44]	; (8001a2c <MX_GPIO_Init+0x80>)
 8001a00:	f000 fc10 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a04:	2310      	movs	r3, #16
 8001a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_GPIO_Init+0x80>)
 8001a1c:	f000 fa70 	bl	8001f00 <HAL_GPIO_Init>

}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000

08001a30 <_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001a3a:	e7fe      	b.n	8001a3a <_Error_Handler+0xa>

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a0f      	ldr	r2, [pc, #60]	; (8001a88 <HAL_MspInit+0x4c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <HAL_MspInit+0x4c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_SPI_MspInit+0x84>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d12b      	bne.n	8001b06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ae6:	23e0      	movs	r3, #224	; 0xe0
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001af6:	2305      	movs	r3, #5
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001b02:	f000 f9fd 	bl	8001f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40013000 	.word	0x40013000
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000

08001b1c <SDTimer_Handler>:
  */
			volatile uint8_t FatFsCnt = 0;
			volatile uint8_t Timer1, Timer2;

			void SDTimer_Handler(void)
			{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
				if(Timer1 > 0)
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <SDTimer_Handler+0x40>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <SDTimer_Handler+0x1c>
					Timer1--;
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <SDTimer_Handler+0x40>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <SDTimer_Handler+0x40>)
 8001b36:	701a      	strb	r2, [r3, #0]

				if(Timer2 > 0)
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <SDTimer_Handler+0x44>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d006      	beq.n	8001b50 <SDTimer_Handler+0x34>
					Timer2--;
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <SDTimer_Handler+0x44>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SDTimer_Handler+0x44>)
 8001b4e:	701a      	strb	r2, [r3, #0]
			}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	200023b1 	.word	0x200023b1
 8001b60:	200023b0 	.word	0x200023b0

08001b64 <SVC_Handler>:


void SVC_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <SysTick_Handler+0x34>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <SysTick_Handler+0x34>)
 8001b90:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt >= 10)
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <SysTick_Handler+0x34>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d904      	bls.n	8001ba6 <SysTick_Handler+0x26>
		{
			FatFsCnt = 0;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <SysTick_Handler+0x34>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
			SDTimer_Handler();
 8001ba2:	f7ff ffbb 	bl	8001b1c <SDTimer_Handler>
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba6:	f000 f899 	bl	8001cdc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001baa:	f000 f99c 	bl	8001ee6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000042 	.word	0x20000042

08001bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <SystemInit+0x28>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <SystemInit+0x28>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <SystemInit+0x28>)
 8001bce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bd2:	609a      	str	r2, [r3, #8]
#endif
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001be8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bea:	e003      	b.n	8001bf4 <LoopCopyDataInit>

08001bec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bf0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bf2:	3104      	adds	r1, #4

08001bf4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bf4:	480b      	ldr	r0, [pc, #44]	; (8001c24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bf8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bfc:	d3f6      	bcc.n	8001bec <CopyDataInit>
  ldr  r2, =_sbss
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c00:	e002      	b.n	8001c08 <LoopFillZerobss>

08001c02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001c02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c04:	f842 3b04 	str.w	r3, [r2], #4

08001c08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c0c:	d3f9      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c0e:	f7ff ffd3 	bl	8001bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c12:	f004 fdbb 	bl	800678c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c16:	f7ff fd43 	bl	80016a0 <main>
  bx  lr    
 8001c1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c1c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001c20:	08006ce4 	.word	0x08006ce4
  ldr  r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c28:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8001c2c:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8001c30:	20004428 	.word	0x20004428

08001c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC_IRQHandler>
	...

08001c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <HAL_Init+0x40>)
 8001c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_Init+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_Init+0x40>)
 8001c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HAL_Init+0x40>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c60:	2003      	movs	r0, #3
 8001c62:	f000 f90d 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 f808 	bl	8001c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c6c:	f7ff fee6 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x54>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_InitTick+0x58>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f917 	bl	8001ece <HAL_SYSTICK_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00e      	b.n	8001cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d80a      	bhi.n	8001cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb8:	f000 f8ed 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_InitTick+0x5c>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000004 	.word	0x20000004
 8001cd4:	2000000c 	.word	0x2000000c
 8001cd8:	20000008 	.word	0x20000008

08001cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x20>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x24>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_IncTick+0x24>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	2000000c 	.word	0x2000000c
 8001d00:	200023b4 	.word	0x200023b4

08001d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return uwTick;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_GetTick+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	200023b4 	.word	0x200023b4

08001d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4e:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60d3      	str	r3, [r2, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <__NVIC_GetPriorityGrouping+0x18>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0307 	and.w	r3, r3, #7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff47 	bl	8001d1c <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff5c 	bl	8001d64 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ffb0 	bl	8001e3c <SysTick_Config>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001eea:	f000 f802 	bl	8001ef2 <HAL_SYSTICK_Callback>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	e165      	b.n	80021e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f040 8154 	bne.w	80021e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d00b      	beq.n	8001f5a <HAL_GPIO_Init+0x5a>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f4e:	2b11      	cmp	r3, #17
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b12      	cmp	r3, #18
 8001f58:	d130      	bne.n	8001fbc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f90:	2201      	movs	r2, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 0201 	and.w	r2, r3, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0xfc>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b12      	cmp	r3, #18
 8001ffa:	d123      	bne.n	8002044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	08da      	lsrs	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3208      	adds	r2, #8
 8002004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	220f      	movs	r2, #15
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	69b9      	ldr	r1, [r7, #24]
 8002040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0203 	and.w	r2, r3, #3
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80ae 	beq.w	80021e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b5c      	ldr	r3, [pc, #368]	; (80021fc <HAL_GPIO_Init+0x2fc>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a5b      	ldr	r2, [pc, #364]	; (80021fc <HAL_GPIO_Init+0x2fc>)
 8002090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_GPIO_Init+0x2fc>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a2:	4a57      	ldr	r2, [pc, #348]	; (8002200 <HAL_GPIO_Init+0x300>)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	220f      	movs	r2, #15
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4e      	ldr	r2, [pc, #312]	; (8002204 <HAL_GPIO_Init+0x304>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d025      	beq.n	800211a <HAL_GPIO_Init+0x21a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4d      	ldr	r2, [pc, #308]	; (8002208 <HAL_GPIO_Init+0x308>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01f      	beq.n	8002116 <HAL_GPIO_Init+0x216>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4c      	ldr	r2, [pc, #304]	; (800220c <HAL_GPIO_Init+0x30c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d019      	beq.n	8002112 <HAL_GPIO_Init+0x212>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4b      	ldr	r2, [pc, #300]	; (8002210 <HAL_GPIO_Init+0x310>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d013      	beq.n	800210e <HAL_GPIO_Init+0x20e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4a      	ldr	r2, [pc, #296]	; (8002214 <HAL_GPIO_Init+0x314>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00d      	beq.n	800210a <HAL_GPIO_Init+0x20a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a49      	ldr	r2, [pc, #292]	; (8002218 <HAL_GPIO_Init+0x318>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d007      	beq.n	8002106 <HAL_GPIO_Init+0x206>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a48      	ldr	r2, [pc, #288]	; (800221c <HAL_GPIO_Init+0x31c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <HAL_GPIO_Init+0x202>
 80020fe:	2306      	movs	r3, #6
 8002100:	e00c      	b.n	800211c <HAL_GPIO_Init+0x21c>
 8002102:	2307      	movs	r3, #7
 8002104:	e00a      	b.n	800211c <HAL_GPIO_Init+0x21c>
 8002106:	2305      	movs	r3, #5
 8002108:	e008      	b.n	800211c <HAL_GPIO_Init+0x21c>
 800210a:	2304      	movs	r3, #4
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x21c>
 800210e:	2303      	movs	r3, #3
 8002110:	e004      	b.n	800211c <HAL_GPIO_Init+0x21c>
 8002112:	2302      	movs	r3, #2
 8002114:	e002      	b.n	800211c <HAL_GPIO_Init+0x21c>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_GPIO_Init+0x21c>
 800211a:	2300      	movs	r3, #0
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	f002 0203 	and.w	r2, r2, #3
 8002122:	0092      	lsls	r2, r2, #2
 8002124:	4093      	lsls	r3, r2
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800212c:	4934      	ldr	r1, [pc, #208]	; (8002200 <HAL_GPIO_Init+0x300>)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213a:	4b39      	ldr	r3, [pc, #228]	; (8002220 <HAL_GPIO_Init+0x320>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215e:	4a30      	ldr	r2, [pc, #192]	; (8002220 <HAL_GPIO_Init+0x320>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002164:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <HAL_GPIO_Init+0x320>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002188:	4a25      	ldr	r2, [pc, #148]	; (8002220 <HAL_GPIO_Init+0x320>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_GPIO_Init+0x320>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_GPIO_Init+0x320>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_GPIO_Init+0x320>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021dc:	4a10      	ldr	r2, [pc, #64]	; (8002220 <HAL_GPIO_Init+0x320>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3301      	adds	r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	f67f ae96 	bls.w	8001f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f0:	bf00      	nop
 80021f2:	3724      	adds	r7, #36	; 0x24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40023800 	.word	0x40023800
 8002200:	40013800 	.word	0x40013800
 8002204:	40020000 	.word	0x40020000
 8002208:	40020400 	.word	0x40020400
 800220c:	40020800 	.word	0x40020800
 8002210:	40020c00 	.word	0x40020c00
 8002214:	40021000 	.word	0x40021000
 8002218:	40021400 	.word	0x40021400
 800221c:	40021800 	.word	0x40021800
 8002220:	40013c00 	.word	0x40013c00

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	619a      	str	r2, [r3, #24]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0cc      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b68      	ldr	r3, [pc, #416]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d90c      	bls.n	8002294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b8      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	494d      	ldr	r1, [pc, #308]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d044      	beq.n	8002378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d119      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e07f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d003      	beq.n	8002316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002312:	2b03      	cmp	r3, #3
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e06f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e067      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b37      	ldr	r3, [pc, #220]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4934      	ldr	r1, [pc, #208]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	4313      	orrs	r3, r2
 8002346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002348:	f7ff fcdc 	bl	8001d04 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7ff fcd8 	bl	8001d04 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e04f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002378:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d20c      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e032      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4916      	ldr	r1, [pc, #88]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	490e      	ldr	r1, [pc, #56]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023de:	f000 f821 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80023e2:	4601      	mov	r1, r0
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	fa21 f303 	lsr.w	r3, r1, r3
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fc3c 	bl	8001c7c <HAL_InitTick>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023c00 	.word	0x40023c00
 8002414:	40023800 	.word	0x40023800
 8002418:	08006884 	.word	0x08006884
 800241c:	20000004 	.word	0x20000004
 8002420:	20000008 	.word	0x20000008

08002424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800243a:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d007      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x32>
 8002446:	2b08      	cmp	r3, #8
 8002448:	d008      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x38>
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 80b4 	bne.w	80025b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002450:	4b5e      	ldr	r3, [pc, #376]	; (80025cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002452:	60bb      	str	r3, [r7, #8]
       break;
 8002454:	e0b3      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002456:	4b5e      	ldr	r3, [pc, #376]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002458:	60bb      	str	r3, [r7, #8]
      break;
 800245a:	e0b0      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800245c:	4b5a      	ldr	r3, [pc, #360]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002464:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002466:	4b58      	ldr	r3, [pc, #352]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d04a      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002472:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	099b      	lsrs	r3, r3, #6
 8002478:	f04f 0400 	mov.w	r4, #0
 800247c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	ea03 0501 	and.w	r5, r3, r1
 8002488:	ea04 0602 	and.w	r6, r4, r2
 800248c:	4629      	mov	r1, r5
 800248e:	4632      	mov	r2, r6
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	f04f 0400 	mov.w	r4, #0
 8002498:	0154      	lsls	r4, r2, #5
 800249a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800249e:	014b      	lsls	r3, r1, #5
 80024a0:	4619      	mov	r1, r3
 80024a2:	4622      	mov	r2, r4
 80024a4:	1b49      	subs	r1, r1, r5
 80024a6:	eb62 0206 	sbc.w	r2, r2, r6
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	f04f 0400 	mov.w	r4, #0
 80024b2:	0194      	lsls	r4, r2, #6
 80024b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024b8:	018b      	lsls	r3, r1, #6
 80024ba:	1a5b      	subs	r3, r3, r1
 80024bc:	eb64 0402 	sbc.w	r4, r4, r2
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	00e2      	lsls	r2, r4, #3
 80024ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024ce:	00d9      	lsls	r1, r3, #3
 80024d0:	460b      	mov	r3, r1
 80024d2:	4614      	mov	r4, r2
 80024d4:	195b      	adds	r3, r3, r5
 80024d6:	eb44 0406 	adc.w	r4, r4, r6
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	0262      	lsls	r2, r4, #9
 80024e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80024e8:	0259      	lsls	r1, r3, #9
 80024ea:	460b      	mov	r3, r1
 80024ec:	4614      	mov	r4, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	4621      	mov	r1, r4
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f04f 0400 	mov.w	r4, #0
 80024f8:	461a      	mov	r2, r3
 80024fa:	4623      	mov	r3, r4
 80024fc:	f7fe fa7a 	bl	80009f4 <__aeabi_uldivmod>
 8002500:	4603      	mov	r3, r0
 8002502:	460c      	mov	r4, r1
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	e049      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002508:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	f04f 0400 	mov.w	r4, #0
 8002512:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	ea03 0501 	and.w	r5, r3, r1
 800251e:	ea04 0602 	and.w	r6, r4, r2
 8002522:	4629      	mov	r1, r5
 8002524:	4632      	mov	r2, r6
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	f04f 0400 	mov.w	r4, #0
 800252e:	0154      	lsls	r4, r2, #5
 8002530:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002534:	014b      	lsls	r3, r1, #5
 8002536:	4619      	mov	r1, r3
 8002538:	4622      	mov	r2, r4
 800253a:	1b49      	subs	r1, r1, r5
 800253c:	eb62 0206 	sbc.w	r2, r2, r6
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	f04f 0400 	mov.w	r4, #0
 8002548:	0194      	lsls	r4, r2, #6
 800254a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800254e:	018b      	lsls	r3, r1, #6
 8002550:	1a5b      	subs	r3, r3, r1
 8002552:	eb64 0402 	sbc.w	r4, r4, r2
 8002556:	f04f 0100 	mov.w	r1, #0
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	00e2      	lsls	r2, r4, #3
 8002560:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002564:	00d9      	lsls	r1, r3, #3
 8002566:	460b      	mov	r3, r1
 8002568:	4614      	mov	r4, r2
 800256a:	195b      	adds	r3, r3, r5
 800256c:	eb44 0406 	adc.w	r4, r4, r6
 8002570:	f04f 0100 	mov.w	r1, #0
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	02a2      	lsls	r2, r4, #10
 800257a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800257e:	0299      	lsls	r1, r3, #10
 8002580:	460b      	mov	r3, r1
 8002582:	4614      	mov	r4, r2
 8002584:	4618      	mov	r0, r3
 8002586:	4621      	mov	r1, r4
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f04f 0400 	mov.w	r4, #0
 800258e:	461a      	mov	r2, r3
 8002590:	4623      	mov	r3, r4
 8002592:	f7fe fa2f 	bl	80009f4 <__aeabi_uldivmod>
 8002596:	4603      	mov	r3, r0
 8002598:	460c      	mov	r4, r1
 800259a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	3301      	adds	r3, #1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	60bb      	str	r3, [r7, #8]
      break;
 80025b6:	e002      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025ba:	60bb      	str	r3, [r7, #8]
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	68bb      	ldr	r3, [r7, #8]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	00f42400 	.word	0x00f42400
 80025d0:	007a1200 	.word	0x007a1200

080025d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d075      	beq.n	80026d8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025ec:	4ba2      	ldr	r3, [pc, #648]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d00c      	beq.n	8002612 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f8:	4b9f      	ldr	r3, [pc, #636]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002600:	2b08      	cmp	r3, #8
 8002602:	d112      	bne.n	800262a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002604:	4b9c      	ldr	r3, [pc, #624]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002610:	d10b      	bne.n	800262a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002612:	4b99      	ldr	r3, [pc, #612]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d05b      	beq.n	80026d6 <HAL_RCC_OscConfig+0x102>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d157      	bne.n	80026d6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e20b      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x6e>
 8002634:	4b90      	ldr	r3, [pc, #576]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a8f      	ldr	r2, [pc, #572]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e01d      	b.n	800267e <HAL_RCC_OscConfig+0xaa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x92>
 800264c:	4b8a      	ldr	r3, [pc, #552]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a89      	ldr	r2, [pc, #548]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b87      	ldr	r3, [pc, #540]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a86      	ldr	r2, [pc, #536]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 800265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	e00b      	b.n	800267e <HAL_RCC_OscConfig+0xaa>
 8002666:	4b84      	ldr	r3, [pc, #528]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a83      	ldr	r2, [pc, #524]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 800266c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b81      	ldr	r3, [pc, #516]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a80      	ldr	r2, [pc, #512]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d013      	beq.n	80026ae <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7ff fb3d 	bl	8001d04 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268e:	f7ff fb39 	bl	8001d04 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	; 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1d0      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a0:	4b75      	ldr	r3, [pc, #468]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0xba>
 80026ac:	e014      	b.n	80026d8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7ff fb29 	bl	8001d04 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b6:	f7ff fb25 	bl	8001d04 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b64      	cmp	r3, #100	; 0x64
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1bc      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c8:	4b6b      	ldr	r3, [pc, #428]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f0      	bne.n	80026b6 <HAL_RCC_OscConfig+0xe2>
 80026d4:	e000      	b.n	80026d8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d063      	beq.n	80027ac <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026e4:	4b64      	ldr	r3, [pc, #400]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d11c      	bne.n	8002736 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fc:	4b5e      	ldr	r3, [pc, #376]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d116      	bne.n	8002736 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002708:	4b5b      	ldr	r3, [pc, #364]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_OscConfig+0x14c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d001      	beq.n	8002720 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e190      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b55      	ldr	r3, [pc, #340]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4952      	ldr	r1, [pc, #328]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002734:	e03a      	b.n	80027ac <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d020      	beq.n	8002780 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273e:	4b4f      	ldr	r3, [pc, #316]	; (800287c <HAL_RCC_OscConfig+0x2a8>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff fade 	bl	8001d04 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274c:	f7ff fada 	bl	8001d04 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e171      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b46      	ldr	r3, [pc, #280]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	493f      	ldr	r1, [pc, #252]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
 800277e:	e015      	b.n	80027ac <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002780:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_RCC_OscConfig+0x2a8>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7ff fabd 	bl	8001d04 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278e:	f7ff fab9 	bl	8001d04 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e150      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a0:	4b35      	ldr	r3, [pc, #212]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d030      	beq.n	800281a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d016      	beq.n	80027ee <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c0:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7ff fa9d 	bl	8001d04 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ce:	f7ff fa99 	bl	8001d04 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e130      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 80027e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x1fa>
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7ff fa86 	bl	8001d04 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fc:	f7ff fa82 	bl	8001d04 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e119      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 809f 	beq.w	8002966 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002828:	2300      	movs	r3, #0
 800282a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10f      	bne.n	8002858 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a0d      	ldr	r2, [pc, #52]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002854:	2301      	movs	r3, #1
 8002856:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_RCC_OscConfig+0x2b0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d120      	bne.n	80028a6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_RCC_OscConfig+0x2b0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a06      	ldr	r2, [pc, #24]	; (8002884 <HAL_RCC_OscConfig+0x2b0>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002870:	f7ff fa48 	bl	8001d04 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002876:	e010      	b.n	800289a <HAL_RCC_OscConfig+0x2c6>
 8002878:	40023800 	.word	0x40023800
 800287c:	42470000 	.word	0x42470000
 8002880:	42470e80 	.word	0x42470e80
 8002884:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002888:	f7ff fa3c 	bl	8001d04 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e0d3      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b6c      	ldr	r3, [pc, #432]	; (8002a4c <HAL_RCC_OscConfig+0x478>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x2e8>
 80028ae:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a67      	ldr	r2, [pc, #412]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ba:	e01c      	b.n	80028f6 <HAL_RCC_OscConfig+0x322>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d10c      	bne.n	80028de <HAL_RCC_OscConfig+0x30a>
 80028c4:	4b62      	ldr	r3, [pc, #392]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a61      	ldr	r2, [pc, #388]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80028ca:	f043 0304 	orr.w	r3, r3, #4
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
 80028d0:	4b5f      	ldr	r3, [pc, #380]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a5e      	ldr	r2, [pc, #376]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	e00b      	b.n	80028f6 <HAL_RCC_OscConfig+0x322>
 80028de:	4b5c      	ldr	r3, [pc, #368]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a5b      	ldr	r2, [pc, #364]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80028f0:	f023 0304 	bic.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d015      	beq.n	800292a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7ff fa01 	bl	8001d04 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7ff f9fd 	bl	8001d04 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	; 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e092      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ee      	beq.n	8002906 <HAL_RCC_OscConfig+0x332>
 8002928:	e014      	b.n	8002954 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7ff f9eb 	bl	8001d04 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7ff f9e7 	bl	8001d04 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e07c      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002948:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1ee      	bne.n	8002932 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d105      	bne.n	8002966 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a3c      	ldr	r2, [pc, #240]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 8002960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d068      	beq.n	8002a40 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800296e:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b08      	cmp	r3, #8
 8002978:	d060      	beq.n	8002a3c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d145      	bne.n	8002a0e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b34      	ldr	r3, [pc, #208]	; (8002a54 <HAL_RCC_OscConfig+0x480>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7ff f9bc 	bl	8001d04 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002990:	f7ff f9b8 	bl	8001d04 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e04f      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	3b01      	subs	r3, #1
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	071b      	lsls	r3, r3, #28
 80029da:	491d      	ldr	r1, [pc, #116]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <HAL_RCC_OscConfig+0x480>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7ff f98d 	bl	8001d04 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ee:	f7ff f989 	bl	8001d04 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e020      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x41a>
 8002a0c:	e018      	b.n	8002a40 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_RCC_OscConfig+0x480>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7ff f976 	bl	8001d04 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7ff f972 	bl	8001d04 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e009      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_RCC_OscConfig+0x47c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x448>
 8002a3a:	e001      	b.n	8002a40 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	40023800 	.word	0x40023800
 8002a54:	42470060 	.word	0x42470060

08002a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e056      	b.n	8002b18 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d106      	bne.n	8002a8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff f801 	bl	8001a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	ea42 0103 	orr.w	r1, r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	0c1b      	lsrs	r3, r3, #16
 8002ae8:	f003 0104 	and.w	r1, r3, #4
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69da      	ldr	r2, [r3, #28]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_SPI_Transmit+0x22>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e11e      	b.n	8002d80 <HAL_SPI_Transmit+0x260>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b4a:	f7ff f8db 	bl	8001d04 <HAL_GetTick>
 8002b4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d002      	beq.n	8002b66 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
 8002b62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b64:	e103      	b.n	8002d6e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_SPI_Transmit+0x52>
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b76:	e0fa      	b.n	8002d6e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	88fa      	ldrh	r2, [r7, #6]
 8002b90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	88fa      	ldrh	r2, [r7, #6]
 8002b96:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bbe:	d107      	bne.n	8002bd0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d007      	beq.n	8002bee <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf6:	d14b      	bne.n	8002c90 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_SPI_Transmit+0xe6>
 8002c00:	8afb      	ldrh	r3, [r7, #22]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d13e      	bne.n	8002c84 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	881a      	ldrh	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	1c9a      	adds	r2, r3, #2
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c2a:	e02b      	b.n	8002c84 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d112      	bne.n	8002c60 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	881a      	ldrh	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	1c9a      	adds	r2, r3, #2
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c5e:	e011      	b.n	8002c84 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c60:	f7ff f850 	bl	8001d04 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d803      	bhi.n	8002c78 <HAL_SPI_Transmit+0x158>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c76:	d102      	bne.n	8002c7e <HAL_SPI_Transmit+0x15e>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c82:	e074      	b.n	8002d6e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1ce      	bne.n	8002c2c <HAL_SPI_Transmit+0x10c>
 8002c8e:	e04c      	b.n	8002d2a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_SPI_Transmit+0x17e>
 8002c98:	8afb      	ldrh	r3, [r7, #22]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d140      	bne.n	8002d20 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	7812      	ldrb	r2, [r2, #0]
 8002caa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002cc4:	e02c      	b.n	8002d20 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d113      	bne.n	8002cfc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cfa:	e011      	b.n	8002d20 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cfc:	f7ff f802 	bl	8001d04 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d803      	bhi.n	8002d14 <HAL_SPI_Transmit+0x1f4>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d12:	d102      	bne.n	8002d1a <HAL_SPI_Transmit+0x1fa>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d1e:	e026      	b.n	8002d6e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1cd      	bne.n	8002cc6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	6839      	ldr	r1, [r7, #0]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa44 	bl	80031bc <SPI_EndRxTxTransaction>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e000      	b.n	8002d6e <HAL_SPI_Transmit+0x24e>
  }

error:
 8002d6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d96:	2301      	movs	r3, #1
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_SPI_TransmitReceive+0x26>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e18a      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x33c>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002db6:	f7fe ffa5 	bl	8001d04 <HAL_GetTick>
 8002dba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d00f      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x70>
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dde:	d107      	bne.n	8002df0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d103      	bne.n	8002df0 <HAL_SPI_TransmitReceive+0x68>
 8002de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d003      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
 8002df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002df6:	e15b      	b.n	80030b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_SPI_TransmitReceive+0x82>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_SPI_TransmitReceive+0x82>
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e10:	e14e      	b.n	80030b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d003      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2205      	movs	r2, #5
 8002e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	887a      	ldrh	r2, [r7, #2]
 8002e36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	887a      	ldrh	r2, [r7, #2]
 8002e4e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	d007      	beq.n	8002e7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e82:	d178      	bne.n	8002f76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <HAL_SPI_TransmitReceive+0x10a>
 8002e8c:	8b7b      	ldrh	r3, [r7, #26]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d166      	bne.n	8002f60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	881a      	ldrh	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	1c9a      	adds	r2, r3, #2
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eb6:	e053      	b.n	8002f60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d11b      	bne.n	8002efe <HAL_SPI_TransmitReceive+0x176>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d016      	beq.n	8002efe <HAL_SPI_TransmitReceive+0x176>
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d113      	bne.n	8002efe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	881a      	ldrh	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	1c9a      	adds	r2, r3, #2
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d119      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x1b8>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d014      	beq.n	8002f40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	b292      	uxth	r2, r2
 8002f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	1c9a      	adds	r2, r3, #2
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f40:	f7fe fee0 	bl	8001d04 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d807      	bhi.n	8002f60 <HAL_SPI_TransmitReceive+0x1d8>
 8002f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f56:	d003      	beq.n	8002f60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f5e:	e0a7      	b.n	80030b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1a6      	bne.n	8002eb8 <HAL_SPI_TransmitReceive+0x130>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1a1      	bne.n	8002eb8 <HAL_SPI_TransmitReceive+0x130>
 8002f74:	e07c      	b.n	8003070 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x1fc>
 8002f7e:	8b7b      	ldrh	r3, [r7, #26]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d16b      	bne.n	800305c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	7812      	ldrb	r2, [r2, #0]
 8002f90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002faa:	e057      	b.n	800305c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d11c      	bne.n	8002ff4 <HAL_SPI_TransmitReceive+0x26c>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d017      	beq.n	8002ff4 <HAL_SPI_TransmitReceive+0x26c>
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d114      	bne.n	8002ff4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	330c      	adds	r3, #12
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d119      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x2ae>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d014      	beq.n	8003036 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003032:	2301      	movs	r3, #1
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003036:	f7fe fe65 	bl	8001d04 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003042:	429a      	cmp	r2, r3
 8003044:	d803      	bhi.n	800304e <HAL_SPI_TransmitReceive+0x2c6>
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800304c:	d102      	bne.n	8003054 <HAL_SPI_TransmitReceive+0x2cc>
 800304e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800305a:	e029      	b.n	80030b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1a2      	bne.n	8002fac <HAL_SPI_TransmitReceive+0x224>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d19d      	bne.n	8002fac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f8a1 	bl	80031bc <SPI_EndRxTxTransaction>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800308c:	e010      	b.n	80030b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	e000      	b.n	80030b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3730      	adds	r7, #48	; 0x30
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030da:	b2db      	uxtb	r3, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030f8:	e04c      	b.n	8003194 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003100:	d048      	beq.n	8003194 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003102:	f7fe fdff 	bl	8001d04 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d902      	bls.n	8003118 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d13d      	bne.n	8003194 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003126:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003130:	d111      	bne.n	8003156 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313a:	d004      	beq.n	8003146 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003144:	d107      	bne.n	8003156 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003154:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315e:	d10f      	bne.n	8003180 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800317e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e00f      	b.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d1a3      	bne.n	80030fa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <SPI_EndRxTxTransaction+0x7c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1b      	ldr	r2, [pc, #108]	; (800323c <SPI_EndRxTxTransaction+0x80>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0d5b      	lsrs	r3, r3, #21
 80031d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031d8:	fb02 f303 	mul.w	r3, r2, r3
 80031dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031e6:	d112      	bne.n	800320e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	2180      	movs	r1, #128	; 0x80
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f7ff ff78 	bl	80030e8 <SPI_WaitFlagStateUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e00f      	b.n	800322e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	3b01      	subs	r3, #1
 8003218:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b80      	cmp	r3, #128	; 0x80
 8003226:	d0f2      	beq.n	800320e <SPI_EndRxTxTransaction+0x52>
 8003228:	e000      	b.n	800322c <SPI_EndRxTxTransaction+0x70>
        break;
 800322a:	bf00      	nop
  }

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000004 	.word	0x20000004
 800323c:	165e9f81 	.word	0x165e9f81

08003240 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003244:	4904      	ldr	r1, [pc, #16]	; (8003258 <MX_FATFS_Init+0x18>)
 8003246:	4805      	ldr	r0, [pc, #20]	; (800325c <MX_FATFS_Init+0x1c>)
 8003248:	f003 f9ca 	bl	80065e0 <FATFS_LinkDriver>
 800324c:	4603      	mov	r3, r0
 800324e:	461a      	mov	r2, r3
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <MX_FATFS_Init+0x20>)
 8003252:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	200023b8 	.word	0x200023b8
 800325c:	20000010 	.word	0x20000010
 8003260:	200023bc 	.word	0x200023bc

08003264 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003268:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	  /* USER CODE BEGIN INIT */
	    return SD_disk_initialize(pdrv);
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd fef1 	bl	8001068 <SD_disk_initialize>
 8003286:	4603      	mov	r3, r0
 8003288:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	4603      	mov	r3, r0
 800329a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd ffcc 	bl	800123c <SD_disk_status>
 80032a4:	4603      	mov	r3, r0
 80032a6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80032c0:	7bf8      	ldrb	r0, [r7, #15]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	f7fd ffce 	bl	8001268 <SD_disk_read>
 80032cc:	4603      	mov	r3, r0
 80032ce:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	4603      	mov	r3, r0
 80032e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	  return SD_disk_write(pdrv, buff, sector, count);
 80032e8:	7bf8      	ldrb	r0, [r7, #15]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	f7fe f824 	bl	800133c <SD_disk_write>
 80032f4:	4603      	mov	r3, r0
 80032f6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	603a      	str	r2, [r7, #0]
 800330a:	71fb      	strb	r3, [r7, #7]
 800330c:	460b      	mov	r3, r1
 800330e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	79b9      	ldrb	r1, [r7, #6]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe f892 	bl	8001444 <SD_disk_ioctl>
 8003320:	4603      	mov	r3, r0
 8003322:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	4a08      	ldr	r2, [pc, #32]	; (800335c <disk_status+0x30>)
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	79fa      	ldrb	r2, [r7, #7]
 8003344:	4905      	ldr	r1, [pc, #20]	; (800335c <disk_status+0x30>)
 8003346:	440a      	add	r2, r1
 8003348:	7a12      	ldrb	r2, [r2, #8]
 800334a:	4610      	mov	r0, r2
 800334c:	4798      	blx	r3
 800334e:	4603      	mov	r3, r0
 8003350:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	2000026c 	.word	0x2000026c

08003360 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	4a0d      	ldr	r2, [pc, #52]	; (80033a8 <disk_initialize+0x48>)
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d111      	bne.n	800339c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <disk_initialize+0x48>)
 800337c:	2101      	movs	r1, #1
 800337e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <disk_initialize+0x48>)
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	79fa      	ldrb	r2, [r7, #7]
 800338e:	4906      	ldr	r1, [pc, #24]	; (80033a8 <disk_initialize+0x48>)
 8003390:	440a      	add	r2, r1
 8003392:	7a12      	ldrb	r2, [r2, #8]
 8003394:	4610      	mov	r0, r2
 8003396:	4798      	blx	r3
 8003398:	4603      	mov	r3, r0
 800339a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	2000026c 	.word	0x2000026c

080033ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	4603      	mov	r3, r0
 80033ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <disk_read+0x3c>)
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	689c      	ldr	r4, [r3, #8]
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <disk_read+0x3c>)
 80033cc:	4413      	add	r3, r2
 80033ce:	7a18      	ldrb	r0, [r3, #8]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	47a0      	blx	r4
 80033d8:	4603      	mov	r3, r0
 80033da:	75fb      	strb	r3, [r7, #23]
  return res;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd90      	pop	{r4, r7, pc}
 80033e6:	bf00      	nop
 80033e8:	2000026c 	.word	0x2000026c

080033ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	4603      	mov	r3, r0
 80033fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <disk_write+0x3c>)
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	68dc      	ldr	r4, [r3, #12]
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	4a07      	ldr	r2, [pc, #28]	; (8003428 <disk_write+0x3c>)
 800340c:	4413      	add	r3, r2
 800340e:	7a18      	ldrb	r0, [r3, #8]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	47a0      	blx	r4
 8003418:	4603      	mov	r3, r0
 800341a:	75fb      	strb	r3, [r7, #23]
  return res;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
}
 800341e:	4618      	mov	r0, r3
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd90      	pop	{r4, r7, pc}
 8003426:	bf00      	nop
 8003428:	2000026c 	.word	0x2000026c

0800342c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	603a      	str	r2, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
 8003438:	460b      	mov	r3, r1
 800343a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <disk_ioctl+0x38>)
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	79fa      	ldrb	r2, [r7, #7]
 800344a:	4906      	ldr	r1, [pc, #24]	; (8003464 <disk_ioctl+0x38>)
 800344c:	440a      	add	r2, r1
 800344e:	7a10      	ldrb	r0, [r2, #8]
 8003450:	79b9      	ldrb	r1, [r7, #6]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	4798      	blx	r3
 8003456:	4603      	mov	r3, r0
 8003458:	73fb      	strb	r3, [r7, #15]
  return res;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	2000026c 	.word	0x2000026c

08003468 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3301      	adds	r3, #1
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003478:	89fb      	ldrh	r3, [r7, #14]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	b21a      	sxth	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b21b      	sxth	r3, r3
 8003484:	4313      	orrs	r3, r2
 8003486:	b21b      	sxth	r3, r3
 8003488:	81fb      	strh	r3, [r7, #14]
	return rv;
 800348a:	89fb      	ldrh	r3, [r7, #14]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3303      	adds	r3, #3
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	3202      	adds	r2, #2
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	3201      	adds	r2, #1
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	7812      	ldrb	r2, [r2, #0]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
	return rv;
 80034d0:	68fb      	ldr	r3, [r7, #12]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	887a      	ldrh	r2, [r7, #2]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	701a      	strb	r2, [r3, #0]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	1c53      	adds	r3, r2, #1
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	1c59      	adds	r1, r3, #1
 8003590:	6179      	str	r1, [r7, #20]
 8003592:	7812      	ldrb	r2, [r2, #0]
 8003594:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3b01      	subs	r3, #1
 800359a:	607b      	str	r3, [r7, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f1      	bne.n	8003586 <mem_cpy+0x1a>
	}
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80035ae:	b480      	push	{r7}
 80035b0:	b087      	sub	sp, #28
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	617a      	str	r2, [r7, #20]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f3      	bne.n	80035be <mem_set+0x10>
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80035e2:	b480      	push	{r7}
 80035e4:	b089      	sub	sp, #36	; 0x24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	61fa      	str	r2, [r7, #28]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	4619      	mov	r1, r3
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	61ba      	str	r2, [r7, #24]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	1acb      	subs	r3, r1, r3
 800360e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <mem_cmp+0x40>
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0eb      	beq.n	80035fa <mem_cmp+0x18>

	return r;
 8003622:	697b      	ldr	r3, [r7, #20]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3724      	adds	r7, #36	; 0x24
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800363a:	e002      	b.n	8003642 <chk_chr+0x12>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3301      	adds	r3, #1
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <chk_chr+0x26>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	4293      	cmp	r3, r2
 8003654:	d1f2      	bne.n	800363c <chk_chr+0xc>
	return *str;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	781b      	ldrb	r3, [r3, #0]
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	e029      	b.n	80036d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800367c:	4a27      	ldr	r2, [pc, #156]	; (800371c <chk_lock+0xb4>)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4413      	add	r3, r2
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01d      	beq.n	80036c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800368a:	4a24      	ldr	r2, [pc, #144]	; (800371c <chk_lock+0xb4>)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	4413      	add	r3, r2
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d116      	bne.n	80036ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800369c:	4a1f      	ldr	r2, [pc, #124]	; (800371c <chk_lock+0xb4>)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	4413      	add	r3, r2
 80036a4:	3304      	adds	r3, #4
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d10c      	bne.n	80036ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80036b0:	4a1a      	ldr	r2, [pc, #104]	; (800371c <chk_lock+0xb4>)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	3308      	adds	r3, #8
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d102      	bne.n	80036ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80036c4:	e007      	b.n	80036d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3301      	adds	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d9d2      	bls.n	800367c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d109      	bne.n	80036f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <chk_lock+0x80>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d101      	bne.n	80036ec <chk_lock+0x84>
 80036e8:	2300      	movs	r3, #0
 80036ea:	e010      	b.n	800370e <chk_lock+0xa6>
 80036ec:	2312      	movs	r3, #18
 80036ee:	e00e      	b.n	800370e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <chk_lock+0xa0>
 80036f6:	4a09      	ldr	r2, [pc, #36]	; (800371c <chk_lock+0xb4>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	4413      	add	r3, r2
 80036fe:	330c      	adds	r3, #12
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003706:	d101      	bne.n	800370c <chk_lock+0xa4>
 8003708:	2310      	movs	r3, #16
 800370a:	e000      	b.n	800370e <chk_lock+0xa6>
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	2000004c 	.word	0x2000004c

08003720 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	e002      	b.n	8003732 <enq_lock+0x12>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3301      	adds	r3, #1
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d806      	bhi.n	8003746 <enq_lock+0x26>
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <enq_lock+0x40>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	4413      	add	r3, r2
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f2      	bne.n	800372c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b02      	cmp	r3, #2
 800374a:	bf14      	ite	ne
 800374c:	2301      	movne	r3, #1
 800374e:	2300      	moveq	r3, #0
 8003750:	b2db      	uxtb	r3, r3
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	2000004c 	.word	0x2000004c

08003764 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	e01f      	b.n	80037b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003774:	4a41      	ldr	r2, [pc, #260]	; (800387c <inc_lock+0x118>)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	4413      	add	r3, r2
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d113      	bne.n	80037ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003786:	4a3d      	ldr	r2, [pc, #244]	; (800387c <inc_lock+0x118>)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003796:	429a      	cmp	r2, r3
 8003798:	d109      	bne.n	80037ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800379a:	4a38      	ldr	r2, [pc, #224]	; (800387c <inc_lock+0x118>)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	4413      	add	r3, r2
 80037a2:	3308      	adds	r3, #8
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d006      	beq.n	80037bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3301      	adds	r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d9dc      	bls.n	8003774 <inc_lock+0x10>
 80037ba:	e000      	b.n	80037be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80037bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d132      	bne.n	800382a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e002      	b.n	80037d0 <inc_lock+0x6c>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3301      	adds	r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d806      	bhi.n	80037e4 <inc_lock+0x80>
 80037d6:	4a29      	ldr	r2, [pc, #164]	; (800387c <inc_lock+0x118>)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	4413      	add	r3, r2
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f2      	bne.n	80037ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d101      	bne.n	80037ee <inc_lock+0x8a>
 80037ea:	2300      	movs	r3, #0
 80037ec:	e040      	b.n	8003870 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4922      	ldr	r1, [pc, #136]	; (800387c <inc_lock+0x118>)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	440b      	add	r3, r1
 80037fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	491e      	ldr	r1, [pc, #120]	; (800387c <inc_lock+0x118>)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	440b      	add	r3, r1
 8003808:	3304      	adds	r3, #4
 800380a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	491a      	ldr	r1, [pc, #104]	; (800387c <inc_lock+0x118>)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	440b      	add	r3, r1
 8003818:	3308      	adds	r3, #8
 800381a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800381c:	4a17      	ldr	r2, [pc, #92]	; (800387c <inc_lock+0x118>)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	4413      	add	r3, r2
 8003824:	330c      	adds	r3, #12
 8003826:	2200      	movs	r2, #0
 8003828:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d009      	beq.n	8003844 <inc_lock+0xe0>
 8003830:	4a12      	ldr	r2, [pc, #72]	; (800387c <inc_lock+0x118>)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	4413      	add	r3, r2
 8003838:	330c      	adds	r3, #12
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <inc_lock+0xe0>
 8003840:	2300      	movs	r3, #0
 8003842:	e015      	b.n	8003870 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <inc_lock+0xf8>
 800384a:	4a0c      	ldr	r2, [pc, #48]	; (800387c <inc_lock+0x118>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	4413      	add	r3, r2
 8003852:	330c      	adds	r3, #12
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	e001      	b.n	8003860 <inc_lock+0xfc>
 800385c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003860:	4906      	ldr	r1, [pc, #24]	; (800387c <inc_lock+0x118>)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	440b      	add	r3, r1
 8003868:	330c      	adds	r3, #12
 800386a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3301      	adds	r3, #1
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	2000004c 	.word	0x2000004c

08003880 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d825      	bhi.n	80038e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8003894:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <dec_lock+0x74>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	4413      	add	r3, r2
 800389c:	330c      	adds	r3, #12
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80038a2:	89fb      	ldrh	r3, [r7, #14]
 80038a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a8:	d101      	bne.n	80038ae <dec_lock+0x2e>
 80038aa:	2300      	movs	r3, #0
 80038ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80038ae:	89fb      	ldrh	r3, [r7, #14]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <dec_lock+0x3a>
 80038b4:	89fb      	ldrh	r3, [r7, #14]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80038ba:	4a0e      	ldr	r2, [pc, #56]	; (80038f4 <dec_lock+0x74>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	4413      	add	r3, r2
 80038c2:	330c      	adds	r3, #12
 80038c4:	89fa      	ldrh	r2, [r7, #14]
 80038c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80038c8:	89fb      	ldrh	r3, [r7, #14]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <dec_lock+0x5a>
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <dec_lock+0x74>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	4413      	add	r3, r2
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	737b      	strb	r3, [r7, #13]
 80038de:	e001      	b.n	80038e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80038e0:	2302      	movs	r3, #2
 80038e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80038e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	2000004c 	.word	0x2000004c

080038f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e010      	b.n	8003928 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003906:	4a0d      	ldr	r2, [pc, #52]	; (800393c <clear_lock+0x44>)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	4413      	add	r3, r2
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d105      	bne.n	8003922 <clear_lock+0x2a>
 8003916:	4a09      	ldr	r2, [pc, #36]	; (800393c <clear_lock+0x44>)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4413      	add	r3, r2
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3301      	adds	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d9eb      	bls.n	8003906 <clear_lock+0xe>
	}
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	2000004c 	.word	0x2000004c

08003940 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	78db      	ldrb	r3, [r3, #3]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d034      	beq.n	80039be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003958:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7858      	ldrb	r0, [r3, #1]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003964:	2301      	movs	r3, #1
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	f7ff fd40 	bl	80033ec <disk_write>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	e022      	b.n	80039be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	1ad2      	subs	r2, r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	429a      	cmp	r2, r3
 800398c:	d217      	bcs.n	80039be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	789b      	ldrb	r3, [r3, #2]
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e010      	b.n	80039b8 <sync_window+0x78>
					wsect += fs->fsize;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4413      	add	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7858      	ldrb	r0, [r3, #1]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80039aa:	2301      	movs	r3, #1
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	f7ff fd1d 	bl	80033ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d8eb      	bhi.n	8003996 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80039be:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d01b      	beq.n	8003a18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ffad 	bl	8003940 <sync_window>
 80039e6:	4603      	mov	r3, r0
 80039e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d113      	bne.n	8003a18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	7858      	ldrb	r0, [r3, #1]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80039fa:	2301      	movs	r3, #1
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	f7ff fcd5 	bl	80033ac <disk_read>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff87 	bl	8003940 <sync_window>
 8003a32:	4603      	mov	r3, r0
 8003a34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d159      	bne.n	8003af0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d149      	bne.n	8003ad8 <sync_fs+0xb4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	791b      	ldrb	r3, [r3, #4]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d145      	bne.n	8003ad8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	899b      	ldrh	r3, [r3, #12]
 8003a56:	461a      	mov	r2, r3
 8003a58:	2100      	movs	r1, #0
 8003a5a:	f7ff fda8 	bl	80035ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3338      	adds	r3, #56	; 0x38
 8003a62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003a66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fd37 	bl	80034de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3338      	adds	r3, #56	; 0x38
 8003a74:	4921      	ldr	r1, [pc, #132]	; (8003afc <sync_fs+0xd8>)
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fd4c 	bl	8003514 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3338      	adds	r3, #56	; 0x38
 8003a80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003a84:	491e      	ldr	r1, [pc, #120]	; (8003b00 <sync_fs+0xdc>)
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fd44 	bl	8003514 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3338      	adds	r3, #56	; 0x38
 8003a90:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f7ff fd3a 	bl	8003514 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3338      	adds	r3, #56	; 0x38
 8003aa4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	4619      	mov	r1, r3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	f7ff fd30 	bl	8003514 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7858      	ldrb	r0, [r3, #1]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003acc:	2301      	movs	r3, #1
 8003ace:	f7ff fc8d 	bl	80033ec <disk_write>
			fs->fsi_flag = 0;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	785b      	ldrb	r3, [r3, #1]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fca3 	bl	800342c <disk_ioctl>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <sync_fs+0xcc>
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	41615252 	.word	0x41615252
 8003b00:	61417272 	.word	0x61417272

08003b04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	3b02      	subs	r3, #2
 8003b12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	3b02      	subs	r3, #2
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d301      	bcc.n	8003b24 <clust2sect+0x20>
 8003b20:	2300      	movs	r3, #0
 8003b22:	e008      	b.n	8003b36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	895b      	ldrh	r3, [r3, #10]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	fb03 f202 	mul.w	r2, r3, r2
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	4413      	add	r3, r2
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b086      	sub	sp, #24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d904      	bls.n	8003b62 <get_fat+0x20>
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003b62:	2301      	movs	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e0b7      	b.n	8003cd8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d05a      	beq.n	8003c2c <get_fat+0xea>
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d07d      	beq.n	8003c76 <get_fat+0x134>
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	f040 80a2 	bne.w	8003cc4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	899b      	ldrh	r3, [r3, #12]
 8003b96:	4619      	mov	r1, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	6938      	ldr	r0, [r7, #16]
 8003ba4:	f7ff ff10 	bl	80039c8 <move_window>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 808d 	bne.w	8003cca <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	60fa      	str	r2, [r7, #12]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	8992      	ldrh	r2, [r2, #12]
 8003bba:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bbe:	fb02 f201 	mul.w	r2, r2, r1
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bcc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	899b      	ldrh	r3, [r3, #12]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bde:	4413      	add	r3, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	6938      	ldr	r0, [r7, #16]
 8003be4:	f7ff fef0 	bl	80039c8 <move_window>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d16f      	bne.n	8003cce <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	899b      	ldrh	r3, [r3, #12]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bfa:	fb02 f201 	mul.w	r2, r2, r1
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <get_fat+0xe0>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	e002      	b.n	8003c28 <get_fat+0xe6>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c28:	617b      	str	r3, [r7, #20]
			break;
 8003c2a:	e055      	b.n	8003cd8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	899b      	ldrh	r3, [r3, #12]
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	4619      	mov	r1, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c40:	4413      	add	r3, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	6938      	ldr	r0, [r7, #16]
 8003c46:	f7ff febf 	bl	80039c8 <move_window>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d140      	bne.n	8003cd2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	8992      	ldrh	r2, [r2, #12]
 8003c5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c62:	fb02 f200 	mul.w	r2, r2, r0
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	440b      	add	r3, r1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fbfc 	bl	8003468 <ld_word>
 8003c70:	4603      	mov	r3, r0
 8003c72:	617b      	str	r3, [r7, #20]
			break;
 8003c74:	e030      	b.n	8003cd8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	899b      	ldrh	r3, [r3, #12]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	4619      	mov	r1, r3
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	6938      	ldr	r0, [r7, #16]
 8003c90:	f7ff fe9a 	bl	80039c8 <move_window>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11d      	bne.n	8003cd6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	8992      	ldrh	r2, [r2, #12]
 8003ca8:	fbb3 f0f2 	udiv	r0, r3, r2
 8003cac:	fb02 f200 	mul.w	r2, r2, r0
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fbef 	bl	8003498 <ld_dword>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cc0:	617b      	str	r3, [r7, #20]
			break;
 8003cc2:	e009      	b.n	8003cd8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e006      	b.n	8003cd8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cca:	bf00      	nop
 8003ccc:	e004      	b.n	8003cd8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003cd6:	bf00      	nop
		}
	}

	return val;
 8003cd8:	697b      	ldr	r3, [r7, #20]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003ce2:	b590      	push	{r4, r7, lr}
 8003ce4:	b089      	sub	sp, #36	; 0x24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	f240 8106 	bls.w	8003f06 <put_fat+0x224>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	f080 8100 	bcs.w	8003f06 <put_fat+0x224>
		switch (fs->fs_type) {
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	f000 8088 	beq.w	8003e20 <put_fat+0x13e>
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	f000 80b0 	beq.w	8003e76 <put_fat+0x194>
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	f040 80f5 	bne.w	8003f06 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	085b      	lsrs	r3, r3, #1
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4413      	add	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	899b      	ldrh	r3, [r3, #12]
 8003d32:	4619      	mov	r1, r3
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff fe42 	bl	80039c8 <move_window>
 8003d44:	4603      	mov	r3, r0
 8003d46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d48:	7ffb      	ldrb	r3, [r7, #31]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 80d4 	bne.w	8003ef8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	61ba      	str	r2, [r7, #24]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	8992      	ldrh	r2, [r2, #12]
 8003d60:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d64:	fb02 f200 	mul.w	r2, r2, r0
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00d      	beq.n	8003d94 <put_fat+0xb2>
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b25b      	sxtb	r3, r3
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	b25a      	sxtb	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	b25b      	sxtb	r3, r3
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	b25b      	sxtb	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	e001      	b.n	8003d98 <put_fat+0xb6>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	899b      	ldrh	r3, [r3, #12]
 8003daa:	4619      	mov	r1, r3
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8003db2:	4413      	add	r3, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff fe06 	bl	80039c8 <move_window>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003dc0:	7ffb      	ldrb	r3, [r7, #31]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 809a 	bne.w	8003efc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	899b      	ldrh	r3, [r3, #12]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8003dda:	fb02 f200 	mul.w	r2, r2, r0
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	440b      	add	r3, r1
 8003de2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <put_fat+0x114>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e00e      	b.n	8003e14 <put_fat+0x132>
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b25b      	sxtb	r3, r3
 8003dfc:	f023 030f 	bic.w	r3, r3, #15
 8003e00:	b25a      	sxtb	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	b25b      	sxtb	r3, r3
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	b25b      	sxtb	r3, r3
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b25b      	sxtb	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	70da      	strb	r2, [r3, #3]
			break;
 8003e1e:	e072      	b.n	8003f06 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	899b      	ldrh	r3, [r3, #12]
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e34:	4413      	add	r3, r2
 8003e36:	4619      	mov	r1, r3
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff fdc5 	bl	80039c8 <move_window>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e42:	7ffb      	ldrb	r3, [r7, #31]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d15b      	bne.n	8003f00 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	8992      	ldrh	r2, [r2, #12]
 8003e56:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e5a:	fb02 f200 	mul.w	r2, r2, r0
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	440b      	add	r3, r1
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	b292      	uxth	r2, r2
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fb38 	bl	80034de <st_word>
			fs->wflag = 1;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	70da      	strb	r2, [r3, #3]
			break;
 8003e74:	e047      	b.n	8003f06 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	899b      	ldrh	r3, [r3, #12]
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	4619      	mov	r1, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e8a:	4413      	add	r3, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7ff fd9a 	bl	80039c8 <move_window>
 8003e94:	4603      	mov	r3, r0
 8003e96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e98:	7ffb      	ldrb	r3, [r7, #31]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d132      	bne.n	8003f04 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	8992      	ldrh	r2, [r2, #12]
 8003eb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8003eb6:	fb02 f200 	mul.w	r2, r2, r0
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff faea 	bl	8003498 <ld_dword>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003eca:	4323      	orrs	r3, r4
 8003ecc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	8992      	ldrh	r2, [r2, #12]
 8003edc:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ee0:	fb02 f200 	mul.w	r2, r2, r0
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fb12 	bl	8003514 <st_dword>
			fs->wflag = 1;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	70da      	strb	r2, [r3, #3]
			break;
 8003ef6:	e006      	b.n	8003f06 <put_fat+0x224>
			if (res != FR_OK) break;
 8003ef8:	bf00      	nop
 8003efa:	e004      	b.n	8003f06 <put_fat+0x224>
			if (res != FR_OK) break;
 8003efc:	bf00      	nop
 8003efe:	e002      	b.n	8003f06 <put_fat+0x224>
			if (res != FR_OK) break;
 8003f00:	bf00      	nop
 8003f02:	e000      	b.n	8003f06 <put_fat+0x224>
			if (res != FR_OK) break;
 8003f04:	bf00      	nop
		}
	}
	return res;
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3724      	adds	r7, #36	; 0x24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd90      	pop	{r4, r7, pc}

08003f10 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d904      	bls.n	8003f36 <remove_chain+0x26>
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d301      	bcc.n	8003f3a <remove_chain+0x2a>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e04b      	b.n	8003fd2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00c      	beq.n	8003f5a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	69b8      	ldr	r0, [r7, #24]
 8003f48:	f7ff fecb 	bl	8003ce2 <put_fat>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <remove_chain+0x4a>
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	e03b      	b.n	8003fd2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f7ff fdf0 	bl	8003b42 <get_fat>
 8003f62:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d031      	beq.n	8003fce <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <remove_chain+0x64>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e02e      	b.n	8003fd2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f7a:	d101      	bne.n	8003f80 <remove_chain+0x70>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e028      	b.n	8003fd2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003f80:	2200      	movs	r2, #0
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	69b8      	ldr	r0, [r7, #24]
 8003f86:	f7ff feac 	bl	8003ce2 <put_fat>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003f8e:	7ffb      	ldrb	r3, [r7, #31]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <remove_chain+0x88>
 8003f94:	7ffb      	ldrb	r3, [r7, #31]
 8003f96:	e01c      	b.n	8003fd2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	699a      	ldr	r2, [r3, #24]
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	3b02      	subs	r3, #2
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d20b      	bcs.n	8003fbe <remove_chain+0xae>
			fs->free_clst++;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	791b      	ldrb	r3, [r3, #4]
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d3c6      	bcc.n	8003f5a <remove_chain+0x4a>
 8003fcc:	e000      	b.n	8003fd0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003fce:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b088      	sub	sp, #32
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10d      	bne.n	800400c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <create_chain+0x2c>
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	429a      	cmp	r2, r3
 8004004:	d31b      	bcc.n	800403e <create_chain+0x64>
 8004006:	2301      	movs	r3, #1
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e018      	b.n	800403e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800400c:	6839      	ldr	r1, [r7, #0]
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff fd97 	bl	8003b42 <get_fat>
 8004014:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d801      	bhi.n	8004020 <create_chain+0x46>
 800401c:	2301      	movs	r3, #1
 800401e:	e070      	b.n	8004102 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004026:	d101      	bne.n	800402c <create_chain+0x52>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	e06a      	b.n	8004102 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	429a      	cmp	r2, r3
 8004034:	d201      	bcs.n	800403a <create_chain+0x60>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	e063      	b.n	8004102 <create_chain+0x128>
		scl = clst;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3301      	adds	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	429a      	cmp	r2, r3
 8004050:	d307      	bcc.n	8004062 <create_chain+0x88>
				ncl = 2;
 8004052:	2302      	movs	r3, #2
 8004054:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	429a      	cmp	r2, r3
 800405c:	d901      	bls.n	8004062 <create_chain+0x88>
 800405e:	2300      	movs	r3, #0
 8004060:	e04f      	b.n	8004102 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004062:	69f9      	ldr	r1, [r7, #28]
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff fd6c 	bl	8003b42 <get_fat>
 800406a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00e      	beq.n	8004090 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d003      	beq.n	8004080 <create_chain+0xa6>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800407e:	d101      	bne.n	8004084 <create_chain+0xaa>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	e03e      	b.n	8004102 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	429a      	cmp	r2, r3
 800408a:	d1da      	bne.n	8004042 <create_chain+0x68>
 800408c:	2300      	movs	r3, #0
 800408e:	e038      	b.n	8004102 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004090:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004096:	69f9      	ldr	r1, [r7, #28]
 8004098:	6938      	ldr	r0, [r7, #16]
 800409a:	f7ff fe22 	bl	8003ce2 <put_fat>
 800409e:	4603      	mov	r3, r0
 80040a0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <create_chain+0xe2>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d006      	beq.n	80040bc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	6839      	ldr	r1, [r7, #0]
 80040b2:	6938      	ldr	r0, [r7, #16]
 80040b4:	f7ff fe15 	bl	8003ce2 <put_fat>
 80040b8:	4603      	mov	r3, r0
 80040ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d116      	bne.n	80040f0 <create_chain+0x116>
		fs->last_clst = ncl;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	699a      	ldr	r2, [r3, #24]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	3b02      	subs	r3, #2
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d804      	bhi.n	80040e0 <create_chain+0x106>
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	1e5a      	subs	r2, r3, #1
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	791b      	ldrb	r3, [r3, #4]
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	711a      	strb	r2, [r3, #4]
 80040ee:	e007      	b.n	8004100 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d102      	bne.n	80040fc <create_chain+0x122>
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040fa:	e000      	b.n	80040fe <create_chain+0x124>
 80040fc:	2301      	movs	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004100:	69fb      	ldr	r3, [r7, #28]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800410a:	b480      	push	{r7}
 800410c:	b087      	sub	sp, #28
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	3304      	adds	r3, #4
 8004120:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	899b      	ldrh	r3, [r3, #12]
 8004126:	461a      	mov	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	fbb3 f3f2 	udiv	r3, r3, r2
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	8952      	ldrh	r2, [r2, #10]
 8004132:	fbb3 f3f2 	udiv	r3, r3, r2
 8004136:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1d1a      	adds	r2, r3, #4
 800413c:	613a      	str	r2, [r7, #16]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <clmt_clust+0x42>
 8004148:	2300      	movs	r3, #0
 800414a:	e010      	b.n	800416e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	d307      	bcc.n	8004164 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	3304      	adds	r3, #4
 8004160:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004162:	e7e9      	b.n	8004138 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004164:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	4413      	add	r3, r2
}
 800416e:	4618      	mov	r0, r3
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b086      	sub	sp, #24
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004190:	d204      	bcs.n	800419c <dir_sdi+0x22>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800419c:	2302      	movs	r3, #2
 800419e:	e071      	b.n	8004284 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <dir_sdi+0x46>
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d902      	bls.n	80041c0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	8912      	ldrh	r2, [r2, #8]
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d301      	bcc.n	80041d6 <dir_sdi+0x5c>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e056      	b.n	8004284 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	61da      	str	r2, [r3, #28]
 80041de:	e02d      	b.n	800423c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	895b      	ldrh	r3, [r3, #10]
 80041e4:	461a      	mov	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	899b      	ldrh	r3, [r3, #12]
 80041ea:	fb03 f302 	mul.w	r3, r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80041f0:	e019      	b.n	8004226 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6979      	ldr	r1, [r7, #20]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fca3 	bl	8003b42 <get_fat>
 80041fc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004204:	d101      	bne.n	800420a <dir_sdi+0x90>
 8004206:	2301      	movs	r3, #1
 8004208:	e03c      	b.n	8004284 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d904      	bls.n	800421a <dir_sdi+0xa0>
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	429a      	cmp	r2, r3
 8004218:	d301      	bcc.n	800421e <dir_sdi+0xa4>
 800421a:	2302      	movs	r3, #2
 800421c:	e032      	b.n	8004284 <dir_sdi+0x10a>
			ofs -= csz;
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	429a      	cmp	r2, r3
 800422c:	d2e1      	bcs.n	80041f2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800422e:	6979      	ldr	r1, [r7, #20]
 8004230:	6938      	ldr	r0, [r7, #16]
 8004232:	f7ff fc67 	bl	8003b04 <clust2sect>
 8004236:	4602      	mov	r2, r0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <dir_sdi+0xd4>
 800424a:	2302      	movs	r3, #2
 800424c:	e01a      	b.n	8004284 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69da      	ldr	r2, [r3, #28]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	899b      	ldrh	r3, [r3, #12]
 8004256:	4619      	mov	r1, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	fbb3 f3f1 	udiv	r3, r3, r1
 800425e:	441a      	add	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	899b      	ldrh	r3, [r3, #12]
 800426e:	461a      	mov	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	fbb3 f0f2 	udiv	r0, r3, r2
 8004276:	fb02 f200 	mul.w	r2, r2, r0
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	18ca      	adds	r2, r1, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	3320      	adds	r3, #32
 80042a2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <dir_next+0x28>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b2:	d301      	bcc.n	80042b8 <dir_next+0x2c>
 80042b4:	2304      	movs	r3, #4
 80042b6:	e0bb      	b.n	8004430 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	899b      	ldrh	r3, [r3, #12]
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80042c4:	fb02 f201 	mul.w	r2, r2, r1
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f040 809d 	bne.w	800440a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10b      	bne.n	80042fa <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	8912      	ldrh	r2, [r2, #8]
 80042ea:	4293      	cmp	r3, r2
 80042ec:	f0c0 808d 	bcc.w	800440a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	61da      	str	r2, [r3, #28]
 80042f6:	2304      	movs	r3, #4
 80042f8:	e09a      	b.n	8004430 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	899b      	ldrh	r3, [r3, #12]
 80042fe:	461a      	mov	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	fbb3 f3f2 	udiv	r3, r3, r2
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	8952      	ldrh	r2, [r2, #10]
 800430a:	3a01      	subs	r2, #1
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d17b      	bne.n	800440a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f7ff fc11 	bl	8003b42 <get_fat>
 8004320:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d801      	bhi.n	800432c <dir_next+0xa0>
 8004328:	2302      	movs	r3, #2
 800432a:	e081      	b.n	8004430 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004332:	d101      	bne.n	8004338 <dir_next+0xac>
 8004334:	2301      	movs	r3, #1
 8004336:	e07b      	b.n	8004430 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	429a      	cmp	r2, r3
 8004340:	d359      	bcc.n	80043f6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d104      	bne.n	8004352 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	61da      	str	r2, [r3, #28]
 800434e:	2304      	movs	r3, #4
 8004350:	e06e      	b.n	8004430 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f7ff fe3d 	bl	8003fda <create_chain>
 8004360:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <dir_next+0xe0>
 8004368:	2307      	movs	r3, #7
 800436a:	e061      	b.n	8004430 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <dir_next+0xea>
 8004372:	2302      	movs	r3, #2
 8004374:	e05c      	b.n	8004430 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800437c:	d101      	bne.n	8004382 <dir_next+0xf6>
 800437e:	2301      	movs	r3, #1
 8004380:	e056      	b.n	8004430 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f7ff fadc 	bl	8003940 <sync_window>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <dir_next+0x106>
 800438e:	2301      	movs	r3, #1
 8004390:	e04e      	b.n	8004430 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	899b      	ldrh	r3, [r3, #12]
 800439c:	461a      	mov	r2, r3
 800439e:	2100      	movs	r1, #0
 80043a0:	f7ff f905 	bl	80035ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	6979      	ldr	r1, [r7, #20]
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff fbaa 	bl	8003b04 <clust2sect>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	635a      	str	r2, [r3, #52]	; 0x34
 80043b6:	e012      	b.n	80043de <dir_next+0x152>
						fs->wflag = 1;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f7ff fabe 	bl	8003940 <sync_window>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <dir_next+0x142>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e030      	b.n	8004430 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3301      	adds	r3, #1
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	635a      	str	r2, [r3, #52]	; 0x34
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	895b      	ldrh	r3, [r3, #10]
 80043e2:	461a      	mov	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d3e6      	bcc.n	80043b8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad2      	subs	r2, r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80043fc:	6979      	ldr	r1, [r7, #20]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7ff fb80 	bl	8003b04 <clust2sect>
 8004404:	4602      	mov	r2, r0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	899b      	ldrh	r3, [r3, #12]
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004422:	fb02 f200 	mul.w	r2, r2, r0
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	18ca      	adds	r2, r1, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004448:	2100      	movs	r1, #0
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fe95 	bl	800417a <dir_sdi>
 8004450:	4603      	mov	r3, r0
 8004452:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d12b      	bne.n	80044b2 <dir_alloc+0x7a>
		n = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	4619      	mov	r1, r3
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff faaf 	bl	80039c8 <move_window>
 800446a:	4603      	mov	r3, r0
 800446c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d11d      	bne.n	80044b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2be5      	cmp	r3, #229	; 0xe5
 800447c:	d004      	beq.n	8004488 <dir_alloc+0x50>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3301      	adds	r3, #1
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d102      	bne.n	800449c <dir_alloc+0x64>
 8004496:	e00c      	b.n	80044b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800449c:	2101      	movs	r1, #1
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fef4 	bl	800428c <dir_next>
 80044a4:	4603      	mov	r3, r0
 80044a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0d7      	beq.n	800445e <dir_alloc+0x26>
 80044ae:	e000      	b.n	80044b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80044b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d101      	bne.n	80044bc <dir_alloc+0x84>
 80044b8:	2307      	movs	r3, #7
 80044ba:	75fb      	strb	r3, [r7, #23]
	return res;
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	331a      	adds	r3, #26
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe ffc7 	bl	8003468 <ld_word>
 80044da:	4603      	mov	r3, r0
 80044dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d109      	bne.n	80044fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	3314      	adds	r3, #20
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe ffbc 	bl	8003468 <ld_word>
 80044f0:	4603      	mov	r3, r0
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80044fa:	68fb      	ldr	r3, [r7, #12]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	331a      	adds	r3, #26
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	b292      	uxth	r2, r2
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe ffdf 	bl	80034de <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d109      	bne.n	800453c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f103 0214 	add.w	r2, r3, #20
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	b29b      	uxth	r3, r3
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7fe ffd1 	bl	80034de <st_word>
	}
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	331a      	adds	r3, #26
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe ff88 	bl	8003468 <ld_word>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <cmp_lfn+0x1e>
 800455e:	2300      	movs	r3, #0
 8004560:	e059      	b.n	8004616 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800456a:	1e5a      	subs	r2, r3, #1
 800456c:	4613      	mov	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004578:	2301      	movs	r3, #1
 800457a:	81fb      	strh	r3, [r7, #14]
 800457c:	2300      	movs	r3, #0
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e033      	b.n	80045ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004582:	4a27      	ldr	r2, [pc, #156]	; (8004620 <cmp_lfn+0xdc>)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4413      	add	r3, r2
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4413      	add	r3, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f7fe ff69 	bl	8003468 <ld_word>
 8004596:	4603      	mov	r3, r0
 8004598:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800459a:	89fb      	ldrh	r3, [r7, #14]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01a      	beq.n	80045d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2bfe      	cmp	r3, #254	; 0xfe
 80045a4:	d812      	bhi.n	80045cc <cmp_lfn+0x88>
 80045a6:	89bb      	ldrh	r3, [r7, #12]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f002 f865 	bl	8006678 <ff_wtoupper>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461c      	mov	r4, r3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	617a      	str	r2, [r7, #20]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f002 f859 	bl	8006678 <ff_wtoupper>
 80045c6:	4603      	mov	r3, r0
 80045c8:	429c      	cmp	r4, r3
 80045ca:	d001      	beq.n	80045d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80045cc:	2300      	movs	r3, #0
 80045ce:	e022      	b.n	8004616 <cmp_lfn+0xd2>
			}
			wc = uc;
 80045d0:	89bb      	ldrh	r3, [r7, #12]
 80045d2:	81fb      	strh	r3, [r7, #14]
 80045d4:	e006      	b.n	80045e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80045d6:	89bb      	ldrh	r3, [r7, #12]
 80045d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045dc:	4293      	cmp	r3, r2
 80045de:	d001      	beq.n	80045e4 <cmp_lfn+0xa0>
 80045e0:	2300      	movs	r3, #0
 80045e2:	e018      	b.n	8004616 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	3301      	adds	r3, #1
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	d9c8      	bls.n	8004582 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <cmp_lfn+0xd0>
 80045fc:	89fb      	ldrh	r3, [r7, #14]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d008      	beq.n	8004614 <cmp_lfn+0xd0>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <cmp_lfn+0xd0>
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004614:	2301      	movs	r3, #1
}
 8004616:	4618      	mov	r0, r3
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	bd90      	pop	{r4, r7, pc}
 800461e:	bf00      	nop
 8004620:	08006914 	.word	0x08006914

08004624 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	4611      	mov	r1, r2
 8004630:	461a      	mov	r2, r3
 8004632:	460b      	mov	r3, r1
 8004634:	71fb      	strb	r3, [r7, #7]
 8004636:	4613      	mov	r3, r2
 8004638:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	330d      	adds	r3, #13
 800463e:	79ba      	ldrb	r2, [r7, #6]
 8004640:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	330b      	adds	r3, #11
 8004646:	220f      	movs	r2, #15
 8004648:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	330c      	adds	r3, #12
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	331a      	adds	r3, #26
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe ff40 	bl	80034de <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	1e5a      	subs	r2, r3, #1
 8004662:	4613      	mov	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	82fb      	strh	r3, [r7, #22]
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004676:	8afb      	ldrh	r3, [r7, #22]
 8004678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <put_lfn+0x6c>
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	61fa      	str	r2, [r7, #28]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004690:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <put_lfn+0xcc>)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	4413      	add	r3, r2
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	4413      	add	r3, r2
 800469e:	8afa      	ldrh	r2, [r7, #22]
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe ff1b 	bl	80034de <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80046a8:	8afb      	ldrh	r3, [r7, #22]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <put_lfn+0x90>
 80046ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046b2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	3301      	adds	r3, #1
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d9da      	bls.n	8004676 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80046c0:	8afb      	ldrh	r3, [r7, #22]
 80046c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d006      	beq.n	80046d8 <put_lfn+0xb4>
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d103      	bne.n	80046e0 <put_lfn+0xbc>
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046de:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	79fa      	ldrb	r2, [r7, #7]
 80046e4:	701a      	strb	r2, [r3, #0]
}
 80046e6:	bf00      	nop
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	08006914 	.word	0x08006914

080046f4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08c      	sub	sp, #48	; 0x30
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004702:	220b      	movs	r2, #11
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7fe ff30 	bl	800356c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b05      	cmp	r3, #5
 8004710:	d92b      	bls.n	800476a <gen_numname+0x76>
		sr = seq;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004716:	e022      	b.n	800475e <gen_numname+0x6a>
			wc = *lfn++;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1c9a      	adds	r2, r3, #2
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004722:	2300      	movs	r3, #0
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
 8004726:	e017      	b.n	8004758 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	005a      	lsls	r2, r3, #1
 800472c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	4413      	add	r3, r2
 8004734:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004736:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <gen_numname+0x5e>
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800474c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004750:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	3301      	adds	r3, #1
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	2b0f      	cmp	r3, #15
 800475c:	d9e4      	bls.n	8004728 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1d8      	bne.n	8004718 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800476a:	2307      	movs	r3, #7
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	b2db      	uxtb	r3, r3
 8004778:	3330      	adds	r3, #48	; 0x30
 800477a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800477e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004782:	2b39      	cmp	r3, #57	; 0x39
 8004784:	d904      	bls.n	8004790 <gen_numname+0x9c>
 8004786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800478a:	3307      	adds	r3, #7
 800478c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	1e5a      	subs	r2, r3, #1
 8004794:	62ba      	str	r2, [r7, #40]	; 0x28
 8004796:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800479a:	4413      	add	r3, r2
 800479c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80047a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1de      	bne.n	800476e <gen_numname+0x7a>
	ns[i] = '~';
 80047b0:	f107 0214 	add.w	r2, r7, #20
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	4413      	add	r3, r2
 80047b8:	227e      	movs	r2, #126	; 0x7e
 80047ba:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80047bc:	2300      	movs	r3, #0
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
 80047c0:	e002      	b.n	80047c8 <gen_numname+0xd4>
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	3301      	adds	r3, #1
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
 80047c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d205      	bcs.n	80047dc <gen_numname+0xe8>
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	4413      	add	r3, r2
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d1f2      	bne.n	80047c2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	2b07      	cmp	r3, #7
 80047e0:	d808      	bhi.n	80047f4 <gen_numname+0x100>
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80047e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047ec:	4413      	add	r3, r2
 80047ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80047f2:	e000      	b.n	80047f6 <gen_numname+0x102>
 80047f4:	2120      	movs	r1, #32
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	627a      	str	r2, [r7, #36]	; 0x24
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	460a      	mov	r2, r1
 8004802:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	2b07      	cmp	r3, #7
 8004808:	d9e8      	bls.n	80047dc <gen_numname+0xe8>
}
 800480a:	bf00      	nop
 800480c:	3730      	adds	r7, #48	; 0x30
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800481e:	230b      	movs	r3, #11
 8004820:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	0852      	lsrs	r2, r2, #1
 8004828:	01db      	lsls	r3, r3, #7
 800482a:	4313      	orrs	r3, r2
 800482c:	b2da      	uxtb	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	1c59      	adds	r1, r3, #1
 8004832:	6079      	str	r1, [r7, #4]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	4413      	add	r3, r2
 8004838:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	3b01      	subs	r3, #1
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1ed      	bne.n	8004822 <sum_sfn+0x10>
	return sum;
 8004846:	7bfb      	ldrb	r3, [r7, #15]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004862:	2100      	movs	r1, #0
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff fc88 	bl	800417a <dir_sdi>
 800486a:	4603      	mov	r3, r0
 800486c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800486e:	7dfb      	ldrb	r3, [r7, #23]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <dir_find+0x24>
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	e0a9      	b.n	80049cc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004878:	23ff      	movs	r3, #255	; 0xff
 800487a:	753b      	strb	r3, [r7, #20]
 800487c:	7d3b      	ldrb	r3, [r7, #20]
 800487e:	757b      	strb	r3, [r7, #21]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	4619      	mov	r1, r3
 800488e:	6938      	ldr	r0, [r7, #16]
 8004890:	f7ff f89a 	bl	80039c8 <move_window>
 8004894:	4603      	mov	r3, r0
 8004896:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 8090 	bne.w	80049c0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80048a8:	7dbb      	ldrb	r3, [r7, #22]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <dir_find+0x60>
 80048ae:	2304      	movs	r3, #4
 80048b0:	75fb      	strb	r3, [r7, #23]
 80048b2:	e08a      	b.n	80049ca <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	330b      	adds	r3, #11
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c0:	73fb      	strb	r3, [r7, #15]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	7bfa      	ldrb	r2, [r7, #15]
 80048c6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80048c8:	7dbb      	ldrb	r3, [r7, #22]
 80048ca:	2be5      	cmp	r3, #229	; 0xe5
 80048cc:	d007      	beq.n	80048de <dir_find+0x8a>
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <dir_find+0x98>
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b0f      	cmp	r3, #15
 80048dc:	d006      	beq.n	80048ec <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80048de:	23ff      	movs	r3, #255	; 0xff
 80048e0:	757b      	strb	r3, [r7, #21]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
 80048ea:	e05e      	b.n	80049aa <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b0f      	cmp	r3, #15
 80048f0:	d136      	bne.n	8004960 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d154      	bne.n	80049aa <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004900:	7dbb      	ldrb	r3, [r7, #22]
 8004902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00d      	beq.n	8004926 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	7b5b      	ldrb	r3, [r3, #13]
 8004910:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004912:	7dbb      	ldrb	r3, [r7, #22]
 8004914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004918:	75bb      	strb	r3, [r7, #22]
 800491a:	7dbb      	ldrb	r3, [r7, #22]
 800491c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004926:	7dba      	ldrb	r2, [r7, #22]
 8004928:	7d7b      	ldrb	r3, [r7, #21]
 800492a:	429a      	cmp	r2, r3
 800492c:	d115      	bne.n	800495a <dir_find+0x106>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	330d      	adds	r3, #13
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	7d3a      	ldrb	r2, [r7, #20]
 8004938:	429a      	cmp	r2, r3
 800493a:	d10e      	bne.n	800495a <dir_find+0x106>
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f7ff fdfc 	bl	8004544 <cmp_lfn>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <dir_find+0x106>
 8004952:	7d7b      	ldrb	r3, [r7, #21]
 8004954:	3b01      	subs	r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e000      	b.n	800495c <dir_find+0x108>
 800495a:	23ff      	movs	r3, #255	; 0xff
 800495c:	757b      	strb	r3, [r7, #21]
 800495e:	e024      	b.n	80049aa <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004960:	7d7b      	ldrb	r3, [r7, #21]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <dir_find+0x126>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ff51 	bl	8004812 <sum_sfn>
 8004970:	4603      	mov	r3, r0
 8004972:	461a      	mov	r2, r3
 8004974:	7d3b      	ldrb	r3, [r7, #20]
 8004976:	4293      	cmp	r3, r2
 8004978:	d024      	beq.n	80049c4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <dir_find+0x14a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a18      	ldr	r0, [r3, #32]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3324      	adds	r3, #36	; 0x24
 8004990:	220b      	movs	r2, #11
 8004992:	4619      	mov	r1, r3
 8004994:	f7fe fe25 	bl	80035e2 <mem_cmp>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d014      	beq.n	80049c8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800499e:	23ff      	movs	r3, #255	; 0xff
 80049a0:	757b      	strb	r3, [r7, #21]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80049aa:	2100      	movs	r1, #0
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff fc6d 	bl	800428c <dir_next>
 80049b2:	4603      	mov	r3, r0
 80049b4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f43f af65 	beq.w	8004888 <dir_find+0x34>
 80049be:	e004      	b.n	80049ca <dir_find+0x176>
		if (res != FR_OK) break;
 80049c0:	bf00      	nop
 80049c2:	e002      	b.n	80049ca <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80049c4:	bf00      	nop
 80049c6:	e000      	b.n	80049ca <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80049c8:	bf00      	nop

	return res;
 80049ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08c      	sub	sp, #48	; 0x30
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80049e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <dir_register+0x20>
 80049f0:	2306      	movs	r3, #6
 80049f2:	e0e0      	b.n	8004bb6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80049f4:	2300      	movs	r3, #0
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
 80049f8:	e002      	b.n	8004a00 <dir_register+0x2c>
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	3301      	adds	r3, #1
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	4413      	add	r3, r2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f4      	bne.n	80049fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004a16:	f107 030c 	add.w	r3, r7, #12
 8004a1a:	220c      	movs	r2, #12
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe fda5 	bl	800356c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d032      	beq.n	8004a92 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2240      	movs	r2, #64	; 0x40
 8004a30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8004a34:	2301      	movs	r3, #1
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a38:	e016      	b.n	8004a68 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	f107 010c 	add.w	r1, r7, #12
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	f7ff fe53 	bl	80046f4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff ff00 	bl	8004854 <dir_find>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	3301      	adds	r3, #1
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	2b63      	cmp	r3, #99	; 0x63
 8004a6c:	d9e5      	bls.n	8004a3a <dir_register+0x66>
 8004a6e:	e000      	b.n	8004a72 <dir_register+0x9e>
			if (res != FR_OK) break;
 8004a70:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	2b64      	cmp	r3, #100	; 0x64
 8004a76:	d101      	bne.n	8004a7c <dir_register+0xa8>
 8004a78:	2307      	movs	r3, #7
 8004a7a:	e09c      	b.n	8004bb6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d002      	beq.n	8004a8a <dir_register+0xb6>
 8004a84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a88:	e095      	b.n	8004bb6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004a8a:	7dfa      	ldrb	r2, [r7, #23]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <dir_register+0xd8>
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	4a47      	ldr	r2, [pc, #284]	; (8004bc0 <dir_register+0x1ec>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	089b      	lsrs	r3, r3, #2
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	e000      	b.n	8004aae <dir_register+0xda>
 8004aac:	2301      	movs	r3, #1
 8004aae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004ab0:	6a39      	ldr	r1, [r7, #32]
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff fcc0 	bl	8004438 <dir_alloc>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d148      	bne.n	8004b58 <dir_register+0x184>
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	623b      	str	r3, [r7, #32]
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d042      	beq.n	8004b58 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	015b      	lsls	r3, r3, #5
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	4619      	mov	r1, r3
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fb4b 	bl	800417a <dir_sdi>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d132      	bne.n	8004b58 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3324      	adds	r3, #36	; 0x24
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fe8b 	bl	8004812 <sum_sfn>
 8004afc:	4603      	mov	r3, r0
 8004afe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	4619      	mov	r1, r3
 8004b06:	69f8      	ldr	r0, [r7, #28]
 8004b08:	f7fe ff5e 	bl	80039c8 <move_window>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d11d      	bne.n	8004b56 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	6918      	ldr	r0, [r3, #16]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a19      	ldr	r1, [r3, #32]
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	7efb      	ldrb	r3, [r7, #27]
 8004b28:	f7ff fd7c 	bl	8004624 <put_lfn>
				fs->wflag = 1;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004b32:	2100      	movs	r1, #0
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff fba9 	bl	800428c <dir_next>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <dir_register+0x184>
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	623b      	str	r3, [r7, #32]
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1d5      	bne.n	8004b00 <dir_register+0x12c>
 8004b54:	e000      	b.n	8004b58 <dir_register+0x184>
				if (res != FR_OK) break;
 8004b56:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004b58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d128      	bne.n	8004bb2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4619      	mov	r1, r3
 8004b66:	69f8      	ldr	r0, [r7, #28]
 8004b68:	f7fe ff2e 	bl	80039c8 <move_window>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11b      	bne.n	8004bb2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fd13 	bl	80035ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a18      	ldr	r0, [r3, #32]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3324      	adds	r3, #36	; 0x24
 8004b90:	220b      	movs	r2, #11
 8004b92:	4619      	mov	r1, r3
 8004b94:	f7fe fcea 	bl	800356c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	f002 0218 	and.w	r2, r2, #24
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3730      	adds	r7, #48	; 0x30
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	4ec4ec4f 	.word	0x4ec4ec4f

08004bc4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	; 0x28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	61ba      	str	r2, [r7, #24]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4413      	add	r3, r2
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004bf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bf4:	2b1f      	cmp	r3, #31
 8004bf6:	d940      	bls.n	8004c7a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8004bfc:	d006      	beq.n	8004c0c <create_name+0x48>
 8004bfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c00:	2b5c      	cmp	r3, #92	; 0x5c
 8004c02:	d110      	bne.n	8004c26 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004c04:	e002      	b.n	8004c0c <create_name+0x48>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61bb      	str	r3, [r7, #24]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	4413      	add	r3, r2
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b2f      	cmp	r3, #47	; 0x2f
 8004c16:	d0f6      	beq.n	8004c06 <create_name+0x42>
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b5c      	cmp	r3, #92	; 0x5c
 8004c22:	d0f0      	beq.n	8004c06 <create_name+0x42>
			break;
 8004c24:	e02a      	b.n	8004c7c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2bfe      	cmp	r3, #254	; 0xfe
 8004c2a:	d901      	bls.n	8004c30 <create_name+0x6c>
 8004c2c:	2306      	movs	r3, #6
 8004c2e:	e177      	b.n	8004f20 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c38:	2101      	movs	r1, #1
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f001 fce0 	bl	8006600 <ff_convert>
 8004c40:	4603      	mov	r3, r0
 8004c42:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <create_name+0x8a>
 8004c4a:	2306      	movs	r3, #6
 8004c4c:	e168      	b.n	8004f20 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c50:	2b7f      	cmp	r3, #127	; 0x7f
 8004c52:	d809      	bhi.n	8004c68 <create_name+0xa4>
 8004c54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c56:	4619      	mov	r1, r3
 8004c58:	48b3      	ldr	r0, [pc, #716]	; (8004f28 <create_name+0x364>)
 8004c5a:	f7fe fce9 	bl	8003630 <chk_chr>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <create_name+0xa4>
 8004c64:	2306      	movs	r3, #6
 8004c66:	e15b      	b.n	8004f20 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	617a      	str	r2, [r7, #20]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c76:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004c78:	e7b4      	b.n	8004be4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004c7a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	441a      	add	r2, r3
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c88:	2b1f      	cmp	r3, #31
 8004c8a:	d801      	bhi.n	8004c90 <create_name+0xcc>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	e000      	b.n	8004c92 <create_name+0xce>
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004c96:	e011      	b.n	8004cbc <create_name+0xf8>
		w = lfn[di - 1];
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004caa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d002      	beq.n	8004cb6 <create_name+0xf2>
 8004cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8004cb4:	d106      	bne.n	8004cc4 <create_name+0x100>
		di--;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1ea      	bne.n	8004c98 <create_name+0xd4>
 8004cc2:	e000      	b.n	8004cc6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004cc4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4413      	add	r3, r2
 8004cce:	2200      	movs	r2, #0
 8004cd0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <create_name+0x118>
 8004cd8:	2306      	movs	r3, #6
 8004cda:	e121      	b.n	8004f20 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3324      	adds	r3, #36	; 0x24
 8004ce0:	220b      	movs	r2, #11
 8004ce2:	2120      	movs	r1, #32
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fe fc62 	bl	80035ae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	e002      	b.n	8004cf6 <create_name+0x132>
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d0f5      	beq.n	8004cf0 <create_name+0x12c>
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d10:	d0ee      	beq.n	8004cf0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d009      	beq.n	8004d2c <create_name+0x168>
 8004d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d1c:	f043 0303 	orr.w	r3, r3, #3
 8004d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004d24:	e002      	b.n	8004d2c <create_name+0x168>
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <create_name+0x182>
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	2b2e      	cmp	r3, #46	; 0x2e
 8004d44:	d1ef      	bne.n	8004d26 <create_name+0x162>

	i = b = 0; ni = 8;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	623b      	str	r3, [r7, #32]
 8004d50:	2308      	movs	r3, #8
 8004d52:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	61ba      	str	r2, [r7, #24]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004d64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8090 	beq.w	8004e8c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d006      	beq.n	8004d80 <create_name+0x1bc>
 8004d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d74:	2b2e      	cmp	r3, #46	; 0x2e
 8004d76:	d10a      	bne.n	8004d8e <create_name+0x1ca>
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d006      	beq.n	8004d8e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d84:	f043 0303 	orr.w	r3, r3, #3
 8004d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d8c:	e07d      	b.n	8004e8a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004d8e:	6a3a      	ldr	r2, [r7, #32]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d203      	bcs.n	8004d9e <create_name+0x1da>
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d123      	bne.n	8004de6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	2b0b      	cmp	r3, #11
 8004da2:	d106      	bne.n	8004db2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004da8:	f043 0303 	orr.w	r3, r3, #3
 8004dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004db0:	e06f      	b.n	8004e92 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d005      	beq.n	8004dc6 <create_name+0x202>
 8004dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dbe:	f043 0303 	orr.w	r3, r3, #3
 8004dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d860      	bhi.n	8004e90 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	230b      	movs	r3, #11
 8004dd8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004dda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004de4:	e051      	b.n	8004e8a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004de8:	2b7f      	cmp	r3, #127	; 0x7f
 8004dea:	d914      	bls.n	8004e16 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004dec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fc05 	bl	8006600 <ff_convert>
 8004df6:	4603      	mov	r3, r0
 8004df8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d004      	beq.n	8004e0a <create_name+0x246>
 8004e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e02:	3b80      	subs	r3, #128	; 0x80
 8004e04:	4a49      	ldr	r2, [pc, #292]	; (8004f2c <create_name+0x368>)
 8004e06:	5cd3      	ldrb	r3, [r2, r3]
 8004e08:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e0e:	f043 0302 	orr.w	r3, r3, #2
 8004e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <create_name+0x268>
 8004e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4843      	ldr	r0, [pc, #268]	; (8004f30 <create_name+0x36c>)
 8004e22:	f7fe fc05 	bl	8003630 <chk_chr>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004e2c:	235f      	movs	r3, #95	; 0x5f
 8004e2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e34:	f043 0303 	orr.w	r3, r3, #3
 8004e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e3c:	e01b      	b.n	8004e76 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d909      	bls.n	8004e58 <create_name+0x294>
 8004e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e46:	2b5a      	cmp	r3, #90	; 0x5a
 8004e48:	d806      	bhi.n	8004e58 <create_name+0x294>
					b |= 2;
 8004e4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e4e:	f043 0302 	orr.w	r3, r3, #2
 8004e52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e56:	e00e      	b.n	8004e76 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e5a:	2b60      	cmp	r3, #96	; 0x60
 8004e5c:	d90b      	bls.n	8004e76 <create_name+0x2b2>
 8004e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e60:	2b7a      	cmp	r3, #122	; 0x7a
 8004e62:	d808      	bhi.n	8004e76 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8004e64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e72:	3b20      	subs	r3, #32
 8004e74:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	623a      	str	r2, [r7, #32]
 8004e7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e7e:	b2d1      	uxtb	r1, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	4413      	add	r3, r2
 8004e84:	460a      	mov	r2, r1
 8004e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004e8a:	e763      	b.n	8004d54 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8004e8c:	bf00      	nop
 8004e8e:	e000      	b.n	8004e92 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8004e90:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e98:	2be5      	cmp	r3, #229	; 0xe5
 8004e9a:	d103      	bne.n	8004ea4 <create_name+0x2e0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2205      	movs	r2, #5
 8004ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d104      	bne.n	8004eb4 <create_name+0x2f0>
 8004eaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004eb8:	f003 030c 	and.w	r3, r3, #12
 8004ebc:	2b0c      	cmp	r3, #12
 8004ebe:	d005      	beq.n	8004ecc <create_name+0x308>
 8004ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d105      	bne.n	8004ed8 <create_name+0x314>
 8004ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d117      	bne.n	8004f14 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d105      	bne.n	8004efc <create_name+0x338>
 8004ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef4:	f043 0310 	orr.w	r3, r3, #16
 8004ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004efc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f00:	f003 030c 	and.w	r3, r3, #12
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d105      	bne.n	8004f14 <create_name+0x350>
 8004f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f0c:	f043 0308 	orr.w	r3, r3, #8
 8004f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8004f1e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3728      	adds	r7, #40	; 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	0800683c 	.word	0x0800683c
 8004f2c:	08006894 	.word	0x08006894
 8004f30:	08006848 	.word	0x08006848

08004f34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004f48:	e002      	b.n	8004f50 <follow_path+0x1c>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b2f      	cmp	r3, #47	; 0x2f
 8004f56:	d0f8      	beq.n	8004f4a <follow_path+0x16>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b5c      	cmp	r3, #92	; 0x5c
 8004f5e:	d0f4      	beq.n	8004f4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2200      	movs	r2, #0
 8004f64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b1f      	cmp	r3, #31
 8004f6c:	d80a      	bhi.n	8004f84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2280      	movs	r2, #128	; 0x80
 8004f72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004f76:	2100      	movs	r1, #0
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff f8fe 	bl	800417a <dir_sdi>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	75fb      	strb	r3, [r7, #23]
 8004f82:	e048      	b.n	8005016 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004f84:	463b      	mov	r3, r7
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fe1b 	bl	8004bc4 <create_name>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d139      	bne.n	800500c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fc5b 	bl	8004854 <dir_find>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004fa8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d12c      	bne.n	8005010 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004fb6:	7afb      	ldrb	r3, [r7, #11]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d127      	bne.n	8005010 <follow_path+0xdc>
 8004fc0:	2305      	movs	r3, #5
 8004fc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004fc4:	e024      	b.n	8005010 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004fc6:	7afb      	ldrb	r3, [r7, #11]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d121      	bne.n	8005014 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	799b      	ldrb	r3, [r3, #6]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004fdc:	2305      	movs	r3, #5
 8004fde:	75fb      	strb	r3, [r7, #23]
 8004fe0:	e019      	b.n	8005016 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	8992      	ldrh	r2, [r2, #12]
 8004ff0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ff4:	fb02 f200 	mul.w	r2, r2, r0
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7ff fa61 	bl	80044c6 <ld_clust>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800500a:	e7bb      	b.n	8004f84 <follow_path+0x50>
			if (res != FR_OK) break;
 800500c:	bf00      	nop
 800500e:	e002      	b.n	8005016 <follow_path+0xe2>
				break;
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005014:	bf00      	nop
			}
		}
	}

	return res;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800502c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d031      	beq.n	800509a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e002      	b.n	8005044 <get_ldnumber+0x24>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	3301      	adds	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b1f      	cmp	r3, #31
 800504a:	d903      	bls.n	8005054 <get_ldnumber+0x34>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b3a      	cmp	r3, #58	; 0x3a
 8005052:	d1f4      	bne.n	800503e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b3a      	cmp	r3, #58	; 0x3a
 800505a:	d11c      	bne.n	8005096 <get_ldnumber+0x76>
			tp = *path;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	60fa      	str	r2, [r7, #12]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	3b30      	subs	r3, #48	; 0x30
 800506c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b09      	cmp	r3, #9
 8005072:	d80e      	bhi.n	8005092 <get_ldnumber+0x72>
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	429a      	cmp	r2, r3
 800507a:	d10a      	bne.n	8005092 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d107      	bne.n	8005092 <get_ldnumber+0x72>
					vol = (int)i;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	3301      	adds	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	e002      	b.n	800509c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800509a:	693b      	ldr	r3, [r7, #16]
}
 800509c:	4618      	mov	r0, r3
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	70da      	strb	r2, [r3, #3]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050be:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80050c0:	6839      	ldr	r1, [r7, #0]
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fe fc80 	bl	80039c8 <move_window>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <check_fs+0x2a>
 80050ce:	2304      	movs	r3, #4
 80050d0:	e038      	b.n	8005144 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3338      	adds	r3, #56	; 0x38
 80050d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe f9c4 	bl	8003468 <ld_word>
 80050e0:	4603      	mov	r3, r0
 80050e2:	461a      	mov	r2, r3
 80050e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <check_fs+0x48>
 80050ec:	2303      	movs	r3, #3
 80050ee:	e029      	b.n	8005144 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050f6:	2be9      	cmp	r3, #233	; 0xe9
 80050f8:	d009      	beq.n	800510e <check_fs+0x66>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005100:	2beb      	cmp	r3, #235	; 0xeb
 8005102:	d11e      	bne.n	8005142 <check_fs+0x9a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800510a:	2b90      	cmp	r3, #144	; 0x90
 800510c:	d119      	bne.n	8005142 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3338      	adds	r3, #56	; 0x38
 8005112:	3336      	adds	r3, #54	; 0x36
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe f9bf 	bl	8003498 <ld_dword>
 800511a:	4603      	mov	r3, r0
 800511c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005120:	4a0a      	ldr	r2, [pc, #40]	; (800514c <check_fs+0xa4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d101      	bne.n	800512a <check_fs+0x82>
 8005126:	2300      	movs	r3, #0
 8005128:	e00c      	b.n	8005144 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3338      	adds	r3, #56	; 0x38
 800512e:	3352      	adds	r3, #82	; 0x52
 8005130:	4618      	mov	r0, r3
 8005132:	f7fe f9b1 	bl	8003498 <ld_dword>
 8005136:	4602      	mov	r2, r0
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <check_fs+0xa8>)
 800513a:	429a      	cmp	r2, r3
 800513c:	d101      	bne.n	8005142 <check_fs+0x9a>
 800513e:	2300      	movs	r3, #0
 8005140:	e000      	b.n	8005144 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005142:	2302      	movs	r3, #2
}
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	00544146 	.word	0x00544146
 8005150:	33544146 	.word	0x33544146

08005154 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b096      	sub	sp, #88	; 0x58
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	4613      	mov	r3, r2
 8005160:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f7ff ff59 	bl	8005020 <get_ldnumber>
 800516e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005172:	2b00      	cmp	r3, #0
 8005174:	da01      	bge.n	800517a <find_volume+0x26>
 8005176:	230b      	movs	r3, #11
 8005178:	e268      	b.n	800564c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800517a:	4ab0      	ldr	r2, [pc, #704]	; (800543c <find_volume+0x2e8>)
 800517c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005182:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <find_volume+0x3a>
 800518a:	230c      	movs	r3, #12
 800518c:	e25e      	b.n	800564c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005192:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01a      	beq.n	80051da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fe f8bf 	bl	800332c <disk_status>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80051b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10c      	bne.n	80051da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <find_volume+0x82>
 80051c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80051d2:	230a      	movs	r3, #10
 80051d4:	e23a      	b.n	800564c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80051d6:	2300      	movs	r3, #0
 80051d8:	e238      	b.n	800564c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fe f8b7 	bl	8003360 <disk_initialize>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80051f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005204:	2303      	movs	r3, #3
 8005206:	e221      	b.n	800564c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <find_volume+0xca>
 800520e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800521a:	230a      	movs	r3, #10
 800521c:	e216      	b.n	800564c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	7858      	ldrb	r0, [r3, #1]
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	330c      	adds	r3, #12
 8005226:	461a      	mov	r2, r3
 8005228:	2102      	movs	r1, #2
 800522a:	f7fe f8ff 	bl	800342c <disk_ioctl>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <find_volume+0xe4>
 8005234:	2301      	movs	r3, #1
 8005236:	e209      	b.n	800564c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	899b      	ldrh	r3, [r3, #12]
 800523c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005240:	d80d      	bhi.n	800525e <find_volume+0x10a>
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	899b      	ldrh	r3, [r3, #12]
 8005246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800524a:	d308      	bcc.n	800525e <find_volume+0x10a>
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	899b      	ldrh	r3, [r3, #12]
 8005250:	461a      	mov	r2, r3
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	899b      	ldrh	r3, [r3, #12]
 8005256:	3b01      	subs	r3, #1
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <find_volume+0x10e>
 800525e:	2301      	movs	r3, #1
 8005260:	e1f4      	b.n	800564c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005266:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005268:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800526a:	f7ff ff1d 	bl	80050a8 <check_fs>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005278:	2b02      	cmp	r3, #2
 800527a:	d14b      	bne.n	8005314 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800527c:	2300      	movs	r3, #0
 800527e:	643b      	str	r3, [r7, #64]	; 0x40
 8005280:	e01f      	b.n	80052c2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005290:	4413      	add	r3, r2
 8005292:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	3304      	adds	r3, #4
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d006      	beq.n	80052ac <find_volume+0x158>
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	3308      	adds	r3, #8
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe f8f8 	bl	8003498 <ld_dword>
 80052a8:	4602      	mov	r2, r0
 80052aa:	e000      	b.n	80052ae <find_volume+0x15a>
 80052ac:	2200      	movs	r2, #0
 80052ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80052b6:	440b      	add	r3, r1
 80052b8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80052bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052be:	3301      	adds	r3, #1
 80052c0:	643b      	str	r3, [r7, #64]	; 0x40
 80052c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d9dc      	bls.n	8005282 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80052c8:	2300      	movs	r3, #0
 80052ca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80052cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <find_volume+0x184>
 80052d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d4:	3b01      	subs	r3, #1
 80052d6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80052d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80052e0:	4413      	add	r3, r2
 80052e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80052e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80052e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <find_volume+0x1a6>
 80052ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052f2:	f7ff fed9 	bl	80050a8 <check_fs>
 80052f6:	4603      	mov	r3, r0
 80052f8:	e000      	b.n	80052fc <find_volume+0x1a8>
 80052fa:	2303      	movs	r3, #3
 80052fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005300:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005304:	2b01      	cmp	r3, #1
 8005306:	d905      	bls.n	8005314 <find_volume+0x1c0>
 8005308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530a:	3301      	adds	r3, #1
 800530c:	643b      	str	r3, [r7, #64]	; 0x40
 800530e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005310:	2b03      	cmp	r3, #3
 8005312:	d9e1      	bls.n	80052d8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005318:	2b04      	cmp	r3, #4
 800531a:	d101      	bne.n	8005320 <find_volume+0x1cc>
 800531c:	2301      	movs	r3, #1
 800531e:	e195      	b.n	800564c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005324:	2b01      	cmp	r3, #1
 8005326:	d901      	bls.n	800532c <find_volume+0x1d8>
 8005328:	230d      	movs	r3, #13
 800532a:	e18f      	b.n	800564c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	3338      	adds	r3, #56	; 0x38
 8005330:	330b      	adds	r3, #11
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe f898 	bl	8003468 <ld_word>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	899b      	ldrh	r3, [r3, #12]
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <find_volume+0x1f4>
 8005344:	230d      	movs	r3, #13
 8005346:	e181      	b.n	800564c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534a:	3338      	adds	r3, #56	; 0x38
 800534c:	3316      	adds	r3, #22
 800534e:	4618      	mov	r0, r3
 8005350:	f7fe f88a 	bl	8003468 <ld_word>
 8005354:	4603      	mov	r3, r0
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <find_volume+0x218>
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	3338      	adds	r3, #56	; 0x38
 8005362:	3324      	adds	r3, #36	; 0x24
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe f897 	bl	8003498 <ld_dword>
 800536a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005370:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	789b      	ldrb	r3, [r3, #2]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d005      	beq.n	8005390 <find_volume+0x23c>
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	789b      	ldrb	r3, [r3, #2]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d001      	beq.n	8005390 <find_volume+0x23c>
 800538c:	230d      	movs	r3, #13
 800538e:	e15d      	b.n	800564c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	789b      	ldrb	r3, [r3, #2]
 8005394:	461a      	mov	r2, r3
 8005396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	895b      	ldrh	r3, [r3, #10]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <find_volume+0x270>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	895b      	ldrh	r3, [r3, #10]
 80053b6:	461a      	mov	r2, r3
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	895b      	ldrh	r3, [r3, #10]
 80053bc:	3b01      	subs	r3, #1
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <find_volume+0x274>
 80053c4:	230d      	movs	r3, #13
 80053c6:	e141      	b.n	800564c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	3338      	adds	r3, #56	; 0x38
 80053cc:	3311      	adds	r3, #17
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe f84a 	bl	8003468 <ld_word>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	891b      	ldrh	r3, [r3, #8]
 80053e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e2:	8992      	ldrh	r2, [r2, #12]
 80053e4:	0952      	lsrs	r2, r2, #5
 80053e6:	b292      	uxth	r2, r2
 80053e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80053ec:	fb02 f201 	mul.w	r2, r2, r1
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <find_volume+0x2a8>
 80053f8:	230d      	movs	r3, #13
 80053fa:	e127      	b.n	800564c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	3338      	adds	r3, #56	; 0x38
 8005400:	3313      	adds	r3, #19
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe f830 	bl	8003468 <ld_word>
 8005408:	4603      	mov	r3, r0
 800540a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800540c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <find_volume+0x2cc>
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	3338      	adds	r3, #56	; 0x38
 8005416:	3320      	adds	r3, #32
 8005418:	4618      	mov	r0, r3
 800541a:	f7fe f83d 	bl	8003498 <ld_dword>
 800541e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	3338      	adds	r3, #56	; 0x38
 8005424:	330e      	adds	r3, #14
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe f81e 	bl	8003468 <ld_word>
 800542c:	4603      	mov	r3, r0
 800542e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005430:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <find_volume+0x2ec>
 8005436:	230d      	movs	r3, #13
 8005438:	e108      	b.n	800564c <find_volume+0x4f8>
 800543a:	bf00      	nop
 800543c:	20000044 	.word	0x20000044

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005440:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005444:	4413      	add	r3, r2
 8005446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005448:	8911      	ldrh	r1, [r2, #8]
 800544a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800544c:	8992      	ldrh	r2, [r2, #12]
 800544e:	0952      	lsrs	r2, r2, #5
 8005450:	b292      	uxth	r2, r2
 8005452:	fbb1 f2f2 	udiv	r2, r1, r2
 8005456:	b292      	uxth	r2, r2
 8005458:	4413      	add	r3, r2
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800545c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	429a      	cmp	r2, r3
 8005462:	d201      	bcs.n	8005468 <find_volume+0x314>
 8005464:	230d      	movs	r3, #13
 8005466:	e0f1      	b.n	800564c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005470:	8952      	ldrh	r2, [r2, #10]
 8005472:	fbb3 f3f2 	udiv	r3, r3, r2
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <find_volume+0x32e>
 800547e:	230d      	movs	r3, #13
 8005480:	e0e4      	b.n	800564c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8005482:	2303      	movs	r3, #3
 8005484:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800548e:	4293      	cmp	r3, r2
 8005490:	d802      	bhi.n	8005498 <find_volume+0x344>
 8005492:	2302      	movs	r3, #2
 8005494:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800549e:	4293      	cmp	r3, r2
 80054a0:	d802      	bhi.n	80054a8 <find_volume+0x354>
 80054a2:	2301      	movs	r3, #1
 80054a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	1c9a      	adds	r2, r3, #2
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80054b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ba:	441a      	add	r2, r3
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80054c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	441a      	add	r2, r3
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80054ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d11e      	bne.n	8005510 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	3338      	adds	r3, #56	; 0x38
 80054d6:	332a      	adds	r3, #42	; 0x2a
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fd ffc5 	bl	8003468 <ld_word>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <find_volume+0x394>
 80054e4:	230d      	movs	r3, #13
 80054e6:	e0b1      	b.n	800564c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	891b      	ldrh	r3, [r3, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <find_volume+0x3a0>
 80054f0:	230d      	movs	r3, #13
 80054f2:	e0ab      	b.n	800564c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	3338      	adds	r3, #56	; 0x38
 80054f8:	332c      	adds	r3, #44	; 0x2c
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fd ffcc 	bl	8003498 <ld_dword>
 8005500:	4602      	mov	r2, r0
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
 800550e:	e01f      	b.n	8005550 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	891b      	ldrh	r3, [r3, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <find_volume+0x3c8>
 8005518:	230d      	movs	r3, #13
 800551a:	e097      	b.n	800564c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005522:	441a      	add	r2, r3
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800552c:	2b02      	cmp	r3, #2
 800552e:	d103      	bne.n	8005538 <find_volume+0x3e4>
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	e00a      	b.n	800554e <find_volume+0x3fa>
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	4613      	mov	r3, r2
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	4413      	add	r3, r2
 8005542:	085a      	lsrs	r2, r3, #1
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800554e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	899b      	ldrh	r3, [r3, #12]
 8005558:	4619      	mov	r1, r3
 800555a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555c:	440b      	add	r3, r1
 800555e:	3b01      	subs	r3, #1
 8005560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005562:	8989      	ldrh	r1, [r1, #12]
 8005564:	fbb3 f3f1 	udiv	r3, r3, r1
 8005568:	429a      	cmp	r2, r3
 800556a:	d201      	bcs.n	8005570 <find_volume+0x41c>
 800556c:	230d      	movs	r3, #13
 800556e:	e06d      	b.n	800564c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005576:	619a      	str	r2, [r3, #24]
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	699a      	ldr	r2, [r3, #24]
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	2280      	movs	r2, #128	; 0x80
 8005584:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800558a:	2b03      	cmp	r3, #3
 800558c:	d149      	bne.n	8005622 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	3338      	adds	r3, #56	; 0x38
 8005592:	3330      	adds	r3, #48	; 0x30
 8005594:	4618      	mov	r0, r3
 8005596:	f7fd ff67 	bl	8003468 <ld_word>
 800559a:	4603      	mov	r3, r0
 800559c:	2b01      	cmp	r3, #1
 800559e:	d140      	bne.n	8005622 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80055a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a2:	3301      	adds	r3, #1
 80055a4:	4619      	mov	r1, r3
 80055a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055a8:	f7fe fa0e 	bl	80039c8 <move_window>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d137      	bne.n	8005622 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	2200      	movs	r2, #0
 80055b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	3338      	adds	r3, #56	; 0x38
 80055bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fd ff51 	bl	8003468 <ld_word>
 80055c6:	4603      	mov	r3, r0
 80055c8:	461a      	mov	r2, r3
 80055ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d127      	bne.n	8005622 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	3338      	adds	r3, #56	; 0x38
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fd ff5e 	bl	8003498 <ld_dword>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <find_volume+0x500>)
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d11e      	bne.n	8005622 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	3338      	adds	r3, #56	; 0x38
 80055e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fd ff53 	bl	8003498 <ld_dword>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4b18      	ldr	r3, [pc, #96]	; (8005658 <find_volume+0x504>)
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d113      	bne.n	8005622 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	3338      	adds	r3, #56	; 0x38
 80055fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005602:	4618      	mov	r0, r3
 8005604:	f7fd ff48 	bl	8003498 <ld_dword>
 8005608:	4602      	mov	r2, r0
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	3338      	adds	r3, #56	; 0x38
 8005612:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005616:	4618      	mov	r0, r3
 8005618:	f7fd ff3e 	bl	8003498 <ld_dword>
 800561c:	4602      	mov	r2, r0
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005628:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800562a:	4b0c      	ldr	r3, [pc, #48]	; (800565c <find_volume+0x508>)
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	3301      	adds	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	4b0a      	ldr	r3, [pc, #40]	; (800565c <find_volume+0x508>)
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <find_volume+0x508>)
 8005638:	881a      	ldrh	r2, [r3, #0]
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	4a07      	ldr	r2, [pc, #28]	; (8005660 <find_volume+0x50c>)
 8005642:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005646:	f7fe f957 	bl	80038f8 <clear_lock>
#endif
	return FR_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3758      	adds	r7, #88	; 0x58
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	41615252 	.word	0x41615252
 8005658:	61417272 	.word	0x61417272
 800565c:	20000048 	.word	0x20000048
 8005660:	2000006c 	.word	0x2000006c

08005664 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800566e:	2309      	movs	r3, #9
 8005670:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01c      	beq.n	80056b2 <validate+0x4e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d018      	beq.n	80056b2 <validate+0x4e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d013      	beq.n	80056b2 <validate+0x4e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	889a      	ldrh	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	88db      	ldrh	r3, [r3, #6]
 8005694:	429a      	cmp	r2, r3
 8005696:	d10c      	bne.n	80056b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fd fe44 	bl	800332c <disk_status>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <validate+0x4e>
			res = FR_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d102      	bne.n	80056be <validate+0x5a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	e000      	b.n	80056c0 <validate+0x5c>
 80056be:	2300      	movs	r3, #0
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	6013      	str	r3, [r2, #0]
	return res;
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	4613      	mov	r3, r2
 80056dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80056e2:	f107 0310 	add.w	r3, r7, #16
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fc9a 	bl	8005020 <get_ldnumber>
 80056ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	da01      	bge.n	80056f8 <f_mount+0x28>
 80056f4:	230b      	movs	r3, #11
 80056f6:	e02b      	b.n	8005750 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80056f8:	4a17      	ldr	r2, [pc, #92]	; (8005758 <f_mount+0x88>)
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005700:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005708:	69b8      	ldr	r0, [r7, #24]
 800570a:	f7fe f8f5 	bl	80038f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	490d      	ldr	r1, [pc, #52]	; (8005758 <f_mount+0x88>)
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <f_mount+0x66>
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d001      	beq.n	800573a <f_mount+0x6a>
 8005736:	2300      	movs	r3, #0
 8005738:	e00a      	b.n	8005750 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800573a:	f107 010c 	add.w	r1, r7, #12
 800573e:	f107 0308 	add.w	r3, r7, #8
 8005742:	2200      	movs	r2, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff fd05 	bl	8005154 <find_volume>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800574e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000044 	.word	0x20000044

0800575c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b09a      	sub	sp, #104	; 0x68
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <f_open+0x18>
 8005770:	2309      	movs	r3, #9
 8005772:	e1bb      	b.n	8005aec <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800577a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800577c:	79fa      	ldrb	r2, [r7, #7]
 800577e:	f107 0114 	add.w	r1, r7, #20
 8005782:	f107 0308 	add.w	r3, r7, #8
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fce4 	bl	8005154 <find_volume>
 800578c:	4603      	mov	r3, r0
 800578e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8005792:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005796:	2b00      	cmp	r3, #0
 8005798:	f040 819f 	bne.w	8005ada <f_open+0x37e>
		dj.obj.fs = fs;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	f107 0318 	add.w	r3, r7, #24
 80057a6:	4611      	mov	r1, r2
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fbc3 	bl	8004f34 <follow_path>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80057b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d11a      	bne.n	80057f2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80057bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057c0:	b25b      	sxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	da03      	bge.n	80057ce <f_open+0x72>
				res = FR_INVALID_NAME;
 80057c6:	2306      	movs	r3, #6
 80057c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80057cc:	e011      	b.n	80057f2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bf14      	ite	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	2300      	moveq	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	f107 0318 	add.w	r3, r7, #24
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fd ff3e 	bl	8003668 <chk_lock>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	f003 031c 	and.w	r3, r3, #28
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d07f      	beq.n	80058fc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80057fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005800:	2b00      	cmp	r3, #0
 8005802:	d017      	beq.n	8005834 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005804:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005808:	2b04      	cmp	r3, #4
 800580a:	d10e      	bne.n	800582a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800580c:	f7fd ff88 	bl	8003720 <enq_lock>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d006      	beq.n	8005824 <f_open+0xc8>
 8005816:	f107 0318 	add.w	r3, r7, #24
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff f8da 	bl	80049d4 <dir_register>
 8005820:	4603      	mov	r3, r0
 8005822:	e000      	b.n	8005826 <f_open+0xca>
 8005824:	2312      	movs	r3, #18
 8005826:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	f043 0308 	orr.w	r3, r3, #8
 8005830:	71fb      	strb	r3, [r7, #7]
 8005832:	e010      	b.n	8005856 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005834:	7fbb      	ldrb	r3, [r7, #30]
 8005836:	f003 0311 	and.w	r3, r3, #17
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <f_open+0xea>
					res = FR_DENIED;
 800583e:	2307      	movs	r3, #7
 8005840:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005844:	e007      	b.n	8005856 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <f_open+0xfa>
 8005850:	2308      	movs	r3, #8
 8005852:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005856:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800585a:	2b00      	cmp	r3, #0
 800585c:	d168      	bne.n	8005930 <f_open+0x1d4>
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b00      	cmp	r3, #0
 8005866:	d063      	beq.n	8005930 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005868:	f7fd fcfc 	bl	8003264 <get_fattime>
 800586c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005870:	330e      	adds	r3, #14
 8005872:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005874:	4618      	mov	r0, r3
 8005876:	f7fd fe4d 	bl	8003514 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	3316      	adds	r3, #22
 800587e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005880:	4618      	mov	r0, r3
 8005882:	f7fd fe47 	bl	8003514 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	330b      	adds	r3, #11
 800588a:	2220      	movs	r2, #32
 800588c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005892:	4611      	mov	r1, r2
 8005894:	4618      	mov	r0, r3
 8005896:	f7fe fe16 	bl	80044c6 <ld_clust>
 800589a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058a0:	2200      	movs	r2, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe fe2e 	bl	8004504 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	331c      	adds	r3, #28
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fd fe30 	bl	8003514 <st_dword>
					fs->wflag = 1;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2201      	movs	r2, #1
 80058b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80058ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d037      	beq.n	8005930 <f_open+0x1d4>
						dw = fs->winsect;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80058c6:	f107 0318 	add.w	r3, r7, #24
 80058ca:	2200      	movs	r2, #0
 80058cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fb1e 	bl	8003f10 <remove_chain>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80058da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d126      	bne.n	8005930 <f_open+0x1d4>
							res = move_window(fs, dw);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fe f86e 	bl	80039c8 <move_window>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058f6:	3a01      	subs	r2, #1
 80058f8:	615a      	str	r2, [r3, #20]
 80058fa:	e019      	b.n	8005930 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80058fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005900:	2b00      	cmp	r3, #0
 8005902:	d115      	bne.n	8005930 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005904:	7fbb      	ldrb	r3, [r7, #30]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <f_open+0x1ba>
					res = FR_NO_FILE;
 800590e:	2304      	movs	r3, #4
 8005910:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005914:	e00c      	b.n	8005930 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <f_open+0x1d4>
 8005920:	7fbb      	ldrb	r3, [r7, #30]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <f_open+0x1d4>
						res = FR_DENIED;
 800592a:	2307      	movs	r3, #7
 800592c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005930:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005934:	2b00      	cmp	r3, #0
 8005936:	d128      	bne.n	800598a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005948:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	bf14      	ite	ne
 8005962:	2301      	movne	r3, #1
 8005964:	2300      	moveq	r3, #0
 8005966:	b2db      	uxtb	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	f107 0318 	add.w	r3, r7, #24
 800596e:	4611      	mov	r1, r2
 8005970:	4618      	mov	r0, r3
 8005972:	f7fd fef7 	bl	8003764 <inc_lock>
 8005976:	4602      	mov	r2, r0
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <f_open+0x22e>
 8005984:	2302      	movs	r3, #2
 8005986:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800598a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800598e:	2b00      	cmp	r3, #0
 8005990:	f040 80a3 	bne.w	8005ada <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005998:	4611      	mov	r1, r2
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe fd93 	bl	80044c6 <ld_clust>
 80059a0:	4602      	mov	r2, r0
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	331c      	adds	r3, #28
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fd fd74 	bl	8003498 <ld_dword>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	88da      	ldrh	r2, [r3, #6]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	79fa      	ldrb	r2, [r7, #7]
 80059ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3330      	adds	r3, #48	; 0x30
 80059e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80059ea:	2100      	movs	r1, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fd fdde 	bl	80035ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d06e      	beq.n	8005ada <f_open+0x37e>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d06a      	beq.n	8005ada <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	895b      	ldrh	r3, [r3, #10]
 8005a10:	461a      	mov	r2, r3
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	899b      	ldrh	r3, [r3, #12]
 8005a16:	fb03 f302 	mul.w	r3, r3, r2
 8005a1a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a28:	e016      	b.n	8005a58 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe f887 	bl	8003b42 <get_fat>
 8005a34:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d802      	bhi.n	8005a42 <f_open+0x2e6>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a48:	d102      	bne.n	8005a50 <f_open+0x2f4>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005a50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d103      	bne.n	8005a68 <f_open+0x30c>
 8005a60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d8e0      	bhi.n	8005a2a <f_open+0x2ce>
				}
				fp->clust = clst;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a6c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d131      	bne.n	8005ada <f_open+0x37e>
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	899b      	ldrh	r3, [r3, #12]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a82:	fb02 f201 	mul.w	r2, r2, r1
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d026      	beq.n	8005ada <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe f837 	bl	8003b04 <clust2sect>
 8005a96:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <f_open+0x34a>
						res = FR_INT_ERR;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005aa4:	e019      	b.n	8005ada <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	899b      	ldrh	r3, [r3, #12]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aae:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab4:	441a      	add	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	7858      	ldrb	r0, [r3, #1]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a1a      	ldr	r2, [r3, #32]
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f7fd fc6f 	bl	80033ac <disk_read>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <f_open+0x37e>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005ada:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <f_open+0x38c>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005ae8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3768      	adds	r7, #104	; 0x68
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08e      	sub	sp, #56	; 0x38
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f107 0214 	add.w	r2, r7, #20
 8005b12:	4611      	mov	r1, r2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fda5 	bl	8005664 <validate>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005b20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d107      	bne.n	8005b38 <f_read+0x44>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	7d5b      	ldrb	r3, [r3, #21]
 8005b2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <f_read+0x4a>
 8005b38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b3c:	e135      	b.n	8005daa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	7d1b      	ldrb	r3, [r3, #20]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <f_read+0x5a>
 8005b4a:	2307      	movs	r3, #7
 8005b4c:	e12d      	b.n	8005daa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	f240 811e 	bls.w	8005da0 <f_read+0x2ac>
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005b68:	e11a      	b.n	8005da0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	8992      	ldrh	r2, [r2, #12]
 8005b72:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b76:	fb02 f201 	mul.w	r2, r2, r1
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f040 80d5 	bne.w	8005d2c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	8992      	ldrh	r2, [r2, #12]
 8005b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	8952      	ldrh	r2, [r2, #10]
 8005b92:	3a01      	subs	r2, #1
 8005b94:	4013      	ands	r3, r2
 8005b96:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d12f      	bne.n	8005bfe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d103      	bne.n	8005bae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
 8005bac:	e013      	b.n	8005bd6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7fe faa4 	bl	800410a <clmt_clust>
 8005bc2:	6338      	str	r0, [r7, #48]	; 0x30
 8005bc4:	e007      	b.n	8005bd6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f7fd ffb7 	bl	8003b42 <get_fat>
 8005bd4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d804      	bhi.n	8005be6 <f_read+0xf2>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2202      	movs	r2, #2
 8005be0:	755a      	strb	r2, [r3, #21]
 8005be2:	2302      	movs	r3, #2
 8005be4:	e0e1      	b.n	8005daa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bec:	d104      	bne.n	8005bf8 <f_read+0x104>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	755a      	strb	r2, [r3, #21]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0d8      	b.n	8005daa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bfc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	4619      	mov	r1, r3
 8005c06:	4610      	mov	r0, r2
 8005c08:	f7fd ff7c 	bl	8003b04 <clust2sect>
 8005c0c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <f_read+0x12a>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2202      	movs	r2, #2
 8005c18:	755a      	strb	r2, [r3, #21]
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e0c5      	b.n	8005daa <f_read+0x2b6>
			sect += csect;
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	899b      	ldrh	r3, [r3, #12]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d041      	beq.n	8005cbe <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	4413      	add	r3, r2
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	8952      	ldrh	r2, [r2, #10]
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d905      	bls.n	8005c54 <f_read+0x160>
					cc = fs->csize - csect;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	895b      	ldrh	r3, [r3, #10]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	7858      	ldrb	r0, [r3, #1]
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c5e:	f7fd fba5 	bl	80033ac <disk_read>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d004      	beq.n	8005c72 <f_read+0x17e>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	755a      	strb	r2, [r3, #21]
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e09b      	b.n	8005daa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	7d1b      	ldrb	r3, [r3, #20]
 8005c76:	b25b      	sxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	da18      	bge.n	8005cae <f_read+0x1ba>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d911      	bls.n	8005cae <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1a      	ldr	r2, [r3, #32]
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	8992      	ldrh	r2, [r2, #12]
 8005c96:	fb02 f303 	mul.w	r3, r2, r3
 8005c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9c:	18d0      	adds	r0, r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	899b      	ldrh	r3, [r3, #12]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	f7fd fc5f 	bl	800356c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	899b      	ldrh	r3, [r3, #12]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005cbc:	e05c      	b.n	8005d78 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d02e      	beq.n	8005d26 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	7d1b      	ldrb	r3, [r3, #20]
 8005ccc:	b25b      	sxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da18      	bge.n	8005d04 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	7858      	ldrb	r0, [r3, #1]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1a      	ldr	r2, [r3, #32]
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f7fd fb83 	bl	80033ec <disk_write>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <f_read+0x202>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	755a      	strb	r2, [r3, #21]
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e059      	b.n	8005daa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	7d1b      	ldrb	r3, [r3, #20]
 8005cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	7858      	ldrb	r0, [r3, #1]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d0e:	2301      	movs	r3, #1
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	f7fd fb4b 	bl	80033ac <disk_read>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <f_read+0x232>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	755a      	strb	r2, [r3, #21]
 8005d22:	2301      	movs	r3, #1
 8005d24:	e041      	b.n	8005daa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	899b      	ldrh	r3, [r3, #12]
 8005d30:	4618      	mov	r0, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	8992      	ldrh	r2, [r2, #12]
 8005d3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d3e:	fb02 f201 	mul.w	r2, r2, r1
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	1ac3      	subs	r3, r0, r3
 8005d46:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d901      	bls.n	8005d54 <f_read+0x260>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	8992      	ldrh	r2, [r2, #12]
 8005d62:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d66:	fb02 f200 	mul.w	r2, r2, r0
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d70:	4619      	mov	r1, r3
 8005d72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d74:	f7fd fbfa 	bl	800356c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	4413      	add	r3, r2
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	699a      	ldr	r2, [r3, #24]
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	441a      	add	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	619a      	str	r2, [r3, #24]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	441a      	add	r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f47f aee1 	bne.w	8005b6a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3738      	adds	r7, #56	; 0x38
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b08c      	sub	sp, #48	; 0x30
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
 8005dbe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f107 0210 	add.w	r2, r7, #16
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff fc46 	bl	8005664 <validate>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d107      	bne.n	8005df6 <f_write+0x44>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	7d5b      	ldrb	r3, [r3, #21]
 8005dea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <f_write+0x4a>
 8005df6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dfa:	e16a      	b.n	80060d2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	7d1b      	ldrb	r3, [r3, #20]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <f_write+0x5a>
 8005e08:	2307      	movs	r3, #7
 8005e0a:	e162      	b.n	80060d2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	699a      	ldr	r2, [r3, #24]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	441a      	add	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	f080 814c 	bcs.w	80060b6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	43db      	mvns	r3, r3
 8005e24:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005e26:	e146      	b.n	80060b6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	8992      	ldrh	r2, [r2, #12]
 8005e30:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e34:	fb02 f201 	mul.w	r2, r2, r1
 8005e38:	1a9b      	subs	r3, r3, r2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 80f1 	bne.w	8006022 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	8992      	ldrh	r2, [r2, #12]
 8005e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	8952      	ldrh	r2, [r2, #10]
 8005e50:	3a01      	subs	r2, #1
 8005e52:	4013      	ands	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d143      	bne.n	8005ee4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10c      	bne.n	8005e7e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d11a      	bne.n	8005ea6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe f8b0 	bl	8003fda <create_chain>
 8005e7a:	62b8      	str	r0, [r7, #40]	; 0x28
 8005e7c:	e013      	b.n	8005ea6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d007      	beq.n	8005e96 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f7fe f93c 	bl	800410a <clmt_clust>
 8005e92:	62b8      	str	r0, [r7, #40]	; 0x28
 8005e94:	e007      	b.n	8005ea6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7fe f89b 	bl	8003fda <create_chain>
 8005ea4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 8109 	beq.w	80060c0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d104      	bne.n	8005ebe <f_write+0x10c>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	755a      	strb	r2, [r3, #21]
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e109      	b.n	80060d2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec4:	d104      	bne.n	8005ed0 <f_write+0x11e>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	755a      	strb	r2, [r3, #21]
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e100      	b.n	80060d2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <f_write+0x132>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	7d1b      	ldrb	r3, [r3, #20]
 8005ee8:	b25b      	sxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da18      	bge.n	8005f20 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	7858      	ldrb	r0, [r3, #1]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1a      	ldr	r2, [r3, #32]
 8005efc:	2301      	movs	r3, #1
 8005efe:	f7fd fa75 	bl	80033ec <disk_write>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <f_write+0x160>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	755a      	strb	r2, [r3, #21]
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e0df      	b.n	80060d2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	7d1b      	ldrb	r3, [r3, #20]
 8005f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	4619      	mov	r1, r3
 8005f28:	4610      	mov	r0, r2
 8005f2a:	f7fd fdeb 	bl	8003b04 <clust2sect>
 8005f2e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <f_write+0x18e>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	755a      	strb	r2, [r3, #21]
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e0c8      	b.n	80060d2 <f_write+0x320>
			sect += csect;
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	4413      	add	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	899b      	ldrh	r3, [r3, #12]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f54:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d043      	beq.n	8005fe4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	4413      	add	r3, r2
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	8952      	ldrh	r2, [r2, #10]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d905      	bls.n	8005f76 <f_write+0x1c4>
					cc = fs->csize - csect;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	895b      	ldrh	r3, [r3, #10]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	7858      	ldrb	r0, [r3, #1]
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	69f9      	ldr	r1, [r7, #28]
 8005f80:	f7fd fa34 	bl	80033ec <disk_write>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d004      	beq.n	8005f94 <f_write+0x1e2>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	755a      	strb	r2, [r3, #21]
 8005f90:	2301      	movs	r3, #1
 8005f92:	e09e      	b.n	80060d2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a1a      	ldr	r2, [r3, #32]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	6a3a      	ldr	r2, [r7, #32]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d918      	bls.n	8005fd4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1a      	ldr	r2, [r3, #32]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	8992      	ldrh	r2, [r2, #12]
 8005fb4:	fb02 f303 	mul.w	r3, r2, r3
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	18d1      	adds	r1, r2, r3
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	899b      	ldrh	r3, [r3, #12]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f7fd fad3 	bl	800356c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	7d1b      	ldrb	r3, [r3, #20]
 8005fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	899b      	ldrh	r3, [r3, #12]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	fb02 f303 	mul.w	r3, r2, r3
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005fe2:	e04b      	b.n	800607c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d016      	beq.n	800601c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d210      	bcs.n	800601c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	7858      	ldrb	r0, [r3, #1]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006004:	2301      	movs	r3, #1
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	f7fd f9d0 	bl	80033ac <disk_read>
 800600c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	755a      	strb	r2, [r3, #21]
 8006018:	2301      	movs	r3, #1
 800601a:	e05a      	b.n	80060d2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	899b      	ldrh	r3, [r3, #12]
 8006026:	4618      	mov	r0, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	8992      	ldrh	r2, [r2, #12]
 8006030:	fbb3 f1f2 	udiv	r1, r3, r2
 8006034:	fb02 f201 	mul.w	r2, r2, r1
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	1ac3      	subs	r3, r0, r3
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800603e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	429a      	cmp	r2, r3
 8006044:	d901      	bls.n	800604a <f_write+0x298>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	8992      	ldrh	r2, [r2, #12]
 8006058:	fbb3 f0f2 	udiv	r0, r3, r2
 800605c:	fb02 f200 	mul.w	r2, r2, r0
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	440b      	add	r3, r1
 8006064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006066:	69f9      	ldr	r1, [r7, #28]
 8006068:	4618      	mov	r0, r3
 800606a:	f7fd fa7f 	bl	800356c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	7d1b      	ldrb	r3, [r3, #20]
 8006072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006076:	b2da      	uxtb	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	4413      	add	r3, r2
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	699a      	ldr	r2, [r3, #24]
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	441a      	add	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	619a      	str	r2, [r3, #24]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	429a      	cmp	r2, r3
 800609a:	bf38      	it	cc
 800609c:	461a      	movcc	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	60da      	str	r2, [r3, #12]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	441a      	add	r2, r3
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f47f aeb5 	bne.w	8005e28 <f_write+0x76>
 80060be:	e000      	b.n	80060c2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80060c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	7d1b      	ldrb	r3, [r3, #20]
 80060c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3730      	adds	r7, #48	; 0x30
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b086      	sub	sp, #24
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f107 0208 	add.w	r2, r7, #8
 80060e8:	4611      	mov	r1, r2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff faba 	bl	8005664 <validate>
 80060f0:	4603      	mov	r3, r0
 80060f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d168      	bne.n	80061cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	7d1b      	ldrb	r3, [r3, #20]
 80060fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006102:	2b00      	cmp	r3, #0
 8006104:	d062      	beq.n	80061cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	7d1b      	ldrb	r3, [r3, #20]
 800610a:	b25b      	sxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	da15      	bge.n	800613c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	7858      	ldrb	r0, [r3, #1]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1a      	ldr	r2, [r3, #32]
 800611e:	2301      	movs	r3, #1
 8006120:	f7fd f964 	bl	80033ec <disk_write>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <f_sync+0x54>
 800612a:	2301      	movs	r3, #1
 800612c:	e04f      	b.n	80061ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	7d1b      	ldrb	r3, [r3, #20]
 8006132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006136:	b2da      	uxtb	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800613c:	f7fd f892 	bl	8003264 <get_fattime>
 8006140:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f7fd fc3c 	bl	80039c8 <move_window>
 8006150:	4603      	mov	r3, r0
 8006152:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d138      	bne.n	80061cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	330b      	adds	r3, #11
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	330b      	adds	r3, #11
 800616a:	f042 0220 	orr.w	r2, r2, #32
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	461a      	mov	r2, r3
 800617c:	68f9      	ldr	r1, [r7, #12]
 800617e:	f7fe f9c1 	bl	8004504 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f103 021c 	add.w	r2, r3, #28
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f7fd f9c0 	bl	8003514 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3316      	adds	r3, #22
 8006198:	6939      	ldr	r1, [r7, #16]
 800619a:	4618      	mov	r0, r3
 800619c:	f7fd f9ba 	bl	8003514 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3312      	adds	r3, #18
 80061a4:	2100      	movs	r1, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fd f999 	bl	80034de <st_word>
					fs->wflag = 1;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2201      	movs	r2, #1
 80061b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fd fc35 	bl	8003a24 <sync_fs>
 80061ba:	4603      	mov	r3, r0
 80061bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7d1b      	ldrb	r3, [r3, #20]
 80061c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff ff7b 	bl	80060da <f_sync>
 80061e4:	4603      	mov	r3, r0
 80061e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d118      	bne.n	8006220 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f107 0208 	add.w	r2, r7, #8
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff fa34 	bl	8005664 <validate>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10c      	bne.n	8006220 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fd fb38 	bl	8003880 <dec_lock>
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d102      	bne.n	8006220 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b092      	sub	sp, #72	; 0x48
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006236:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800623a:	f107 030c 	add.w	r3, r7, #12
 800623e:	2200      	movs	r2, #0
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe ff87 	bl	8005154 <find_volume>
 8006246:	4603      	mov	r3, r0
 8006248:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800624c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006250:	2b00      	cmp	r3, #0
 8006252:	f040 8099 	bne.w	8006388 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	699a      	ldr	r2, [r3, #24]
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	3b02      	subs	r3, #2
 8006266:	429a      	cmp	r2, r3
 8006268:	d804      	bhi.n	8006274 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626c:	699a      	ldr	r2, [r3, #24]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	e089      	b.n	8006388 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d128      	bne.n	80062d2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006280:	2302      	movs	r3, #2
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800628e:	4618      	mov	r0, r3
 8006290:	f7fd fc57 	bl	8003b42 <get_fat>
 8006294:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800629c:	d103      	bne.n	80062a6 <f_getfree+0x7c>
 800629e:	2301      	movs	r3, #1
 80062a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80062a4:	e063      	b.n	800636e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d103      	bne.n	80062b4 <f_getfree+0x8a>
 80062ac:	2302      	movs	r3, #2
 80062ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80062b2:	e05c      	b.n	800636e <f_getfree+0x144>
					if (stat == 0) nfree++;
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <f_getfree+0x96>
 80062ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062bc:	3301      	adds	r3, #1
 80062be:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80062c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c2:	3301      	adds	r3, #1
 80062c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d3db      	bcc.n	8006288 <f_getfree+0x5e>
 80062d0:	e04d      	b.n	800636e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
 80062e2:	2300      	movs	r3, #0
 80062e4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80062e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d113      	bne.n	8006314 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80062ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80062f4:	4619      	mov	r1, r3
 80062f6:	f7fd fb67 	bl	80039c8 <move_window>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006300:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006304:	2b00      	cmp	r3, #0
 8006306:	d131      	bne.n	800636c <f_getfree+0x142>
							p = fs->win;
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	3338      	adds	r3, #56	; 0x38
 800630c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	899b      	ldrh	r3, [r3, #12]
 8006312:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d10f      	bne.n	800633c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800631c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800631e:	f7fd f8a3 	bl	8003468 <ld_word>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <f_getfree+0x104>
 8006328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632a:	3301      	adds	r3, #1
 800632c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	3302      	adds	r3, #2
 8006332:	633b      	str	r3, [r7, #48]	; 0x30
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006336:	3b02      	subs	r3, #2
 8006338:	637b      	str	r3, [r7, #52]	; 0x34
 800633a:	e010      	b.n	800635e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800633c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800633e:	f7fd f8ab 	bl	8003498 <ld_dword>
 8006342:	4603      	mov	r3, r0
 8006344:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d102      	bne.n	8006352 <f_getfree+0x128>
 800634c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634e:	3301      	adds	r3, #1
 8006350:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	3304      	adds	r3, #4
 8006356:	633b      	str	r3, [r7, #48]	; 0x30
 8006358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635a:	3b04      	subs	r3, #4
 800635c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800635e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006360:	3b01      	subs	r3, #1
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1bd      	bne.n	80062e6 <f_getfree+0xbc>
 800636a:	e000      	b.n	800636e <f_getfree+0x144>
							if (res != FR_OK) break;
 800636c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006372:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006378:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	791a      	ldrb	r2, [r3, #4]
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	f042 0201 	orr.w	r2, r2, #1
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006388:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800638c:	4618      	mov	r0, r3
 800638e:	3748      	adds	r7, #72	; 0x48
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
	int n = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80063a8:	e01b      	b.n	80063e2 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80063aa:	f107 0310 	add.w	r3, r7, #16
 80063ae:	f107 0114 	add.w	r1, r7, #20
 80063b2:	2201      	movs	r2, #1
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff fb9d 	bl	8005af4 <f_read>
		if (rc != 1) break;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d116      	bne.n	80063ee <f_gets+0x5a>
		c = s[0];
 80063c0:	7d3b      	ldrb	r3, [r7, #20]
 80063c2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	2b0d      	cmp	r3, #13
 80063c8:	d100      	bne.n	80063cc <f_gets+0x38>
 80063ca:	e00a      	b.n	80063e2 <f_gets+0x4e>
		*p++ = c;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	61ba      	str	r2, [r7, #24]
 80063d2:	7dfa      	ldrb	r2, [r7, #23]
 80063d4:	701a      	strb	r2, [r3, #0]
		n++;
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	3301      	adds	r3, #1
 80063da:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	2b0a      	cmp	r3, #10
 80063e0:	d007      	beq.n	80063f2 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	dbde      	blt.n	80063aa <f_gets+0x16>
 80063ec:	e002      	b.n	80063f4 <f_gets+0x60>
		if (rc != 1) break;
 80063ee:	bf00      	nop
 80063f0:	e000      	b.n	80063f4 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80063f2:	bf00      	nop
	}
	*p = 0;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2200      	movs	r2, #0
 80063f8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <f_gets+0x70>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	e000      	b.n	8006406 <f_gets+0x72>
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3720      	adds	r7, #32
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	460b      	mov	r3, r1
 8006418:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	2b0a      	cmp	r3, #10
 800641e:	d103      	bne.n	8006428 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006420:	210d      	movs	r1, #13
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff fff3 	bl	800640e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	db25      	blt.n	8006480 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	60fa      	str	r2, [r7, #12]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b3c      	cmp	r3, #60	; 0x3c
 8006446:	dd12      	ble.n	800646e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f103 010c 	add.w	r1, r3, #12
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	f107 0308 	add.w	r3, r7, #8
 8006458:	f7ff fcab 	bl	8005db2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	429a      	cmp	r2, r3
 8006462:	d101      	bne.n	8006468 <putc_bfd+0x5a>
 8006464:	2300      	movs	r3, #0
 8006466:	e001      	b.n	800646c <putc_bfd+0x5e>
 8006468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800646c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	609a      	str	r2, [r3, #8]
 800647e:	e000      	b.n	8006482 <putc_bfd+0x74>
	if (i < 0) return;
 8006480:	bf00      	nop
}
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	db17      	blt.n	80064c8 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f103 010c 	add.w	r1, r3, #12
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	461a      	mov	r2, r3
 80064a8:	f107 030c 	add.w	r3, r7, #12
 80064ac:	f7ff fc81 	bl	8005db2 <f_write>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d108      	bne.n	80064c8 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	461a      	mov	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d102      	bne.n	80064c8 <putc_flush+0x40>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	e001      	b.n	80064cc <putc_flush+0x44>
	return EOF;
 80064c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	605a      	str	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	609a      	str	r2, [r3, #8]
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b096      	sub	sp, #88	; 0x58
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006508:	f107 030c 	add.w	r3, r7, #12
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff ffe0 	bl	80064d4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006514:	e009      	b.n	800652a <f_puts+0x2c>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	f107 030c 	add.w	r3, r7, #12
 8006522:	4611      	mov	r1, r2
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff ff72 	bl	800640e <putc_bfd>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f1      	bne.n	8006516 <f_puts+0x18>
	return putc_flush(&pb);
 8006532:	f107 030c 	add.w	r3, r7, #12
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff ffa6 	bl	8006488 <putc_flush>
 800653c:	4603      	mov	r3, r0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3758      	adds	r7, #88	; 0x58
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006556:	2301      	movs	r3, #1
 8006558:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800655e:	4b1f      	ldr	r3, [pc, #124]	; (80065dc <FATFS_LinkDriverEx+0x94>)
 8006560:	7a5b      	ldrb	r3, [r3, #9]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d131      	bne.n	80065cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006568:	4b1c      	ldr	r3, [pc, #112]	; (80065dc <FATFS_LinkDriverEx+0x94>)
 800656a:	7a5b      	ldrb	r3, [r3, #9]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <FATFS_LinkDriverEx+0x94>)
 8006572:	2100      	movs	r1, #0
 8006574:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006576:	4b19      	ldr	r3, [pc, #100]	; (80065dc <FATFS_LinkDriverEx+0x94>)
 8006578:	7a5b      	ldrb	r3, [r3, #9]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	4a17      	ldr	r2, [pc, #92]	; (80065dc <FATFS_LinkDriverEx+0x94>)
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006586:	4b15      	ldr	r3, [pc, #84]	; (80065dc <FATFS_LinkDriverEx+0x94>)
 8006588:	7a5b      	ldrb	r3, [r3, #9]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <FATFS_LinkDriverEx+0x94>)
 8006590:	4413      	add	r3, r2
 8006592:	79fa      	ldrb	r2, [r7, #7]
 8006594:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006596:	4b11      	ldr	r3, [pc, #68]	; (80065dc <FATFS_LinkDriverEx+0x94>)
 8006598:	7a5b      	ldrb	r3, [r3, #9]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	b2d1      	uxtb	r1, r2
 80065a0:	4a0e      	ldr	r2, [pc, #56]	; (80065dc <FATFS_LinkDriverEx+0x94>)
 80065a2:	7251      	strb	r1, [r2, #9]
 80065a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80065a6:	7dbb      	ldrb	r3, [r7, #22]
 80065a8:	3330      	adds	r3, #48	; 0x30
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	3301      	adds	r3, #1
 80065b4:	223a      	movs	r2, #58	; 0x3a
 80065b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	3302      	adds	r3, #2
 80065bc:	222f      	movs	r2, #47	; 0x2f
 80065be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	3303      	adds	r3, #3
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	2000026c 	.word	0x2000026c

080065e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80065ea:	2200      	movs	r2, #0
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff ffaa 	bl	8006548 <FATFS_LinkDriverEx>
 80065f4:	4603      	mov	r3, r0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	6039      	str	r1, [r7, #0]
 800660a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	2b7f      	cmp	r3, #127	; 0x7f
 8006610:	d802      	bhi.n	8006618 <ff_convert+0x18>
		c = chr;
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	81fb      	strh	r3, [r7, #14]
 8006616:	e025      	b.n	8006664 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800661e:	88fb      	ldrh	r3, [r7, #6]
 8006620:	2bff      	cmp	r3, #255	; 0xff
 8006622:	d805      	bhi.n	8006630 <ff_convert+0x30>
 8006624:	88fb      	ldrh	r3, [r7, #6]
 8006626:	3b80      	subs	r3, #128	; 0x80
 8006628:	4a12      	ldr	r2, [pc, #72]	; (8006674 <ff_convert+0x74>)
 800662a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800662e:	e000      	b.n	8006632 <ff_convert+0x32>
 8006630:	2300      	movs	r3, #0
 8006632:	81fb      	strh	r3, [r7, #14]
 8006634:	e016      	b.n	8006664 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006636:	2300      	movs	r3, #0
 8006638:	81fb      	strh	r3, [r7, #14]
 800663a:	e009      	b.n	8006650 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800663c:	89fb      	ldrh	r3, [r7, #14]
 800663e:	4a0d      	ldr	r2, [pc, #52]	; (8006674 <ff_convert+0x74>)
 8006640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006644:	88fa      	ldrh	r2, [r7, #6]
 8006646:	429a      	cmp	r2, r3
 8006648:	d006      	beq.n	8006658 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800664a:	89fb      	ldrh	r3, [r7, #14]
 800664c:	3301      	adds	r3, #1
 800664e:	81fb      	strh	r3, [r7, #14]
 8006650:	89fb      	ldrh	r3, [r7, #14]
 8006652:	2b7f      	cmp	r3, #127	; 0x7f
 8006654:	d9f2      	bls.n	800663c <ff_convert+0x3c>
 8006656:	e000      	b.n	800665a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006658:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800665a:	89fb      	ldrh	r3, [r7, #14]
 800665c:	3380      	adds	r3, #128	; 0x80
 800665e:	b29b      	uxth	r3, r3
 8006660:	b2db      	uxtb	r3, r3
 8006662:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006664:	89fb      	ldrh	r3, [r7, #14]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	08006924 	.word	0x08006924

08006678 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006688:	d201      	bcs.n	800668e <ff_wtoupper+0x16>
 800668a:	4b3e      	ldr	r3, [pc, #248]	; (8006784 <ff_wtoupper+0x10c>)
 800668c:	e000      	b.n	8006690 <ff_wtoupper+0x18>
 800668e:	4b3e      	ldr	r3, [pc, #248]	; (8006788 <ff_wtoupper+0x110>)
 8006690:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	1c9a      	adds	r2, r3, #2
 8006696:	617a      	str	r2, [r7, #20]
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800669c:	8a7b      	ldrh	r3, [r7, #18]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d068      	beq.n	8006774 <ff_wtoupper+0xfc>
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	8a7b      	ldrh	r3, [r7, #18]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d364      	bcc.n	8006774 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	1c9a      	adds	r2, r3, #2
 80066ae:	617a      	str	r2, [r7, #20]
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	823b      	strh	r3, [r7, #16]
 80066b4:	8a3b      	ldrh	r3, [r7, #16]
 80066b6:	0a1b      	lsrs	r3, r3, #8
 80066b8:	81fb      	strh	r3, [r7, #14]
 80066ba:	8a3b      	ldrh	r3, [r7, #16]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80066c0:	88fa      	ldrh	r2, [r7, #6]
 80066c2:	8a79      	ldrh	r1, [r7, #18]
 80066c4:	8a3b      	ldrh	r3, [r7, #16]
 80066c6:	440b      	add	r3, r1
 80066c8:	429a      	cmp	r2, r3
 80066ca:	da49      	bge.n	8006760 <ff_wtoupper+0xe8>
			switch (cmd) {
 80066cc:	89fb      	ldrh	r3, [r7, #14]
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d84f      	bhi.n	8006772 <ff_wtoupper+0xfa>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <ff_wtoupper+0x60>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	080066fd 	.word	0x080066fd
 80066dc:	0800670f 	.word	0x0800670f
 80066e0:	08006725 	.word	0x08006725
 80066e4:	0800672d 	.word	0x0800672d
 80066e8:	08006735 	.word	0x08006735
 80066ec:	0800673d 	.word	0x0800673d
 80066f0:	08006745 	.word	0x08006745
 80066f4:	0800674d 	.word	0x0800674d
 80066f8:	08006755 	.word	0x08006755
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80066fc:	88fa      	ldrh	r2, [r7, #6]
 80066fe:	8a7b      	ldrh	r3, [r7, #18]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	80fb      	strh	r3, [r7, #6]
 800670c:	e027      	b.n	800675e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800670e:	88fa      	ldrh	r2, [r7, #6]
 8006710:	8a7b      	ldrh	r3, [r7, #18]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	b29b      	uxth	r3, r3
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	b29b      	uxth	r3, r3
 800671c:	88fa      	ldrh	r2, [r7, #6]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	80fb      	strh	r3, [r7, #6]
 8006722:	e01c      	b.n	800675e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006724:	88fb      	ldrh	r3, [r7, #6]
 8006726:	3b10      	subs	r3, #16
 8006728:	80fb      	strh	r3, [r7, #6]
 800672a:	e018      	b.n	800675e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800672c:	88fb      	ldrh	r3, [r7, #6]
 800672e:	3b20      	subs	r3, #32
 8006730:	80fb      	strh	r3, [r7, #6]
 8006732:	e014      	b.n	800675e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006734:	88fb      	ldrh	r3, [r7, #6]
 8006736:	3b30      	subs	r3, #48	; 0x30
 8006738:	80fb      	strh	r3, [r7, #6]
 800673a:	e010      	b.n	800675e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	3b1a      	subs	r3, #26
 8006740:	80fb      	strh	r3, [r7, #6]
 8006742:	e00c      	b.n	800675e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006744:	88fb      	ldrh	r3, [r7, #6]
 8006746:	3308      	adds	r3, #8
 8006748:	80fb      	strh	r3, [r7, #6]
 800674a:	e008      	b.n	800675e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800674c:	88fb      	ldrh	r3, [r7, #6]
 800674e:	3b50      	subs	r3, #80	; 0x50
 8006750:	80fb      	strh	r3, [r7, #6]
 8006752:	e004      	b.n	800675e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800675a:	80fb      	strh	r3, [r7, #6]
 800675c:	bf00      	nop
			}
			break;
 800675e:	e008      	b.n	8006772 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006760:	89fb      	ldrh	r3, [r7, #14]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d195      	bne.n	8006692 <ff_wtoupper+0x1a>
 8006766:	8a3b      	ldrh	r3, [r7, #16]
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4413      	add	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006770:	e78f      	b.n	8006692 <ff_wtoupper+0x1a>
			break;
 8006772:	bf00      	nop
	}

	return chr;
 8006774:	88fb      	ldrh	r3, [r7, #6]
}
 8006776:	4618      	mov	r0, r3
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	08006a24 	.word	0x08006a24
 8006788:	08006c18 	.word	0x08006c18

0800678c <__libc_init_array>:
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	4e0d      	ldr	r6, [pc, #52]	; (80067c4 <__libc_init_array+0x38>)
 8006790:	4c0d      	ldr	r4, [pc, #52]	; (80067c8 <__libc_init_array+0x3c>)
 8006792:	1ba4      	subs	r4, r4, r6
 8006794:	10a4      	asrs	r4, r4, #2
 8006796:	2500      	movs	r5, #0
 8006798:	42a5      	cmp	r5, r4
 800679a:	d109      	bne.n	80067b0 <__libc_init_array+0x24>
 800679c:	4e0b      	ldr	r6, [pc, #44]	; (80067cc <__libc_init_array+0x40>)
 800679e:	4c0c      	ldr	r4, [pc, #48]	; (80067d0 <__libc_init_array+0x44>)
 80067a0:	f000 f820 	bl	80067e4 <_init>
 80067a4:	1ba4      	subs	r4, r4, r6
 80067a6:	10a4      	asrs	r4, r4, #2
 80067a8:	2500      	movs	r5, #0
 80067aa:	42a5      	cmp	r5, r4
 80067ac:	d105      	bne.n	80067ba <__libc_init_array+0x2e>
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067b4:	4798      	blx	r3
 80067b6:	3501      	adds	r5, #1
 80067b8:	e7ee      	b.n	8006798 <__libc_init_array+0xc>
 80067ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067be:	4798      	blx	r3
 80067c0:	3501      	adds	r5, #1
 80067c2:	e7f2      	b.n	80067aa <__libc_init_array+0x1e>
 80067c4:	08006cdc 	.word	0x08006cdc
 80067c8:	08006cdc 	.word	0x08006cdc
 80067cc:	08006cdc 	.word	0x08006cdc
 80067d0:	08006ce0 	.word	0x08006ce0

080067d4 <memset>:
 80067d4:	4402      	add	r2, r0
 80067d6:	4603      	mov	r3, r0
 80067d8:	4293      	cmp	r3, r2
 80067da:	d100      	bne.n	80067de <memset+0xa>
 80067dc:	4770      	bx	lr
 80067de:	f803 1b01 	strb.w	r1, [r3], #1
 80067e2:	e7f9      	b.n	80067d8 <memset+0x4>

080067e4 <_init>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	bf00      	nop
 80067e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ea:	bc08      	pop	{r3}
 80067ec:	469e      	mov	lr, r3
 80067ee:	4770      	bx	lr

080067f0 <_fini>:
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	bf00      	nop
 80067f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f6:	bc08      	pop	{r3}
 80067f8:	469e      	mov	lr, r3
 80067fa:	4770      	bx	lr
