
ms_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e38  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800a010  0800a010  0001a010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a09c  0800a09c  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0a4  0800a0a4  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0a4  0800a0a4  0001a0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0a8  0800a0a8  0001a0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800a0ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020e30  200001c8  0800a274  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20020ff8  0800a274  00020ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d27f  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000415f  00000000  00000000  0003d477  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001118  00000000  00000000  000415d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f18  00000000  00000000  000426f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026184  00000000  00000000  00043608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013a2d  00000000  00000000  0006978c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccf6f  00000000  00000000  0007d1b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a128  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000449c  00000000  00000000  0014a1a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c8 	.word	0x200001c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009ff8 	.word	0x08009ff8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001cc 	.word	0x200001cc
 8000214:	08009ff8 	.word	0x08009ff8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fa5a 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f80a 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8b4 	bl	8000690 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000528:	f000 f88e 	bl	8000648 <MX_SDIO_SD_Init>
  MX_USB_DEVICE_Init();
 800052c:	f008 ff94 	bl	8009458 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8000530:	f006 f82a 	bl	8006588 <MX_FATFS_Init>
  //Buffer_Block_Tx = '123';
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x1c>
	...

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b0aa      	sub	sp, #168	; 0xa8
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000542:	2234      	movs	r2, #52	; 0x34
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f009 fc94 	bl	8009e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	2258      	movs	r2, #88	; 0x58
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f009 fc85 	bl	8009e74 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b34      	ldr	r3, [pc, #208]	; (8000640 <SystemClock_Config+0x108>)
 8000570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000572:	4a33      	ldr	r2, [pc, #204]	; (8000640 <SystemClock_Config+0x108>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000578:	6413      	str	r3, [r2, #64]	; 0x40
 800057a:	4b31      	ldr	r3, [pc, #196]	; (8000640 <SystemClock_Config+0x108>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	4b2e      	ldr	r3, [pc, #184]	; (8000644 <SystemClock_Config+0x10c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a2d      	ldr	r2, [pc, #180]	; (8000644 <SystemClock_Config+0x10c>)
 8000590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000594:	6013      	str	r3, [r2, #0]
 8000596:	4b2b      	ldr	r3, [pc, #172]	; (8000644 <SystemClock_Config+0x10c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005aa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c0:	23a8      	movs	r3, #168	; 0xa8
 80005c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fba7 	bl	8002d30 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005e8:	f000 f8b8 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000602:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000606:	2103      	movs	r1, #3
 8000608:	4618      	mov	r0, r3
 800060a:	f001 ff3b 	bl	8002484 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000614:	f000 f8a2 	bl	800075c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800061c:	2300      	movs	r3, #0
 800061e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	4618      	mov	r0, r3
 800062a:	f002 f8f5 	bl	8002818 <HAL_RCCEx_PeriphCLKConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000634:	f000 f892 	bl	800075c <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	37a8      	adds	r7, #168	; 0xa8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_SDIO_SD_Init+0x40>)
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <MX_SDIO_SD_Init+0x44>)
 8000650:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_SDIO_SD_Init+0x40>)
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_SDIO_SD_Init+0x40>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_SDIO_SD_Init+0x40>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_SDIO_SD_Init+0x40>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_SDIO_SD_Init+0x40>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <MX_SDIO_SD_Init+0x40>)
 8000672:	2203      	movs	r2, #3
 8000674:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  HAL_SD_Init(&hsd);
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_SDIO_SD_Init+0x40>)
 8000678:	f002 fd9c 	bl	80031b4 <HAL_SD_Init>
  HAL_SD_InitCard(&hsd);
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <MX_SDIO_SD_Init+0x40>)
 800067e:	f002 fdc9 	bl	8003214 <HAL_SD_InitCard>
  /* USER CODE END SDIO_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000200 	.word	0x20000200
 800068c:	40012c00 	.word	0x40012c00

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <MX_GPIO_Init+0xc4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a29      	ldr	r2, [pc, #164]	; (8000754 <MX_GPIO_Init+0xc4>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <MX_GPIO_Init+0xc4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <MX_GPIO_Init+0xc4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a22      	ldr	r2, [pc, #136]	; (8000754 <MX_GPIO_Init+0xc4>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_GPIO_Init+0xc4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_GPIO_Init+0xc4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <MX_GPIO_Init+0xc4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_GPIO_Init+0xc4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_GPIO_Init+0xc4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <MX_GPIO_Init+0xc4>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_GPIO_Init+0xc4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_GPIO_Init+0xc4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <MX_GPIO_Init+0xc4>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_GPIO_Init+0xc4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0xc8>)
 8000746:	f000 faeb 	bl	8000d20 <HAL_GPIO_Init>

}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	; 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40021800 	.word	0x40021800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <HAL_MspInit+0x4c>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a28      	ldr	r2, [pc, #160]	; (800087c <HAL_SD_MspInit+0xc0>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d14a      	bne.n	8000874 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <HAL_SD_MspInit+0xc4>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a26      	ldr	r2, [pc, #152]	; (8000880 <HAL_SD_MspInit+0xc4>)
 80007e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <HAL_SD_MspInit+0xc4>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <HAL_SD_MspInit+0xc4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <HAL_SD_MspInit+0xc4>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <HAL_SD_MspInit+0xc4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_SD_MspInit+0xc4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <HAL_SD_MspInit+0xc4>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_SD_MspInit+0xc4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000832:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000836:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000844:	230c      	movs	r3, #12
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <HAL_SD_MspInit+0xc8>)
 8000850:	f000 fa66 	bl	8000d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000854:	2304      	movs	r3, #4
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000864:	230c      	movs	r3, #12
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <HAL_SD_MspInit+0xcc>)
 8000870:	f000 fa56 	bl	8000d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40012c00 	.word	0x40012c00
 8000880:	40023800 	.word	0x40023800
 8000884:	40020800 	.word	0x40020800
 8000888:	40020c00 	.word	0x40020c00

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f000 f8ca 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <OTG_FS_IRQHandler+0x10>)
 80008ee:	f000 fd18 	bl	8001322 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20020bec 	.word	0x20020bec

080008fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <_sbrk+0x50>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <_sbrk+0x16>
		heap_end = &end;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <_sbrk+0x50>)
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <_sbrk+0x54>)
 8000910:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <_sbrk+0x50>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <_sbrk+0x50>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	466a      	mov	r2, sp
 8000922:	4293      	cmp	r3, r2
 8000924:	d907      	bls.n	8000936 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000926:	f009 fa6b 	bl	8009e00 <__errno>
 800092a:	4602      	mov	r2, r0
 800092c:	230c      	movs	r3, #12
 800092e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	e006      	b.n	8000944 <_sbrk+0x48>
	}

	heap_end += incr;
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <_sbrk+0x50>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	4a03      	ldr	r2, [pc, #12]	; (800094c <_sbrk+0x50>)
 8000940:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200001e4 	.word	0x200001e4
 8000950:	20020ff8 	.word	0x20020ff8

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <SystemInit+0x28>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a07      	ldr	r2, [pc, #28]	; (800097c <SystemInit+0x28>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <SystemInit+0x28>)
 800096a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800096e:	609a      	str	r2, [r3, #8]
#endif
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000984:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000986:	e003      	b.n	8000990 <LoopCopyDataInit>

08000988 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800098a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800098c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800098e:	3104      	adds	r1, #4

08000990 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000994:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000996:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000998:	d3f6      	bcc.n	8000988 <CopyDataInit>
  ldr  r2, =_sbss
 800099a:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800099c:	e002      	b.n	80009a4 <LoopFillZerobss>

0800099e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800099e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009a0:	f842 3b04 	str.w	r3, [r2], #4

080009a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009a8:	d3f9      	bcc.n	800099e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009aa:	f7ff ffd3 	bl	8000954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ae:	f009 fa2d 	bl	8009e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b2:	f7ff fdb1 	bl	8000518 <main>
  bx  lr    
 80009b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009b8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80009bc:	0800a0ac 	.word	0x0800a0ac
  ldr  r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009c4:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 80009c8:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 80009cc:	20020ff8 	.word	0x20020ff8

080009d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <HAL_Init+0x40>)
 80009de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_Init+0x40>)
 80009ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_Init+0x40>)
 80009f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f94d 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 f808 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff feb0 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023c00 	.word	0x40023c00

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x54>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f965 	bl	8000d06 <HAL_SYSTICK_Config>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00e      	b.n	8000a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d80a      	bhi.n	8000a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f000 f92d 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <HAL_InitTick+0x5c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000284 	.word	0x20000284

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000284 	.word	0x20000284

08000ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac0:	f7ff ffee 	bl	8000aa0 <HAL_GetTick>
 8000ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad0:	d005      	beq.n	8000ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_Delay+0x40>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ade:	bf00      	nop
 8000ae0:	f7ff ffde 	bl	8000aa0 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8f7      	bhi.n	8000ae0 <HAL_Delay+0x28>
  {
  }
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000008 	.word	0x20000008

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	; (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	; 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff29 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff3e 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff31 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ffa2 	bl	8000c58 <SysTick_Config>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	e165      	b.n	8001008 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f040 8154 	bne.w	8001002 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d00b      	beq.n	8000d7a <HAL_GPIO_Init+0x5a>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d007      	beq.n	8000d7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6e:	2b11      	cmp	r3, #17
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b12      	cmp	r3, #18
 8000d78:	d130      	bne.n	8000ddc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0xfc>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b12      	cmp	r3, #18
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	69b9      	ldr	r1, [r7, #24]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80ae 	beq.w	8001002 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b5c      	ldr	r3, [pc, #368]	; (800101c <HAL_GPIO_Init+0x2fc>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a5b      	ldr	r2, [pc, #364]	; (800101c <HAL_GPIO_Init+0x2fc>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b59      	ldr	r3, [pc, #356]	; (800101c <HAL_GPIO_Init+0x2fc>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec2:	4a57      	ldr	r2, [pc, #348]	; (8001020 <HAL_GPIO_Init+0x300>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	220f      	movs	r2, #15
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4e      	ldr	r2, [pc, #312]	; (8001024 <HAL_GPIO_Init+0x304>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d025      	beq.n	8000f3a <HAL_GPIO_Init+0x21a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <HAL_GPIO_Init+0x308>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d01f      	beq.n	8000f36 <HAL_GPIO_Init+0x216>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	; (800102c <HAL_GPIO_Init+0x30c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d019      	beq.n	8000f32 <HAL_GPIO_Init+0x212>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4b      	ldr	r2, [pc, #300]	; (8001030 <HAL_GPIO_Init+0x310>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0x20e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4a      	ldr	r2, [pc, #296]	; (8001034 <HAL_GPIO_Init+0x314>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00d      	beq.n	8000f2a <HAL_GPIO_Init+0x20a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a49      	ldr	r2, [pc, #292]	; (8001038 <HAL_GPIO_Init+0x318>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x206>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a48      	ldr	r2, [pc, #288]	; (800103c <HAL_GPIO_Init+0x31c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_GPIO_Init+0x202>
 8000f1e:	2306      	movs	r3, #6
 8000f20:	e00c      	b.n	8000f3c <HAL_GPIO_Init+0x21c>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e00a      	b.n	8000f3c <HAL_GPIO_Init+0x21c>
 8000f26:	2305      	movs	r3, #5
 8000f28:	e008      	b.n	8000f3c <HAL_GPIO_Init+0x21c>
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x21c>
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e004      	b.n	8000f3c <HAL_GPIO_Init+0x21c>
 8000f32:	2302      	movs	r3, #2
 8000f34:	e002      	b.n	8000f3c <HAL_GPIO_Init+0x21c>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x21c>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	69fa      	ldr	r2, [r7, #28]
 8000f3e:	f002 0203 	and.w	r2, r2, #3
 8000f42:	0092      	lsls	r2, r2, #2
 8000f44:	4093      	lsls	r3, r2
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f4c:	4934      	ldr	r1, [pc, #208]	; (8001020 <HAL_GPIO_Init+0x300>)
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5a:	4b39      	ldr	r3, [pc, #228]	; (8001040 <HAL_GPIO_Init+0x320>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f7e:	4a30      	ldr	r2, [pc, #192]	; (8001040 <HAL_GPIO_Init+0x320>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <HAL_GPIO_Init+0x320>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa8:	4a25      	ldr	r2, [pc, #148]	; (8001040 <HAL_GPIO_Init+0x320>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <HAL_GPIO_Init+0x320>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <HAL_GPIO_Init+0x320>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_GPIO_Init+0x320>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ffc:	4a10      	ldr	r2, [pc, #64]	; (8001040 <HAL_GPIO_Init+0x320>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3301      	adds	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	2b0f      	cmp	r3, #15
 800100c:	f67f ae96 	bls.w	8000d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001010:	bf00      	nop
 8001012:	3724      	adds	r7, #36	; 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40023800 	.word	0x40023800
 8001020:	40013800 	.word	0x40013800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	40020800 	.word	0x40020800
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40021000 	.word	0x40021000
 8001038:	40021400 	.word	0x40021400
 800103c:	40021800 	.word	0x40021800
 8001040:	40013c00 	.word	0x40013c00

08001044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e001      	b.n	8001066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	b08f      	sub	sp, #60	; 0x3c
 8001078:	af0a      	add	r7, sp, #40	; 0x28
 800107a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e116      	b.n	80012b4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d106      	bne.n	80010a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f008 fb97 	bl	80097d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f004 f866 	bl	8005196 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	687e      	ldr	r6, [r7, #4]
 80010d2:	466d      	mov	r5, sp
 80010d4:	f106 0410 	add.w	r4, r6, #16
 80010d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80010e8:	1d33      	adds	r3, r6, #4
 80010ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f003 ff3d 	bl	8004f6c <USB_CoreInit>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2202      	movs	r2, #2
 80010fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0d7      	b.n	80012b4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f004 f854 	bl	80051b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e04a      	b.n	80011ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	1a9b      	subs	r3, r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	333d      	adds	r3, #61	; 0x3d
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	1a9b      	subs	r3, r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	333c      	adds	r3, #60	; 0x3c
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	b298      	uxth	r0, r3
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	1a9b      	subs	r3, r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	3342      	adds	r3, #66	; 0x42
 8001152:	4602      	mov	r2, r0
 8001154:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	1a9b      	subs	r3, r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	333f      	adds	r3, #63	; 0x3f
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	3344      	adds	r3, #68	; 0x44
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	3348      	adds	r3, #72	; 0x48
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	1a9b      	subs	r3, r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	3350      	adds	r3, #80	; 0x50
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	3301      	adds	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d3af      	bcc.n	8001116 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e044      	b.n	8001246 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	1a9b      	subs	r3, r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	1a9b      	subs	r3, r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	1a9b      	subs	r3, r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	3301      	adds	r3, #1
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3b5      	bcc.n	80011bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	687e      	ldr	r6, [r7, #4]
 8001258:	466d      	mov	r5, sp
 800125a:	f106 0410 	add.w	r4, r6, #16
 800125e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800126a:	e885 0003 	stmia.w	r5, {r0, r1}
 800126e:	1d33      	adds	r3, r6, #4
 8001270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001272:	6838      	ldr	r0, [r7, #0]
 8001274:	f003 ffca 	bl	800520c <USB_DevInit>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2202      	movs	r2, #2
 8001282:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e014      	b.n	80012b4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d102      	bne.n	80012a8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f001 f8be 	bl	8002424 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 fffc 	bl	80062aa <USB_DevDisconnect>

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_PCD_Start+0x1c>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e020      	b.n	800131a <HAL_PCD_Start+0x5e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d109      	bne.n	80012fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d005      	beq.n	80012fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f004 ffba 	bl	800627a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f003 ff32 	bl	8005174 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001322:	b590      	push	{r4, r7, lr}
 8001324:	b08d      	sub	sp, #52	; 0x34
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f005 f861 	bl	8006400 <USB_GetMode>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	f040 83ca 	bne.w	8001ada <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f004 ffc5 	bl	80062da <USB_ReadInterrupts>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 83c0 	beq.w	8001ad8 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f004 ffbc 	bl	80062da <USB_ReadInterrupts>
 8001362:	4603      	mov	r3, r0
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b02      	cmp	r3, #2
 800136a:	d107      	bne.n	800137c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695a      	ldr	r2, [r3, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f002 0202 	and.w	r2, r2, #2
 800137a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f004 ffaa 	bl	80062da <USB_ReadInterrupts>
 8001386:	4603      	mov	r3, r0
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	2b10      	cmp	r3, #16
 800138e:	d161      	bne.n	8001454 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	699a      	ldr	r2, [r3, #24]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0210 	bic.w	r2, r2, #16
 800139e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f003 020f 	and.w	r2, r3, #15
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	3304      	adds	r3, #4
 80013be:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	0c5b      	lsrs	r3, r3, #17
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d124      	bne.n	8001416 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d035      	beq.n	8001444 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	6a38      	ldr	r0, [r7, #32]
 80013ec:	f004 fe22 	bl	8006034 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013fc:	441a      	add	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	699a      	ldr	r2, [r3, #24]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800140e:	441a      	add	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	619a      	str	r2, [r3, #24]
 8001414:	e016      	b.n	8001444 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	0c5b      	lsrs	r3, r3, #17
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	2b06      	cmp	r3, #6
 8001420:	d110      	bne.n	8001444 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001428:	2208      	movs	r2, #8
 800142a:	4619      	mov	r1, r3
 800142c:	6a38      	ldr	r0, [r7, #32]
 800142e:	f004 fe01 	bl	8006034 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800143e:	441a      	add	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0210 	orr.w	r2, r2, #16
 8001452:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f004 ff3e 	bl	80062da <USB_ReadInterrupts>
 800145e:	4603      	mov	r3, r0
 8001460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001464:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001468:	d16e      	bne.n	8001548 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f004 ff44 	bl	8006300 <USB_ReadDevAllOutEpInterrupt>
 8001478:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800147a:	e062      	b.n	8001542 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d057      	beq.n	8001536 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f004 ff69 	bl	8006368 <USB_ReadDevOutEPInterrupt>
 8001496:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00c      	beq.n	80014bc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ae:	461a      	mov	r2, r3
 80014b0:	2301      	movs	r3, #1
 80014b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fe0a 	bl	80020d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00c      	beq.n	80014e0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	015a      	lsls	r2, r3, #5
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014d2:	461a      	mov	r2, r3
 80014d4:	2308      	movs	r3, #8
 80014d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 ff04 	bl	80022e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d008      	beq.n	80014fc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	015a      	lsls	r2, r3, #5
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f6:	461a      	mov	r2, r3
 80014f8:	2310      	movs	r3, #16
 80014fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	2b00      	cmp	r3, #0
 8001504:	d008      	beq.n	8001518 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4413      	add	r3, r2
 800150e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001512:	461a      	mov	r2, r3
 8001514:	2320      	movs	r3, #32
 8001516:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152e:	461a      	mov	r2, r3
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	3301      	adds	r3, #1
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	2b00      	cmp	r3, #0
 8001546:	d199      	bne.n	800147c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fec4 	bl	80062da <USB_ReadInterrupts>
 8001552:	4603      	mov	r3, r0
 8001554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001558:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800155c:	f040 80c0 	bne.w	80016e0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f004 fee5 	bl	8006334 <USB_ReadDevAllInEpInterrupt>
 800156a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001570:	e0b2      	b.n	80016d8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80a7 	beq.w	80016cc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f004 ff0b 	bl	80063a4 <USB_ReadDevInEPInterrupt>
 800158e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d057      	beq.n	800164a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	2201      	movs	r2, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69f9      	ldr	r1, [r7, #28]
 80015b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015ba:	4013      	ands	r3, r2
 80015bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ca:	461a      	mov	r2, r3
 80015cc:	2301      	movs	r3, #1
 80015ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d132      	bne.n	800163e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015dc:	4613      	mov	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	3348      	adds	r3, #72	; 0x48
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4403      	add	r3, r0
 80015f8:	3344      	adds	r3, #68	; 0x44
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4419      	add	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	1a9b      	subs	r3, r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4403      	add	r3, r0
 800160c:	3348      	adds	r3, #72	; 0x48
 800160e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	2b00      	cmp	r3, #0
 8001614:	d113      	bne.n	800163e <HAL_PCD_IRQHandler+0x31c>
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	3350      	adds	r3, #80	; 0x50
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d108      	bne.n	800163e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001636:	461a      	mov	r2, r3
 8001638:	2101      	movs	r1, #1
 800163a:	f004 ff13 	bl	8006464 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f008 f946 	bl	80098d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	015a      	lsls	r2, r3, #5
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001660:	461a      	mov	r2, r3
 8001662:	2308      	movs	r3, #8
 8001664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167c:	461a      	mov	r2, r3
 800167e:	2310      	movs	r3, #16
 8001680:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001698:	461a      	mov	r2, r3
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b4:	461a      	mov	r2, r3
 80016b6:	2302      	movs	r3, #2
 80016b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fc75 	bl	8001fb6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	3301      	adds	r3, #1
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f af49 	bne.w	8001572 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 fdf8 	bl	80062da <USB_ReadInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016f4:	d122      	bne.n	800173c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800171c:	2100      	movs	r1, #0
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fea4 	bl	800246c <HAL_PCDEx_LPM_Callback>
 8001724:	e002      	b.n	800172c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f008 f942 	bl	80099b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800173a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f004 fdca 	bl	80062da <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800174c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001750:	d112      	bne.n	8001778 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b01      	cmp	r3, #1
 8001760:	d102      	bne.n	8001768 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f008 f8fe 	bl	8009964 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001776:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fdac 	bl	80062da <USB_ReadInterrupts>
 8001782:	4603      	mov	r3, r0
 8001784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800178c:	d121      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800179c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d111      	bne.n	80017cc <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	f003 020f 	and.w	r2, r3, #15
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017c2:	2101      	movs	r1, #1
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 fe51 	bl	800246c <HAL_PCDEx_LPM_Callback>
 80017ca:	e002      	b.n	80017d2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f008 f8c9 	bl	8009964 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 fd7f 	bl	80062da <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017e6:	f040 80c7 	bne.w	8001978 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2110      	movs	r1, #16
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fe5f 	bl	80054c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800180e:	e056      	b.n	80018be <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800181c:	461a      	mov	r2, r3
 800181e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001822:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001834:	0151      	lsls	r1, r2, #5
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	440a      	add	r2, r1
 800183a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800183e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001842:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	015a      	lsls	r2, r3, #5
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4413      	add	r3, r2
 800184c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001854:	0151      	lsls	r1, r2, #5
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	440a      	add	r2, r1
 800185a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800185e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001862:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	015a      	lsls	r2, r3, #5
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	4413      	add	r3, r2
 800186c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001870:	461a      	mov	r2, r3
 8001872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001876:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187a:	015a      	lsls	r2, r3, #5
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	4413      	add	r3, r2
 8001880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001888:	0151      	lsls	r1, r2, #5
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	440a      	add	r2, r1
 800188e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001892:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001896:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189a:	015a      	lsls	r2, r3, #5
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a8:	0151      	lsls	r1, r2, #5
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	440a      	add	r2, r1
 80018ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ba:	3301      	adds	r3, #1
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d3a3      	bcc.n	8001810 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d016      	beq.n	8001912 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f4:	f043 030b 	orr.w	r3, r3, #11
 80018f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190a:	f043 030b 	orr.w	r3, r3, #11
 800190e:	6453      	str	r3, [r2, #68]	; 0x44
 8001910:	e015      	b.n	800193e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001924:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001928:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001938:	f043 030b 	orr.w	r3, r3, #11
 800193c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001950:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001962:	461a      	mov	r2, r3
 8001964:	f004 fd7e 	bl	8006464 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f004 fcac 	bl	80062da <USB_ReadInterrupts>
 8001982:	4603      	mov	r3, r0
 8001984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800198c:	d124      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f004 fd42 	bl	800641c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fdf4 	bl	800558a <USB_GetDevSpeed>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681c      	ldr	r4, [r3, #0]
 80019ae:	f000 ff27 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 80019b2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	4620      	mov	r0, r4
 80019be:	f003 fb37 	bl	8005030 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f007 ffaf 	bl	8009926 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 fc7c 	bl	80062da <USB_ReadInterrupts>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d10a      	bne.n	8001a02 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f007 ff8c 	bl	800990a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f002 0208 	and.w	r2, r2, #8
 8001a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 fc67 	bl	80062da <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a16:	d10f      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f007 ffe4 	bl	80099f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f004 fc4c 	bl	80062da <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a4c:	d10f      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f007 ffb7 	bl	80099cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f004 fc31 	bl	80062da <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a82:	d10a      	bne.n	8001a9a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f007 ffc5 	bl	8009a14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 fc1b 	bl	80062da <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d115      	bne.n	8001ada <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f007 ffb5 	bl	8009a30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	e000      	b.n	8001ada <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001ad8:	bf00      	nop
    }
  }
}
 8001ada:	3734      	adds	r7, #52	; 0x34
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}

08001ae0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_PCD_SetAddress+0x1a>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e013      	b.n	8001b22 <HAL_PCD_SetAddress+0x42>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fb8b 	bl	800622e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	4608      	mov	r0, r1
 8001b34:	4611      	mov	r1, r2
 8001b36:	461a      	mov	r2, r3
 8001b38:	4603      	mov	r3, r0
 8001b3a:	70fb      	strb	r3, [r7, #3]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	803b      	strh	r3, [r7, #0]
 8001b40:	4613      	mov	r3, r2
 8001b42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da0f      	bge.n	8001b70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	f003 020f 	and.w	r2, r3, #15
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	3338      	adds	r3, #56	; 0x38
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	3304      	adds	r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	705a      	strb	r2, [r3, #1]
 8001b6e:	e00f      	b.n	8001b90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	f003 020f 	and.w	r2, r3, #15
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	3304      	adds	r3, #4
 8001b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b9c:	883a      	ldrh	r2, [r7, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	78ba      	ldrb	r2, [r7, #2]
 8001ba6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bba:	78bb      	ldrb	r3, [r7, #2]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d102      	bne.n	8001bc6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_PCD_EP_Open+0xaa>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e00e      	b.n	8001bf2 <HAL_PCD_EP_Open+0xc8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68f9      	ldr	r1, [r7, #12]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fcf6 	bl	80055d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001bf0:	7afb      	ldrb	r3, [r7, #11]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da0f      	bge.n	8001c2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 020f 	and.w	r2, r3, #15
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3338      	adds	r3, #56	; 0x38
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	3304      	adds	r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	705a      	strb	r2, [r3, #1]
 8001c2c:	e00f      	b.n	8001c4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_PCD_EP_Close+0x6e>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e00e      	b.n	8001c86 <HAL_PCD_EP_Close+0x8c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68f9      	ldr	r1, [r7, #12]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fd34 	bl	80056e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
 8001ca0:	f003 020f 	and.w	r2, r3, #15
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d102      	bne.n	8001cea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6979      	ldr	r1, [r7, #20]
 8001d02:	f004 f80f 	bl	8005d24 <USB_EP0StartXfer>
 8001d06:	e008      	b.n	8001d1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	6979      	ldr	r1, [r7, #20]
 8001d16:	f003 fdc1 	bl	800589c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 020f 	and.w	r2, r3, #15
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	460b      	mov	r3, r1
 8001d62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	7afb      	ldrb	r3, [r7, #11]
 8001d66:	f003 020f 	and.w	r2, r3, #15
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	3338      	adds	r3, #56	; 0x38
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	3304      	adds	r3, #4
 8001d7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2201      	movs	r2, #1
 8001d92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d102      	bne.n	8001dae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	6979      	ldr	r1, [r7, #20]
 8001dc6:	f003 ffad 	bl	8005d24 <USB_EP0StartXfer>
 8001dca:	e008      	b.n	8001dde <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	6979      	ldr	r1, [r7, #20]
 8001dda:	f003 fd5f 	bl	800589c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d901      	bls.n	8001e06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e050      	b.n	8001ea8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da0f      	bge.n	8001e2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 020f 	and.w	r2, r3, #15
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	3338      	adds	r3, #56	; 0x38
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	3304      	adds	r3, #4
 8001e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	705a      	strb	r2, [r3, #1]
 8001e2c:	e00d      	b.n	8001e4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_PCD_EP_SetStall+0x82>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e01e      	b.n	8001ea8 <HAL_PCD_EP_SetStall+0xc0>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68f9      	ldr	r1, [r7, #12]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f004 f904 	bl	8006086 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10a      	bne.n	8001e9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	b2d9      	uxtb	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f004 fae3 	bl	8006464 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 020f 	and.w	r2, r3, #15
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d901      	bls.n	8001ece <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e042      	b.n	8001f54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da0f      	bge.n	8001ef6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	3338      	adds	r3, #56	; 0x38
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	3304      	adds	r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	705a      	strb	r2, [r3, #1]
 8001ef4:	e00f      	b.n	8001f16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	f003 020f 	and.w	r2, r3, #15
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_PCD_EP_ClrStall+0x86>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e00e      	b.n	8001f54 <HAL_PCD_EP_ClrStall+0xa4>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68f9      	ldr	r1, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f004 f90c 	bl	8006162 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_PCD_EP_Flush+0x1a>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e01b      	b.n	8001fae <HAL_PCD_EP_Flush+0x52>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da09      	bge.n	8001f9a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f003 fa98 	bl	80054c8 <USB_FlushTxFifo>
 8001f98:	e004      	b.n	8001fa4 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fab8 	bl	8005514 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b08a      	sub	sp, #40	; 0x28
 8001fba:	af02      	add	r7, sp, #8
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	3338      	adds	r3, #56	; 0x38
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	3304      	adds	r3, #4
 8001fdc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d901      	bls.n	8001fee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e06c      	b.n	80020c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	d902      	bls.n	800200a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3303      	adds	r3, #3
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002012:	e02b      	b.n	800206c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	429a      	cmp	r2, r3
 8002028:	d902      	bls.n	8002030 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	3303      	adds	r3, #3
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	68d9      	ldr	r1, [r3, #12]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002048:	b2db      	uxtb	r3, r3
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4603      	mov	r3, r0
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f003 ffbb 	bl	8005fca <USB_WritePacket>

    ep->xfer_buff  += len;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	441a      	add	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	441a      	add	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	b29b      	uxth	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	429a      	cmp	r2, r3
 8002080:	d809      	bhi.n	8002096 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800208a:	429a      	cmp	r2, r3
 800208c:	d203      	bcs.n	8002096 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1be      	bne.n	8002014 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d811      	bhi.n	80020c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	2201      	movs	r2, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	6939      	ldr	r1, [r7, #16]
 80020be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020c2:	4013      	ands	r3, r2
 80020c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	333c      	adds	r3, #60	; 0x3c
 80020e8:	3304      	adds	r3, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	f040 80a0 	bne.w	8002248 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d015      	beq.n	800213e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4a72      	ldr	r2, [pc, #456]	; (80022e0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002116:	4293      	cmp	r3, r2
 8002118:	f240 80dd 	bls.w	80022d6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80d7 	beq.w	80022d6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002134:	461a      	mov	r2, r3
 8002136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213a:	6093      	str	r3, [r2, #8]
 800213c:	e0cb      	b.n	80022d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d009      	beq.n	800215c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002154:	461a      	mov	r2, r3
 8002156:	2320      	movs	r3, #32
 8002158:	6093      	str	r3, [r2, #8]
 800215a:	e0bc      	b.n	80022d6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 80b7 	bne.w	80022d6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a5d      	ldr	r2, [pc, #372]	; (80022e0 <PCD_EP_OutXfrComplete_int+0x210>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d90f      	bls.n	8002190 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002186:	461a      	mov	r2, r3
 8002188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800218c:	6093      	str	r3, [r2, #8]
 800218e:	e0a2      	b.n	80022d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021a2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	0159      	lsls	r1, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	440b      	add	r3, r1
 80021ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80021b6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4403      	add	r3, r0
 80021c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021ca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021de:	6819      	ldr	r1, [r3, #0]
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4403      	add	r3, r0
 80021ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4419      	add	r1, r3
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4403      	add	r3, r0
 8002204:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002208:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d114      	bne.n	800223a <PCD_EP_OutXfrComplete_int+0x16a>
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d108      	bne.n	800223a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002232:	461a      	mov	r2, r3
 8002234:	2101      	movs	r1, #1
 8002236:	f004 f915 	bl	8006464 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f007 fb2d 	bl	80098a0 <HAL_PCD_DataOutStageCallback>
 8002246:	e046      	b.n	80022d6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <PCD_EP_OutXfrComplete_int+0x214>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d124      	bne.n	800229a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002266:	461a      	mov	r2, r3
 8002268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800226c:	6093      	str	r3, [r2, #8]
 800226e:	e032      	b.n	80022d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002286:	461a      	mov	r2, r3
 8002288:	2320      	movs	r3, #32
 800228a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4619      	mov	r1, r3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f007 fb04 	bl	80098a0 <HAL_PCD_DataOutStageCallback>
 8002298:	e01d      	b.n	80022d6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d114      	bne.n	80022ca <PCD_EP_OutXfrComplete_int+0x1fa>
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d108      	bne.n	80022ca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022c2:	461a      	mov	r2, r3
 80022c4:	2100      	movs	r1, #0
 80022c6:	f004 f8cd 	bl	8006464 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4619      	mov	r1, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f007 fae5 	bl	80098a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	4f54300a 	.word	0x4f54300a
 80022e4:	4f54310a 	.word	0x4f54310a

080022e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	333c      	adds	r3, #60	; 0x3c
 8002300:	3304      	adds	r3, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a15      	ldr	r2, [pc, #84]	; (8002370 <PCD_EP_OutSetupPacket_int+0x88>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d90e      	bls.n	800233c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002334:	461a      	mov	r2, r3
 8002336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f007 fa9d 	bl	800987c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <PCD_EP_OutSetupPacket_int+0x88>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d90c      	bls.n	8002364 <PCD_EP_OutSetupPacket_int+0x7c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d108      	bne.n	8002364 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800235c:	461a      	mov	r2, r3
 800235e:	2101      	movs	r1, #1
 8002360:	f004 f880 	bl	8006464 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	4f54300a 	.word	0x4f54300a

08002374 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
 8002380:	4613      	mov	r3, r2
 8002382:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d107      	bne.n	80023a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002392:	883b      	ldrh	r3, [r7, #0]
 8002394:	0419      	lsls	r1, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	430a      	orrs	r2, r1
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
 80023a0:	e028      	b.n	80023f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4413      	add	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00d      	b.n	80023d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	3340      	adds	r3, #64	; 0x40
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4413      	add	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	429a      	cmp	r2, r3
 80023da:	d3ec      	bcc.n	80023b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023dc:	883b      	ldrh	r3, [r7, #0]
 80023de:	0418      	lsls	r0, r3, #16
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	4302      	orrs	r2, r0
 80023ec:	3340      	adds	r3, #64	; 0x40
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002456:	f043 0303 	orr.w	r3, r3, #3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0cc      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d90c      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b65      	ldr	r3, [pc, #404]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0b8      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a52      	ldr	r2, [pc, #328]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	494d      	ldr	r1, [pc, #308]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d044      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d119      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e07f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d003      	beq.n	8002542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253e:	2b03      	cmp	r3, #3
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e06f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e067      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4934      	ldr	r1, [pc, #208]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002574:	f7fe fa94 	bl	8000aa0 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7fe fa90 	bl	8000aa0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e04f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d20c      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e032      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4916      	ldr	r1, [pc, #88]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	490e      	ldr	r1, [pc, #56]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800260a:	f000 f821 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 800260e:	4601      	mov	r1, r0
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	5cd3      	ldrb	r3, [r2, r3]
 800261e:	fa21 f303 	lsr.w	r3, r1, r3
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe f9f4 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023c00 	.word	0x40023c00
 8002640:	40023800 	.word	0x40023800
 8002644:	0800a054 	.word	0x0800a054
 8002648:	20000000 	.word	0x20000000
 800264c:	20000004 	.word	0x20000004

08002650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002666:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d007      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x32>
 8002672:	2b08      	cmp	r3, #8
 8002674:	d008      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x38>
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 80b4 	bne.w	80027e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b5e      	ldr	r3, [pc, #376]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800267e:	60bb      	str	r3, [r7, #8]
       break;
 8002680:	e0b3      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002682:	4b5e      	ldr	r3, [pc, #376]	; (80027fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002684:	60bb      	str	r3, [r7, #8]
      break;
 8002686:	e0b0      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002688:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002690:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002692:	4b58      	ldr	r3, [pc, #352]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d04a      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269e:	4b55      	ldr	r3, [pc, #340]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	f04f 0400 	mov.w	r4, #0
 80026a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	ea03 0501 	and.w	r5, r3, r1
 80026b4:	ea04 0602 	and.w	r6, r4, r2
 80026b8:	4629      	mov	r1, r5
 80026ba:	4632      	mov	r2, r6
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	0154      	lsls	r4, r2, #5
 80026c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026ca:	014b      	lsls	r3, r1, #5
 80026cc:	4619      	mov	r1, r3
 80026ce:	4622      	mov	r2, r4
 80026d0:	1b49      	subs	r1, r1, r5
 80026d2:	eb62 0206 	sbc.w	r2, r2, r6
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	f04f 0400 	mov.w	r4, #0
 80026de:	0194      	lsls	r4, r2, #6
 80026e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026e4:	018b      	lsls	r3, r1, #6
 80026e6:	1a5b      	subs	r3, r3, r1
 80026e8:	eb64 0402 	sbc.w	r4, r4, r2
 80026ec:	f04f 0100 	mov.w	r1, #0
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	00e2      	lsls	r2, r4, #3
 80026f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026fa:	00d9      	lsls	r1, r3, #3
 80026fc:	460b      	mov	r3, r1
 80026fe:	4614      	mov	r4, r2
 8002700:	195b      	adds	r3, r3, r5
 8002702:	eb44 0406 	adc.w	r4, r4, r6
 8002706:	f04f 0100 	mov.w	r1, #0
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	0262      	lsls	r2, r4, #9
 8002710:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002714:	0259      	lsls	r1, r3, #9
 8002716:	460b      	mov	r3, r1
 8002718:	4614      	mov	r4, r2
 800271a:	4618      	mov	r0, r3
 800271c:	4621      	mov	r1, r4
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f04f 0400 	mov.w	r4, #0
 8002724:	461a      	mov	r2, r3
 8002726:	4623      	mov	r3, r4
 8002728:	f7fd fd76 	bl	8000218 <__aeabi_uldivmod>
 800272c:	4603      	mov	r3, r0
 800272e:	460c      	mov	r4, r1
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	e049      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002734:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	f04f 0400 	mov.w	r4, #0
 800273e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	ea03 0501 	and.w	r5, r3, r1
 800274a:	ea04 0602 	and.w	r6, r4, r2
 800274e:	4629      	mov	r1, r5
 8002750:	4632      	mov	r2, r6
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f04f 0400 	mov.w	r4, #0
 800275a:	0154      	lsls	r4, r2, #5
 800275c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002760:	014b      	lsls	r3, r1, #5
 8002762:	4619      	mov	r1, r3
 8002764:	4622      	mov	r2, r4
 8002766:	1b49      	subs	r1, r1, r5
 8002768:	eb62 0206 	sbc.w	r2, r2, r6
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	f04f 0400 	mov.w	r4, #0
 8002774:	0194      	lsls	r4, r2, #6
 8002776:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800277a:	018b      	lsls	r3, r1, #6
 800277c:	1a5b      	subs	r3, r3, r1
 800277e:	eb64 0402 	sbc.w	r4, r4, r2
 8002782:	f04f 0100 	mov.w	r1, #0
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	00e2      	lsls	r2, r4, #3
 800278c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002790:	00d9      	lsls	r1, r3, #3
 8002792:	460b      	mov	r3, r1
 8002794:	4614      	mov	r4, r2
 8002796:	195b      	adds	r3, r3, r5
 8002798:	eb44 0406 	adc.w	r4, r4, r6
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	02a2      	lsls	r2, r4, #10
 80027a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027aa:	0299      	lsls	r1, r3, #10
 80027ac:	460b      	mov	r3, r1
 80027ae:	4614      	mov	r4, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	4621      	mov	r1, r4
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f04f 0400 	mov.w	r4, #0
 80027ba:	461a      	mov	r2, r3
 80027bc:	4623      	mov	r3, r4
 80027be:	f7fd fd2b 	bl	8000218 <__aeabi_uldivmod>
 80027c2:	4603      	mov	r3, r0
 80027c4:	460c      	mov	r4, r1
 80027c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	60bb      	str	r3, [r7, #8]
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027e6:	60bb      	str	r3, [r7, #8]
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	68bb      	ldr	r3, [r7, #8]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	00f42400 	.word	0x00f42400
 80027fc:	007a1200 	.word	0x007a1200

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_RCC_GetHCLKFreq+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000000 	.word	0x20000000

08002818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d010      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800283c:	4b7a      	ldr	r3, [pc, #488]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800283e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002842:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4977      	ldr	r1, [pc, #476]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800285a:	2301      	movs	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d010      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800286a:	4b6f      	ldr	r3, [pc, #444]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800286c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002870:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	496b      	ldr	r1, [pc, #428]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8002888:	2301      	movs	r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d022      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8002898:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800289a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a6:	4960      	ldr	r1, [pc, #384]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028c2:	d10c      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80028c4:	4b58      	ldr	r3, [pc, #352]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	4954      	ldr	r1, [pc, #336]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d022      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80028ea:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	494b      	ldr	r1, [pc, #300]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002908:	2301      	movs	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002910:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002914:	d10c      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002916:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800291c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	3b01      	subs	r3, #1
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	493f      	ldr	r1, [pc, #252]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 808a 	beq.w	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a38      	ldr	r2, [pc, #224]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800295a:	4b34      	ldr	r3, [pc, #208]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a33      	ldr	r2, [pc, #204]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002964:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002966:	f7fe f89b 	bl	8000aa0 <HAL_GetTick>
 800296a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800296e:	f7fe f897 	bl	8000aa0 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1d1      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002980:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800298c:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002994:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d02f      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d028      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029b4:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029c0:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d114      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe f865 	bl	8000aa0 <HAL_GetTick>
 80029d6:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7fe f861 	bl	8000aa0 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e199      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a08:	d114      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002a0a:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1e:	4902      	ldr	r1, [pc, #8]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]
 8002a24:	e00c      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	42470e40 	.word	0x42470e40
 8002a34:	4b89      	ldr	r3, [pc, #548]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a88      	ldr	r2, [pc, #544]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a3e:	6093      	str	r3, [r2, #8]
 8002a40:	4b86      	ldr	r3, [pc, #536]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4c:	4983      	ldr	r1, [pc, #524]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d004      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8002a66:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002a74:	4b79      	ldr	r3, [pc, #484]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	4976      	ldr	r1, [pc, #472]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d011      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a96:	4b71      	ldr	r3, [pc, #452]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	496d      	ldr	r1, [pc, #436]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab4:	d101      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002ac6:	4b65      	ldr	r3, [pc, #404]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002acc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	4961      	ldr	r1, [pc, #388]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d004      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b80      	cmp	r3, #128	; 0x80
 8002ae8:	f040 80c6 	bne.w	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002aec:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002af2:	f7fd ffd5 	bl	8000aa0 <HAL_GetTick>
 8002af6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002afa:	f7fd ffd1 	bl	8000aa0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e10b      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002b18:	4a53      	ldr	r2, [pc, #332]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d023      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d019      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5c:	d00e      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d019      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d115      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b7a:	d110      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	019b      	lsls	r3, r3, #6
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	071b      	lsls	r3, r3, #28
 8002b96:	4931      	ldr	r1, [pc, #196]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d026      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d122      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bc6:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bcc:	0e1b      	lsrs	r3, r3, #24
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	431a      	orrs	r2, r3
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	061b      	lsls	r3, r3, #24
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	071b      	lsls	r3, r3, #28
 8002bec:	491b      	ldr	r1, [pc, #108]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfa:	f023 021f 	bic.w	r2, r3, #31
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	4915      	ldr	r1, [pc, #84]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d010      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	071b      	lsls	r3, r3, #28
 8002c32:	490a      	ldr	r1, [pc, #40]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c40:	f7fd ff2e 	bl	8000aa0 <HAL_GetTick>
 8002c44:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c46:	e011      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c48:	f7fd ff2a 	bl	8000aa0 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d90a      	bls.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e064      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	424711e0 	.word	0x424711e0
 8002c64:	42470068 	.word	0x42470068
 8002c68:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c6c:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0e7      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c84:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	4926      	ldr	r1, [pc, #152]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	491d      	ldr	r1, [pc, #116]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	4915      	ldr	r1, [pc, #84]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	490c      	ldr	r1, [pc, #48]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d0c:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d12:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	4904      	ldr	r1, [pc, #16]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40023800 	.word	0x40023800

08002d30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d075      	beq.n	8002e34 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d48:	4ba2      	ldr	r3, [pc, #648]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d00c      	beq.n	8002d6e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d54:	4b9f      	ldr	r3, [pc, #636]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d112      	bne.n	8002d86 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d60:	4b9c      	ldr	r3, [pc, #624]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d6c:	d10b      	bne.n	8002d86 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6e:	4b99      	ldr	r3, [pc, #612]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d05b      	beq.n	8002e32 <HAL_RCC_OscConfig+0x102>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d157      	bne.n	8002e32 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e20b      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x6e>
 8002d90:	4b90      	ldr	r3, [pc, #576]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a8f      	ldr	r2, [pc, #572]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e01d      	b.n	8002dda <HAL_RCC_OscConfig+0xaa>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x92>
 8002da8:	4b8a      	ldr	r3, [pc, #552]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a89      	ldr	r2, [pc, #548]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b87      	ldr	r3, [pc, #540]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a86      	ldr	r2, [pc, #536]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	e00b      	b.n	8002dda <HAL_RCC_OscConfig+0xaa>
 8002dc2:	4b84      	ldr	r3, [pc, #528]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a83      	ldr	r2, [pc, #524]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b81      	ldr	r3, [pc, #516]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a80      	ldr	r2, [pc, #512]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d013      	beq.n	8002e0a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7fd fe5d 	bl	8000aa0 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dea:	f7fd fe59 	bl	8000aa0 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b64      	cmp	r3, #100	; 0x64
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1d0      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfc:	4b75      	ldr	r3, [pc, #468]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0xba>
 8002e08:	e014      	b.n	8002e34 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fd fe49 	bl	8000aa0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e12:	f7fd fe45 	bl	8000aa0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	; 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e1bc      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e24:	4b6b      	ldr	r3, [pc, #428]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0xe2>
 8002e30:	e000      	b.n	8002e34 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d063      	beq.n	8002f08 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e40:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4c:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d11c      	bne.n	8002e92 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e58:	4b5e      	ldr	r3, [pc, #376]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d116      	bne.n	8002e92 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e64:	4b5b      	ldr	r3, [pc, #364]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_OscConfig+0x14c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e190      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4952      	ldr	r1, [pc, #328]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e90:	e03a      	b.n	8002f08 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d020      	beq.n	8002edc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9a:	4b4f      	ldr	r3, [pc, #316]	; (8002fd8 <HAL_RCC_OscConfig+0x2a8>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fd fdfe 	bl	8000aa0 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fd fdfa 	bl	8000aa0 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e171      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eba:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	493f      	ldr	r1, [pc, #252]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
 8002eda:	e015      	b.n	8002f08 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002edc:	4b3e      	ldr	r3, [pc, #248]	; (8002fd8 <HAL_RCC_OscConfig+0x2a8>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fd fddd 	bl	8000aa0 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eea:	f7fd fdd9 	bl	8000aa0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e150      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efc:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d030      	beq.n	8002f76 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1c:	4b2f      	ldr	r3, [pc, #188]	; (8002fdc <HAL_RCC_OscConfig+0x2ac>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fd fdbd 	bl	8000aa0 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7fd fdb9 	bl	8000aa0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e130      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1fa>
 8002f48:	e015      	b.n	8002f76 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4a:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fd fda6 	bl	8000aa0 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f58:	f7fd fda2 	bl	8000aa0 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e119      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 809f 	beq.w	80030c2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f84:	2300      	movs	r3, #0
 8002f86:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10f      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_OscConfig+0x2a4>)
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_RCC_OscConfig+0x2b0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d120      	bne.n	8003002 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc0:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <HAL_RCC_OscConfig+0x2b0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <HAL_RCC_OscConfig+0x2b0>)
 8002fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fcc:	f7fd fd68 	bl	8000aa0 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	e010      	b.n	8002ff6 <HAL_RCC_OscConfig+0x2c6>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	42470000 	.word	0x42470000
 8002fdc:	42470e80 	.word	0x42470e80
 8002fe0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe4:	f7fd fd5c 	bl	8000aa0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0d3      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x478>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d106      	bne.n	8003018 <HAL_RCC_OscConfig+0x2e8>
 800300a:	4b68      	ldr	r3, [pc, #416]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	4a67      	ldr	r2, [pc, #412]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6713      	str	r3, [r2, #112]	; 0x70
 8003016:	e01c      	b.n	8003052 <HAL_RCC_OscConfig+0x322>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b05      	cmp	r3, #5
 800301e:	d10c      	bne.n	800303a <HAL_RCC_OscConfig+0x30a>
 8003020:	4b62      	ldr	r3, [pc, #392]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	4a61      	ldr	r2, [pc, #388]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	6713      	str	r3, [r2, #112]	; 0x70
 800302c:	4b5f      	ldr	r3, [pc, #380]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a5e      	ldr	r2, [pc, #376]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
 8003038:	e00b      	b.n	8003052 <HAL_RCC_OscConfig+0x322>
 800303a:	4b5c      	ldr	r3, [pc, #368]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	4a5b      	ldr	r2, [pc, #364]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6713      	str	r3, [r2, #112]	; 0x70
 8003046:	4b59      	ldr	r3, [pc, #356]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a58      	ldr	r2, [pc, #352]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d015      	beq.n	8003086 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fd fd21 	bl	8000aa0 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003060:	e00a      	b.n	8003078 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003062:	f7fd fd1d 	bl	8000aa0 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e092      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	4b4c      	ldr	r3, [pc, #304]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ee      	beq.n	8003062 <HAL_RCC_OscConfig+0x332>
 8003084:	e014      	b.n	80030b0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7fd fd0b 	bl	8000aa0 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fd fd07 	bl	8000aa0 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e07c      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	4b41      	ldr	r3, [pc, #260]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ee      	bne.n	800308e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d105      	bne.n	80030c2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b6:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 80030bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d068      	beq.n	800319c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ca:	4b38      	ldr	r3, [pc, #224]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d060      	beq.n	8003198 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d145      	bne.n	800316a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <HAL_RCC_OscConfig+0x480>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fd fcdc 	bl	8000aa0 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fd fcd8 	bl	8000aa0 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e04f      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	019b      	lsls	r3, r3, #6
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	3b01      	subs	r3, #1
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	071b      	lsls	r3, r3, #28
 8003136:	491d      	ldr	r1, [pc, #116]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800313c:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <HAL_RCC_OscConfig+0x480>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003142:	f7fd fcad 	bl	8000aa0 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314a:	f7fd fca9 	bl	8000aa0 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e020      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315c:	4b13      	ldr	r3, [pc, #76]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x41a>
 8003168:	e018      	b.n	800319c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_RCC_OscConfig+0x480>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fd fc96 	bl	8000aa0 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003178:	f7fd fc92 	bl	8000aa0 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e009      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	4b08      	ldr	r3, [pc, #32]	; (80031ac <HAL_RCC_OscConfig+0x47c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x448>
 8003196:	e001      	b.n	800319c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40007000 	.word	0x40007000
 80031ac:	40023800 	.word	0x40023800
 80031b0:	42470060 	.word	0x42470060

080031b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e022      	b.n	800320c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d105      	bne.n	80031de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fd faef 	bl	80007bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2203      	movs	r2, #3
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f814 	bl	8003214 <HAL_SD_InitCard>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00a      	b.n	800320c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003214:	b5b0      	push	{r4, r5, r7, lr}
 8003216:	b08e      	sub	sp, #56	; 0x38
 8003218:	af04      	add	r7, sp, #16
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003230:	2376      	movs	r3, #118	; 0x76
 8003232:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681d      	ldr	r5, [r3, #0]
 8003238:	466c      	mov	r4, sp
 800323a:	f107 0314 	add.w	r3, r7, #20
 800323e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003242:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003246:	f107 0308 	add.w	r3, r7, #8
 800324a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800324c:	4628      	mov	r0, r5
 800324e:	f001 f929 	bl	80044a4 <SDIO_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e031      	b.n	80032c8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_SD_InitCard+0xbc>)
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f001 f961 	bl	8004536 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003274:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <HAL_SD_InitCard+0xbc>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fefc 	bl	8004078 <SD_PowerON>
 8003280:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00b      	beq.n	80032a0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e013      	b.n	80032c8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fe1b 	bl	8003edc <SD_InitCard>
 80032a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3728      	adds	r7, #40	; 0x28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bdb0      	pop	{r4, r5, r7, pc}
 80032d0:	422580a0 	.word	0x422580a0

080032d4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b092      	sub	sp, #72	; 0x48
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80032e2:	f7fd fbdd 	bl	8000aa0 <HAL_GetTick>
 80032e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d107      	bne.n	8003306 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1d7      	b.n	80036b6 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	f040 81ca 	bne.w	80036a8 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800331a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	441a      	add	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	429a      	cmp	r2, r3
 8003326:	d907      	bls.n	8003338 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e1be      	b.n	80036b6 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2203      	movs	r2, #3
 800333c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2200      	movs	r2, #0
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334c:	2b01      	cmp	r3, #1
 800334e:	d002      	beq.n	8003356 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003352:	025b      	lsls	r3, r3, #9
 8003354:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800335e:	4618      	mov	r0, r3
 8003360:	f001 f97c 	bl	800465c <SDMMC_CmdBlockLength>
 8003364:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00f      	beq.n	800338c <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a9a      	ldr	r2, [pc, #616]	; (80035dc <HAL_SD_ReadBlocks+0x308>)
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337a:	431a      	orrs	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e194      	b.n	80036b6 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	025b      	lsls	r3, r3, #9
 8003396:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003398:	2390      	movs	r3, #144	; 0x90
 800339a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800339c:	2302      	movs	r3, #2
 800339e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80033a4:	2301      	movs	r3, #1
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f107 0214 	add.w	r2, r7, #20
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 f926 	bl	8004604 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d90a      	bls.n	80033d4 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2202      	movs	r2, #2
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 f98a 	bl	80046e4 <SDMMC_CmdReadMultiBlock>
 80033d0:	6478      	str	r0, [r7, #68]	; 0x44
 80033d2:	e009      	b.n	80033e8 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 f95d 	bl	80046a0 <SDMMC_CmdReadSingleBlock>
 80033e6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80033e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d012      	beq.n	8003414 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a7a      	ldr	r2, [pc, #488]	; (80035dc <HAL_SD_ReadBlocks+0x308>)
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e150      	b.n	80036b6 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003418:	e061      	b.n	80034de <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d03c      	beq.n	80034a2 <HAL_SD_ReadBlocks+0x1ce>
 8003428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d039      	beq.n	80034a2 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800342e:	2300      	movs	r3, #0
 8003430:	643b      	str	r3, [r7, #64]	; 0x40
 8003432:	e033      	b.n	800349c <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f001 f85e 	bl	80044fa <SDIO_ReadFIFO>
 800343e:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	b2da      	uxtb	r2, r3
 8003444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003446:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344a:	3301      	adds	r3, #1
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800344e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003450:	3b01      	subs	r3, #1
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	b2da      	uxtb	r2, r3
 800345a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003460:	3301      	adds	r3, #1
 8003462:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003466:	3b01      	subs	r3, #1
 8003468:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	b2da      	uxtb	r2, r3
 8003470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003472:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003476:	3301      	adds	r3, #1
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347c:	3b01      	subs	r3, #1
 800347e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003482:	0e1b      	lsrs	r3, r3, #24
 8003484:	b2da      	uxtb	r2, r3
 8003486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003488:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348c:	3301      	adds	r3, #1
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003492:	3b01      	subs	r3, #1
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003498:	3301      	adds	r3, #1
 800349a:	643b      	str	r3, [r7, #64]	; 0x40
 800349c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349e:	2b07      	cmp	r3, #7
 80034a0:	d9c8      	bls.n	8003434 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80034a2:	f7fd fafd 	bl	8000aa0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d902      	bls.n	80034b8 <HAL_SD_ReadBlocks+0x1e4>
 80034b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d112      	bne.n	80034de <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a47      	ldr	r2, [pc, #284]	; (80035dc <HAL_SD_ReadBlocks+0x308>)
 80034be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0eb      	b.n	80036b6 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d096      	beq.n	800341a <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d022      	beq.n	8003540 <HAL_SD_ReadBlocks+0x26c>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d91f      	bls.n	8003540 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	2b03      	cmp	r3, #3
 8003506:	d01b      	beq.n	8003540 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f001 f94f 	bl	80047b0 <SDMMC_CmdStopTransfer>
 8003512:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003516:	2b00      	cmp	r3, #0
 8003518:	d012      	beq.n	8003540 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <HAL_SD_ReadBlocks+0x308>)
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0ba      	b.n	80036b6 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d012      	beq.n	8003574 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a22      	ldr	r2, [pc, #136]	; (80035dc <HAL_SD_ReadBlocks+0x308>)
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	f043 0208 	orr.w	r2, r3, #8
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0a0      	b.n	80036b6 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d012      	beq.n	80035a8 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a15      	ldr	r2, [pc, #84]	; (80035dc <HAL_SD_ReadBlocks+0x308>)
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e086      	b.n	80036b6 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d063      	beq.n	800367e <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a08      	ldr	r2, [pc, #32]	; (80035dc <HAL_SD_ReadBlocks+0x308>)
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e06c      	b.n	80036b6 <HAL_SD_ReadBlocks+0x3e2>
 80035dc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 ff88 	bl	80044fa <SDIO_ReadFIFO>
 80035ea:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80035f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f6:	3301      	adds	r3, #1
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80035fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fc:	3b01      	subs	r3, #1
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	b2da      	uxtb	r2, r3
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003608:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800360a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360c:	3301      	adds	r3, #1
 800360e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003612:	3b01      	subs	r3, #1
 8003614:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	b2da      	uxtb	r2, r3
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	3301      	adds	r3, #1
 8003624:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003628:	3b01      	subs	r3, #1
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	0e1b      	lsrs	r3, r3, #24
 8003630:	b2da      	uxtb	r2, r3
 8003632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003634:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003638:	3301      	adds	r3, #1
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800363c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363e:	3b01      	subs	r3, #1
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003642:	f7fd fa2d 	bl	8000aa0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800364e:	429a      	cmp	r2, r3
 8003650:	d902      	bls.n	8003658 <HAL_SD_ReadBlocks+0x384>
 8003652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003654:	2b00      	cmp	r3, #0
 8003656:	d112      	bne.n	800367e <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <HAL_SD_ReadBlocks+0x3ec>)
 800365e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e01b      	b.n	80036b6 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_SD_ReadBlocks+0x3be>
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1a6      	bne.n	80035e0 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f240 523a 	movw	r2, #1338	; 0x53a
 800369a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e006      	b.n	80036b6 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
  }
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3748      	adds	r7, #72	; 0x48
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	004005ff 	.word	0x004005ff

080036c4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b092      	sub	sp, #72	; 0x48
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80036d2:	f7fd f9e5 	bl	8000aa0 <HAL_GetTick>
 80036d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d107      	bne.n	80036f6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e182      	b.n	80039fc <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	f040 8175 	bne.w	80039ee <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800370a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	441a      	add	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	429a      	cmp	r2, r3
 8003716:	d907      	bls.n	8003728 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e169      	b.n	80039fc <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2203      	movs	r2, #3
 800372c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2200      	movs	r2, #0
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373c:	2b01      	cmp	r3, #1
 800373e:	d002      	beq.n	8003746 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003742:	025b      	lsls	r3, r3, #9
 8003744:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800374e:	4618      	mov	r0, r3
 8003750:	f000 ff84 	bl	800465c <SDMMC_CmdBlockLength>
 8003754:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00f      	beq.n	800377c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a9c      	ldr	r2, [pc, #624]	; (80039d4 <HAL_SD_WriteBlocks+0x310>)
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800376a:	431a      	orrs	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e13f      	b.n	80039fc <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800377c:	f04f 33ff 	mov.w	r3, #4294967295
 8003780:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	025b      	lsls	r3, r3, #9
 8003786:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003788:	2390      	movs	r3, #144	; 0x90
 800378a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003790:	2300      	movs	r3, #0
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003794:	2301      	movs	r3, #1
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f107 0218 	add.w	r2, r7, #24
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 ff2e 	bl	8004604 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d90a      	bls.n	80037c4 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 ffd6 	bl	800476c <SDMMC_CmdWriteMultiBlock>
 80037c0:	6478      	str	r0, [r7, #68]	; 0x44
 80037c2:	e009      	b.n	80037d8 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2210      	movs	r2, #16
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 ffa9 	bl	8004728 <SDMMC_CmdWriteSingleBlock>
 80037d6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80037d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d012      	beq.n	8003804 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7c      	ldr	r2, [pc, #496]	; (80039d4 <HAL_SD_WriteBlocks+0x310>)
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0fb      	b.n	80039fc <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003808:	e065      	b.n	80038d6 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d040      	beq.n	800389a <HAL_SD_WriteBlocks+0x1d6>
 8003818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d03d      	beq.n	800389a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800381e:	2300      	movs	r3, #0
 8003820:	643b      	str	r3, [r7, #64]	; 0x40
 8003822:	e037      	b.n	8003894 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8003824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800382a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382c:	3301      	adds	r3, #1
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003832:	3b01      	subs	r3, #1
 8003834:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	021a      	lsls	r2, r3, #8
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003844:	3301      	adds	r3, #1
 8003846:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384a:	3b01      	subs	r3, #1
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800384e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	041a      	lsls	r2, r3, #16
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	3301      	adds	r3, #1
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003862:	3b01      	subs	r3, #1
 8003864:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	061a      	lsls	r2, r3, #24
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003874:	3301      	adds	r3, #1
 8003876:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387a:	3b01      	subs	r3, #1
 800387c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f107 0214 	add.w	r2, r7, #20
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fe43 	bl	8004514 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800388e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003890:	3301      	adds	r3, #1
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
 8003894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003896:	2b07      	cmp	r3, #7
 8003898:	d9c4      	bls.n	8003824 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800389a:	f7fd f901 	bl	8000aa0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d902      	bls.n	80038b0 <HAL_SD_WriteBlocks+0x1ec>
 80038aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d112      	bne.n	80038d6 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a47      	ldr	r2, [pc, #284]	; (80039d4 <HAL_SD_WriteBlocks+0x310>)
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038be:	431a      	orrs	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e092      	b.n	80039fc <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d092      	beq.n	800380a <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d022      	beq.n	8003938 <HAL_SD_WriteBlocks+0x274>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d91f      	bls.n	8003938 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d01b      	beq.n	8003938 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f000 ff53 	bl	80047b0 <SDMMC_CmdStopTransfer>
 800390a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800390c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390e:	2b00      	cmp	r3, #0
 8003910:	d012      	beq.n	8003938 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a2f      	ldr	r2, [pc, #188]	; (80039d4 <HAL_SD_WriteBlocks+0x310>)
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800391e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003920:	431a      	orrs	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e061      	b.n	80039fc <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d012      	beq.n	800396c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a22      	ldr	r2, [pc, #136]	; (80039d4 <HAL_SD_WriteBlocks+0x310>)
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	f043 0208 	orr.w	r2, r3, #8
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e047      	b.n	80039fc <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d012      	beq.n	80039a0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <HAL_SD_WriteBlocks+0x310>)
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	f043 0202 	orr.w	r2, r3, #2
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e02d      	b.n	80039fc <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d014      	beq.n	80039d8 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <HAL_SD_WriteBlocks+0x310>)
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	f043 0210 	orr.w	r2, r3, #16
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e013      	b.n	80039fc <HAL_SD_WriteBlocks+0x338>
 80039d4:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e006      	b.n	80039fc <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
  }
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3748      	adds	r7, #72	; 0x48
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a12:	0f9b      	lsrs	r3, r3, #30
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a1e:	0e9b      	lsrs	r3, r3, #26
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a30:	0e1b      	lsrs	r3, r3, #24
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a42:	0c1b      	lsrs	r3, r3, #16
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a64:	0d1b      	lsrs	r3, r3, #20
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a82:	0bdb      	lsrs	r3, r3, #15
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a94:	0b9b      	lsrs	r3, r3, #14
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa6:	0b5b      	lsrs	r3, r3, #13
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab8:	0b1b      	lsrs	r3, r3, #12
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d163      	bne.n	8003b9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad8:	009a      	lsls	r2, r3, #2
 8003ada:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ade:	4013      	ands	r3, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003ae4:	0f92      	lsrs	r2, r2, #30
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af0:	0edb      	lsrs	r3, r3, #27
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b02:	0e1b      	lsrs	r3, r3, #24
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b14:	0d5b      	lsrs	r3, r3, #21
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b26:	0c9b      	lsrs	r3, r3, #18
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b38:	0bdb      	lsrs	r3, r3, #15
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	7e1b      	ldrb	r3, [r3, #24]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b66:	fb02 f203 	mul.w	r2, r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	7a1b      	ldrb	r3, [r3, #8]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	2201      	movs	r2, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003b88:	0a52      	lsrs	r2, r2, #9
 8003b8a:	fb02 f203 	mul.w	r2, r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b98:	661a      	str	r2, [r3, #96]	; 0x60
 8003b9a:	e031      	b.n	8003c00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d11d      	bne.n	8003be0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	029a      	lsls	r2, r3, #10
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	661a      	str	r2, [r3, #96]	; 0x60
 8003bde:	e00f      	b.n	8003c00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a58      	ldr	r2, [pc, #352]	; (8003d48 <HAL_SD_GetCardCSD+0x344>)
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e09d      	b.n	8003d3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c04:	0b9b      	lsrs	r3, r3, #14
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c16:	09db      	lsrs	r3, r3, #7
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	0fdb      	lsrs	r3, r3, #31
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	0f5b      	lsrs	r3, r3, #29
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	0e9b      	lsrs	r3, r3, #26
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	0d9b      	lsrs	r3, r3, #22
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	0d5b      	lsrs	r3, r3, #21
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	0c1b      	lsrs	r3, r3, #16
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	0bdb      	lsrs	r3, r3, #15
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	0b9b      	lsrs	r3, r3, #14
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	0b5b      	lsrs	r3, r3, #13
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	0b1b      	lsrs	r3, r3, #12
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	0a9b      	lsrs	r3, r3, #10
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	085b      	lsrs	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	004005ff 	.word	0x004005ff

08003d4c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003da4:	b5b0      	push	{r4, r5, r7, lr}
 8003da6:	b08e      	sub	sp, #56	; 0x38
 8003da8:	af04      	add	r7, sp, #16
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2203      	movs	r2, #3
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d02e      	beq.n	8003e1c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d106      	bne.n	8003dd4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8003dd2:	e029      	b.n	8003e28 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dda:	d10a      	bne.n	8003df2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fa01 	bl	80041e4 <SD_WideBus_Enable>
 8003de2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	639a      	str	r2, [r3, #56]	; 0x38
 8003df0:	e01a      	b.n	8003e28 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fa3e 	bl	800427a <SD_WideBus_Disable>
 8003dfe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e0c:	e00c      	b.n	8003e28 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38
 8003e1a:	e005      	b.n	8003e28 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e024      	b.n	8003e8e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681d      	ldr	r5, [r3, #0]
 8003e6a:	466c      	mov	r4, sp
 8003e6c:	f107 0318 	add.w	r3, r7, #24
 8003e70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e78:	f107 030c 	add.w	r3, r7, #12
 8003e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e7e:	4628      	mov	r0, r5
 8003e80:	f000 fb10 	bl	80044a4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3728      	adds	r7, #40	; 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bdb0      	pop	{r4, r5, r7, pc}
 8003e96:	bf00      	nop
 8003e98:	004005ff 	.word	0x004005ff

08003e9c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f970 	bl	8004194 <SD_SendStatus>
 8003eb4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	0a5b      	lsrs	r3, r3, #9
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003ed2:	693b      	ldr	r3, [r7, #16]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003edc:	b5b0      	push	{r4, r5, r7, lr}
 8003ede:	b094      	sub	sp, #80	; 0x50
 8003ee0:	af04      	add	r7, sp, #16
 8003ee2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fb31 	bl	8004554 <SDIO_GetPowerState>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ef8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003efc:	e0b7      	b.n	800406e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d02f      	beq.n	8003f66 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fd5a 	bl	80049c4 <SDMMC_CmdSendCID>
 8003f10:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <SD_InitCard+0x40>
    {
      return errorstate;
 8003f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1a:	e0a8      	b.n	800406e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fb5b 	bl	80045de <SDIO_GetResponse>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2104      	movs	r1, #4
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fb52 	bl	80045de <SDIO_GetResponse>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2108      	movs	r1, #8
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fb49 	bl	80045de <SDIO_GetResponse>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	210c      	movs	r1, #12
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fb40 	bl	80045de <SDIO_GetResponse>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d00d      	beq.n	8003f8a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f107 020e 	add.w	r2, r7, #14
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fd60 	bl	8004a3e <SDMMC_CmdSetRelAdd>
 8003f7e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <SD_InitCard+0xae>
    {
      return errorstate;
 8003f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f88:	e071      	b.n	800406e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d036      	beq.n	8004000 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003f92:	89fb      	ldrh	r3, [r7, #14]
 8003f94:	461a      	mov	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f000 fd2a 	bl	8004a00 <SDMMC_CmdSendCSD>
 8003fac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb6:	e05a      	b.n	800406e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fb0d 	bl	80045de <SDIO_GetResponse>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2104      	movs	r1, #4
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fb04 	bl	80045de <SDIO_GetResponse>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2108      	movs	r1, #8
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fafb 	bl	80045de <SDIO_GetResponse>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	210c      	movs	r1, #12
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 faf2 	bl	80045de <SDIO_GetResponse>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2104      	movs	r1, #4
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fae9 	bl	80045de <SDIO_GetResponse>
 800400c:	4603      	mov	r3, r0
 800400e:	0d1a      	lsrs	r2, r3, #20
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004014:	f107 0310 	add.w	r3, r7, #16
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fcf2 	bl	8003a04 <HAL_SD_GetCardCSD>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004026:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800402a:	e020      	b.n	800406e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004034:	041b      	lsls	r3, r3, #16
 8004036:	f04f 0400 	mov.w	r4, #0
 800403a:	461a      	mov	r2, r3
 800403c:	4623      	mov	r3, r4
 800403e:	4608      	mov	r0, r1
 8004040:	f000 fbd8 	bl	80047f4 <SDMMC_CmdSelDesel>
 8004044:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <SD_InitCard+0x174>
  {
    return errorstate;
 800404c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404e:	e00e      	b.n	800406e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681d      	ldr	r5, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	466c      	mov	r4, sp
 8004058:	f103 0210 	add.w	r2, r3, #16
 800405c:	ca07      	ldmia	r2, {r0, r1, r2}
 800405e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004062:	3304      	adds	r3, #4
 8004064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004066:	4628      	mov	r0, r5
 8004068:	f000 fa1c 	bl	80044a4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3740      	adds	r7, #64	; 0x40
 8004072:	46bd      	mov	sp, r7
 8004074:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004078 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fbd2 	bl	800483a <SDMMC_CmdGoIdleState>
 8004096:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	e072      	b.n	8004188 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fbe5 	bl	8004876 <SDMMC_CmdOperCond>
 80040ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00d      	beq.n	80040d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fbbb 	bl	800483a <SDMMC_CmdGoIdleState>
 80040c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	e05b      	b.n	8004188 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d137      	bne.n	800414e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fbe5 	bl	80048b4 <SDMMC_CmdAppCommand>
 80040ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d02d      	beq.n	800414e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040f6:	e047      	b.n	8004188 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2100      	movs	r1, #0
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fbd8 	bl	80048b4 <SDMMC_CmdAppCommand>
 8004104:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <SD_PowerON+0x98>
    {
      return errorstate;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	e03b      	b.n	8004188 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	491e      	ldr	r1, [pc, #120]	; (8004190 <SD_PowerON+0x118>)
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fbee 	bl	80048f8 <SDMMC_CmdAppOperCommand>
 800411c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004128:	e02e      	b.n	8004188 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fa54 	bl	80045de <SDIO_GetResponse>
 8004136:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	0fdb      	lsrs	r3, r3, #31
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <SD_PowerON+0xcc>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <SD_PowerON+0xce>
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]

    count++;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	3301      	adds	r3, #1
 800414c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004154:	4293      	cmp	r3, r2
 8004156:	d802      	bhi.n	800415e <SD_PowerON+0xe6>
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0cc      	beq.n	80040f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004164:	4293      	cmp	r3, r2
 8004166:	d902      	bls.n	800416e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800416c:	e00c      	b.n	8004188 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
 800417e:	e002      	b.n	8004186 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	c1100000 	.word	0xc1100000

08004194 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80041a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041a8:	e018      	b.n	80041dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b2:	041b      	lsls	r3, r3, #16
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f000 fc62 	bl	8004a80 <SDMMC_CmdSendStatus>
 80041bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	e009      	b.n	80041dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fa05 	bl	80045de <SDIO_GetResponse>
 80041d4:	4602      	mov	r2, r0
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f9ef 	bl	80045de <SDIO_GetResponse>
 8004200:	4603      	mov	r3, r0
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800420a:	d102      	bne.n	8004212 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800420c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004210:	e02f      	b.n	8004272 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004212:	f107 030c 	add.w	r3, r7, #12
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f879 	bl	8004310 <SD_FindSCR>
 800421e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	e023      	b.n	8004272 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01c      	beq.n	800426e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f000 fb37 	bl	80048b4 <SDMMC_CmdAppCommand>
 8004246:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	e00f      	b.n	8004272 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2102      	movs	r1, #2
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fb70 	bl	800493e <SDMMC_CmdBusWidth>
 800425e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	e003      	b.n	8004272 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800426a:	2300      	movs	r3, #0
 800426c:	e001      	b.n	8004272 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800426e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b086      	sub	sp, #24
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f000 f9a4 	bl	80045de <SDIO_GetResponse>
 8004296:	4603      	mov	r3, r0
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042a0:	d102      	bne.n	80042a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80042a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042a6:	e02f      	b.n	8004308 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80042a8:	f107 030c 	add.w	r3, r7, #12
 80042ac:	4619      	mov	r1, r3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f82e 	bl	8004310 <SD_FindSCR>
 80042b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	e023      	b.n	8004308 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01c      	beq.n	8004304 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f000 faec 	bl	80048b4 <SDMMC_CmdAppCommand>
 80042dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	e00f      	b.n	8004308 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fb25 	bl	800493e <SDMMC_CmdBusWidth>
 80042f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	e003      	b.n	8004308 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004300:	2300      	movs	r3, #0
 8004302:	e001      	b.n	8004308 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004304:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b08f      	sub	sp, #60	; 0x3c
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800431a:	f7fc fbc1 	bl	8000aa0 <HAL_GetTick>
 800431e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004324:	2300      	movs	r3, #0
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2108      	movs	r1, #8
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f990 	bl	800465c <SDMMC_CmdBlockLength>
 800433c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	e0a9      	b.n	800449c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004350:	041b      	lsls	r3, r3, #16
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f000 faad 	bl	80048b4 <SDMMC_CmdAppCommand>
 800435a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	e09a      	b.n	800449c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
 800436a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800436c:	2308      	movs	r3, #8
 800436e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004370:	2330      	movs	r3, #48	; 0x30
 8004372:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004374:	2302      	movs	r3, #2
 8004376:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004378:	2300      	movs	r3, #0
 800437a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800437c:	2301      	movs	r3, #1
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f107 0210 	add.w	r2, r7, #16
 8004388:	4611      	mov	r1, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f93a 	bl	8004604 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 faf4 	bl	8004982 <SDMMC_CmdSendSCR>
 800439a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d022      	beq.n	80043e8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	e07a      	b.n	800449c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00e      	beq.n	80043d2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6819      	ldr	r1, [r3, #0]
 80043b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	f107 0208 	add.w	r2, r7, #8
 80043c0:	18d4      	adds	r4, r2, r3
 80043c2:	4608      	mov	r0, r1
 80043c4:	f000 f899 	bl	80044fa <SDIO_ReadFIFO>
 80043c8:	4603      	mov	r3, r0
 80043ca:	6023      	str	r3, [r4, #0]
      index++;
 80043cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ce:	3301      	adds	r3, #1
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80043d2:	f7fc fb65 	bl	8000aa0 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d102      	bne.n	80043e8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80043e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043e6:	e059      	b.n	800449c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ee:	f240 432a 	movw	r3, #1066	; 0x42a
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0d6      	beq.n	80043a6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2208      	movs	r2, #8
 800440c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800440e:	2308      	movs	r3, #8
 8004410:	e044      	b.n	800449c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2202      	movs	r2, #2
 8004426:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004428:	2302      	movs	r3, #2
 800442a:	e037      	b.n	800449c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2220      	movs	r2, #32
 8004440:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004442:	2320      	movs	r3, #32
 8004444:	e02a      	b.n	800449c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f240 523a 	movw	r2, #1338	; 0x53a
 800444e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	061a      	lsls	r2, r3, #24
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800445c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004466:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	0e1b      	lsrs	r3, r3, #24
 800446c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	601a      	str	r2, [r3, #0]
    scr++;
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	3304      	adds	r3, #4
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	061a      	lsls	r2, r3, #24
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004484:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800448e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	0e1b      	lsrs	r3, r3, #24
 8004494:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	373c      	adds	r7, #60	; 0x3c
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd90      	pop	{r4, r7, pc}

080044a4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80044a4:	b084      	sub	sp, #16
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	f107 001c 	add.w	r0, r7, #28
 80044b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80044ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80044bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80044be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80044c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80044c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80044ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80044ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80044de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	b004      	add	sp, #16
 80044f8:	4770      	bx	lr

080044fa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2203      	movs	r2, #3
 8004542:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004544:	2002      	movs	r0, #2
 8004546:	f7fc fab7 	bl	8000ab8 <HAL_Delay>
  
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0303 	and.w	r3, r3, #3
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800458e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004594:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800459a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80045aa:	f023 030f 	bic.w	r3, r3, #15
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	b2db      	uxtb	r3, r3
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3314      	adds	r3, #20
 80045ec:	461a      	mov	r2, r3
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	4413      	add	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
}  
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800462a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004630:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004636:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800464e:	2300      	movs	r3, #0

}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800466a:	2310      	movs	r3, #16
 800466c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800466e:	2340      	movs	r3, #64	; 0x40
 8004670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800467a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800467c:	f107 0308 	add.w	r3, r7, #8
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff ff74 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004688:	f241 3288 	movw	r2, #5000	; 0x1388
 800468c:	2110      	movs	r1, #16
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fa40 	bl	8004b14 <SDMMC_GetCmdResp1>
 8004694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004696:	69fb      	ldr	r3, [r7, #28]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80046ae:	2311      	movs	r3, #17
 80046b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046b2:	2340      	movs	r3, #64	; 0x40
 80046b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	4619      	mov	r1, r3
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff ff52 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80046cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d0:	2111      	movs	r1, #17
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fa1e 	bl	8004b14 <SDMMC_GetCmdResp1>
 80046d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046da:	69fb      	ldr	r3, [r7, #28]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3720      	adds	r7, #32
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80046f2:	2312      	movs	r3, #18
 80046f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046f6:	2340      	movs	r3, #64	; 0x40
 80046f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004702:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004704:	f107 0308 	add.w	r3, r7, #8
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff ff30 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	2112      	movs	r1, #18
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f9fc 	bl	8004b14 <SDMMC_GetCmdResp1>
 800471c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800471e:	69fb      	ldr	r3, [r7, #28]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004736:	2318      	movs	r3, #24
 8004738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800473a:	2340      	movs	r3, #64	; 0x40
 800473c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004746:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004748:	f107 0308 	add.w	r3, r7, #8
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff ff0e 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004754:	f241 3288 	movw	r2, #5000	; 0x1388
 8004758:	2118      	movs	r1, #24
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f9da 	bl	8004b14 <SDMMC_GetCmdResp1>
 8004760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004762:	69fb      	ldr	r3, [r7, #28]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3720      	adds	r7, #32
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800477a:	2319      	movs	r3, #25
 800477c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800477e:	2340      	movs	r3, #64	; 0x40
 8004780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800478a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800478c:	f107 0308 	add.w	r3, r7, #8
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff feec 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	2119      	movs	r1, #25
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f9b8 	bl	8004b14 <SDMMC_GetCmdResp1>
 80047a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047a6:	69fb      	ldr	r3, [r7, #28]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3720      	adds	r7, #32
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80047bc:	230c      	movs	r3, #12
 80047be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047c0:	2340      	movs	r3, #64	; 0x40
 80047c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047ce:	f107 0308 	add.w	r3, r7, #8
 80047d2:	4619      	mov	r1, r3
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff fecb 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80047da:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <SDMMC_CmdStopTransfer+0x40>)
 80047dc:	210c      	movs	r1, #12
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f998 	bl	8004b14 <SDMMC_GetCmdResp1>
 80047e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047e6:	69fb      	ldr	r3, [r7, #28]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3720      	adds	r7, #32
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	05f5e100 	.word	0x05f5e100

080047f4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	; 0x28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004804:	2307      	movs	r3, #7
 8004806:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004808:	2340      	movs	r3, #64	; 0x40
 800480a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004814:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004816:	f107 0310 	add.w	r3, r7, #16
 800481a:	4619      	mov	r1, r3
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff fea7 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	2107      	movs	r1, #7
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f973 	bl	8004b14 <SDMMC_GetCmdResp1>
 800482e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004832:	4618      	mov	r0, r3
 8004834:	3728      	adds	r7, #40	; 0x28
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b088      	sub	sp, #32
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004856:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004858:	f107 0308 	add.w	r3, r7, #8
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7ff fe86 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f92d 	bl	8004ac4 <SDMMC_GetCmdError>
 800486a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800486c:	69fb      	ldr	r3, [r7, #28]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b088      	sub	sp, #32
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800487e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004884:	2308      	movs	r3, #8
 8004886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004888:	2340      	movs	r3, #64	; 0x40
 800488a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004894:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004896:	f107 0308 	add.w	r3, r7, #8
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe67 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fb16 	bl	8004ed4 <SDMMC_GetCmdResp7>
 80048a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048aa:	69fb      	ldr	r3, [r7, #28]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80048c2:	2337      	movs	r3, #55	; 0x37
 80048c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048c6:	2340      	movs	r3, #64	; 0x40
 80048c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048d4:	f107 0308 	add.w	r3, r7, #8
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff fe48 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80048e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e4:	2137      	movs	r1, #55	; 0x37
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f914 	bl	8004b14 <SDMMC_GetCmdResp1>
 80048ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048ee:	69fb      	ldr	r3, [r7, #28]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800490e:	2329      	movs	r3, #41	; 0x29
 8004910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004912:	2340      	movs	r3, #64	; 0x40
 8004914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800491a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800491e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004920:	f107 0308 	add.w	r3, r7, #8
 8004924:	4619      	mov	r1, r3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fe22 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fa23 	bl	8004d78 <SDMMC_GetCmdResp3>
 8004932:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004934:	69fb      	ldr	r3, [r7, #28]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b088      	sub	sp, #32
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800494c:	2306      	movs	r3, #6
 800494e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004950:	2340      	movs	r3, #64	; 0x40
 8004952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800495c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800495e:	f107 0308 	add.w	r3, r7, #8
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff fe03 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800496a:	f241 3288 	movw	r2, #5000	; 0x1388
 800496e:	2106      	movs	r1, #6
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f8cf 	bl	8004b14 <SDMMC_GetCmdResp1>
 8004976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004978:	69fb      	ldr	r3, [r7, #28]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3720      	adds	r7, #32
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b088      	sub	sp, #32
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800498e:	2333      	movs	r3, #51	; 0x33
 8004990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004992:	2340      	movs	r3, #64	; 0x40
 8004994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800499a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800499e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049a0:	f107 0308 	add.w	r3, r7, #8
 80049a4:	4619      	mov	r1, r3
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff fde2 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80049ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b0:	2133      	movs	r1, #51	; 0x33
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f8ae 	bl	8004b14 <SDMMC_GetCmdResp1>
 80049b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ba:	69fb      	ldr	r3, [r7, #28]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3720      	adds	r7, #32
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80049d0:	2302      	movs	r3, #2
 80049d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80049d4:	23c0      	movs	r3, #192	; 0xc0
 80049d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049e2:	f107 0308 	add.w	r3, r7, #8
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fdc1 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f97c 	bl	8004cec <SDMMC_GetCmdResp2>
 80049f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049f6:	69fb      	ldr	r3, [r7, #28]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004a0e:	2309      	movs	r3, #9
 8004a10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004a12:	23c0      	movs	r3, #192	; 0xc0
 8004a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a20:	f107 0308 	add.w	r3, r7, #8
 8004a24:	4619      	mov	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff fda2 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f95d 	bl	8004cec <SDMMC_GetCmdResp2>
 8004a32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a34:	69fb      	ldr	r3, [r7, #28]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b088      	sub	sp, #32
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a50:	2340      	movs	r3, #64	; 0x40
 8004a52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a5e:	f107 0308 	add.w	r3, r7, #8
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fd83 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	2103      	movs	r1, #3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9bc 	bl	8004dec <SDMMC_GetCmdResp6>
 8004a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a76:	69fb      	ldr	r3, [r7, #28]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004a8e:	230d      	movs	r3, #13
 8004a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a92:	2340      	movs	r3, #64	; 0x40
 8004a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aa0:	f107 0308 	add.w	r3, r7, #8
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff fd62 	bl	8004570 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab0:	210d      	movs	r1, #13
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f82e 	bl	8004b14 <SDMMC_GetCmdResp1>
 8004ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aba:	69fb      	ldr	r3, [r7, #28]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004ac4:	b490      	push	{r4, r7}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <SDMMC_GetCmdError+0x48>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <SDMMC_GetCmdError+0x4c>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	0a5b      	lsrs	r3, r3, #9
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	1e5c      	subs	r4, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ae8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004aec:	e009      	b.n	8004b02 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f2      	beq.n	8004ae0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	22c5      	movs	r2, #197	; 0xc5
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc90      	pop	{r4, r7}
 8004b0a:	4770      	bx	lr
 8004b0c:	20000000 	.word	0x20000000
 8004b10:	10624dd3 	.word	0x10624dd3

08004b14 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004b22:	4b6f      	ldr	r3, [pc, #444]	; (8004ce0 <SDMMC_GetCmdResp1+0x1cc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a6f      	ldr	r2, [pc, #444]	; (8004ce4 <SDMMC_GetCmdResp1+0x1d0>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	0a5b      	lsrs	r3, r3, #9
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004b34:	4623      	mov	r3, r4
 8004b36:	1e5c      	subs	r4, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d102      	bne.n	8004b42 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b40:	e0c9      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <SDMMC_GetCmdResp1+0x20>
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1eb      	bne.n	8004b34 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b6e:	2304      	movs	r3, #4
 8004b70:	e0b1      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0a6      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	22c5      	movs	r2, #197	; 0xc5
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff fd18 	bl	80045c4 <SDIO_GetCommandResponse>
 8004b94:	4603      	mov	r3, r0
 8004b96:	461a      	mov	r2, r3
 8004b98:	7afb      	ldrb	r3, [r7, #11]
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d001      	beq.n	8004ba2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e099      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff fd1a 	bl	80045de <SDIO_GetResponse>
 8004baa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4b4e      	ldr	r3, [pc, #312]	; (8004ce8 <SDMMC_GetCmdResp1+0x1d4>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e08d      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	da02      	bge.n	8004bc6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bc4:	e087      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004bd0:	2340      	movs	r3, #64	; 0x40
 8004bd2:	e080      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	e079      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bf0:	e071      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c00:	e069      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c10:	e061      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c20:	e059      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c30:	e051      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c40:	e049      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004c4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c50:	e041      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c60:	e039      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c70:	e031      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004c7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c80:	e029      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004c8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c90:	e021      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004c9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ca0:	e019      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004cac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cb0:	e011      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004cbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cc0:	e009      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004ccc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004cd0:	e001      	b.n	8004cd6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd90      	pop	{r4, r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	10624dd3 	.word	0x10624dd3
 8004ce8:	fdffe008 	.word	0xfdffe008

08004cec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004cec:	b490      	push	{r4, r7}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cf4:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <SDMMC_GetCmdResp2+0x84>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <SDMMC_GetCmdResp2+0x88>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	0a5b      	lsrs	r3, r3, #9
 8004d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d04:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004d08:	4623      	mov	r3, r4
 8004d0a:	1e5c      	subs	r4, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d14:	e026      	b.n	8004d64 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <SDMMC_GetCmdResp2+0x1c>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1eb      	bne.n	8004d08 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d004      	beq.n	8004d46 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2204      	movs	r2, #4
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d42:	2304      	movs	r3, #4
 8004d44:	e00e      	b.n	8004d64 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e003      	b.n	8004d64 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	22c5      	movs	r2, #197	; 0xc5
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc90      	pop	{r4, r7}
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20000000 	.word	0x20000000
 8004d74:	10624dd3 	.word	0x10624dd3

08004d78 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004d78:	b490      	push	{r4, r7}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d80:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <SDMMC_GetCmdResp3+0x6c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <SDMMC_GetCmdResp3+0x70>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	0a5b      	lsrs	r3, r3, #9
 8004d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004d94:	4623      	mov	r3, r4
 8004d96:	1e5c      	subs	r4, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004da0:	e01b      	b.n	8004dda <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <SDMMC_GetCmdResp3+0x1c>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1eb      	bne.n	8004d94 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2204      	movs	r2, #4
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004dce:	2304      	movs	r3, #4
 8004dd0:	e003      	b.n	8004dda <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	22c5      	movs	r2, #197	; 0xc5
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc90      	pop	{r4, r7}
 8004de2:	4770      	bx	lr
 8004de4:	20000000 	.word	0x20000000
 8004de8:	10624dd3 	.word	0x10624dd3

08004dec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	460b      	mov	r3, r1
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004dfa:	4b34      	ldr	r3, [pc, #208]	; (8004ecc <SDMMC_GetCmdResp6+0xe0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a34      	ldr	r2, [pc, #208]	; (8004ed0 <SDMMC_GetCmdResp6+0xe4>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	0a5b      	lsrs	r3, r3, #9
 8004e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e0e:	4623      	mov	r3, r4
 8004e10:	1e5c      	subs	r4, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e1a:	e052      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e20:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <SDMMC_GetCmdResp6+0x22>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1eb      	bne.n	8004e0e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2204      	movs	r2, #4
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e48:	2304      	movs	r3, #4
 8004e4a:	e03a      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e02f      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff fbae 	bl	80045c4 <SDIO_GetCommandResponse>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	7afb      	ldrb	r3, [r7, #11]
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d001      	beq.n	8004e76 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e025      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	22c5      	movs	r2, #197	; 0xc5
 8004e7a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff fbad 	bl	80045de <SDIO_GetResponse>
 8004e84:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	0c1b      	lsrs	r3, r3, #16
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e011      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eac:	e009      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ebc:	e001      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd90      	pop	{r4, r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000000 	.word	0x20000000
 8004ed0:	10624dd3 	.word	0x10624dd3

08004ed4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004ed4:	b490      	push	{r4, r7}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004edc:	4b21      	ldr	r3, [pc, #132]	; (8004f64 <SDMMC_GetCmdResp7+0x90>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a21      	ldr	r2, [pc, #132]	; (8004f68 <SDMMC_GetCmdResp7+0x94>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	0a5b      	lsrs	r3, r3, #9
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004ef0:	4623      	mov	r3, r4
 8004ef2:	1e5c      	subs	r4, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ef8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004efc:	e02c      	b.n	8004f58 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <SDMMC_GetCmdResp7+0x1c>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1eb      	bne.n	8004ef0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d004      	beq.n	8004f2e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2204      	movs	r2, #4
 8004f28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	e014      	b.n	8004f58 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d004      	beq.n	8004f44 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e009      	b.n	8004f58 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2240      	movs	r2, #64	; 0x40
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004f56:	2300      	movs	r3, #0
  
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc90      	pop	{r4, r7}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000000 	.word	0x20000000
 8004f68:	10624dd3 	.word	0x10624dd3

08004f6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	f107 001c 	add.w	r0, r7, #28
 8004f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d122      	bne.n	8004fca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d105      	bne.n	8004fbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f001 faae 	bl	8006520 <USB_CoreReset>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]
 8004fc8:	e01a      	b.n	8005000 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 faa2 	bl	8006520 <USB_CoreReset>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ff2:	e005      	b.n	8005000 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	2b01      	cmp	r3, #1
 8005004:	d10b      	bne.n	800501e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f043 0206 	orr.w	r2, r3, #6
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f043 0220 	orr.w	r2, r3, #32
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800501e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800502a:	b004      	add	sp, #16
 800502c:	4770      	bx	lr
	...

08005030 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d165      	bne.n	8005110 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4a41      	ldr	r2, [pc, #260]	; (800514c <USB_SetTurnaroundTime+0x11c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d906      	bls.n	800505a <USB_SetTurnaroundTime+0x2a>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4a40      	ldr	r2, [pc, #256]	; (8005150 <USB_SetTurnaroundTime+0x120>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d802      	bhi.n	800505a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005054:	230f      	movs	r3, #15
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e062      	b.n	8005120 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4a3c      	ldr	r2, [pc, #240]	; (8005150 <USB_SetTurnaroundTime+0x120>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d906      	bls.n	8005070 <USB_SetTurnaroundTime+0x40>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4a3b      	ldr	r2, [pc, #236]	; (8005154 <USB_SetTurnaroundTime+0x124>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d802      	bhi.n	8005070 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800506a:	230e      	movs	r3, #14
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e057      	b.n	8005120 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4a38      	ldr	r2, [pc, #224]	; (8005154 <USB_SetTurnaroundTime+0x124>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d906      	bls.n	8005086 <USB_SetTurnaroundTime+0x56>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4a37      	ldr	r2, [pc, #220]	; (8005158 <USB_SetTurnaroundTime+0x128>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d802      	bhi.n	8005086 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005080:	230d      	movs	r3, #13
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e04c      	b.n	8005120 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4a33      	ldr	r2, [pc, #204]	; (8005158 <USB_SetTurnaroundTime+0x128>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d906      	bls.n	800509c <USB_SetTurnaroundTime+0x6c>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4a32      	ldr	r2, [pc, #200]	; (800515c <USB_SetTurnaroundTime+0x12c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d802      	bhi.n	800509c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005096:	230c      	movs	r3, #12
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	e041      	b.n	8005120 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4a2f      	ldr	r2, [pc, #188]	; (800515c <USB_SetTurnaroundTime+0x12c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d906      	bls.n	80050b2 <USB_SetTurnaroundTime+0x82>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4a2e      	ldr	r2, [pc, #184]	; (8005160 <USB_SetTurnaroundTime+0x130>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d802      	bhi.n	80050b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050ac:	230b      	movs	r3, #11
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e036      	b.n	8005120 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <USB_SetTurnaroundTime+0x130>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d906      	bls.n	80050c8 <USB_SetTurnaroundTime+0x98>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4a29      	ldr	r2, [pc, #164]	; (8005164 <USB_SetTurnaroundTime+0x134>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d802      	bhi.n	80050c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050c2:	230a      	movs	r3, #10
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e02b      	b.n	8005120 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4a26      	ldr	r2, [pc, #152]	; (8005164 <USB_SetTurnaroundTime+0x134>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d906      	bls.n	80050de <USB_SetTurnaroundTime+0xae>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4a25      	ldr	r2, [pc, #148]	; (8005168 <USB_SetTurnaroundTime+0x138>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d802      	bhi.n	80050de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050d8:	2309      	movs	r3, #9
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e020      	b.n	8005120 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4a21      	ldr	r2, [pc, #132]	; (8005168 <USB_SetTurnaroundTime+0x138>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d906      	bls.n	80050f4 <USB_SetTurnaroundTime+0xc4>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4a20      	ldr	r2, [pc, #128]	; (800516c <USB_SetTurnaroundTime+0x13c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d802      	bhi.n	80050f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050ee:	2308      	movs	r3, #8
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e015      	b.n	8005120 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4a1d      	ldr	r2, [pc, #116]	; (800516c <USB_SetTurnaroundTime+0x13c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d906      	bls.n	800510a <USB_SetTurnaroundTime+0xda>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <USB_SetTurnaroundTime+0x140>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d802      	bhi.n	800510a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005104:	2307      	movs	r3, #7
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e00a      	b.n	8005120 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800510a:	2306      	movs	r3, #6
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e007      	b.n	8005120 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d102      	bne.n	800511c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005116:	2309      	movs	r3, #9
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	e001      	b.n	8005120 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800511c:	2309      	movs	r3, #9
 800511e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	029b      	lsls	r3, r3, #10
 8005134:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005138:	431a      	orrs	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	00d8acbf 	.word	0x00d8acbf
 8005150:	00e4e1bf 	.word	0x00e4e1bf
 8005154:	00f423ff 	.word	0x00f423ff
 8005158:	0106737f 	.word	0x0106737f
 800515c:	011a499f 	.word	0x011a499f
 8005160:	01312cff 	.word	0x01312cff
 8005164:	014ca43f 	.word	0x014ca43f
 8005168:	016e35ff 	.word	0x016e35ff
 800516c:	01a6ab1f 	.word	0x01a6ab1f
 8005170:	01e847ff 	.word	0x01e847ff

08005174 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f043 0201 	orr.w	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f023 0201 	bic.w	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d106      	bne.n	80051e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]
 80051e2:	e00b      	b.n	80051fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60da      	str	r2, [r3, #12]
 80051f6:	e001      	b.n	80051fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e003      	b.n	8005204 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80051fc:	2032      	movs	r0, #50	; 0x32
 80051fe:	f7fb fc5b 	bl	8000ab8 <HAL_Delay>

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800520c:	b084      	sub	sp, #16
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800521a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	e009      	b.n	8005240 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	3340      	adds	r3, #64	; 0x40
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	2200      	movs	r2, #0
 8005238:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3301      	adds	r3, #1
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b0e      	cmp	r3, #14
 8005244:	d9f2      	bls.n	800522c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005248:	2b00      	cmp	r3, #0
 800524a:	d11c      	bne.n	8005286 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800525a:	f043 0302 	orr.w	r3, r3, #2
 800525e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e005      	b.n	8005292 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005298:	461a      	mov	r2, r3
 800529a:	2300      	movs	r3, #0
 800529c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a4:	4619      	mov	r1, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ac:	461a      	mov	r2, r3
 80052ae:	680b      	ldr	r3, [r1, #0]
 80052b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d10c      	bne.n	80052d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052be:	2100      	movs	r1, #0
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f949 	bl	8005558 <USB_SetDevSpeed>
 80052c6:	e008      	b.n	80052da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052c8:	2101      	movs	r1, #1
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f944 	bl	8005558 <USB_SetDevSpeed>
 80052d0:	e003      	b.n	80052da <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052d2:	2103      	movs	r1, #3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f93f 	bl	8005558 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052da:	2110      	movs	r1, #16
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8f3 	bl	80054c8 <USB_FlushTxFifo>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f911 	bl	8005514 <USB_FlushRxFifo>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	461a      	mov	r2, r3
 8005304:	2300      	movs	r3, #0
 8005306:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	461a      	mov	r2, r3
 8005310:	2300      	movs	r3, #0
 8005312:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531a:	461a      	mov	r2, r3
 800531c:	2300      	movs	r3, #0
 800531e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	e043      	b.n	80053ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800533c:	d118      	bne.n	8005370 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	461a      	mov	r2, r3
 8005352:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	e013      	b.n	8005382 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005366:	461a      	mov	r2, r3
 8005368:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e008      	b.n	8005382 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	461a      	mov	r2, r3
 800537e:	2300      	movs	r3, #0
 8005380:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538e:	461a      	mov	r2, r3
 8005390:	2300      	movs	r3, #0
 8005392:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a0:	461a      	mov	r2, r3
 80053a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	3301      	adds	r3, #1
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d3b7      	bcc.n	8005326 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	e043      	b.n	8005444 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d2:	d118      	bne.n	8005406 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e6:	461a      	mov	r2, r3
 80053e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e013      	b.n	8005418 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	461a      	mov	r2, r3
 80053fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	e008      	b.n	8005418 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	461a      	mov	r2, r3
 8005414:	2300      	movs	r3, #0
 8005416:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	461a      	mov	r2, r3
 8005426:	2300      	movs	r3, #0
 8005428:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	461a      	mov	r2, r3
 8005438:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800543c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	3301      	adds	r3, #1
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	429a      	cmp	r2, r3
 800544a:	d3b7      	bcc.n	80053bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800545a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800545e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800546c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f043 0210 	orr.w	r2, r3, #16
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699a      	ldr	r2, [r3, #24]
 8005484:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <USB_DevInit+0x2b8>)
 8005486:	4313      	orrs	r3, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800548c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f043 0208 	orr.w	r2, r3, #8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800549e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d107      	bne.n	80054b4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ac:	f043 0304 	orr.w	r3, r3, #4
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054c0:	b004      	add	sp, #16
 80054c2:	4770      	bx	lr
 80054c4:	803c3800 	.word	0x803c3800

080054c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	019b      	lsls	r3, r3, #6
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3301      	adds	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <USB_FlushTxFifo+0x48>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d901      	bls.n	80054f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e006      	b.n	8005502 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d0f0      	beq.n	80054e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	00030d40 	.word	0x00030d40

08005514 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2210      	movs	r2, #16
 8005524:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4a09      	ldr	r2, [pc, #36]	; (8005554 <USB_FlushRxFifo+0x40>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d901      	bls.n	8005538 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e006      	b.n	8005546 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b10      	cmp	r3, #16
 8005542:	d0f0      	beq.n	8005526 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	00030d40 	.word	0x00030d40

08005558 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800558a:	b480      	push	{r7}
 800558c:	b087      	sub	sp, #28
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 0306 	and.w	r3, r3, #6
 80055a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80055aa:	2300      	movs	r3, #0
 80055ac:	75fb      	strb	r3, [r7, #23]
 80055ae:	e00a      	b.n	80055c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d002      	beq.n	80055bc <USB_GetDevSpeed+0x32>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b06      	cmp	r3, #6
 80055ba:	d102      	bne.n	80055c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80055bc:	2302      	movs	r3, #2
 80055be:	75fb      	strb	r3, [r7, #23]
 80055c0:	e001      	b.n	80055c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80055c2:	230f      	movs	r3, #15
 80055c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d13a      	bne.n	8005666 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	68f9      	ldr	r1, [r7, #12]
 800560a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800560e:	4313      	orrs	r3, r2
 8005610:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d155      	bne.n	80056d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	78db      	ldrb	r3, [r3, #3]
 8005642:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005644:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	059b      	lsls	r3, r3, #22
 800564a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800564c:	4313      	orrs	r3, r2
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	440a      	add	r2, r1
 8005656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	e036      	b.n	80056d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	2101      	movs	r1, #1
 8005678:	fa01 f303 	lsl.w	r3, r1, r3
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005684:	4313      	orrs	r3, r2
 8005686:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11a      	bne.n	80056d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	78db      	ldrb	r3, [r3, #3]
 80056b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056ba:	430b      	orrs	r3, r1
 80056bc:	4313      	orrs	r3, r2
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
	...

080056e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d161      	bne.n	80057c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005716:	d11f      	bne.n	8005758 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005732:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005736:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005756:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	2101      	movs	r1, #1
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	b29b      	uxth	r3, r3
 8005770:	43db      	mvns	r3, r3
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005778:	4013      	ands	r3, r2
 800577a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	2101      	movs	r1, #1
 800578e:	fa01 f303 	lsl.w	r3, r1, r3
 8005792:	b29b      	uxth	r3, r3
 8005794:	43db      	mvns	r3, r3
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800579c:	4013      	ands	r3, r2
 800579e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	0159      	lsls	r1, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	440b      	add	r3, r1
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	4619      	mov	r1, r3
 80057bc:	4b35      	ldr	r3, [pc, #212]	; (8005894 <USB_DeactivateEndpoint+0x1b0>)
 80057be:	4013      	ands	r3, r2
 80057c0:	600b      	str	r3, [r1, #0]
 80057c2:	e060      	b.n	8005886 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057da:	d11f      	bne.n	800581c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005816:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800581a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	2101      	movs	r1, #1
 800582e:	fa01 f303 	lsl.w	r3, r1, r3
 8005832:	041b      	lsls	r3, r3, #16
 8005834:	43db      	mvns	r3, r3
 8005836:	68f9      	ldr	r1, [r7, #12]
 8005838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800583c:	4013      	ands	r3, r2
 800583e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	2101      	movs	r1, #1
 8005852:	fa01 f303 	lsl.w	r3, r1, r3
 8005856:	041b      	lsls	r3, r3, #16
 8005858:	43db      	mvns	r3, r3
 800585a:	68f9      	ldr	r1, [r7, #12]
 800585c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005860:	4013      	ands	r3, r2
 8005862:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	0159      	lsls	r1, r3, #5
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	440b      	add	r3, r1
 800587a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587e:	4619      	mov	r1, r3
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <USB_DeactivateEndpoint+0x1b4>)
 8005882:	4013      	ands	r3, r2
 8005884:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	ec337800 	.word	0xec337800
 8005898:	eff37800 	.word	0xeff37800

0800589c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	f040 815c 	bne.w	8005b76 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d132      	bne.n	800592c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005908:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	440a      	add	r2, r1
 8005920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005924:	0cdb      	lsrs	r3, r3, #19
 8005926:	04db      	lsls	r3, r3, #19
 8005928:	6113      	str	r3, [r2, #16]
 800592a:	e074      	b.n	8005a16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005946:	0cdb      	lsrs	r3, r3, #19
 8005948:	04db      	lsls	r3, r3, #19
 800594a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005966:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800596a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800596e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6959      	ldr	r1, [r3, #20]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	440b      	add	r3, r1
 8005988:	1e59      	subs	r1, r3, #1
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005992:	04d9      	lsls	r1, r3, #19
 8005994:	4b9d      	ldr	r3, [pc, #628]	; (8005c0c <USB_EPStartXfer+0x370>)
 8005996:	400b      	ands	r3, r1
 8005998:	69b9      	ldr	r1, [r7, #24]
 800599a:	0148      	lsls	r0, r1, #5
 800599c:	69f9      	ldr	r1, [r7, #28]
 800599e:	4401      	add	r1, r0
 80059a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059a4:	4313      	orrs	r3, r2
 80059a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059be:	69b9      	ldr	r1, [r7, #24]
 80059c0:	0148      	lsls	r0, r1, #5
 80059c2:	69f9      	ldr	r1, [r7, #28]
 80059c4:	4401      	add	r1, r0
 80059c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059ca:	4313      	orrs	r3, r2
 80059cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	78db      	ldrb	r3, [r3, #3]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d11f      	bne.n	8005a16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80059f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d14b      	bne.n	8005ab4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d009      	beq.n	8005a38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a30:	461a      	mov	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	78db      	ldrb	r3, [r3, #3]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d128      	bne.n	8005a92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d110      	bne.n	8005a72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	e00f      	b.n	8005a92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	e12f      	b.n	8005d14 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ace:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ad2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	78db      	ldrb	r3, [r3, #3]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d015      	beq.n	8005b08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8117 	beq.w	8005d14 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	2101      	movs	r1, #1
 8005af8:	fa01 f303 	lsl.w	r3, r1, r3
 8005afc:	69f9      	ldr	r1, [r7, #28]
 8005afe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b02:	4313      	orrs	r3, r2
 8005b04:	634b      	str	r3, [r1, #52]	; 0x34
 8005b06:	e105      	b.n	8005d14 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d110      	bne.n	8005b3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	e00f      	b.n	8005b5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	68d9      	ldr	r1, [r3, #12]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	781a      	ldrb	r2, [r3, #0]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	b298      	uxth	r0, r3
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fa2b 	bl	8005fca <USB_WritePacket>
 8005b74:	e0ce      	b.n	8005d14 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b90:	0cdb      	lsrs	r3, r3, #19
 8005b92:	04db      	lsls	r3, r3, #19
 8005b94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d126      	bne.n	8005c10 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bd8:	69b9      	ldr	r1, [r7, #24]
 8005bda:	0148      	lsls	r0, r1, #5
 8005bdc:	69f9      	ldr	r1, [r7, #28]
 8005bde:	4401      	add	r1, r0
 8005be0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005be4:	4313      	orrs	r3, r2
 8005be6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c06:	6113      	str	r3, [r2, #16]
 8005c08:	e036      	b.n	8005c78 <USB_EPStartXfer+0x3dc>
 8005c0a:	bf00      	nop
 8005c0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4413      	add	r3, r2
 8005c1a:	1e5a      	subs	r2, r3, #1
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	8afb      	ldrh	r3, [r7, #22]
 8005c36:	04d9      	lsls	r1, r3, #19
 8005c38:	4b39      	ldr	r3, [pc, #228]	; (8005d20 <USB_EPStartXfer+0x484>)
 8005c3a:	400b      	ands	r3, r1
 8005c3c:	69b9      	ldr	r1, [r7, #24]
 8005c3e:	0148      	lsls	r0, r1, #5
 8005c40:	69f9      	ldr	r1, [r7, #28]
 8005c42:	4401      	add	r1, r0
 8005c44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	8af9      	ldrh	r1, [r7, #22]
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c68:	69b9      	ldr	r1, [r7, #24]
 8005c6a:	0148      	lsls	r0, r1, #5
 8005c6c:	69f9      	ldr	r1, [r7, #28]
 8005c6e:	4401      	add	r1, r0
 8005c70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c74:	4313      	orrs	r3, r2
 8005c76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d10d      	bne.n	8005c9a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	68d9      	ldr	r1, [r3, #12]
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c96:	460a      	mov	r2, r1
 8005c98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	78db      	ldrb	r3, [r3, #3]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d128      	bne.n	8005cf4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d110      	bne.n	8005cd4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ccc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	e00f      	b.n	8005cf4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	1ff80000 	.word	0x1ff80000

08005d24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	f040 80cd 	bne.w	8005ee0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d132      	bne.n	8005db4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dac:	0cdb      	lsrs	r3, r3, #19
 8005dae:	04db      	lsls	r3, r3, #19
 8005db0:	6113      	str	r3, [r2, #16]
 8005db2:	e04e      	b.n	8005e52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dce:	0cdb      	lsrs	r3, r3, #19
 8005dd0:	04db      	lsls	r3, r3, #19
 8005dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005df2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005df6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d903      	bls.n	8005e0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	691a      	ldr	r2, [r3, #16]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e42:	6939      	ldr	r1, [r7, #16]
 8005e44:	0148      	lsls	r0, r1, #5
 8005e46:	6979      	ldr	r1, [r7, #20]
 8005e48:	4401      	add	r1, r0
 8005e4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d11e      	bne.n	8005e96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	e092      	b.n	8005fbc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d07e      	beq.n	8005fbc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	2101      	movs	r1, #1
 8005ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed4:	6979      	ldr	r1, [r7, #20]
 8005ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eda:	4313      	orrs	r3, r2
 8005edc:	634b      	str	r3, [r1, #52]	; 0x34
 8005ede:	e06d      	b.n	8005fbc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efa:	0cdb      	lsrs	r3, r3, #19
 8005efc:	04db      	lsls	r3, r3, #19
 8005efe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f22:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f6a:	6939      	ldr	r1, [r7, #16]
 8005f6c:	0148      	lsls	r0, r1, #5
 8005f6e:	6979      	ldr	r1, [r7, #20]
 8005f70:	4401      	add	r1, r0
 8005f72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f76:	4313      	orrs	r3, r2
 8005f78:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d10d      	bne.n	8005f9c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	68d9      	ldr	r1, [r3, #12]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	460a      	mov	r2, r1
 8005f9a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b089      	sub	sp, #36	; 0x24
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	460b      	mov	r3, r1
 8005fda:	71fb      	strb	r3, [r7, #7]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005fe8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d11a      	bne.n	8006026 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ff0:	88bb      	ldrh	r3, [r7, #4]
 8005ff2:	3303      	adds	r3, #3
 8005ff4:	089b      	lsrs	r3, r3, #2
 8005ff6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e00f      	b.n	800601e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	031a      	lsls	r2, r3, #12
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	4413      	add	r3, r2
 8006006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600a:	461a      	mov	r2, r3
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	3304      	adds	r3, #4
 8006016:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	3301      	adds	r3, #1
 800601c:	61bb      	str	r3, [r7, #24]
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	429a      	cmp	r2, r3
 8006024:	d3eb      	bcc.n	8005ffe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3724      	adds	r7, #36	; 0x24
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006034:	b480      	push	{r7}
 8006036:	b089      	sub	sp, #36	; 0x24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	4613      	mov	r3, r2
 8006040:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	3303      	adds	r3, #3
 800604e:	089b      	lsrs	r3, r3, #2
 8006050:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006052:	2300      	movs	r3, #0
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e00b      	b.n	8006070 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	601a      	str	r2, [r3, #0]
    pDest++;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	3304      	adds	r3, #4
 8006068:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	3301      	adds	r3, #1
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	429a      	cmp	r2, r3
 8006076:	d3ef      	bcc.n	8006058 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006078:	69fb      	ldr	r3, [r7, #28]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3724      	adds	r7, #36	; 0x24
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d12c      	bne.n	80060fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	db12      	blt.n	80060da <USB_EPSetStall+0x54>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00f      	beq.n	80060da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	e02b      	b.n	8006154 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	db12      	blt.n	8006134 <USB_EPSetStall+0xae>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00f      	beq.n	8006134 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800612e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006132:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006152:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d128      	bne.n	80061d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006198:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800619c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	78db      	ldrb	r3, [r3, #3]
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d003      	beq.n	80061ae <USB_EPClearStall+0x4c>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	78db      	ldrb	r3, [r3, #3]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d138      	bne.n	8006220 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	e027      	b.n	8006220 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	78db      	ldrb	r3, [r3, #3]
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d003      	beq.n	8006200 <USB_EPClearStall+0x9e>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	78db      	ldrb	r3, [r3, #3]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d10f      	bne.n	8006220 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800624c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006250:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006268:	4313      	orrs	r3, r2
 800626a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006294:	f023 0302 	bic.w	r3, r3, #2
 8006298:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800629a:	2003      	movs	r0, #3
 800629c:	f7fa fc0c 	bl	8000ab8 <HAL_Delay>

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c4:	f043 0302 	orr.w	r3, r3, #2
 80062c8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80062ca:	2003      	movs	r0, #3
 80062cc:	f7fa fbf4 	bl	8000ab8 <HAL_Delay>

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4013      	ands	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062f2:	68fb      	ldr	r3, [r7, #12]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	4013      	ands	r3, r2
 8006322:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	0c1b      	lsrs	r3, r3, #16
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	4013      	ands	r3, r2
 8006356:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	b29b      	uxth	r3, r3
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	4013      	ands	r3, r2
 8006394:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006396:	68bb      	ldr	r3, [r7, #8]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
 80063d4:	01db      	lsls	r3, r3, #7
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4013      	ands	r3, r2
 80063f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063f2:	68bb      	ldr	r3, [r7, #8]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	f003 0301 	and.w	r3, r3, #1
}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006436:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800644e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006452:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	460b      	mov	r3, r1
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	333c      	adds	r3, #60	; 0x3c
 800647a:	3304      	adds	r3, #4
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4a26      	ldr	r2, [pc, #152]	; (800651c <USB_EP0_OutStart+0xb8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d90a      	bls.n	800649e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006498:	d101      	bne.n	800649e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e037      	b.n	800650e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	461a      	mov	r2, r3
 80064a6:	2300      	movs	r3, #0
 80064a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064cc:	f043 0318 	orr.w	r3, r3, #24
 80064d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064e6:	7afb      	ldrb	r3, [r7, #11]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d10f      	bne.n	800650c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	461a      	mov	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006506:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800650a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	4f54300a 	.word	0x4f54300a

08006520 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4a13      	ldr	r2, [pc, #76]	; (8006584 <USB_CoreReset+0x64>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e01b      	b.n	8006576 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	daf2      	bge.n	800652c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f043 0201 	orr.w	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3301      	adds	r3, #1
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4a09      	ldr	r2, [pc, #36]	; (8006584 <USB_CoreReset+0x64>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d901      	bls.n	8006568 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e006      	b.n	8006576 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b01      	cmp	r3, #1
 8006572:	d0f0      	beq.n	8006556 <USB_CoreReset+0x36>

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	00030d40 	.word	0x00030d40

08006588 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800658c:	4904      	ldr	r1, [pc, #16]	; (80065a0 <MX_FATFS_Init+0x18>)
 800658e:	4805      	ldr	r0, [pc, #20]	; (80065a4 <MX_FATFS_Init+0x1c>)
 8006590:	f002 ff52 	bl	8009438 <FATFS_LinkDriver>
 8006594:	4603      	mov	r3, r0
 8006596:	461a      	mov	r2, r3
 8006598:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <MX_FATFS_Init+0x20>)
 800659a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800659c:	bf00      	nop
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	2000028c 	.word	0x2000028c
 80065a4:	0800a064 	.word	0x0800a064
 80065a8:	20000288 	.word	0x20000288

080065ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80065b6:	f000 f879 	bl	80066ac <BSP_SD_IsDetected>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d001      	beq.n	80065c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e012      	b.n	80065ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80065c4:	480b      	ldr	r0, [pc, #44]	; (80065f4 <BSP_SD_Init+0x48>)
 80065c6:	f7fc fdf5 	bl	80031b4 <HAL_SD_Init>
 80065ca:	4603      	mov	r3, r0
 80065cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80065ce:	79fb      	ldrb	r3, [r7, #7]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80065d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065d8:	4806      	ldr	r0, [pc, #24]	; (80065f4 <BSP_SD_Init+0x48>)
 80065da:	f7fd fbe3 	bl	8003da4 <HAL_SD_ConfigWideBusOperation>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80065e8:	79fb      	ldrb	r3, [r7, #7]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20000200 	.word	0x20000200

080065f8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	68f9      	ldr	r1, [r7, #12]
 8006614:	4806      	ldr	r0, [pc, #24]	; (8006630 <BSP_SD_ReadBlocks+0x38>)
 8006616:	f7fc fe5d 	bl	80032d4 <HAL_SD_ReadBlocks>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006624:	7dfb      	ldrb	r3, [r7, #23]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000200 	.word	0x20000200

08006634 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af02      	add	r7, sp, #8
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	68f9      	ldr	r1, [r7, #12]
 8006650:	4806      	ldr	r0, [pc, #24]	; (800666c <BSP_SD_WriteBlocks+0x38>)
 8006652:	f7fd f837 	bl	80036c4 <HAL_SD_WriteBlocks>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006660:	7dfb      	ldrb	r3, [r7, #23]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000200 	.word	0x20000200

08006670 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006674:	4805      	ldr	r0, [pc, #20]	; (800668c <BSP_SD_GetCardState+0x1c>)
 8006676:	f7fd fc11 	bl	8003e9c <HAL_SD_GetCardState>
 800667a:	4603      	mov	r3, r0
 800667c:	2b04      	cmp	r3, #4
 800667e:	bf14      	ite	ne
 8006680:	2301      	movne	r3, #1
 8006682:	2300      	moveq	r3, #0
 8006684:	b2db      	uxtb	r3, r3
}
 8006686:	4618      	mov	r0, r3
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000200 	.word	0x20000200

08006690 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4803      	ldr	r0, [pc, #12]	; (80066a8 <BSP_SD_GetCardInfo+0x18>)
 800669c:	f7fd fb56 	bl	8003d4c <HAL_SD_GetCardInfo>
}
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20000200 	.word	0x20000200

080066ac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80066b2:	2301      	movs	r3, #1
 80066b4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80066b6:	f000 f80b 	bl	80066d0 <BSP_PlatformIsDetected>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80066c0:	2300      	movs	r3, #0
 80066c2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80066c4:	79fb      	ldrb	r3, [r7, #7]
 80066c6:	b2db      	uxtb	r3, r3
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80066d6:	2301      	movs	r3, #1
 80066d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80066da:	2180      	movs	r1, #128	; 0x80
 80066dc:	4806      	ldr	r0, [pc, #24]	; (80066f8 <BSP_PlatformIsDetected+0x28>)
 80066de:	f7fa fcb1 	bl	8001044 <HAL_GPIO_ReadPin>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80066e8:	2300      	movs	r3, #0
 80066ea:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80066ec:	79fb      	ldrb	r3, [r7, #7]
}  
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	40021800 	.word	0x40021800

080066fc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006706:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <SD_CheckStatus+0x38>)
 8006708:	2201      	movs	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800670c:	f7ff ffb0 	bl	8006670 <BSP_SD_GetCardState>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d107      	bne.n	8006726 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006716:	4b07      	ldr	r3, [pc, #28]	; (8006734 <SD_CheckStatus+0x38>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	b2da      	uxtb	r2, r3
 8006722:	4b04      	ldr	r3, [pc, #16]	; (8006734 <SD_CheckStatus+0x38>)
 8006724:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006726:	4b03      	ldr	r3, [pc, #12]	; (8006734 <SD_CheckStatus+0x38>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	b2db      	uxtb	r3, r3
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000009 	.word	0x20000009

08006738 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8006742:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <SD_initialize+0x38>)
 8006744:	2201      	movs	r2, #1
 8006746:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006748:	f7ff ff30 	bl	80065ac <BSP_SD_Init>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d107      	bne.n	8006762 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff ffd1 	bl	80066fc <SD_CheckStatus>
 800675a:	4603      	mov	r3, r0
 800675c:	461a      	mov	r2, r3
 800675e:	4b04      	ldr	r3, [pc, #16]	; (8006770 <SD_initialize+0x38>)
 8006760:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006762:	4b03      	ldr	r3, [pc, #12]	; (8006770 <SD_initialize+0x38>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	b2db      	uxtb	r3, r3
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20000009 	.word	0x20000009

08006774 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff ffbb 	bl	80066fc <SD_CheckStatus>
 8006786:	4603      	mov	r3, r0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	4603      	mov	r3, r0
 800679e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80067a4:	f04f 33ff 	mov.w	r3, #4294967295
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	68b8      	ldr	r0, [r7, #8]
 80067ae:	f7ff ff23 	bl	80065f8 <BSP_SD_ReadBlocks>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d107      	bne.n	80067c8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80067b8:	bf00      	nop
 80067ba:	f7ff ff59 	bl	8006670 <BSP_SD_GetCardState>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1fa      	bne.n	80067ba <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b086      	sub	sp, #24
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80067e6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	68b8      	ldr	r0, [r7, #8]
 80067f0:	f7ff ff20 	bl	8006634 <BSP_SD_WriteBlocks>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d107      	bne.n	800680a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80067fa:	bf00      	nop
 80067fc:	f7ff ff38 	bl	8006670 <BSP_SD_GetCardState>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1fa      	bne.n	80067fc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08c      	sub	sp, #48	; 0x30
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	603a      	str	r2, [r7, #0]
 800681e:	71fb      	strb	r3, [r7, #7]
 8006820:	460b      	mov	r3, r1
 8006822:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800682a:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <SD_ioctl+0xac>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <SD_ioctl+0x28>
 8006838:	2303      	movs	r3, #3
 800683a:	e03c      	b.n	80068b6 <SD_ioctl+0xa2>

  switch (cmd)
 800683c:	79bb      	ldrb	r3, [r7, #6]
 800683e:	2b03      	cmp	r3, #3
 8006840:	d834      	bhi.n	80068ac <SD_ioctl+0x98>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <SD_ioctl+0x34>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	08006859 	.word	0x08006859
 800684c:	08006861 	.word	0x08006861
 8006850:	08006879 	.word	0x08006879
 8006854:	08006893 	.word	0x08006893
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800685e:	e028      	b.n	80068b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006860:	f107 030c 	add.w	r3, r7, #12
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff ff13 	bl	8006690 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800686a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006876:	e01c      	b.n	80068b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006878:	f107 030c 	add.w	r3, r7, #12
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff ff07 	bl	8006690 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	b29a      	uxth	r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006890:	e00f      	b.n	80068b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006892:	f107 030c 	add.w	r3, r7, #12
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fefa 	bl	8006690 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	0a5a      	lsrs	r2, r3, #9
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80068aa:	e002      	b.n	80068b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80068ac:	2304      	movs	r3, #4
 80068ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80068b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3730      	adds	r7, #48	; 0x30
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000009 	.word	0x20000009

080068c4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80068d0:	f44f 701d 	mov.w	r0, #628	; 0x274
 80068d4:	f003 fabe 	bl	8009e54 <malloc>
 80068d8:	4603      	mov	r3, r0
 80068da:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d105      	bne.n	80068ee <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80068ea:	2302      	movs	r3, #2
 80068ec:	e034      	b.n	8006958 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	7c1b      	ldrb	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d115      	bne.n	800692a <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80068fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006902:	2202      	movs	r2, #2
 8006904:	2101      	movs	r1, #1
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f003 f90b 	bl	8009b22 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006918:	2202      	movs	r2, #2
 800691a:	2181      	movs	r1, #129	; 0x81
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f003 f900 	bl	8009b22 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	871a      	strh	r2, [r3, #56]	; 0x38
 8006928:	e012      	b.n	8006950 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800692a:	2340      	movs	r3, #64	; 0x40
 800692c:	2202      	movs	r2, #2
 800692e:	2101      	movs	r1, #1
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f003 f8f6 	bl	8009b22 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800693e:	2340      	movs	r3, #64	; 0x40
 8006940:	2202      	movs	r2, #2
 8006942:	2181      	movs	r1, #129	; 0x81
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f003 f8ec 	bl	8009b22 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f98e 	bl	8006c72 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800696c:	2101      	movs	r1, #1
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f003 f8fd 	bl	8009b6e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800697c:	2181      	movs	r1, #129	; 0x81
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f003 f8f5 	bl	8009b6e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f9c7 	bl	8006d1e <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a0:	4618      	mov	r0, r3
 80069a2:	f003 fa5f 	bl	8009e64 <free>
    pdev->pClassData = NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069c8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d04d      	beq.n	8006a7a <USBD_MSC_Setup+0xc2>
 80069de:	2b20      	cmp	r3, #32
 80069e0:	f040 80c6 	bne.w	8006b70 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	2bfe      	cmp	r3, #254	; 0xfe
 80069ea:	d002      	beq.n	80069f2 <USBD_MSC_Setup+0x3a>
 80069ec:	2bff      	cmp	r3, #255	; 0xff
 80069ee:	d024      	beq.n	8006a3a <USBD_MSC_Setup+0x82>
 80069f0:	e03b      	b.n	8006a6a <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	885b      	ldrh	r3, [r3, #2]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d118      	bne.n	8006a2c <USBD_MSC_Setup+0x74>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	88db      	ldrh	r3, [r3, #6]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d114      	bne.n	8006a2c <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	da0f      	bge.n	8006a2c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	4798      	blx	r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	461a      	mov	r2, r3
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2201      	movs	r2, #1
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f002 fc58 	bl	80092da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006a2a:	e025      	b.n	8006a78 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f002 fbe2 	bl	80091f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006a34:	2303      	movs	r3, #3
 8006a36:	75fb      	strb	r3, [r7, #23]
      break;
 8006a38:	e01e      	b.n	8006a78 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	885b      	ldrh	r3, [r3, #2]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10c      	bne.n	8006a5c <USBD_MSC_Setup+0xa4>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	88db      	ldrh	r3, [r3, #6]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d108      	bne.n	8006a5c <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	db03      	blt.n	8006a5c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f940 	bl	8006cda <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006a5a:	e00d      	b.n	8006a78 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f002 fbca 	bl	80091f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	75fb      	strb	r3, [r7, #23]
      break;
 8006a68:	e006      	b.n	8006a78 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f002 fbc3 	bl	80091f8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a72:	2303      	movs	r3, #3
 8006a74:	75fb      	strb	r3, [r7, #23]
      break;
 8006a76:	bf00      	nop
    }
    break;
 8006a78:	e081      	b.n	8006b7e <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	2b0b      	cmp	r3, #11
 8006a80:	d86d      	bhi.n	8006b5e <USBD_MSC_Setup+0x1a6>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <USBD_MSC_Setup+0xd0>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006ab9 	.word	0x08006ab9
 8006a8c:	08006b2f 	.word	0x08006b2f
 8006a90:	08006b5f 	.word	0x08006b5f
 8006a94:	08006b5f 	.word	0x08006b5f
 8006a98:	08006b5f 	.word	0x08006b5f
 8006a9c:	08006b5f 	.word	0x08006b5f
 8006aa0:	08006b5f 	.word	0x08006b5f
 8006aa4:	08006b5f 	.word	0x08006b5f
 8006aa8:	08006b5f 	.word	0x08006b5f
 8006aac:	08006b5f 	.word	0x08006b5f
 8006ab0:	08006ae1 	.word	0x08006ae1
 8006ab4:	08006b09 	.word	0x08006b09
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d107      	bne.n	8006ad2 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ac2:	f107 030e 	add.w	r3, r7, #14
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f002 fc05 	bl	80092da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ad0:	e04d      	b.n	8006b6e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f002 fb8f 	bl	80091f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006ada:	2303      	movs	r3, #3
 8006adc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ade:	e046      	b.n	8006b6e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d107      	bne.n	8006afa <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	3304      	adds	r3, #4
 8006aee:	2201      	movs	r2, #1
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f002 fbf1 	bl	80092da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006af8:	e039      	b.n	8006b6e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f002 fb7b 	bl	80091f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006b02:	2303      	movs	r3, #3
 8006b04:	75fb      	strb	r3, [r7, #23]
      break;
 8006b06:	e032      	b.n	8006b6e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d106      	bne.n	8006b20 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	885b      	ldrh	r3, [r3, #2]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006b1e:	e026      	b.n	8006b6e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f002 fb68 	bl	80091f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2c:	e01f      	b.n	8006b6e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d119      	bne.n	8006b6c <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	885b      	ldrh	r3, [r3, #2]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d115      	bne.n	8006b6c <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	889b      	ldrh	r3, [r3, #4]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f003 f82f 	bl	8009bac <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	889b      	ldrh	r3, [r3, #4]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa5a 	bl	8007010 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8006b5c:	e006      	b.n	8006b6c <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f002 fb49 	bl	80091f8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b66:	2303      	movs	r3, #3
 8006b68:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6a:	e000      	b.n	8006b6e <USBD_MSC_Setup+0x1b6>
      break;
 8006b6c:	bf00      	nop
    }
    break;
 8006b6e:	e006      	b.n	8006b7e <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f002 fb40 	bl	80091f8 <USBD_CtlError>
    ret = USBD_FAIL;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	75fb      	strb	r3, [r7, #23]
    break;
 8006b7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f8d1 	bl	8006d40 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f8f2 	bl	8006da2 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006bd6:	4b03      	ldr	r3, [pc, #12]	; (8006be4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	20000044 	.word	0x20000044

08006be8 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006bf6:	4b03      	ldr	r3, [pc, #12]	; (8006c04 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	20000064 	.word	0x20000064

08006c08 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006c16:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	20000084 	.word	0x20000084

08006c28 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	220a      	movs	r2, #10
 8006c34:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006c36:	4b03      	ldr	r3, [pc, #12]	; (8006c44 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	200000a4 	.word	0x200000a4

08006c48 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e004      	b.n	8006c66 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c80:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2000      	movs	r0, #0
 8006cb0:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f002 ff79 	bl	8009bac <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006cba:	2181      	movs	r1, #129	; 0x81
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f002 ff75 	bl	8009bac <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006cc8:	231f      	movs	r3, #31
 8006cca:	2101      	movs	r1, #1
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f003 f836 	bl	8009d3e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ce8:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8006cf6:	2181      	movs	r1, #129	; 0x81
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f002 ff95 	bl	8009c28 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8006cfe:	2101      	movs	r1, #1
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f002 ff91 	bl	8009c28 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006d0c:	231f      	movs	r3, #31
 8006d0e:	2101      	movs	r1, #1
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f003 f814 	bl	8009d3e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	721a      	strb	r2, [r3, #8]
}
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d52:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	7a1b      	ldrb	r3, [r3, #8]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d004      	beq.n	8006d66 <MSC_BOT_DataIn+0x26>
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	db19      	blt.n	8006d94 <MSC_BOT_DataIn+0x54>
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	dc17      	bgt.n	8006d94 <MSC_BOT_DataIn+0x54>
 8006d64:	e011      	b.n	8006d8a <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006d72:	461a      	mov	r2, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f973 	bl	8007060 <SCSI_ProcessCmd>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	da0b      	bge.n	8006d98 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006d80:	2101      	movs	r1, #1
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f8ea 	bl	8006f5c <MSC_BOT_SendCSW>
    }
    break;
 8006d88:	e006      	b.n	8006d98 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f8e5 	bl	8006f5c <MSC_BOT_SendCSW>
    break;
 8006d92:	e002      	b.n	8006d9a <MSC_BOT_DataIn+0x5a>

  default:
    break;
 8006d94:	bf00      	nop
 8006d96:	e000      	b.n	8006d9a <MSC_BOT_DataIn+0x5a>
    break;
 8006d98:	bf00      	nop
  }
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006db4:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	7a1b      	ldrb	r3, [r3, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <MSC_BOT_DataOut+0x22>
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d004      	beq.n	8006dcc <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006dc2:	e015      	b.n	8006df0 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f817 	bl	8006df8 <MSC_BOT_CBW_Decode>
      break;
 8006dca:	e011      	b.n	8006df0 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f940 	bl	8007060 <SCSI_ProcessCmd>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	da03      	bge.n	8006dee <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006de6:	2101      	movs	r1, #1
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8b7 	bl	8006f5c <MSC_BOT_SendCSW>
      break;
 8006dee:	bf00      	nop
  }
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e06:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006e20:	2101      	movs	r1, #1
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f002 ffac 	bl	8009d80 <USBD_LL_GetRxDataSize>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b1f      	cmp	r3, #31
 8006e2c:	d114      	bne.n	8006e58 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006e34:	4a32      	ldr	r2, [pc, #200]	; (8006f00 <MSC_BOT_CBW_Decode+0x108>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d10e      	bne.n	8006e58 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d809      	bhi.n	8006e58 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d004      	beq.n	8006e58 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d90e      	bls.n	8006e76 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006e5e:	2320      	movs	r3, #32
 8006e60:	2205      	movs	r2, #5
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fcc9 	bl	80077fa <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f8a0 	bl	8006fb4 <MSC_BOT_Abort>
 8006e74:	e041      	b.n	8006efa <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006e82:	461a      	mov	r2, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f8eb 	bl	8007060 <SCSI_ProcessCmd>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	da0c      	bge.n	8006eaa <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	7a1b      	ldrb	r3, [r3, #8]
 8006e94:	2b05      	cmp	r3, #5
 8006e96:	d104      	bne.n	8006ea2 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006e98:	2101      	movs	r1, #1
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f85e 	bl	8006f5c <MSC_BOT_SendCSW>
 8006ea0:	e02b      	b.n	8006efa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f886 	bl	8006fb4 <MSC_BOT_Abort>
 8006ea8:	e027      	b.n	8006efa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	7a1b      	ldrb	r3, [r3, #8]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d022      	beq.n	8006ef8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d01e      	beq.n	8006ef8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d01a      	beq.n	8006ef8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d009      	beq.n	8006ede <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f103 0110 	add.w	r1, r3, #16
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f814 	bl	8006f04 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006edc:	e00d      	b.n	8006efa <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d104      	bne.n	8006ef0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f837 	bl	8006f5c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006eee:	e004      	b.n	8006efa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f85f 	bl	8006fb4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006ef6:	e000      	b.n	8006efa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8006ef8:	bf00      	nop
    }
  }
}
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	43425355 	.word	0x43425355

08006f04 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f16:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	bf28      	it	cs
 8006f24:	4613      	movcs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	1ad2      	subs	r2, r2, r3
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2204      	movs	r2, #4
 8006f44:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	2181      	movs	r1, #129	; 0x81
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f002 fed5 	bl	8009cfc <USBD_LL_Transmit>
}
 8006f52:	bf00      	nop
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f6e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a0f      	ldr	r2, [pc, #60]	; (8006fb0 <MSC_BOT_SendCSW+0x54>)
 8006f74:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	78fa      	ldrb	r2, [r7, #3]
 8006f7c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8006f8c:	230d      	movs	r3, #13
 8006f8e:	2181      	movs	r1, #129	; 0x81
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f002 feb3 	bl	8009cfc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006f9c:	231f      	movs	r3, #31
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f002 fecc 	bl	8009d3e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	53425355 	.word	0x53425355

08006fb4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fc2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10c      	bne.n	8006fe8 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d103      	bne.n	8006fe8 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f002 fe01 	bl	8009bea <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006fe8:	2181      	movs	r1, #129	; 0x81
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f002 fdfd 	bl	8009bea <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	7a5b      	ldrb	r3, [r3, #9]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d107      	bne.n	8007008 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006ff8:	2181      	movs	r1, #129	; 0x81
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f002 fdf5 	bl	8009bea <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007000:	2101      	movs	r1, #1
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f002 fdf1 	bl	8009bea <USBD_LL_StallEP>
  }
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007022:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	7a5b      	ldrb	r3, [r3, #9]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d108      	bne.n	800703e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800702c:	2181      	movs	r1, #129	; 0x81
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f002 fddb 	bl	8009bea <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007034:	2101      	movs	r1, #1
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f002 fdd7 	bl	8009bea <USBD_LL_StallEP>
 800703c:	e00d      	b.n	800705a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800703e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007042:	2b00      	cmp	r3, #0
 8007044:	da08      	bge.n	8007058 <MSC_BOT_CplClrFeature+0x48>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	7a5b      	ldrb	r3, [r3, #9]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d004      	beq.n	8007058 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800704e:	2101      	movs	r1, #1
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff ff83 	bl	8006f5c <MSC_BOT_SendCSW>
 8007056:	e000      	b.n	800705a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8007058:	bf00      	nop
  }
}
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	460b      	mov	r3, r1
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007074:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b25      	cmp	r3, #37	; 0x25
 800707c:	d06e      	beq.n	800715c <SCSI_ProcessCmd+0xfc>
 800707e:	2b25      	cmp	r3, #37	; 0x25
 8007080:	dc11      	bgt.n	80070a6 <SCSI_ProcessCmd+0x46>
 8007082:	2b1a      	cmp	r3, #26
 8007084:	d04f      	beq.n	8007126 <SCSI_ProcessCmd+0xc6>
 8007086:	2b1a      	cmp	r3, #26
 8007088:	dc06      	bgt.n	8007098 <SCSI_ProcessCmd+0x38>
 800708a:	2b03      	cmp	r3, #3
 800708c:	d027      	beq.n	80070de <SCSI_ProcessCmd+0x7e>
 800708e:	2b12      	cmp	r3, #18
 8007090:	d02e      	beq.n	80070f0 <SCSI_ProcessCmd+0x90>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d01a      	beq.n	80070cc <SCSI_ProcessCmd+0x6c>
 8007096:	e0a0      	b.n	80071da <SCSI_ProcessCmd+0x17a>
 8007098:	2b1e      	cmp	r3, #30
 800709a:	d03b      	beq.n	8007114 <SCSI_ProcessCmd+0xb4>
 800709c:	2b23      	cmp	r3, #35	; 0x23
 800709e:	d054      	beq.n	800714a <SCSI_ProcessCmd+0xea>
 80070a0:	2b1b      	cmp	r3, #27
 80070a2:	d02e      	beq.n	8007102 <SCSI_ProcessCmd+0xa2>
 80070a4:	e099      	b.n	80071da <SCSI_ProcessCmd+0x17a>
 80070a6:	2b5a      	cmp	r3, #90	; 0x5a
 80070a8:	d046      	beq.n	8007138 <SCSI_ProcessCmd+0xd8>
 80070aa:	2b5a      	cmp	r3, #90	; 0x5a
 80070ac:	dc07      	bgt.n	80070be <SCSI_ProcessCmd+0x5e>
 80070ae:	2b2a      	cmp	r3, #42	; 0x2a
 80070b0:	d078      	beq.n	80071a4 <SCSI_ProcessCmd+0x144>
 80070b2:	2b2f      	cmp	r3, #47	; 0x2f
 80070b4:	f000 8088 	beq.w	80071c8 <SCSI_ProcessCmd+0x168>
 80070b8:	2b28      	cmp	r3, #40	; 0x28
 80070ba:	d061      	beq.n	8007180 <SCSI_ProcessCmd+0x120>
 80070bc:	e08d      	b.n	80071da <SCSI_ProcessCmd+0x17a>
 80070be:	2ba8      	cmp	r3, #168	; 0xa8
 80070c0:	d067      	beq.n	8007192 <SCSI_ProcessCmd+0x132>
 80070c2:	2baa      	cmp	r3, #170	; 0xaa
 80070c4:	d077      	beq.n	80071b6 <SCSI_ProcessCmd+0x156>
 80070c6:	2b9e      	cmp	r3, #158	; 0x9e
 80070c8:	d051      	beq.n	800716e <SCSI_ProcessCmd+0x10e>
 80070ca:	e086      	b.n	80071da <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	4619      	mov	r1, r3
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f893 	bl	80071fe <SCSI_TestUnitReady>
 80070d8:	4603      	mov	r3, r0
 80070da:	75fb      	strb	r3, [r7, #23]
    break;
 80070dc:	e089      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 80070de:	7afb      	ldrb	r3, [r7, #11]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	4619      	mov	r1, r3
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 fb0f 	bl	8007708 <SCSI_RequestSense>
 80070ea:	4603      	mov	r3, r0
 80070ec:	75fb      	strb	r3, [r7, #23]
    break;
 80070ee:	e080      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 80070f0:	7afb      	ldrb	r3, [r7, #11]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4619      	mov	r1, r3
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f8cc 	bl	8007294 <SCSI_Inquiry>
 80070fc:	4603      	mov	r3, r0
 80070fe:	75fb      	strb	r3, [r7, #23]
    break;
 8007100:	e077      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007102:	7afb      	ldrb	r3, [r7, #11]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	4619      	mov	r1, r3
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fbb9 	bl	8007880 <SCSI_StartStopUnit>
 800710e:	4603      	mov	r3, r0
 8007110:	75fb      	strb	r3, [r7, #23]
    break;
 8007112:	e06e      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	4619      	mov	r1, r3
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fbfb 	bl	8007916 <SCSI_AllowPreventRemovable>
 8007120:	4603      	mov	r3, r0
 8007122:	75fb      	strb	r3, [r7, #23]
    break;
 8007124:	e065      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	4619      	mov	r1, r3
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 fa9f 	bl	8007670 <SCSI_ModeSense6>
 8007132:	4603      	mov	r3, r0
 8007134:	75fb      	strb	r3, [r7, #23]
    break;
 8007136:	e05c      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8007138:	7afb      	ldrb	r3, [r7, #11]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	4619      	mov	r1, r3
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fabc 	bl	80076bc <SCSI_ModeSense10>
 8007144:	4603      	mov	r3, r0
 8007146:	75fb      	strb	r3, [r7, #23]
    break;
 8007148:	e053      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	4619      	mov	r1, r3
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fa20 	bl	8007596 <SCSI_ReadFormatCapacity>
 8007156:	4603      	mov	r3, r0
 8007158:	75fb      	strb	r3, [r7, #23]
    break;
 800715a:	e04a      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4619      	mov	r1, r3
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f904 	bl	8007370 <SCSI_ReadCapacity10>
 8007168:	4603      	mov	r3, r0
 800716a:	75fb      	strb	r3, [r7, #23]
    break;
 800716c:	e041      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	4619      	mov	r1, r3
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f96a 	bl	800744e <SCSI_ReadCapacity16>
 800717a:	4603      	mov	r3, r0
 800717c:	75fb      	strb	r3, [r7, #23]
    break;
 800717e:	e038      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	4619      	mov	r1, r3
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fbe8 	bl	800795c <SCSI_Read10>
 800718c:	4603      	mov	r3, r0
 800718e:	75fb      	strb	r3, [r7, #23]
    break;
 8007190:	e02f      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8007192:	7afb      	ldrb	r3, [r7, #11]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	4619      	mov	r1, r3
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fc79 	bl	8007a90 <SCSI_Read12>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]
    break;
 80071a2:	e026      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	4619      	mov	r1, r3
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 fd15 	bl	8007bda <SCSI_Write10>
 80071b0:	4603      	mov	r3, r0
 80071b2:	75fb      	strb	r3, [r7, #23]
    break;
 80071b4:	e01d      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 80071b6:	7afb      	ldrb	r3, [r7, #11]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	4619      	mov	r1, r3
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 fdcb 	bl	8007d58 <SCSI_Write12>
 80071c2:	4603      	mov	r3, r0
 80071c4:	75fb      	strb	r3, [r7, #23]
    break;
 80071c6:	e014      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4619      	mov	r1, r3
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fe91 	bl	8007ef6 <SCSI_Verify10>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]
    break;
 80071d8:	e00b      	b.n	80071f2 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80071da:	7af9      	ldrb	r1, [r7, #11]
 80071dc:	2320      	movs	r3, #32
 80071de:	2205      	movs	r2, #5
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 fb0a 	bl	80077fa <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2202      	movs	r2, #2
 80071ea:	725a      	strb	r2, [r3, #9]
    ret = -1;
 80071ec:	23ff      	movs	r3, #255	; 0xff
 80071ee:	75fb      	strb	r3, [r7, #23]
    break;
 80071f0:	bf00      	nop
  }

  return ret;
 80071f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b086      	sub	sp, #24
 8007202:	af00      	add	r7, sp, #0
 8007204:	60f8      	str	r0, [r7, #12]
 8007206:	460b      	mov	r3, r1
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007212:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007224:	2320      	movs	r3, #32
 8007226:	2205      	movs	r2, #5
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 fae6 	bl	80077fa <SCSI_SenseCode>

    return -1;
 800722e:	f04f 33ff 	mov.w	r3, #4294967295
 8007232:	e02a      	b.n	800728a <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800723a:	2b02      	cmp	r3, #2
 800723c:	d10b      	bne.n	8007256 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800723e:	7af9      	ldrb	r1, [r7, #11]
 8007240:	233a      	movs	r3, #58	; 0x3a
 8007242:	2202      	movs	r2, #2
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fad8 	bl	80077fa <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2205      	movs	r2, #5
 800724e:	721a      	strb	r2, [r3, #8]
    return -1;
 8007250:	f04f 33ff 	mov.w	r3, #4294967295
 8007254:	e019      	b.n	800728a <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	7afa      	ldrb	r2, [r7, #11]
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00b      	beq.n	8007282 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800726a:	7af9      	ldrb	r1, [r7, #11]
 800726c:	233a      	movs	r3, #58	; 0x3a
 800726e:	2202      	movs	r2, #2
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fac2 	bl	80077fa <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2205      	movs	r2, #5
 800727a:	721a      	strb	r2, [r3, #8]

    return -1;
 800727c:	f04f 33ff 	mov.w	r3, #4294967295
 8007280:	e003      	b.n	800728a <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	60da      	str	r2, [r3, #12]

  return 0;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	460b      	mov	r3, r1
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072a8:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80072ba:	2320      	movs	r3, #32
 80072bc:	2205      	movs	r2, #5
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fa9b 	bl	80077fa <SCSI_SenseCode>
    return -1;
 80072c4:	f04f 33ff 	mov.w	r3, #4294967295
 80072c8:	e04a      	b.n	8007360 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3301      	adds	r3, #1
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d020      	beq.n	800731a <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3302      	adds	r3, #2
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d105      	bne.n	80072ee <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80072e2:	2206      	movs	r2, #6
 80072e4:	4920      	ldr	r1, [pc, #128]	; (8007368 <SCSI_Inquiry+0xd4>)
 80072e6:	69b8      	ldr	r0, [r7, #24]
 80072e8:	f000 ff50 	bl	800818c <SCSI_UpdateBotData>
 80072ec:	e037      	b.n	800735e <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3302      	adds	r3, #2
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b80      	cmp	r3, #128	; 0x80
 80072f6:	d105      	bne.n	8007304 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80072f8:	2208      	movs	r2, #8
 80072fa:	491c      	ldr	r1, [pc, #112]	; (800736c <SCSI_Inquiry+0xd8>)
 80072fc:	69b8      	ldr	r0, [r7, #24]
 80072fe:	f000 ff45 	bl	800818c <SCSI_UpdateBotData>
 8007302:	e02c      	b.n	800735e <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800730a:	2324      	movs	r3, #36	; 0x24
 800730c:	2205      	movs	r2, #5
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fa73 	bl	80077fa <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8007314:	f04f 33ff 	mov.w	r3, #4294967295
 8007318:	e022      	b.n	8007360 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007320:	69d9      	ldr	r1, [r3, #28]
 8007322:	7afa      	ldrb	r2, [r7, #11]
 8007324:	4613      	mov	r3, r2
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	3304      	adds	r3, #4
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	3305      	adds	r3, #5
 800733a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3304      	adds	r3, #4
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	b29b      	uxth	r3, r3
 8007344:	8bfa      	ldrh	r2, [r7, #30]
 8007346:	429a      	cmp	r2, r3
 8007348:	d303      	bcc.n	8007352 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3304      	adds	r3, #4
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007352:	8bfb      	ldrh	r3, [r7, #30]
 8007354:	461a      	mov	r2, r3
 8007356:	6979      	ldr	r1, [r7, #20]
 8007358:	69b8      	ldr	r0, [r7, #24]
 800735a:	f000 ff17 	bl	800818c <SCSI_UpdateBotData>
  }

  return 0;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3720      	adds	r7, #32
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	200000b0 	.word	0x200000b0
 800736c:	200000b8 	.word	0x200000b8

08007370 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	460b      	mov	r3, r1
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007384:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800739a:	7af8      	ldrb	r0, [r7, #11]
 800739c:	4798      	blx	r3
 800739e:	4603      	mov	r3, r0
 80073a0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80073a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <SCSI_ReadCapacity10+0x44>
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d108      	bne.n	80073c6 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073b4:	7af9      	ldrb	r1, [r7, #11]
 80073b6:	233a      	movs	r3, #58	; 0x3a
 80073b8:	2202      	movs	r2, #2
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 fa1d 	bl	80077fa <SCSI_SenseCode>
    return -1;
 80073c0:	f04f 33ff 	mov.w	r3, #4294967295
 80073c4:	e03f      	b.n	8007446 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80073cc:	3b01      	subs	r3, #1
 80073ce:	0e1b      	lsrs	r3, r3, #24
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80073dc:	3b01      	subs	r3, #1
 80073de:	0c1b      	lsrs	r3, r3, #16
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80073ec:	3b01      	subs	r3, #1
 80073ee:	0a1b      	lsrs	r3, r3, #8
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b2da      	uxtb	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800740c:	161b      	asrs	r3, r3, #24
 800740e:	b2da      	uxtb	r2, r3
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800741a:	141b      	asrs	r3, r3, #16
 800741c:	b2da      	uxtb	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007428:	0a1b      	lsrs	r3, r3, #8
 800742a:	b29b      	uxth	r3, r3
 800742c:	b2da      	uxtb	r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007438:	b2da      	uxtb	r2, r3
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2208      	movs	r2, #8
 8007442:	60da      	str	r2, [r3, #12]

  return 0;
 8007444:	2300      	movs	r3, #0

}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b088      	sub	sp, #32
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	460b      	mov	r3, r1
 8007458:	607a      	str	r2, [r7, #4]
 800745a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007462:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8007478:	7af8      	ldrb	r0, [r7, #11]
 800747a:	4798      	blx	r3
 800747c:	4603      	mov	r3, r0
 800747e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d104      	bne.n	8007492 <SCSI_ReadCapacity16+0x44>
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800748e:	2b02      	cmp	r3, #2
 8007490:	d108      	bne.n	80074a4 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007492:	7af9      	ldrb	r1, [r7, #11]
 8007494:	233a      	movs	r3, #58	; 0x3a
 8007496:	2202      	movs	r2, #2
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f9ae 	bl	80077fa <SCSI_SenseCode>
    return -1;
 800749e:	f04f 33ff 	mov.w	r3, #4294967295
 80074a2:	e074      	b.n	800758e <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	330a      	adds	r3, #10
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	330b      	adds	r3, #11
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80074b4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	330c      	adds	r3, #12
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80074be:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	320d      	adds	r2, #13
 80074c4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80074c6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80074cc:	2300      	movs	r3, #0
 80074ce:	77fb      	strb	r3, [r7, #31]
 80074d0:	e007      	b.n	80074e2 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 80074d2:	7ffb      	ldrb	r3, [r7, #31]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	4413      	add	r3, r2
 80074d8:	2200      	movs	r2, #0
 80074da:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80074dc:	7ffb      	ldrb	r3, [r7, #31]
 80074de:	3301      	adds	r3, #1
 80074e0:	77fb      	strb	r3, [r7, #31]
 80074e2:	7ffa      	ldrb	r2, [r7, #31]
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d3f2      	bcc.n	80074d2 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80074f2:	3b01      	subs	r3, #1
 80074f4:	0e1b      	lsrs	r3, r3, #24
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007502:	3b01      	subs	r3, #1
 8007504:	0c1b      	lsrs	r3, r3, #16
 8007506:	b2da      	uxtb	r2, r3
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007512:	3b01      	subs	r3, #1
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	b2da      	uxtb	r2, r3
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007522:	b2db      	uxtb	r3, r3
 8007524:	3b01      	subs	r3, #1
 8007526:	b2da      	uxtb	r2, r3
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007532:	161b      	asrs	r3, r3, #24
 8007534:	b2da      	uxtb	r2, r3
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007540:	141b      	asrs	r3, r3, #16
 8007542:	b2da      	uxtb	r2, r3
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800754e:	0a1b      	lsrs	r3, r3, #8
 8007550:	b29b      	uxth	r3, r3
 8007552:	b2da      	uxtb	r2, r3
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800755e:	b2da      	uxtb	r2, r3
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	330a      	adds	r3, #10
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	330b      	adds	r3, #11
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007574:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	330c      	adds	r3, #12
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800757e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	320d      	adds	r2, #13
 8007584:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007586:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	60da      	str	r2, [r3, #12]

  return 0;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b088      	sub	sp, #32
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	460b      	mov	r3, r1
 80075a0:	607a      	str	r2, [r7, #4]
 80075a2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075aa:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f107 0214 	add.w	r2, r7, #20
 80075b8:	f107 0110 	add.w	r1, r7, #16
 80075bc:	7af8      	ldrb	r0, [r7, #11]
 80075be:	4798      	blx	r3
 80075c0:	4603      	mov	r3, r0
 80075c2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80075c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <SCSI_ReadFormatCapacity+0x40>
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d108      	bne.n	80075e8 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80075d6:	7af9      	ldrb	r1, [r7, #11]
 80075d8:	233a      	movs	r3, #58	; 0x3a
 80075da:	2202      	movs	r2, #2
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f90c 	bl	80077fa <SCSI_SenseCode>
    return -1;
 80075e2:	f04f 33ff 	mov.w	r3, #4294967295
 80075e6:	e03e      	b.n	8007666 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 80075e8:	2300      	movs	r3, #0
 80075ea:	83fb      	strh	r3, [r7, #30]
 80075ec:	e007      	b.n	80075fe <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 80075ee:	8bfb      	ldrh	r3, [r7, #30]
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	4413      	add	r3, r2
 80075f4:	2200      	movs	r2, #0
 80075f6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80075f8:	8bfb      	ldrh	r3, [r7, #30]
 80075fa:	3301      	adds	r3, #1
 80075fc:	83fb      	strh	r3, [r7, #30]
 80075fe:	8bfb      	ldrh	r3, [r7, #30]
 8007600:	2b0b      	cmp	r3, #11
 8007602:	d9f4      	bls.n	80075ee <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	2208      	movs	r2, #8
 8007608:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	3b01      	subs	r3, #1
 800760e:	0e1b      	lsrs	r3, r3, #24
 8007610:	b2da      	uxtb	r2, r3
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	3b01      	subs	r3, #1
 800761a:	0c1b      	lsrs	r3, r3, #16
 800761c:	b2da      	uxtb	r2, r3
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	3b01      	subs	r3, #1
 8007626:	0a1b      	lsrs	r3, r3, #8
 8007628:	b2da      	uxtb	r2, r3
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b2da      	uxtb	r2, r3
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2202      	movs	r2, #2
 800763e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007640:	8abb      	ldrh	r3, [r7, #20]
 8007642:	141b      	asrs	r3, r3, #16
 8007644:	b2da      	uxtb	r2, r3
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800764a:	8abb      	ldrh	r3, [r7, #20]
 800764c:	0a1b      	lsrs	r3, r3, #8
 800764e:	b29b      	uxth	r3, r3
 8007650:	b2da      	uxtb	r2, r3
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007656:	8abb      	ldrh	r3, [r7, #20]
 8007658:	b2da      	uxtb	r2, r3
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	220c      	movs	r2, #12
 8007662:	60da      	str	r2, [r3, #12]

  return 0;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	460b      	mov	r3, r1
 800767a:	607a      	str	r2, [r7, #4]
 800767c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007684:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8007686:	2317      	movs	r3, #23
 8007688:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3304      	adds	r3, #4
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	b29b      	uxth	r3, r3
 8007692:	8afa      	ldrh	r2, [r7, #22]
 8007694:	429a      	cmp	r2, r3
 8007696:	d303      	bcc.n	80076a0 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3304      	adds	r3, #4
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80076a0:	8afb      	ldrh	r3, [r7, #22]
 80076a2:	461a      	mov	r2, r3
 80076a4:	4904      	ldr	r1, [pc, #16]	; (80076b8 <SCSI_ModeSense6+0x48>)
 80076a6:	6938      	ldr	r0, [r7, #16]
 80076a8:	f000 fd70 	bl	800818c <SCSI_UpdateBotData>

  return 0;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200000c0 	.word	0x200000c0

080076bc <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	460b      	mov	r3, r1
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80076d2:	231b      	movs	r3, #27
 80076d4:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	3308      	adds	r3, #8
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	8afa      	ldrh	r2, [r7, #22]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d303      	bcc.n	80076ec <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3308      	adds	r3, #8
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80076ec:	8afb      	ldrh	r3, [r7, #22]
 80076ee:	461a      	mov	r2, r3
 80076f0:	4904      	ldr	r1, [pc, #16]	; (8007704 <SCSI_ModeSense10+0x48>)
 80076f2:	6938      	ldr	r0, [r7, #16]
 80076f4:	f000 fd4a 	bl	800818c <SCSI_UpdateBotData>

  return 0;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	200000d8 	.word	0x200000d8

08007708 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	460b      	mov	r3, r1
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800771c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800772e:	2320      	movs	r3, #32
 8007730:	2205      	movs	r2, #5
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 f861 	bl	80077fa <SCSI_SenseCode>
    return -1;
 8007738:	f04f 33ff 	mov.w	r3, #4294967295
 800773c:	e059      	b.n	80077f2 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800773e:	2300      	movs	r3, #0
 8007740:	75fb      	strb	r3, [r7, #23]
 8007742:	e007      	b.n	8007754 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	4413      	add	r3, r2
 800774a:	2200      	movs	r2, #0
 800774c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	3301      	adds	r3, #1
 8007752:	75fb      	strb	r3, [r7, #23]
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	2b11      	cmp	r3, #17
 8007758:	d9f4      	bls.n	8007744 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2270      	movs	r2, #112	; 0x70
 800775e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	220c      	movs	r2, #12
 8007764:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007772:	429a      	cmp	r2, r3
 8007774:	d02e      	beq.n	80077d4 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800777c:	461a      	mov	r2, r3
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	3248      	adds	r2, #72	; 0x48
 8007782:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	3348      	adds	r3, #72	; 0x48
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	4413      	add	r3, r2
 8007798:	791a      	ldrb	r2, [r3, #4]
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	3348      	adds	r3, #72	; 0x48
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	4413      	add	r3, r2
 80077ac:	795a      	ldrb	r2, [r3, #5]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80077b8:	3301      	adds	r3, #1
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80077c8:	2b04      	cmp	r3, #4
 80077ca:	d103      	bne.n	80077d4 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	2212      	movs	r2, #18
 80077d8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3304      	adds	r3, #4
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b12      	cmp	r3, #18
 80077e2:	d805      	bhi.n	80077f0 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	4608      	mov	r0, r1
 8007804:	4611      	mov	r1, r2
 8007806:	461a      	mov	r2, r3
 8007808:	4603      	mov	r3, r0
 800780a:	70fb      	strb	r3, [r7, #3]
 800780c:	460b      	mov	r3, r1
 800780e:	70bb      	strb	r3, [r7, #2]
 8007810:	4613      	mov	r3, r2
 8007812:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800781a:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007822:	461a      	mov	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3248      	adds	r2, #72	; 0x48
 8007828:	78b9      	ldrb	r1, [r7, #2]
 800782a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	3348      	adds	r3, #72	; 0x48
 8007838:	00db      	lsls	r3, r3, #3
 800783a:	4413      	add	r3, r2
 800783c:	787a      	ldrb	r2, [r7, #1]
 800783e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	3348      	adds	r3, #72	; 0x48
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	4413      	add	r3, r2
 800784e:	2200      	movs	r2, #0
 8007850:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007858:	3301      	adds	r3, #1
 800785a:	b2da      	uxtb	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007868:	2b04      	cmp	r3, #4
 800786a:	d103      	bne.n	8007874 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 8007874:	bf00      	nop
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	460b      	mov	r3, r1
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007894:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800789c:	2b01      	cmp	r3, #1
 800789e:	d10f      	bne.n	80078c0 <SCSI_StartStopUnit+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3304      	adds	r3, #4
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d108      	bne.n	80078c0 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80078ae:	7af9      	ldrb	r1, [r7, #11]
 80078b0:	2324      	movs	r3, #36	; 0x24
 80078b2:	2205      	movs	r2, #5
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f7ff ffa0 	bl	80077fa <SCSI_SenseCode>

    return -1;
 80078ba:	f04f 33ff 	mov.w	r3, #4294967295
 80078be:	e026      	b.n	800790e <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3304      	adds	r3, #4
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	f003 0303 	and.w	r3, r3, #3
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d104      	bne.n	80078d8 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80078d6:	e016      	b.n	8007906 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3304      	adds	r3, #4
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d104      	bne.n	80078f0 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2202      	movs	r2, #2
 80078ea:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80078ee:	e00a      	b.n	8007906 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3304      	adds	r3, #4
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d103      	bne.n	8007906 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2200      	movs	r2, #0
 800790a:	60da      	str	r2, [r3, #12]

  return 0;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007916:	b480      	push	{r7}
 8007918:	b087      	sub	sp, #28
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	460b      	mov	r3, r1
 8007920:	607a      	str	r2, [r7, #4]
 8007922:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800792a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3304      	adds	r3, #4
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800793e:	e003      	b.n	8007948 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2200      	movs	r2, #0
 800794c:	60da      	str	r2, [r3, #12]

  return 0;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	371c      	adds	r7, #28
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	460b      	mov	r3, r1
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007970:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	7a1b      	ldrb	r3, [r3, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d17c      	bne.n	8007a74 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007980:	b25b      	sxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	db0a      	blt.n	800799c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800798c:	2320      	movs	r3, #32
 800798e:	2205      	movs	r2, #5
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7ff ff32 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007996:	f04f 33ff 	mov.w	r3, #4294967295
 800799a:	e075      	b.n	8007a88 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d108      	bne.n	80079b8 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80079a6:	7af9      	ldrb	r1, [r7, #11]
 80079a8:	233a      	movs	r3, #58	; 0x3a
 80079aa:	2202      	movs	r2, #2
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f7ff ff24 	bl	80077fa <SCSI_SenseCode>

      return -1;
 80079b2:	f04f 33ff 	mov.w	r3, #4294967295
 80079b6:	e067      	b.n	8007a88 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	7afa      	ldrb	r2, [r7, #11]
 80079c2:	4610      	mov	r0, r2
 80079c4:	4798      	blx	r3
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d008      	beq.n	80079de <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80079cc:	7af9      	ldrb	r1, [r7, #11]
 80079ce:	233a      	movs	r3, #58	; 0x3a
 80079d0:	2202      	movs	r2, #2
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f7ff ff11 	bl	80077fa <SCSI_SenseCode>
      return -1;
 80079d8:	f04f 33ff 	mov.w	r3, #4294967295
 80079dc:	e054      	b.n	8007a88 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3302      	adds	r3, #2
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3303      	adds	r3, #3
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80079ee:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3304      	adds	r3, #4
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80079f8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	3205      	adds	r2, #5
 80079fe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007a00:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3307      	adds	r3, #7
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	3208      	adds	r2, #8
 8007a14:	7812      	ldrb	r2, [r2, #0]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007a2a:	7af9      	ldrb	r1, [r7, #11]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 fa95 	bl	8007f5c <SCSI_CheckAddressRange>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da02      	bge.n	8007a3e <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007a38:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3c:	e024      	b.n	8007a88 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007a4a:	6979      	ldr	r1, [r7, #20]
 8007a4c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007a50:	fb01 f303 	mul.w	r3, r1, r3
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d00a      	beq.n	8007a6e <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007a5e:	2320      	movs	r3, #32
 8007a60:	2205      	movs	r2, #5
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7ff fec9 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007a68:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6c:	e00c      	b.n	8007a88 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2202      	movs	r2, #2
 8007a72:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a7a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007a7c:	7afb      	ldrb	r3, [r7, #11]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fa8d 	bl	8007fa0 <SCSI_ProcessRead>
 8007a86:	4603      	mov	r3, r0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	7a1b      	ldrb	r3, [r3, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f040 8087 	bne.w	8007bbe <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007ab6:	b25b      	sxtb	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	db0a      	blt.n	8007ad2 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007ac2:	2320      	movs	r3, #32
 8007ac4:	2205      	movs	r2, #5
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f7ff fe97 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007acc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad0:	e07f      	b.n	8007bd2 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d108      	bne.n	8007aee <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007adc:	7af9      	ldrb	r1, [r7, #11]
 8007ade:	233a      	movs	r3, #58	; 0x3a
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff fe89 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8007aec:	e071      	b.n	8007bd2 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	7afa      	ldrb	r2, [r7, #11]
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d008      	beq.n	8007b14 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b02:	7af9      	ldrb	r1, [r7, #11]
 8007b04:	233a      	movs	r3, #58	; 0x3a
 8007b06:	2202      	movs	r2, #2
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7ff fe76 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b12:	e05e      	b.n	8007bd2 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3302      	adds	r3, #2
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3303      	adds	r3, #3
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b24:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007b2e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	3205      	adds	r2, #5
 8007b34:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007b36:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3306      	adds	r3, #6
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3307      	adds	r3, #7
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007b4e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3308      	adds	r3, #8
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007b58:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	3209      	adds	r2, #9
 8007b5e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007b60:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007b74:	7af9      	ldrb	r1, [r7, #11]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 f9f0 	bl	8007f5c <SCSI_CheckAddressRange>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	da02      	bge.n	8007b88 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007b82:	f04f 33ff 	mov.w	r3, #4294967295
 8007b86:	e024      	b.n	8007bd2 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007b94:	6979      	ldr	r1, [r7, #20]
 8007b96:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d00a      	beq.n	8007bb8 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007ba8:	2320      	movs	r3, #32
 8007baa:	2205      	movs	r2, #5
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7ff fe24 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb6:	e00c      	b.n	8007bd2 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bc4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007bc6:	7afb      	ldrb	r3, [r7, #11]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 f9e8 	bl	8007fa0 <SCSI_ProcessRead>
 8007bd0:	4603      	mov	r3, r0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b086      	sub	sp, #24
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	460b      	mov	r3, r1
 8007be4:	607a      	str	r2, [r7, #4]
 8007be6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bee:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	7a1b      	ldrb	r3, [r3, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f040 80a5 	bne.w	8007d44 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007c0a:	2320      	movs	r3, #32
 8007c0c:	2205      	movs	r2, #5
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7ff fdf3 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007c14:	f04f 33ff 	mov.w	r3, #4294967295
 8007c18:	e09a      	b.n	8007d50 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007c20:	b25b      	sxtb	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	da0a      	bge.n	8007c3c <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007c2c:	2320      	movs	r3, #32
 8007c2e:	2205      	movs	r2, #5
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff fde2 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3a:	e089      	b.n	8007d50 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	7afa      	ldrb	r2, [r7, #11]
 8007c46:	4610      	mov	r0, r2
 8007c48:	4798      	blx	r3
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d008      	beq.n	8007c62 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c50:	7af9      	ldrb	r1, [r7, #11]
 8007c52:	233a      	movs	r3, #58	; 0x3a
 8007c54:	2202      	movs	r2, #2
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff fdcf 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c60:	e076      	b.n	8007d50 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	7afa      	ldrb	r2, [r7, #11]
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d008      	beq.n	8007c88 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007c76:	7af9      	ldrb	r1, [r7, #11]
 8007c78:	2327      	movs	r3, #39	; 0x27
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f7ff fdbc 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
 8007c86:	e063      	b.n	8007d50 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3303      	adds	r3, #3
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c98:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007ca2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	3205      	adds	r2, #5
 8007ca8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007caa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3307      	adds	r3, #7
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	3208      	adds	r2, #8
 8007cbe:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cd4:	7af9      	ldrb	r1, [r7, #11]
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f940 	bl	8007f5c <SCSI_CheckAddressRange>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	da02      	bge.n	8007ce8 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce6:	e033      	b.n	8007d50 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007cf4:	fb02 f303 	mul.w	r3, r2, r3
 8007cf8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d00a      	beq.n	8007d1c <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007d0c:	2320      	movs	r3, #32
 8007d0e:	2205      	movs	r2, #5
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff fd72 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007d16:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1a:	e019      	b.n	8007d50 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d22:	bf28      	it	cs
 8007d24:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007d28:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f103 0210 	add.w	r2, r3, #16
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	2101      	movs	r1, #1
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f001 ffff 	bl	8009d3e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	e005      	b.n	8007d50 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 8007d44:	7afb      	ldrb	r3, [r7, #11]
 8007d46:	4619      	mov	r1, r3
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f99c 	bl	8008086 <SCSI_ProcessWrite>
 8007d4e:	4603      	mov	r3, r0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	460b      	mov	r3, r1
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d6c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	7a1b      	ldrb	r3, [r3, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f040 80b5 	bne.w	8007ee2 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007d88:	2320      	movs	r3, #32
 8007d8a:	2205      	movs	r2, #5
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff fd34 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295
 8007d96:	e0aa      	b.n	8007eee <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007d9e:	b25b      	sxtb	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	da0a      	bge.n	8007dba <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007daa:	2320      	movs	r3, #32
 8007dac:	2205      	movs	r2, #5
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff fd23 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007db4:	f04f 33ff 	mov.w	r3, #4294967295
 8007db8:	e099      	b.n	8007eee <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	7afa      	ldrb	r2, [r7, #11]
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00b      	beq.n	8007de6 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007dce:	7af9      	ldrb	r1, [r7, #11]
 8007dd0:	233a      	movs	r3, #58	; 0x3a
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7ff fd10 	bl	80077fa <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	2205      	movs	r2, #5
 8007dde:	721a      	strb	r2, [r3, #8]
      return -1;
 8007de0:	f04f 33ff 	mov.w	r3, #4294967295
 8007de4:	e083      	b.n	8007eee <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	7afa      	ldrb	r2, [r7, #11]
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00b      	beq.n	8007e12 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007dfa:	7af9      	ldrb	r1, [r7, #11]
 8007dfc:	2327      	movs	r3, #39	; 0x27
 8007dfe:	2202      	movs	r2, #2
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7ff fcfa 	bl	80077fa <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2205      	movs	r2, #5
 8007e0a:	721a      	strb	r2, [r3, #8]
      return -1;
 8007e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e10:	e06d      	b.n	8007eee <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3302      	adds	r3, #2
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3303      	adds	r3, #3
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e22:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3304      	adds	r3, #4
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007e2c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	3205      	adds	r2, #5
 8007e32:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007e34:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3306      	adds	r3, #6
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3307      	adds	r3, #7
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007e4c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3308      	adds	r3, #8
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007e56:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	3209      	adds	r2, #9
 8007e5c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007e5e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e72:	7af9      	ldrb	r1, [r7, #11]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 f871 	bl	8007f5c <SCSI_CheckAddressRange>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	da02      	bge.n	8007e86 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007e80:	f04f 33ff 	mov.w	r3, #4294967295
 8007e84:	e033      	b.n	8007eee <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007e92:	fb02 f303 	mul.w	r3, r2, r3
 8007e96:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d00a      	beq.n	8007eba <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007eaa:	2320      	movs	r3, #32
 8007eac:	2205      	movs	r2, #5
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f7ff fca3 	bl	80077fa <SCSI_SenseCode>
      return -1;
 8007eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb8:	e019      	b.n	8007eee <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec0:	bf28      	it	cs
 8007ec2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007ec6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f103 0210 	add.w	r2, r3, #16
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f001 ff30 	bl	8009d3e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e005      	b.n	8007eee <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 f8cd 	bl	8008086 <SCSI_ProcessWrite>
 8007eec:	4603      	mov	r3, r0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b086      	sub	sp, #24
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	60f8      	str	r0, [r7, #12]
 8007efe:	460b      	mov	r3, r1
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f0a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d008      	beq.n	8007f2c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007f1a:	7af9      	ldrb	r1, [r7, #11]
 8007f1c:	2324      	movs	r3, #36	; 0x24
 8007f1e:	2205      	movs	r2, #5
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff fc6a 	bl	80077fa <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007f26:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2a:	e013      	b.n	8007f54 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007f38:	7af9      	ldrb	r1, [r7, #11]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 f80e 	bl	8007f5c <SCSI_CheckAddressRange>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	da02      	bge.n	8007f4c <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 8007f46:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4a:	e003      	b.n	8007f54 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	60da      	str	r2, [r3, #12]

  return 0;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f72:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	441a      	add	r2, r3
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d908      	bls.n	8007f96 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007f84:	7af9      	ldrb	r1, [r7, #11]
 8007f86:	2321      	movs	r3, #33	; 0x21
 8007f88:	2205      	movs	r2, #5
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7ff fc35 	bl	80077fa <SCSI_SenseCode>
    return -1;
 8007f90:	f04f 33ff 	mov.w	r3, #4294967295
 8007f94:	e000      	b.n	8007f98 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007fa0:	b590      	push	{r4, r7, lr}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fb2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007fc0:	fb02 f303 	mul.w	r3, r2, r3
 8007fc4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fcc:	bf28      	it	cs
 8007fce:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007fd2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fda:	691c      	ldr	r4, [r3, #16]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f103 0110 	add.w	r1, r3, #16
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007fee:	4618      	mov	r0, r3
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	78f8      	ldrb	r0, [r7, #3]
 8007ffa:	47a0      	blx	r4
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	da08      	bge.n	8008014 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008002:	78f9      	ldrb	r1, [r7, #3]
 8008004:	2311      	movs	r3, #17
 8008006:	2204      	movs	r2, #4
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff fbf6 	bl	80077fa <SCSI_SenseCode>
    return -1;
 800800e:	f04f 33ff 	mov.w	r3, #4294967295
 8008012:	e034      	b.n	800807e <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f103 0210 	add.w	r2, r3, #16
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2181      	movs	r1, #129	; 0x81
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 fe6c 	bl	8009cfc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008030:	4619      	mov	r1, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	fbb3 f3f1 	udiv	r3, r3, r1
 8008038:	441a      	add	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800804c:	4619      	mov	r1, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	fbb3 f3f1 	udiv	r3, r3, r1
 8008054:	1ad2      	subs	r2, r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	1ad2      	subs	r2, r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2203      	movs	r2, #3
 800807a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	bd90      	pop	{r4, r7, pc}

08008086 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008086:	b590      	push	{r4, r7, lr}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	460b      	mov	r3, r1
 8008090:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008098:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80080a6:	fb02 f303 	mul.w	r3, r2, r3
 80080aa:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b2:	bf28      	it	cs
 80080b4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80080b8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080c0:	695c      	ldr	r4, [r3, #20]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f103 0110 	add.w	r1, r3, #16
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80080d4:	4618      	mov	r0, r3
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80080dc:	b29b      	uxth	r3, r3
 80080de:	78f8      	ldrb	r0, [r7, #3]
 80080e0:	47a0      	blx	r4
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da08      	bge.n	80080fa <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80080e8:	78f9      	ldrb	r1, [r7, #3]
 80080ea:	2303      	movs	r3, #3
 80080ec:	2204      	movs	r2, #4
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff fb83 	bl	80077fa <SCSI_SenseCode>
    return -1;
 80080f4:	f04f 33ff 	mov.w	r3, #4294967295
 80080f8:	e044      	b.n	8008184 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008106:	4619      	mov	r1, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	fbb3 f3f1 	udiv	r3, r3, r1
 800810e:	441a      	add	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008122:	4619      	mov	r1, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	fbb3 f3f1 	udiv	r3, r3, r1
 800812a:	1ad2      	subs	r2, r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	1ad2      	subs	r2, r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008148:	2b00      	cmp	r3, #0
 800814a:	d104      	bne.n	8008156 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800814c:	2100      	movs	r1, #0
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7fe ff04 	bl	8006f5c <MSC_BOT_SendCSW>
 8008154:	e015      	b.n	8008182 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008162:	fb02 f303 	mul.w	r3, r2, r3
 8008166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800816a:	bf28      	it	cs
 800816c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008170:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f103 0210 	add.w	r2, r3, #16
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2101      	movs	r1, #1
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 fdde 	bl	8009d3e <USBD_LL_PrepareReceive>
  }

  return 0;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	bd90      	pop	{r4, r7, pc}

0800818c <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800819e:	8afa      	ldrh	r2, [r7, #22]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80081a4:	e00b      	b.n	80081be <SCSI_UpdateBotData+0x32>
  {
    len--;
 80081a6:	8afb      	ldrh	r3, [r7, #22]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80081ac:	8afb      	ldrh	r3, [r7, #22]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	441a      	add	r2, r3
 80081b2:	8afb      	ldrh	r3, [r7, #22]
 80081b4:	7811      	ldrb	r1, [r2, #0]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4413      	add	r3, r2
 80081ba:	460a      	mov	r2, r1
 80081bc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80081be:	8afb      	ldrh	r3, [r7, #22]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1f0      	bne.n	80081a6 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b086      	sub	sp, #24
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	4613      	mov	r3, r2
 80081de:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e025      	b.n	8008236 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d003      	beq.n	800821c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	79fa      	ldrb	r2, [r7, #7]
 8008228:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f001 fc0e 	bl	8009a4c <USBD_LL_Init>
 8008230:	4603      	mov	r3, r0
 8008232:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008252:	2303      	movs	r3, #3
 8008254:	e010      	b.n	8008278 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008266:	f107 020e 	add.w	r2, r7, #14
 800826a:	4610      	mov	r0, r2
 800826c:	4798      	blx	r3
 800826e:	4602      	mov	r2, r0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 fc2f 	bl	8009aec <USBD_LL_Start>
 800828e:	4603      	mov	r3, r0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082ba:	2303      	movs	r3, #3
 80082bc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d009      	beq.n	80082dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	78fa      	ldrb	r2, [r7, #3]
 80082d2:	4611      	mov	r1, r2
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d007      	beq.n	800830c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	78fa      	ldrb	r2, [r7, #3]
 8008306:	4611      	mov	r1, r2
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	4798      	blx	r3
  }

  return USBD_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 ff2b 	bl	8009184 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800833c:	461a      	mov	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800834a:	f003 031f 	and.w	r3, r3, #31
 800834e:	2b01      	cmp	r3, #1
 8008350:	d00e      	beq.n	8008370 <USBD_LL_SetupStage+0x5a>
 8008352:	2b01      	cmp	r3, #1
 8008354:	d302      	bcc.n	800835c <USBD_LL_SetupStage+0x46>
 8008356:	2b02      	cmp	r3, #2
 8008358:	d014      	beq.n	8008384 <USBD_LL_SetupStage+0x6e>
 800835a:	e01d      	b.n	8008398 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fa17 	bl	8008798 <USBD_StdDevReq>
 800836a:	4603      	mov	r3, r0
 800836c:	73fb      	strb	r3, [r7, #15]
      break;
 800836e:	e020      	b.n	80083b2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fa7b 	bl	8008874 <USBD_StdItfReq>
 800837e:	4603      	mov	r3, r0
 8008380:	73fb      	strb	r3, [r7, #15]
      break;
 8008382:	e016      	b.n	80083b2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fab7 	bl	8008900 <USBD_StdEPReq>
 8008392:	4603      	mov	r3, r0
 8008394:	73fb      	strb	r3, [r7, #15]
      break;
 8008396:	e00c      	b.n	80083b2 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800839e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fc1f 	bl	8009bea <USBD_LL_StallEP>
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]
      break;
 80083b0:	bf00      	nop
  }

  return ret;
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	460b      	mov	r3, r1
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083ca:	7afb      	ldrb	r3, [r7, #11]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d137      	bne.n	8008440 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d14a      	bne.n	8008478 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	689a      	ldr	r2, [r3, #8]
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d913      	bls.n	8008416 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	1ad2      	subs	r2, r2, r3
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	4293      	cmp	r3, r2
 8008406:	bf28      	it	cs
 8008408:	4613      	movcs	r3, r2
 800840a:	461a      	mov	r2, r3
 800840c:	6879      	ldr	r1, [r7, #4]
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 ff8f 	bl	8009332 <USBD_CtlContinueRx>
 8008414:	e030      	b.n	8008478 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008428:	2b03      	cmp	r3, #3
 800842a:	d105      	bne.n	8008438 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 ff8b 	bl	8009354 <USBD_CtlSendStatus>
 800843e:	e01b      	b.n	8008478 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d013      	beq.n	8008474 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008452:	2b03      	cmp	r3, #3
 8008454:	d10e      	bne.n	8008474 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	7afa      	ldrb	r2, [r7, #11]
 8008460:	4611      	mov	r1, r2
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	4798      	blx	r3
 8008466:	4603      	mov	r3, r0
 8008468:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800846a:	7dfb      	ldrb	r3, [r7, #23]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	e002      	b.n	800847a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008474:	2303      	movs	r3, #3
 8008476:	e000      	b.n	800847a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b086      	sub	sp, #24
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	460b      	mov	r3, r1
 800848c:	607a      	str	r2, [r7, #4]
 800848e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008490:	7afb      	ldrb	r3, [r7, #11]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d16a      	bne.n	800856c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3314      	adds	r3, #20
 800849a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d155      	bne.n	8008552 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	689a      	ldr	r2, [r3, #8]
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d914      	bls.n	80084dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	689a      	ldr	r2, [r3, #8]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	1ad2      	subs	r2, r2, r3
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 ff21 	bl	8009310 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084ce:	2300      	movs	r3, #0
 80084d0:	2200      	movs	r2, #0
 80084d2:	2100      	movs	r1, #0
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f001 fc32 	bl	8009d3e <USBD_LL_PrepareReceive>
 80084da:	e03a      	b.n	8008552 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	68da      	ldr	r2, [r3, #12]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d11c      	bne.n	8008522 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d316      	bcc.n	8008522 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084fe:	429a      	cmp	r2, r3
 8008500:	d20f      	bcs.n	8008522 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008502:	2200      	movs	r2, #0
 8008504:	2100      	movs	r1, #0
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 ff02 	bl	8009310 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008514:	2300      	movs	r3, #0
 8008516:	2200      	movs	r2, #0
 8008518:	2100      	movs	r1, #0
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f001 fc0f 	bl	8009d3e <USBD_LL_PrepareReceive>
 8008520:	e017      	b.n	8008552 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008534:	2b03      	cmp	r3, #3
 8008536:	d105      	bne.n	8008544 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008544:	2180      	movs	r1, #128	; 0x80
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f001 fb4f 	bl	8009bea <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 ff14 	bl	800937a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008558:	2b01      	cmp	r3, #1
 800855a:	d123      	bne.n	80085a4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7ff fe9b 	bl	8008298 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800856a:	e01b      	b.n	80085a4 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d013      	beq.n	80085a0 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800857e:	2b03      	cmp	r3, #3
 8008580:	d10e      	bne.n	80085a0 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	7afa      	ldrb	r2, [r7, #11]
 800858c:	4611      	mov	r1, r2
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	4798      	blx	r3
 8008592:	4603      	mov	r3, r0
 8008594:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800859c:	7dfb      	ldrb	r3, [r7, #23]
 800859e:	e002      	b.n	80085a6 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e000      	b.n	80085a6 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b082      	sub	sp, #8
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d009      	beq.n	80085f2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	6852      	ldr	r2, [r2, #4]
 80085ea:	b2d2      	uxtb	r2, r2
 80085ec:	4611      	mov	r1, r2
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085f2:	2340      	movs	r3, #64	; 0x40
 80085f4:	2200      	movs	r2, #0
 80085f6:	2100      	movs	r1, #0
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 fa92 	bl	8009b22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2240      	movs	r2, #64	; 0x40
 800860a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800860e:	2340      	movs	r3, #64	; 0x40
 8008610:	2200      	movs	r2, #0
 8008612:	2180      	movs	r1, #128	; 0x80
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 fa84 	bl	8009b22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2240      	movs	r2, #64	; 0x40
 8008624:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	78fa      	ldrb	r2, [r7, #3]
 8008640:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2204      	movs	r2, #4
 8008668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008688:	2b04      	cmp	r3, #4
 800868a:	d105      	bne.n	8008698 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b082      	sub	sp, #8
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d10b      	bne.n	80086d0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	460b      	mov	r3, r1
 80086e4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d009      	beq.n	8008752 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	6852      	ldr	r2, [r2, #4]
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	4611      	mov	r1, r2
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	4798      	blx	r3
  }

  return USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	3301      	adds	r3, #1
 8008772:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800877a:	8a3b      	ldrh	r3, [r7, #16]
 800877c:	021b      	lsls	r3, r3, #8
 800877e:	b21a      	sxth	r2, r3
 8008780:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008784:	4313      	orrs	r3, r2
 8008786:	b21b      	sxth	r3, r3
 8008788:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800878a:	89fb      	ldrh	r3, [r7, #14]
}
 800878c:	4618      	mov	r0, r3
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	d004      	beq.n	80087bc <USBD_StdDevReq+0x24>
 80087b2:	2b40      	cmp	r3, #64	; 0x40
 80087b4:	d002      	beq.n	80087bc <USBD_StdDevReq+0x24>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00a      	beq.n	80087d0 <USBD_StdDevReq+0x38>
 80087ba:	e050      	b.n	800885e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	4798      	blx	r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	73fb      	strb	r3, [r7, #15]
    break;
 80087ce:	e04b      	b.n	8008868 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	785b      	ldrb	r3, [r3, #1]
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	d83c      	bhi.n	8008852 <USBD_StdDevReq+0xba>
 80087d8:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <USBD_StdDevReq+0x48>)
 80087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087de:	bf00      	nop
 80087e0:	08008835 	.word	0x08008835
 80087e4:	08008849 	.word	0x08008849
 80087e8:	08008853 	.word	0x08008853
 80087ec:	0800883f 	.word	0x0800883f
 80087f0:	08008853 	.word	0x08008853
 80087f4:	08008813 	.word	0x08008813
 80087f8:	08008809 	.word	0x08008809
 80087fc:	08008853 	.word	0x08008853
 8008800:	0800882b 	.word	0x0800882b
 8008804:	0800881d 	.word	0x0800881d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f9ce 	bl	8008bac <USBD_GetDescriptor>
      break;
 8008810:	e024      	b.n	800885c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fb33 	bl	8008e80 <USBD_SetAddress>
      break;
 800881a:	e01f      	b.n	800885c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fb70 	bl	8008f04 <USBD_SetConfig>
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]
      break;
 8008828:	e018      	b.n	800885c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fc0d 	bl	800904c <USBD_GetConfig>
      break;
 8008832:	e013      	b.n	800885c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fc3c 	bl	80090b4 <USBD_GetStatus>
      break;
 800883c:	e00e      	b.n	800885c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fc6a 	bl	800911a <USBD_SetFeature>
      break;
 8008846:	e009      	b.n	800885c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fc79 	bl	8009142 <USBD_ClrFeature>
      break;
 8008850:	e004      	b.n	800885c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fccf 	bl	80091f8 <USBD_CtlError>
      break;
 800885a:	bf00      	nop
    }
    break;
 800885c:	e004      	b.n	8008868 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fcc9 	bl	80091f8 <USBD_CtlError>
    break;
 8008866:	bf00      	nop
  }

  return ret;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop

08008874 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800888a:	2b20      	cmp	r3, #32
 800888c:	d003      	beq.n	8008896 <USBD_StdItfReq+0x22>
 800888e:	2b40      	cmp	r3, #64	; 0x40
 8008890:	d001      	beq.n	8008896 <USBD_StdItfReq+0x22>
 8008892:	2b00      	cmp	r3, #0
 8008894:	d12a      	bne.n	80088ec <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889c:	3b01      	subs	r3, #1
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d81d      	bhi.n	80088de <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	889b      	ldrh	r3, [r3, #4]
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d813      	bhi.n	80088d4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	4798      	blx	r3
 80088ba:	4603      	mov	r3, r0
 80088bc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	88db      	ldrh	r3, [r3, #6]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d110      	bne.n	80088e8 <USBD_StdItfReq+0x74>
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10d      	bne.n	80088e8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fd41 	bl	8009354 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80088d2:	e009      	b.n	80088e8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fc8e 	bl	80091f8 <USBD_CtlError>
      break;
 80088dc:	e004      	b.n	80088e8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fc89 	bl	80091f8 <USBD_CtlError>
      break;
 80088e6:	e000      	b.n	80088ea <USBD_StdItfReq+0x76>
      break;
 80088e8:	bf00      	nop
    }
    break;
 80088ea:	e004      	b.n	80088f6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fc82 	bl	80091f8 <USBD_CtlError>
    break;
 80088f4:	bf00      	nop
  }

  return ret;
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	889b      	ldrh	r3, [r3, #4]
 8008912:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800891c:	2b20      	cmp	r3, #32
 800891e:	d004      	beq.n	800892a <USBD_StdEPReq+0x2a>
 8008920:	2b40      	cmp	r3, #64	; 0x40
 8008922:	d002      	beq.n	800892a <USBD_StdEPReq+0x2a>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00a      	beq.n	800893e <USBD_StdEPReq+0x3e>
 8008928:	e135      	b.n	8008b96 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	4798      	blx	r3
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]
    break;
 800893c:	e130      	b.n	8008ba0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	785b      	ldrb	r3, [r3, #1]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d03e      	beq.n	80089c4 <USBD_StdEPReq+0xc4>
 8008946:	2b03      	cmp	r3, #3
 8008948:	d002      	beq.n	8008950 <USBD_StdEPReq+0x50>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d077      	beq.n	8008a3e <USBD_StdEPReq+0x13e>
 800894e:	e11c      	b.n	8008b8a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008956:	2b02      	cmp	r3, #2
 8008958:	d002      	beq.n	8008960 <USBD_StdEPReq+0x60>
 800895a:	2b03      	cmp	r3, #3
 800895c:	d015      	beq.n	800898a <USBD_StdEPReq+0x8a>
 800895e:	e02b      	b.n	80089b8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00c      	beq.n	8008980 <USBD_StdEPReq+0x80>
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b80      	cmp	r3, #128	; 0x80
 800896a:	d009      	beq.n	8008980 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 f93a 	bl	8009bea <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008976:	2180      	movs	r1, #128	; 0x80
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 f936 	bl	8009bea <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800897e:	e020      	b.n	80089c2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fc38 	bl	80091f8 <USBD_CtlError>
        break;
 8008988:	e01b      	b.n	80089c2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	885b      	ldrh	r3, [r3, #2]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10e      	bne.n	80089b0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_StdEPReq+0xb0>
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	2b80      	cmp	r3, #128	; 0x80
 800899c:	d008      	beq.n	80089b0 <USBD_StdEPReq+0xb0>
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	88db      	ldrh	r3, [r3, #6]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 f91d 	bl	8009bea <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fccf 	bl	8009354 <USBD_CtlSendStatus>

        break;
 80089b6:	e004      	b.n	80089c2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fc1c 	bl	80091f8 <USBD_CtlError>
        break;
 80089c0:	bf00      	nop
      }
      break;
 80089c2:	e0e7      	b.n	8008b94 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d002      	beq.n	80089d4 <USBD_StdEPReq+0xd4>
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d015      	beq.n	80089fe <USBD_StdEPReq+0xfe>
 80089d2:	e02d      	b.n	8008a30 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00c      	beq.n	80089f4 <USBD_StdEPReq+0xf4>
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	2b80      	cmp	r3, #128	; 0x80
 80089de:	d009      	beq.n	80089f4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 f900 	bl	8009bea <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ea:	2180      	movs	r1, #128	; 0x80
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 f8fc 	bl	8009bea <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80089f2:	e023      	b.n	8008a3c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fbfe 	bl	80091f8 <USBD_CtlError>
        break;
 80089fc:	e01e      	b.n	8008a3c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	885b      	ldrh	r3, [r3, #2]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d119      	bne.n	8008a3a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d004      	beq.n	8008a1a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 f907 	bl	8009c28 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fc9a 	bl	8009354 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	4798      	blx	r3
        }
        break;
 8008a2e:	e004      	b.n	8008a3a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fbe0 	bl	80091f8 <USBD_CtlError>
        break;
 8008a38:	e000      	b.n	8008a3c <USBD_StdEPReq+0x13c>
        break;
 8008a3a:	bf00      	nop
      }
      break;
 8008a3c:	e0aa      	b.n	8008b94 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d002      	beq.n	8008a4e <USBD_StdEPReq+0x14e>
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d032      	beq.n	8008ab2 <USBD_StdEPReq+0x1b2>
 8008a4c:	e097      	b.n	8008b7e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d007      	beq.n	8008a64 <USBD_StdEPReq+0x164>
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	2b80      	cmp	r3, #128	; 0x80
 8008a58:	d004      	beq.n	8008a64 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fbcb 	bl	80091f8 <USBD_CtlError>
          break;
 8008a62:	e091      	b.n	8008b88 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	da0b      	bge.n	8008a84 <USBD_StdEPReq+0x184>
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	3310      	adds	r3, #16
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	4413      	add	r3, r2
 8008a80:	3304      	adds	r3, #4
 8008a82:	e00b      	b.n	8008a9c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	4413      	add	r3, r2
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fc15 	bl	80092da <USBD_CtlSendData>
        break;
 8008ab0:	e06a      	b.n	8008b88 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008ab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da11      	bge.n	8008ade <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	f003 020f 	and.w	r2, r3, #15
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	440b      	add	r3, r1
 8008acc:	3324      	adds	r3, #36	; 0x24
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d117      	bne.n	8008b04 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fb8e 	bl	80091f8 <USBD_CtlError>
            break;
 8008adc:	e054      	b.n	8008b88 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	f003 020f 	and.w	r2, r3, #15
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	440b      	add	r3, r1
 8008af0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d104      	bne.n	8008b04 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fb7b 	bl	80091f8 <USBD_CtlError>
            break;
 8008b02:	e041      	b.n	8008b88 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	da0b      	bge.n	8008b24 <USBD_StdEPReq+0x224>
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	3310      	adds	r3, #16
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	4413      	add	r3, r2
 8008b20:	3304      	adds	r3, #4
 8008b22:	e00b      	b.n	8008b3c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	4413      	add	r3, r2
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <USBD_StdEPReq+0x24a>
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2b80      	cmp	r3, #128	; 0x80
 8008b48:	d103      	bne.n	8008b52 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	e00e      	b.n	8008b70 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 f885 	bl	8009c66 <USBD_LL_IsStallEP>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2201      	movs	r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	e002      	b.n	8008b70 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2202      	movs	r2, #2
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fbaf 	bl	80092da <USBD_CtlSendData>
          break;
 8008b7c:	e004      	b.n	8008b88 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fb39 	bl	80091f8 <USBD_CtlError>
        break;
 8008b86:	bf00      	nop
      }
      break;
 8008b88:	e004      	b.n	8008b94 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fb33 	bl	80091f8 <USBD_CtlError>
      break;
 8008b92:	bf00      	nop
    }
    break;
 8008b94:	e004      	b.n	8008ba0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fb2d 	bl	80091f8 <USBD_CtlError>
    break;
 8008b9e:	bf00      	nop
  }

  return ret;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
	...

08008bac <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	885b      	ldrh	r3, [r3, #2]
 8008bc6:	0a1b      	lsrs	r3, r3, #8
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	2b06      	cmp	r3, #6
 8008bce:	f200 8128 	bhi.w	8008e22 <USBD_GetDescriptor+0x276>
 8008bd2:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <USBD_GetDescriptor+0x2c>)
 8008bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd8:	08008bf5 	.word	0x08008bf5
 8008bdc:	08008c0d 	.word	0x08008c0d
 8008be0:	08008c4d 	.word	0x08008c4d
 8008be4:	08008e23 	.word	0x08008e23
 8008be8:	08008e23 	.word	0x08008e23
 8008bec:	08008dc3 	.word	0x08008dc3
 8008bf0:	08008def 	.word	0x08008def
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	7c12      	ldrb	r2, [r2, #16]
 8008c00:	f107 0108 	add.w	r1, r7, #8
 8008c04:	4610      	mov	r0, r2
 8008c06:	4798      	blx	r3
 8008c08:	60f8      	str	r0, [r7, #12]
    break;
 8008c0a:	e112      	b.n	8008e32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	7c1b      	ldrb	r3, [r3, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10d      	bne.n	8008c30 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1c:	f107 0208 	add.w	r2, r7, #8
 8008c20:	4610      	mov	r0, r2
 8008c22:	4798      	blx	r3
 8008c24:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008c2e:	e100      	b.n	8008e32 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	f107 0208 	add.w	r2, r7, #8
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
 8008c40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3301      	adds	r3, #1
 8008c46:	2202      	movs	r2, #2
 8008c48:	701a      	strb	r2, [r3, #0]
    break;
 8008c4a:	e0f2      	b.n	8008e32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	885b      	ldrh	r3, [r3, #2]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b05      	cmp	r3, #5
 8008c54:	f200 80ac 	bhi.w	8008db0 <USBD_GetDescriptor+0x204>
 8008c58:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <USBD_GetDescriptor+0xb4>)
 8008c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5e:	bf00      	nop
 8008c60:	08008c79 	.word	0x08008c79
 8008c64:	08008cad 	.word	0x08008cad
 8008c68:	08008ce1 	.word	0x08008ce1
 8008c6c:	08008d15 	.word	0x08008d15
 8008c70:	08008d49 	.word	0x08008d49
 8008c74:	08008d7d 	.word	0x08008d7d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00b      	beq.n	8008c9c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	7c12      	ldrb	r2, [r2, #16]
 8008c90:	f107 0108 	add.w	r1, r7, #8
 8008c94:	4610      	mov	r0, r2
 8008c96:	4798      	blx	r3
 8008c98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c9a:	e091      	b.n	8008dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 faaa 	bl	80091f8 <USBD_CtlError>
        err++;
 8008ca4:	7afb      	ldrb	r3, [r7, #11]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	72fb      	strb	r3, [r7, #11]
      break;
 8008caa:	e089      	b.n	8008dc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00b      	beq.n	8008cd0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	7c12      	ldrb	r2, [r2, #16]
 8008cc4:	f107 0108 	add.w	r1, r7, #8
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4798      	blx	r3
 8008ccc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cce:	e077      	b.n	8008dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa90 	bl	80091f8 <USBD_CtlError>
        err++;
 8008cd8:	7afb      	ldrb	r3, [r7, #11]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	72fb      	strb	r3, [r7, #11]
      break;
 8008cde:	e06f      	b.n	8008dc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00b      	beq.n	8008d04 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	7c12      	ldrb	r2, [r2, #16]
 8008cf8:	f107 0108 	add.w	r1, r7, #8
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4798      	blx	r3
 8008d00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d02:	e05d      	b.n	8008dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fa76 	bl	80091f8 <USBD_CtlError>
        err++;
 8008d0c:	7afb      	ldrb	r3, [r7, #11]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	72fb      	strb	r3, [r7, #11]
      break;
 8008d12:	e055      	b.n	8008dc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00b      	beq.n	8008d38 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	7c12      	ldrb	r2, [r2, #16]
 8008d2c:	f107 0108 	add.w	r1, r7, #8
 8008d30:	4610      	mov	r0, r2
 8008d32:	4798      	blx	r3
 8008d34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d36:	e043      	b.n	8008dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa5c 	bl	80091f8 <USBD_CtlError>
        err++;
 8008d40:	7afb      	ldrb	r3, [r7, #11]
 8008d42:	3301      	adds	r3, #1
 8008d44:	72fb      	strb	r3, [r7, #11]
      break;
 8008d46:	e03b      	b.n	8008dc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	7c12      	ldrb	r2, [r2, #16]
 8008d60:	f107 0108 	add.w	r1, r7, #8
 8008d64:	4610      	mov	r0, r2
 8008d66:	4798      	blx	r3
 8008d68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d6a:	e029      	b.n	8008dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fa42 	bl	80091f8 <USBD_CtlError>
        err++;
 8008d74:	7afb      	ldrb	r3, [r7, #11]
 8008d76:	3301      	adds	r3, #1
 8008d78:	72fb      	strb	r3, [r7, #11]
      break;
 8008d7a:	e021      	b.n	8008dc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00b      	beq.n	8008da0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	7c12      	ldrb	r2, [r2, #16]
 8008d94:	f107 0108 	add.w	r1, r7, #8
 8008d98:	4610      	mov	r0, r2
 8008d9a:	4798      	blx	r3
 8008d9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d9e:	e00f      	b.n	8008dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fa28 	bl	80091f8 <USBD_CtlError>
        err++;
 8008da8:	7afb      	ldrb	r3, [r7, #11]
 8008daa:	3301      	adds	r3, #1
 8008dac:	72fb      	strb	r3, [r7, #11]
      break;
 8008dae:	e007      	b.n	8008dc0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fa20 	bl	80091f8 <USBD_CtlError>
      err++;
 8008db8:	7afb      	ldrb	r3, [r7, #11]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008dbe:	bf00      	nop
    }
    break;
 8008dc0:	e037      	b.n	8008e32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	7c1b      	ldrb	r3, [r3, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d109      	bne.n	8008dde <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd2:	f107 0208 	add.w	r2, r7, #8
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	4798      	blx	r3
 8008dda:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ddc:	e029      	b.n	8008e32 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fa09 	bl	80091f8 <USBD_CtlError>
      err++;
 8008de6:	7afb      	ldrb	r3, [r7, #11]
 8008de8:	3301      	adds	r3, #1
 8008dea:	72fb      	strb	r3, [r7, #11]
    break;
 8008dec:	e021      	b.n	8008e32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	7c1b      	ldrb	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10d      	bne.n	8008e12 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfe:	f107 0208 	add.w	r2, r7, #8
 8008e02:	4610      	mov	r0, r2
 8008e04:	4798      	blx	r3
 8008e06:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	2207      	movs	r2, #7
 8008e0e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e10:	e00f      	b.n	8008e32 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f9ef 	bl	80091f8 <USBD_CtlError>
      err++;
 8008e1a:	7afb      	ldrb	r3, [r7, #11]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	72fb      	strb	r3, [r7, #11]
    break;
 8008e20:	e007      	b.n	8008e32 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f9e7 	bl	80091f8 <USBD_CtlError>
    err++;
 8008e2a:	7afb      	ldrb	r3, [r7, #11]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	72fb      	strb	r3, [r7, #11]
    break;
 8008e30:	bf00      	nop
  }

  if (err != 0U)
 8008e32:	7afb      	ldrb	r3, [r7, #11]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d11e      	bne.n	8008e76 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	88db      	ldrh	r3, [r3, #6]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d016      	beq.n	8008e6e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008e40:	893b      	ldrh	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00e      	beq.n	8008e64 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	88da      	ldrh	r2, [r3, #6]
 8008e4a:	893b      	ldrh	r3, [r7, #8]
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	bf28      	it	cs
 8008e50:	4613      	movcs	r3, r2
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e56:	893b      	ldrh	r3, [r7, #8]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	68f9      	ldr	r1, [r7, #12]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fa3c 	bl	80092da <USBD_CtlSendData>
 8008e62:	e009      	b.n	8008e78 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f9c6 	bl	80091f8 <USBD_CtlError>
 8008e6c:	e004      	b.n	8008e78 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fa70 	bl	8009354 <USBD_CtlSendStatus>
 8008e74:	e000      	b.n	8008e78 <USBD_GetDescriptor+0x2cc>
    return;
 8008e76:	bf00      	nop
    }
  }
}
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop

08008e80 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	889b      	ldrh	r3, [r3, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d130      	bne.n	8008ef4 <USBD_SetAddress+0x74>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	88db      	ldrh	r3, [r3, #6]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d12c      	bne.n	8008ef4 <USBD_SetAddress+0x74>
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	885b      	ldrh	r3, [r3, #2]
 8008e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8008ea0:	d828      	bhi.n	8008ef4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	885b      	ldrh	r3, [r3, #2]
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d104      	bne.n	8008ec2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f99c 	bl	80091f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec0:	e01c      	b.n	8008efc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	7bfa      	ldrb	r2, [r7, #15]
 8008ec6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fef5 	bl	8009cbe <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fa3d 	bl	8009354 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee8:	e008      	b.n	8008efc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef2:	e003      	b.n	8008efc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f97e 	bl	80091f8 <USBD_CtlError>
  }
}
 8008efc:	bf00      	nop
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	885b      	ldrh	r3, [r3, #2]
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	4b4b      	ldr	r3, [pc, #300]	; (8009048 <USBD_SetConfig+0x144>)
 8008f1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f1c:	4b4a      	ldr	r3, [pc, #296]	; (8009048 <USBD_SetConfig+0x144>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d905      	bls.n	8008f30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f966 	bl	80091f8 <USBD_CtlError>
    return USBD_FAIL;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e087      	b.n	8009040 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d002      	beq.n	8008f40 <USBD_SetConfig+0x3c>
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d025      	beq.n	8008f8a <USBD_SetConfig+0x86>
 8008f3e:	e071      	b.n	8009024 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008f40:	4b41      	ldr	r3, [pc, #260]	; (8009048 <USBD_SetConfig+0x144>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01c      	beq.n	8008f82 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008f48:	4b3f      	ldr	r3, [pc, #252]	; (8009048 <USBD_SetConfig+0x144>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f52:	4b3d      	ldr	r3, [pc, #244]	; (8009048 <USBD_SetConfig+0x144>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff f9a8 	bl	80082ae <USBD_SetClassConfig>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f944 	bl	80091f8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f70:	e065      	b.n	800903e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f9ee 	bl	8009354 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2203      	movs	r2, #3
 8008f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f80:	e05d      	b.n	800903e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f9e6 	bl	8009354 <USBD_CtlSendStatus>
    break;
 8008f88:	e059      	b.n	800903e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008f8a:	4b2f      	ldr	r3, [pc, #188]	; (8009048 <USBD_SetConfig+0x144>)
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d112      	bne.n	8008fb8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2202      	movs	r2, #2
 8008f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008f9a:	4b2b      	ldr	r3, [pc, #172]	; (8009048 <USBD_SetConfig+0x144>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fa4:	4b28      	ldr	r3, [pc, #160]	; (8009048 <USBD_SetConfig+0x144>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff f99b 	bl	80082e6 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f9cf 	bl	8009354 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008fb6:	e042      	b.n	800903e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008fb8:	4b23      	ldr	r3, [pc, #140]	; (8009048 <USBD_SetConfig+0x144>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d02a      	beq.n	800901c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff f989 	bl	80082e6 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008fd4:	4b1c      	ldr	r3, [pc, #112]	; (8009048 <USBD_SetConfig+0x144>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fde:	4b1a      	ldr	r3, [pc, #104]	; (8009048 <USBD_SetConfig+0x144>)
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7ff f962 	bl	80082ae <USBD_SetClassConfig>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00f      	beq.n	8009014 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f8fe 	bl	80091f8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	b2db      	uxtb	r3, r3
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff f96e 	bl	80082e6 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2202      	movs	r2, #2
 800900e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009012:	e014      	b.n	800903e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f99d 	bl	8009354 <USBD_CtlSendStatus>
    break;
 800901a:	e010      	b.n	800903e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f999 	bl	8009354 <USBD_CtlSendStatus>
    break;
 8009022:	e00c      	b.n	800903e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f8e6 	bl	80091f8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800902c:	4b06      	ldr	r3, [pc, #24]	; (8009048 <USBD_SetConfig+0x144>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff f957 	bl	80082e6 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009038:	2303      	movs	r3, #3
 800903a:	73fb      	strb	r3, [r7, #15]
    break;
 800903c:	bf00      	nop
  }

  return ret;
 800903e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	200001e8 	.word	0x200001e8

0800904c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	88db      	ldrh	r3, [r3, #6]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d004      	beq.n	8009068 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f8c9 	bl	80091f8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009066:	e021      	b.n	80090ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906e:	2b01      	cmp	r3, #1
 8009070:	db17      	blt.n	80090a2 <USBD_GetConfig+0x56>
 8009072:	2b02      	cmp	r3, #2
 8009074:	dd02      	ble.n	800907c <USBD_GetConfig+0x30>
 8009076:	2b03      	cmp	r3, #3
 8009078:	d00b      	beq.n	8009092 <USBD_GetConfig+0x46>
 800907a:	e012      	b.n	80090a2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	3308      	adds	r3, #8
 8009086:	2201      	movs	r2, #1
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f925 	bl	80092da <USBD_CtlSendData>
      break;
 8009090:	e00c      	b.n	80090ac <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3304      	adds	r3, #4
 8009096:	2201      	movs	r2, #1
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f91d 	bl	80092da <USBD_CtlSendData>
      break;
 80090a0:	e004      	b.n	80090ac <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f8a7 	bl	80091f8 <USBD_CtlError>
      break;
 80090aa:	bf00      	nop
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c4:	3b01      	subs	r3, #1
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d81e      	bhi.n	8009108 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	88db      	ldrh	r3, [r3, #6]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d004      	beq.n	80090dc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f88f 	bl	80091f8 <USBD_CtlError>
      break;
 80090da:	e01a      	b.n	8009112 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d005      	beq.n	80090f8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f043 0202 	orr.w	r2, r3, #2
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	330c      	adds	r3, #12
 80090fc:	2202      	movs	r2, #2
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f8ea 	bl	80092da <USBD_CtlSendData>
    break;
 8009106:	e004      	b.n	8009112 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f874 	bl	80091f8 <USBD_CtlError>
    break;
 8009110:	bf00      	nop
  }
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	885b      	ldrh	r3, [r3, #2]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d106      	bne.n	800913a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f90d 	bl	8009354 <USBD_CtlSendStatus>
  }
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b082      	sub	sp, #8
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009152:	3b01      	subs	r3, #1
 8009154:	2b02      	cmp	r3, #2
 8009156:	d80b      	bhi.n	8009170 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	885b      	ldrh	r3, [r3, #2]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d10c      	bne.n	800917a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f8f3 	bl	8009354 <USBD_CtlSendStatus>
      }
      break;
 800916e:	e004      	b.n	800917a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f840 	bl	80091f8 <USBD_CtlError>
      break;
 8009178:	e000      	b.n	800917c <USBD_ClrFeature+0x3a>
      break;
 800917a:	bf00      	nop
  }
}
 800917c:	bf00      	nop
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3301      	adds	r3, #1
 800919e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	781a      	ldrb	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3301      	adds	r3, #1
 80091ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff fad4 	bl	800875c <SWAPBYTE>
 80091b4:	4603      	mov	r3, r0
 80091b6:	461a      	mov	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	3301      	adds	r3, #1
 80091c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3301      	adds	r3, #1
 80091c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f7ff fac7 	bl	800875c <SWAPBYTE>
 80091ce:	4603      	mov	r3, r0
 80091d0:	461a      	mov	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3301      	adds	r3, #1
 80091da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3301      	adds	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f7ff faba 	bl	800875c <SWAPBYTE>
 80091e8:	4603      	mov	r3, r0
 80091ea:	461a      	mov	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	80da      	strh	r2, [r3, #6]
}
 80091f0:	bf00      	nop
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009202:	2180      	movs	r1, #128	; 0x80
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fcf0 	bl	8009bea <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800920a:	2100      	movs	r1, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fcec 	bl	8009bea <USBD_LL_StallEP>
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b086      	sub	sp, #24
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009226:	2300      	movs	r3, #0
 8009228:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d036      	beq.n	800929e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009234:	6938      	ldr	r0, [r7, #16]
 8009236:	f000 f836 	bl	80092a6 <USBD_GetLen>
 800923a:	4603      	mov	r3, r0
 800923c:	3301      	adds	r3, #1
 800923e:	b29b      	uxth	r3, r3
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	4413      	add	r3, r2
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	7812      	ldrb	r2, [r2, #0]
 8009252:	701a      	strb	r2, [r3, #0]
  idx++;
 8009254:	7dfb      	ldrb	r3, [r7, #23]
 8009256:	3301      	adds	r3, #1
 8009258:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800925a:	7dfb      	ldrb	r3, [r7, #23]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	4413      	add	r3, r2
 8009260:	2203      	movs	r2, #3
 8009262:	701a      	strb	r2, [r3, #0]
  idx++;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	3301      	adds	r3, #1
 8009268:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800926a:	e013      	b.n	8009294 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	4413      	add	r3, r2
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	7812      	ldrb	r2, [r2, #0]
 8009276:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	3301      	adds	r3, #1
 800927c:	613b      	str	r3, [r7, #16]
    idx++;
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	3301      	adds	r3, #1
 8009282:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	4413      	add	r3, r2
 800928a:	2200      	movs	r2, #0
 800928c:	701a      	strb	r2, [r3, #0]
    idx++;
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	3301      	adds	r3, #1
 8009292:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e7      	bne.n	800926c <USBD_GetString+0x52>
 800929c:	e000      	b.n	80092a0 <USBD_GetString+0x86>
    return;
 800929e:	bf00      	nop
  }
}
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b085      	sub	sp, #20
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80092b6:	e005      	b.n	80092c4 <USBD_GetLen+0x1e>
  {
    len++;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
 80092ba:	3301      	adds	r3, #1
 80092bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1f5      	bne.n	80092b8 <USBD_GetLen+0x12>
  }

  return len;
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	60f8      	str	r0, [r7, #12]
 80092e2:	60b9      	str	r1, [r7, #8]
 80092e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2202      	movs	r2, #2
 80092ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	2100      	movs	r1, #0
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fcfb 	bl	8009cfc <USBD_LL_Transmit>

  return USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	2100      	movs	r1, #0
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 fcea 	bl	8009cfc <USBD_LL_Transmit>

  return USBD_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	2100      	movs	r1, #0
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fcfa 	bl	8009d3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2204      	movs	r2, #4
 8009360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009364:	2300      	movs	r3, #0
 8009366:	2200      	movs	r2, #0
 8009368:	2100      	movs	r1, #0
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fcc6 	bl	8009cfc <USBD_LL_Transmit>

  return USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2205      	movs	r2, #5
 8009386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800938a:	2300      	movs	r3, #0
 800938c:	2200      	movs	r2, #0
 800938e:	2100      	movs	r1, #0
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fcd4 	bl	8009d3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	4613      	mov	r3, r2
 80093ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80093ae:	2301      	movs	r3, #1
 80093b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80093b6:	4b1f      	ldr	r3, [pc, #124]	; (8009434 <FATFS_LinkDriverEx+0x94>)
 80093b8:	7a5b      	ldrb	r3, [r3, #9]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d131      	bne.n	8009424 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80093c0:	4b1c      	ldr	r3, [pc, #112]	; (8009434 <FATFS_LinkDriverEx+0x94>)
 80093c2:	7a5b      	ldrb	r3, [r3, #9]
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	461a      	mov	r2, r3
 80093c8:	4b1a      	ldr	r3, [pc, #104]	; (8009434 <FATFS_LinkDriverEx+0x94>)
 80093ca:	2100      	movs	r1, #0
 80093cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80093ce:	4b19      	ldr	r3, [pc, #100]	; (8009434 <FATFS_LinkDriverEx+0x94>)
 80093d0:	7a5b      	ldrb	r3, [r3, #9]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	4a17      	ldr	r2, [pc, #92]	; (8009434 <FATFS_LinkDriverEx+0x94>)
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4413      	add	r3, r2
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80093de:	4b15      	ldr	r3, [pc, #84]	; (8009434 <FATFS_LinkDriverEx+0x94>)
 80093e0:	7a5b      	ldrb	r3, [r3, #9]
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	461a      	mov	r2, r3
 80093e6:	4b13      	ldr	r3, [pc, #76]	; (8009434 <FATFS_LinkDriverEx+0x94>)
 80093e8:	4413      	add	r3, r2
 80093ea:	79fa      	ldrb	r2, [r7, #7]
 80093ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80093ee:	4b11      	ldr	r3, [pc, #68]	; (8009434 <FATFS_LinkDriverEx+0x94>)
 80093f0:	7a5b      	ldrb	r3, [r3, #9]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	1c5a      	adds	r2, r3, #1
 80093f6:	b2d1      	uxtb	r1, r2
 80093f8:	4a0e      	ldr	r2, [pc, #56]	; (8009434 <FATFS_LinkDriverEx+0x94>)
 80093fa:	7251      	strb	r1, [r2, #9]
 80093fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80093fe:	7dbb      	ldrb	r3, [r7, #22]
 8009400:	3330      	adds	r3, #48	; 0x30
 8009402:	b2da      	uxtb	r2, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	3301      	adds	r3, #1
 800940c:	223a      	movs	r2, #58	; 0x3a
 800940e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	3302      	adds	r3, #2
 8009414:	222f      	movs	r2, #47	; 0x2f
 8009416:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	3303      	adds	r3, #3
 800941c:	2200      	movs	r2, #0
 800941e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009424:	7dfb      	ldrb	r3, [r7, #23]
}
 8009426:	4618      	mov	r0, r3
 8009428:	371c      	adds	r7, #28
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	200001ec 	.word	0x200001ec

08009438 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009442:	2200      	movs	r2, #0
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7ff ffaa 	bl	80093a0 <FATFS_LinkDriverEx>
 800944c:	4603      	mov	r3, r0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800945c:	2200      	movs	r2, #0
 800945e:	4912      	ldr	r1, [pc, #72]	; (80094a8 <MX_USB_DEVICE_Init+0x50>)
 8009460:	4812      	ldr	r0, [pc, #72]	; (80094ac <MX_USB_DEVICE_Init+0x54>)
 8009462:	f7fe feb6 	bl	80081d2 <USBD_Init>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800946c:	f7f7 f976 	bl	800075c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8009470:	490f      	ldr	r1, [pc, #60]	; (80094b0 <MX_USB_DEVICE_Init+0x58>)
 8009472:	480e      	ldr	r0, [pc, #56]	; (80094ac <MX_USB_DEVICE_Init+0x54>)
 8009474:	f7fe fee3 	bl	800823e <USBD_RegisterClass>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800947e:	f7f7 f96d 	bl	800075c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8009482:	490c      	ldr	r1, [pc, #48]	; (80094b4 <MX_USB_DEVICE_Init+0x5c>)
 8009484:	4809      	ldr	r0, [pc, #36]	; (80094ac <MX_USB_DEVICE_Init+0x54>)
 8009486:	f7fd fbdf 	bl	8006c48 <USBD_MSC_RegisterStorage>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009490:	f7f7 f964 	bl	800075c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009494:	4805      	ldr	r0, [pc, #20]	; (80094ac <MX_USB_DEVICE_Init+0x54>)
 8009496:	f7fe fef3 	bl	8008280 <USBD_Start>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80094a0:	f7f7 f95c 	bl	800075c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094a4:	bf00      	nop
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	200000f4 	.word	0x200000f4
 80094ac:	200006f0 	.word	0x200006f0
 80094b0:	2000000c 	.word	0x2000000c
 80094b4:	20000144 	.word	0x20000144

080094b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	6039      	str	r1, [r7, #0]
 80094c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2212      	movs	r2, #18
 80094c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094ca:	4b03      	ldr	r3, [pc, #12]	; (80094d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	20000110 	.word	0x20000110

080094dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	4603      	mov	r3, r0
 80094e4:	6039      	str	r1, [r7, #0]
 80094e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	2204      	movs	r2, #4
 80094ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094ee:	4b03      	ldr	r3, [pc, #12]	; (80094fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	20000124 	.word	0x20000124

08009500 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	6039      	str	r1, [r7, #0]
 800950a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800950c:	79fb      	ldrb	r3, [r7, #7]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d105      	bne.n	800951e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	4907      	ldr	r1, [pc, #28]	; (8009534 <USBD_FS_ProductStrDescriptor+0x34>)
 8009516:	4808      	ldr	r0, [pc, #32]	; (8009538 <USBD_FS_ProductStrDescriptor+0x38>)
 8009518:	f7ff fe7f 	bl	800921a <USBD_GetString>
 800951c:	e004      	b.n	8009528 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	4904      	ldr	r1, [pc, #16]	; (8009534 <USBD_FS_ProductStrDescriptor+0x34>)
 8009522:	4805      	ldr	r0, [pc, #20]	; (8009538 <USBD_FS_ProductStrDescriptor+0x38>)
 8009524:	f7ff fe79 	bl	800921a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009528:	4b02      	ldr	r3, [pc, #8]	; (8009534 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	200009c0 	.word	0x200009c0
 8009538:	0800a010 	.word	0x0800a010

0800953c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	6039      	str	r1, [r7, #0]
 8009546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	4904      	ldr	r1, [pc, #16]	; (800955c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800954c:	4804      	ldr	r0, [pc, #16]	; (8009560 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800954e:	f7ff fe64 	bl	800921a <USBD_GetString>
  return USBD_StrDesc;
 8009552:	4b02      	ldr	r3, [pc, #8]	; (800955c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	200009c0 	.word	0x200009c0
 8009560:	0800a024 	.word	0x0800a024

08009564 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	6039      	str	r1, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	221a      	movs	r2, #26
 8009574:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009576:	f000 f843 	bl	8009600 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800957a:	4b02      	ldr	r3, [pc, #8]	; (8009584 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800957c:	4618      	mov	r0, r3
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20000128 	.word	0x20000128

08009588 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	6039      	str	r1, [r7, #0]
 8009592:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d105      	bne.n	80095a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	4907      	ldr	r1, [pc, #28]	; (80095bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800959e:	4808      	ldr	r0, [pc, #32]	; (80095c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095a0:	f7ff fe3b 	bl	800921a <USBD_GetString>
 80095a4:	e004      	b.n	80095b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	4904      	ldr	r1, [pc, #16]	; (80095bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80095aa:	4805      	ldr	r0, [pc, #20]	; (80095c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095ac:	f7ff fe35 	bl	800921a <USBD_GetString>
  }
  return USBD_StrDesc;
 80095b0:	4b02      	ldr	r3, [pc, #8]	; (80095bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	200009c0 	.word	0x200009c0
 80095c0:	0800a038 	.word	0x0800a038

080095c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	6039      	str	r1, [r7, #0]
 80095ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d105      	bne.n	80095e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	4907      	ldr	r1, [pc, #28]	; (80095f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095da:	4808      	ldr	r0, [pc, #32]	; (80095fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095dc:	f7ff fe1d 	bl	800921a <USBD_GetString>
 80095e0:	e004      	b.n	80095ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	4904      	ldr	r1, [pc, #16]	; (80095f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095e6:	4805      	ldr	r0, [pc, #20]	; (80095fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095e8:	f7ff fe17 	bl	800921a <USBD_GetString>
  }
  return USBD_StrDesc;
 80095ec:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	200009c0 	.word	0x200009c0
 80095fc:	0800a044 	.word	0x0800a044

08009600 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009606:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <Get_SerialNum+0x44>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800960c:	4b0e      	ldr	r3, [pc, #56]	; (8009648 <Get_SerialNum+0x48>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009612:	4b0e      	ldr	r3, [pc, #56]	; (800964c <Get_SerialNum+0x4c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4413      	add	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d009      	beq.n	800963a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009626:	2208      	movs	r2, #8
 8009628:	4909      	ldr	r1, [pc, #36]	; (8009650 <Get_SerialNum+0x50>)
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f000 f814 	bl	8009658 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009630:	2204      	movs	r2, #4
 8009632:	4908      	ldr	r1, [pc, #32]	; (8009654 <Get_SerialNum+0x54>)
 8009634:	68b8      	ldr	r0, [r7, #8]
 8009636:	f000 f80f 	bl	8009658 <IntToUnicode>
  }
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	1fff7a10 	.word	0x1fff7a10
 8009648:	1fff7a14 	.word	0x1fff7a14
 800964c:	1fff7a18 	.word	0x1fff7a18
 8009650:	2000012a 	.word	0x2000012a
 8009654:	2000013a 	.word	0x2000013a

08009658 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009658:	b480      	push	{r7}
 800965a:	b087      	sub	sp, #28
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	4613      	mov	r3, r2
 8009664:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800966a:	2300      	movs	r3, #0
 800966c:	75fb      	strb	r3, [r7, #23]
 800966e:	e027      	b.n	80096c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	0f1b      	lsrs	r3, r3, #28
 8009674:	2b09      	cmp	r3, #9
 8009676:	d80b      	bhi.n	8009690 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	0f1b      	lsrs	r3, r3, #28
 800967c:	b2da      	uxtb	r2, r3
 800967e:	7dfb      	ldrb	r3, [r7, #23]
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	4619      	mov	r1, r3
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	440b      	add	r3, r1
 8009688:	3230      	adds	r2, #48	; 0x30
 800968a:	b2d2      	uxtb	r2, r2
 800968c:	701a      	strb	r2, [r3, #0]
 800968e:	e00a      	b.n	80096a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	0f1b      	lsrs	r3, r3, #28
 8009694:	b2da      	uxtb	r2, r3
 8009696:	7dfb      	ldrb	r3, [r7, #23]
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	4619      	mov	r1, r3
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	440b      	add	r3, r1
 80096a0:	3237      	adds	r2, #55	; 0x37
 80096a2:	b2d2      	uxtb	r2, r2
 80096a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096ac:	7dfb      	ldrb	r3, [r7, #23]
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	3301      	adds	r3, #1
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	4413      	add	r3, r2
 80096b6:	2200      	movs	r2, #0
 80096b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	3301      	adds	r3, #1
 80096be:	75fb      	strb	r3, [r7, #23]
 80096c0:	7dfa      	ldrb	r2, [r7, #23]
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d3d3      	bcc.n	8009670 <IntToUnicode+0x18>
  }
}
 80096c8:	bf00      	nop
 80096ca:	371c      	adds	r7, #28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80096de:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	__IO uint32_t a12;
	 HAL_SD_GetCardInfo(&hsd, &SDCardInfo);
 80096fa:	490a      	ldr	r1, [pc, #40]	; (8009724 <STORAGE_GetCapacity_FS+0x38>)
 80096fc:	480a      	ldr	r0, [pc, #40]	; (8009728 <STORAGE_GetCapacity_FS+0x3c>)
 80096fe:	f7fa fb25 	bl	8003d4c <HAL_SD_GetCardInfo>
	 a12 = SDCardInfo.DeviceSize;
 8009702:	4b08      	ldr	r3, [pc, #32]	; (8009724 <STORAGE_GetCapacity_FS+0x38>)
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	617b      	str	r3, [r7, #20]
	  *block_num  = 2147483648/512;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800970e:	601a      	str	r2, [r3, #0]
	  *block_size = BLOCK_SIZE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009716:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8009718:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	20000bc0 	.word	0x20000bc0
 8009728:	20000200 	.word	0x20000200

0800972c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	4603      	mov	r3, r0
 8009734:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009736:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800974e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af02      	add	r7, sp, #8
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	607a      	str	r2, [r7, #4]
 8009766:	461a      	mov	r2, r3
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
 800976c:	4613      	mov	r3, r2
 800976e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
    //HAL_SD_ReadBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
	//memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
	HAL_SD_ReadBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
 8009770:	89ba      	ldrh	r2, [r7, #12]
 8009772:	230a      	movs	r3, #10
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	4613      	mov	r3, r2
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	68b9      	ldr	r1, [r7, #8]
 800977c:	4803      	ldr	r0, [pc, #12]	; (800978c <STORAGE_Read_FS+0x30>)
 800977e:	f7f9 fda9 	bl	80032d4 <HAL_SD_ReadBlocks>
  return (USBD_OK);
 8009782:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20000200 	.word	0x20000200

08009790 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af02      	add	r7, sp, #8
 8009796:	60b9      	str	r1, [r7, #8]
 8009798:	607a      	str	r2, [r7, #4]
 800979a:	461a      	mov	r2, r3
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]
 80097a0:	4613      	mov	r3, r2
 80097a2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
    //HAL_SD_WriteBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
	//memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
	HAL_SD_WriteBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
 80097a4:	89ba      	ldrh	r2, [r7, #12]
 80097a6:	230a      	movs	r3, #10
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	4613      	mov	r3, r2
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	68b9      	ldr	r1, [r7, #8]
 80097b0:	4803      	ldr	r0, [pc, #12]	; (80097c0 <STORAGE_Write_FS+0x30>)
 80097b2:	f7f9 ff87 	bl	80036c4 <HAL_SD_WriteBlocks>
  return (USBD_OK);
 80097b6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	20000200 	.word	0x20000200

080097c4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80097c4:	b480      	push	{r7}
 80097c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80097c8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08a      	sub	sp, #40	; 0x28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097dc:	f107 0314 	add.w	r3, r7, #20
 80097e0:	2200      	movs	r2, #0
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	605a      	str	r2, [r3, #4]
 80097e6:	609a      	str	r2, [r3, #8]
 80097e8:	60da      	str	r2, [r3, #12]
 80097ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097f4:	d13a      	bne.n	800986c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097f6:	2300      	movs	r3, #0
 80097f8:	613b      	str	r3, [r7, #16]
 80097fa:	4b1e      	ldr	r3, [pc, #120]	; (8009874 <HAL_PCD_MspInit+0xa0>)
 80097fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fe:	4a1d      	ldr	r2, [pc, #116]	; (8009874 <HAL_PCD_MspInit+0xa0>)
 8009800:	f043 0301 	orr.w	r3, r3, #1
 8009804:	6313      	str	r3, [r2, #48]	; 0x30
 8009806:	4b1b      	ldr	r3, [pc, #108]	; (8009874 <HAL_PCD_MspInit+0xa0>)
 8009808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	613b      	str	r3, [r7, #16]
 8009810:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8009812:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009818:	2302      	movs	r3, #2
 800981a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800981c:	2300      	movs	r3, #0
 800981e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009820:	2303      	movs	r3, #3
 8009822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009824:	230a      	movs	r3, #10
 8009826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009828:	f107 0314 	add.w	r3, r7, #20
 800982c:	4619      	mov	r1, r3
 800982e:	4812      	ldr	r0, [pc, #72]	; (8009878 <HAL_PCD_MspInit+0xa4>)
 8009830:	f7f7 fa76 	bl	8000d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009834:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <HAL_PCD_MspInit+0xa0>)
 8009836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009838:	4a0e      	ldr	r2, [pc, #56]	; (8009874 <HAL_PCD_MspInit+0xa0>)
 800983a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983e:	6353      	str	r3, [r2, #52]	; 0x34
 8009840:	2300      	movs	r3, #0
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <HAL_PCD_MspInit+0xa0>)
 8009846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009848:	4a0a      	ldr	r2, [pc, #40]	; (8009874 <HAL_PCD_MspInit+0xa0>)
 800984a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800984e:	6453      	str	r3, [r2, #68]	; 0x44
 8009850:	4b08      	ldr	r3, [pc, #32]	; (8009874 <HAL_PCD_MspInit+0xa0>)
 8009852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009858:	60fb      	str	r3, [r7, #12]
 800985a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800985c:	2200      	movs	r2, #0
 800985e:	2100      	movs	r1, #0
 8009860:	2043      	movs	r0, #67	; 0x43
 8009862:	f7f7 fa26 	bl	8000cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009866:	2043      	movs	r0, #67	; 0x43
 8009868:	f7f7 fa3f 	bl	8000cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800986c:	bf00      	nop
 800986e:	3728      	adds	r7, #40	; 0x28
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	40023800 	.word	0x40023800
 8009878:	40020000 	.word	0x40020000

0800987c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009890:	4619      	mov	r1, r3
 8009892:	4610      	mov	r0, r2
 8009894:	f7fe fd3f 	bl	8008316 <USBD_LL_SetupStage>
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80098b2:	78fa      	ldrb	r2, [r7, #3]
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	4613      	mov	r3, r2
 80098b8:	00db      	lsls	r3, r3, #3
 80098ba:	1a9b      	subs	r3, r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	440b      	add	r3, r1
 80098c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	78fb      	ldrb	r3, [r7, #3]
 80098c8:	4619      	mov	r1, r3
 80098ca:	f7fe fd77 	bl	80083bc <USBD_LL_DataOutStage>
}
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80098e8:	78fa      	ldrb	r2, [r7, #3]
 80098ea:	6879      	ldr	r1, [r7, #4]
 80098ec:	4613      	mov	r3, r2
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	1a9b      	subs	r3, r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	440b      	add	r3, r1
 80098f6:	3348      	adds	r3, #72	; 0x48
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	78fb      	ldrb	r3, [r7, #3]
 80098fc:	4619      	mov	r1, r3
 80098fe:	f7fe fdc0 	bl	8008482 <USBD_LL_DataInStage>
}
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fec4 	bl	80086a6 <USBD_LL_SOF>
}
 800991e:	bf00      	nop
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800992e:	2301      	movs	r3, #1
 8009930:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	2b02      	cmp	r3, #2
 8009938:	d001      	beq.n	800993e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800993a:	f7f6 ff0f 	bl	800075c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009944:	7bfa      	ldrb	r2, [r7, #15]
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f7fe fe71 	bl	8008630 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009954:	4618      	mov	r0, r3
 8009956:	f7fe fe2a 	bl	80085ae <USBD_LL_Reset>
}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe fe6c 	bl	8008650 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	6812      	ldr	r2, [r2, #0]
 8009986:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800998a:	f043 0301 	orr.w	r3, r3, #1
 800998e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d005      	beq.n	80099a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009998:	4b04      	ldr	r3, [pc, #16]	; (80099ac <HAL_PCD_SuspendCallback+0x48>)
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	4a03      	ldr	r2, [pc, #12]	; (80099ac <HAL_PCD_SuspendCallback+0x48>)
 800999e:	f043 0306 	orr.w	r3, r3, #6
 80099a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	e000ed00 	.word	0xe000ed00

080099b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe fe5b 	bl	800867a <USBD_LL_Resume>
}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099de:	78fa      	ldrb	r2, [r7, #3]
 80099e0:	4611      	mov	r1, r2
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe fe86 	bl	80086f4 <USBD_LL_IsoOUTIncomplete>
}
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	460b      	mov	r3, r1
 80099fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a02:	78fa      	ldrb	r2, [r7, #3]
 8009a04:	4611      	mov	r1, r2
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fe67 	bl	80086da <USBD_LL_IsoINIncomplete>
}
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe fe73 	bl	800870e <USBD_LL_DevConnected>
}
 8009a28:	bf00      	nop
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fe70 	bl	8008724 <USBD_LL_DevDisconnected>
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d13f      	bne.n	8009adc <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a5c:	4a22      	ldr	r2, [pc, #136]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a20      	ldr	r2, [pc, #128]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009a68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a6c:	4b1e      	ldr	r3, [pc, #120]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009a6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009a74:	4b1c      	ldr	r3, [pc, #112]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009a76:	2206      	movs	r2, #6
 8009a78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a7a:	4b1b      	ldr	r3, [pc, #108]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a80:	4b19      	ldr	r3, [pc, #100]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a86:	4b18      	ldr	r3, [pc, #96]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009a88:	2202      	movs	r2, #2
 8009a8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a8c:	4b16      	ldr	r3, [pc, #88]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a98:	4b13      	ldr	r3, [pc, #76]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009a9e:	4b12      	ldr	r3, [pc, #72]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009aa4:	4b10      	ldr	r3, [pc, #64]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009aaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ab0:	480d      	ldr	r0, [pc, #52]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009ab2:	f7f7 fadf 	bl	8001074 <HAL_PCD_Init>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8009abc:	f7f6 fe4e 	bl	800075c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ac0:	2180      	movs	r1, #128	; 0x80
 8009ac2:	4809      	ldr	r0, [pc, #36]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009ac4:	f7f8 fc9d 	bl	8002402 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009ac8:	2240      	movs	r2, #64	; 0x40
 8009aca:	2100      	movs	r1, #0
 8009acc:	4806      	ldr	r0, [pc, #24]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009ace:	f7f8 fc51 	bl	8002374 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ad2:	2280      	movs	r2, #128	; 0x80
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	4804      	ldr	r0, [pc, #16]	; (8009ae8 <USBD_LL_Init+0x9c>)
 8009ad8:	f7f8 fc4c 	bl	8002374 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	20020bec 	.word	0x20020bec

08009aec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7f7 fbda 	bl	80012bc <HAL_PCD_Start>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f94a 	bl	8009da8 <USBD_Get_USB_Status>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	4608      	mov	r0, r1
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	461a      	mov	r2, r3
 8009b30:	4603      	mov	r3, r0
 8009b32:	70fb      	strb	r3, [r7, #3]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70bb      	strb	r3, [r7, #2]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b4a:	78bb      	ldrb	r3, [r7, #2]
 8009b4c:	883a      	ldrh	r2, [r7, #0]
 8009b4e:	78f9      	ldrb	r1, [r7, #3]
 8009b50:	f7f7 ffeb 	bl	8001b2a <HAL_PCD_EP_Open>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 f924 	bl	8009da8 <USBD_Get_USB_Status>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	460b      	mov	r3, r1
 8009b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b88:	78fa      	ldrb	r2, [r7, #3]
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7f8 f834 	bl	8001bfa <HAL_PCD_EP_Close>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 f905 	bl	8009da8 <USBD_Get_USB_Status>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bc6:	78fa      	ldrb	r2, [r7, #3]
 8009bc8:	4611      	mov	r1, r2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7f8 f9c6 	bl	8001f5c <HAL_PCD_EP_Flush>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 f8e6 	bl	8009da8 <USBD_Get_USB_Status>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c04:	78fa      	ldrb	r2, [r7, #3]
 8009c06:	4611      	mov	r1, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7f8 f8ed 	bl	8001de8 <HAL_PCD_EP_SetStall>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 f8c7 	bl	8009da8 <USBD_Get_USB_Status>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c42:	78fa      	ldrb	r2, [r7, #3]
 8009c44:	4611      	mov	r1, r2
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7f8 f932 	bl	8001eb0 <HAL_PCD_EP_ClrStall>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 f8a8 	bl	8009da8 <USBD_Get_USB_Status>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b085      	sub	sp, #20
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	460b      	mov	r3, r1
 8009c70:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c78:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	da0b      	bge.n	8009c9a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009c82:	78fb      	ldrb	r3, [r7, #3]
 8009c84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c88:	68f9      	ldr	r1, [r7, #12]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	00db      	lsls	r3, r3, #3
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	440b      	add	r3, r1
 8009c94:	333e      	adds	r3, #62	; 0x3e
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	e00b      	b.n	8009cb2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009c9a:	78fb      	ldrb	r3, [r7, #3]
 8009c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ca0:	68f9      	ldr	r1, [r7, #12]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	00db      	lsls	r3, r3, #3
 8009ca6:	1a9b      	subs	r3, r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	440b      	add	r3, r1
 8009cac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009cb0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cd8:	78fa      	ldrb	r2, [r7, #3]
 8009cda:	4611      	mov	r1, r2
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7f7 feff 	bl	8001ae0 <HAL_PCD_SetAddress>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ce6:	7bfb      	ldrb	r3, [r7, #15]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 f85d 	bl	8009da8 <USBD_Get_USB_Status>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	607a      	str	r2, [r7, #4]
 8009d06:	603b      	str	r3, [r7, #0]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d1a:	7af9      	ldrb	r1, [r7, #11]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	f7f8 f818 	bl	8001d54 <HAL_PCD_EP_Transmit>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 f83c 	bl	8009da8 <USBD_Get_USB_Status>
 8009d30:	4603      	mov	r3, r0
 8009d32:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009d34:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b086      	sub	sp, #24
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	603b      	str	r3, [r7, #0]
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d5c:	7af9      	ldrb	r1, [r7, #11]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	f7f7 ff94 	bl	8001c8e <HAL_PCD_EP_Receive>
 8009d66:	4603      	mov	r3, r0
 8009d68:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 f81b 	bl	8009da8 <USBD_Get_USB_Status>
 8009d72:	4603      	mov	r3, r0
 8009d74:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009d76:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3718      	adds	r7, #24
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d92:	78fa      	ldrb	r2, [r7, #3]
 8009d94:	4611      	mov	r1, r2
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7f7 ffc4 	bl	8001d24 <HAL_PCD_EP_GetRxCount>
 8009d9c:	4603      	mov	r3, r0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d817      	bhi.n	8009dec <USBD_Get_USB_Status+0x44>
 8009dbc:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <USBD_Get_USB_Status+0x1c>)
 8009dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc2:	bf00      	nop
 8009dc4:	08009dd5 	.word	0x08009dd5
 8009dc8:	08009ddb 	.word	0x08009ddb
 8009dcc:	08009de1 	.word	0x08009de1
 8009dd0:	08009de7 	.word	0x08009de7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd8:	e00b      	b.n	8009df2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8009dde:	e008      	b.n	8009df2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009de0:	2301      	movs	r3, #1
 8009de2:	73fb      	strb	r3, [r7, #15]
    break;
 8009de4:	e005      	b.n	8009df2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009de6:	2303      	movs	r3, #3
 8009de8:	73fb      	strb	r3, [r7, #15]
    break;
 8009dea:	e002      	b.n	8009df2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009dec:	2303      	movs	r3, #3
 8009dee:	73fb      	strb	r3, [r7, #15]
    break;
 8009df0:	bf00      	nop
  }
  return usb_status;
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <__errno>:
 8009e00:	4b01      	ldr	r3, [pc, #4]	; (8009e08 <__errno+0x8>)
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	20000164 	.word	0x20000164

08009e0c <__libc_init_array>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	4e0d      	ldr	r6, [pc, #52]	; (8009e44 <__libc_init_array+0x38>)
 8009e10:	4c0d      	ldr	r4, [pc, #52]	; (8009e48 <__libc_init_array+0x3c>)
 8009e12:	1ba4      	subs	r4, r4, r6
 8009e14:	10a4      	asrs	r4, r4, #2
 8009e16:	2500      	movs	r5, #0
 8009e18:	42a5      	cmp	r5, r4
 8009e1a:	d109      	bne.n	8009e30 <__libc_init_array+0x24>
 8009e1c:	4e0b      	ldr	r6, [pc, #44]	; (8009e4c <__libc_init_array+0x40>)
 8009e1e:	4c0c      	ldr	r4, [pc, #48]	; (8009e50 <__libc_init_array+0x44>)
 8009e20:	f000 f8ea 	bl	8009ff8 <_init>
 8009e24:	1ba4      	subs	r4, r4, r6
 8009e26:	10a4      	asrs	r4, r4, #2
 8009e28:	2500      	movs	r5, #0
 8009e2a:	42a5      	cmp	r5, r4
 8009e2c:	d105      	bne.n	8009e3a <__libc_init_array+0x2e>
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e34:	4798      	blx	r3
 8009e36:	3501      	adds	r5, #1
 8009e38:	e7ee      	b.n	8009e18 <__libc_init_array+0xc>
 8009e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e3e:	4798      	blx	r3
 8009e40:	3501      	adds	r5, #1
 8009e42:	e7f2      	b.n	8009e2a <__libc_init_array+0x1e>
 8009e44:	0800a0a4 	.word	0x0800a0a4
 8009e48:	0800a0a4 	.word	0x0800a0a4
 8009e4c:	0800a0a4 	.word	0x0800a0a4
 8009e50:	0800a0a8 	.word	0x0800a0a8

08009e54 <malloc>:
 8009e54:	4b02      	ldr	r3, [pc, #8]	; (8009e60 <malloc+0xc>)
 8009e56:	4601      	mov	r1, r0
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	f000 b861 	b.w	8009f20 <_malloc_r>
 8009e5e:	bf00      	nop
 8009e60:	20000164 	.word	0x20000164

08009e64 <free>:
 8009e64:	4b02      	ldr	r3, [pc, #8]	; (8009e70 <free+0xc>)
 8009e66:	4601      	mov	r1, r0
 8009e68:	6818      	ldr	r0, [r3, #0]
 8009e6a:	f000 b80b 	b.w	8009e84 <_free_r>
 8009e6e:	bf00      	nop
 8009e70:	20000164 	.word	0x20000164

08009e74 <memset>:
 8009e74:	4402      	add	r2, r0
 8009e76:	4603      	mov	r3, r0
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d100      	bne.n	8009e7e <memset+0xa>
 8009e7c:	4770      	bx	lr
 8009e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e82:	e7f9      	b.n	8009e78 <memset+0x4>

08009e84 <_free_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4605      	mov	r5, r0
 8009e88:	2900      	cmp	r1, #0
 8009e8a:	d045      	beq.n	8009f18 <_free_r+0x94>
 8009e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e90:	1f0c      	subs	r4, r1, #4
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	bfb8      	it	lt
 8009e96:	18e4      	addlt	r4, r4, r3
 8009e98:	f000 f8ac 	bl	8009ff4 <__malloc_lock>
 8009e9c:	4a1f      	ldr	r2, [pc, #124]	; (8009f1c <_free_r+0x98>)
 8009e9e:	6813      	ldr	r3, [r2, #0]
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	b933      	cbnz	r3, 8009eb2 <_free_r+0x2e>
 8009ea4:	6063      	str	r3, [r4, #4]
 8009ea6:	6014      	str	r4, [r2, #0]
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eae:	f000 b8a2 	b.w	8009ff6 <__malloc_unlock>
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	d90c      	bls.n	8009ed0 <_free_r+0x4c>
 8009eb6:	6821      	ldr	r1, [r4, #0]
 8009eb8:	1862      	adds	r2, r4, r1
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	bf04      	itt	eq
 8009ebe:	681a      	ldreq	r2, [r3, #0]
 8009ec0:	685b      	ldreq	r3, [r3, #4]
 8009ec2:	6063      	str	r3, [r4, #4]
 8009ec4:	bf04      	itt	eq
 8009ec6:	1852      	addeq	r2, r2, r1
 8009ec8:	6022      	streq	r2, [r4, #0]
 8009eca:	6004      	str	r4, [r0, #0]
 8009ecc:	e7ec      	b.n	8009ea8 <_free_r+0x24>
 8009ece:	4613      	mov	r3, r2
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	b10a      	cbz	r2, 8009ed8 <_free_r+0x54>
 8009ed4:	42a2      	cmp	r2, r4
 8009ed6:	d9fa      	bls.n	8009ece <_free_r+0x4a>
 8009ed8:	6819      	ldr	r1, [r3, #0]
 8009eda:	1858      	adds	r0, r3, r1
 8009edc:	42a0      	cmp	r0, r4
 8009ede:	d10b      	bne.n	8009ef8 <_free_r+0x74>
 8009ee0:	6820      	ldr	r0, [r4, #0]
 8009ee2:	4401      	add	r1, r0
 8009ee4:	1858      	adds	r0, r3, r1
 8009ee6:	4282      	cmp	r2, r0
 8009ee8:	6019      	str	r1, [r3, #0]
 8009eea:	d1dd      	bne.n	8009ea8 <_free_r+0x24>
 8009eec:	6810      	ldr	r0, [r2, #0]
 8009eee:	6852      	ldr	r2, [r2, #4]
 8009ef0:	605a      	str	r2, [r3, #4]
 8009ef2:	4401      	add	r1, r0
 8009ef4:	6019      	str	r1, [r3, #0]
 8009ef6:	e7d7      	b.n	8009ea8 <_free_r+0x24>
 8009ef8:	d902      	bls.n	8009f00 <_free_r+0x7c>
 8009efa:	230c      	movs	r3, #12
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	e7d3      	b.n	8009ea8 <_free_r+0x24>
 8009f00:	6820      	ldr	r0, [r4, #0]
 8009f02:	1821      	adds	r1, r4, r0
 8009f04:	428a      	cmp	r2, r1
 8009f06:	bf04      	itt	eq
 8009f08:	6811      	ldreq	r1, [r2, #0]
 8009f0a:	6852      	ldreq	r2, [r2, #4]
 8009f0c:	6062      	str	r2, [r4, #4]
 8009f0e:	bf04      	itt	eq
 8009f10:	1809      	addeq	r1, r1, r0
 8009f12:	6021      	streq	r1, [r4, #0]
 8009f14:	605c      	str	r4, [r3, #4]
 8009f16:	e7c7      	b.n	8009ea8 <_free_r+0x24>
 8009f18:	bd38      	pop	{r3, r4, r5, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200001f8 	.word	0x200001f8

08009f20 <_malloc_r>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	1ccd      	adds	r5, r1, #3
 8009f24:	f025 0503 	bic.w	r5, r5, #3
 8009f28:	3508      	adds	r5, #8
 8009f2a:	2d0c      	cmp	r5, #12
 8009f2c:	bf38      	it	cc
 8009f2e:	250c      	movcc	r5, #12
 8009f30:	2d00      	cmp	r5, #0
 8009f32:	4606      	mov	r6, r0
 8009f34:	db01      	blt.n	8009f3a <_malloc_r+0x1a>
 8009f36:	42a9      	cmp	r1, r5
 8009f38:	d903      	bls.n	8009f42 <_malloc_r+0x22>
 8009f3a:	230c      	movs	r3, #12
 8009f3c:	6033      	str	r3, [r6, #0]
 8009f3e:	2000      	movs	r0, #0
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	f000 f857 	bl	8009ff4 <__malloc_lock>
 8009f46:	4a21      	ldr	r2, [pc, #132]	; (8009fcc <_malloc_r+0xac>)
 8009f48:	6814      	ldr	r4, [r2, #0]
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	b991      	cbnz	r1, 8009f74 <_malloc_r+0x54>
 8009f4e:	4c20      	ldr	r4, [pc, #128]	; (8009fd0 <_malloc_r+0xb0>)
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	b91b      	cbnz	r3, 8009f5c <_malloc_r+0x3c>
 8009f54:	4630      	mov	r0, r6
 8009f56:	f000 f83d 	bl	8009fd4 <_sbrk_r>
 8009f5a:	6020      	str	r0, [r4, #0]
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f000 f838 	bl	8009fd4 <_sbrk_r>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	d124      	bne.n	8009fb2 <_malloc_r+0x92>
 8009f68:	230c      	movs	r3, #12
 8009f6a:	6033      	str	r3, [r6, #0]
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f000 f842 	bl	8009ff6 <__malloc_unlock>
 8009f72:	e7e4      	b.n	8009f3e <_malloc_r+0x1e>
 8009f74:	680b      	ldr	r3, [r1, #0]
 8009f76:	1b5b      	subs	r3, r3, r5
 8009f78:	d418      	bmi.n	8009fac <_malloc_r+0x8c>
 8009f7a:	2b0b      	cmp	r3, #11
 8009f7c:	d90f      	bls.n	8009f9e <_malloc_r+0x7e>
 8009f7e:	600b      	str	r3, [r1, #0]
 8009f80:	50cd      	str	r5, [r1, r3]
 8009f82:	18cc      	adds	r4, r1, r3
 8009f84:	4630      	mov	r0, r6
 8009f86:	f000 f836 	bl	8009ff6 <__malloc_unlock>
 8009f8a:	f104 000b 	add.w	r0, r4, #11
 8009f8e:	1d23      	adds	r3, r4, #4
 8009f90:	f020 0007 	bic.w	r0, r0, #7
 8009f94:	1ac3      	subs	r3, r0, r3
 8009f96:	d0d3      	beq.n	8009f40 <_malloc_r+0x20>
 8009f98:	425a      	negs	r2, r3
 8009f9a:	50e2      	str	r2, [r4, r3]
 8009f9c:	e7d0      	b.n	8009f40 <_malloc_r+0x20>
 8009f9e:	428c      	cmp	r4, r1
 8009fa0:	684b      	ldr	r3, [r1, #4]
 8009fa2:	bf16      	itet	ne
 8009fa4:	6063      	strne	r3, [r4, #4]
 8009fa6:	6013      	streq	r3, [r2, #0]
 8009fa8:	460c      	movne	r4, r1
 8009faa:	e7eb      	b.n	8009f84 <_malloc_r+0x64>
 8009fac:	460c      	mov	r4, r1
 8009fae:	6849      	ldr	r1, [r1, #4]
 8009fb0:	e7cc      	b.n	8009f4c <_malloc_r+0x2c>
 8009fb2:	1cc4      	adds	r4, r0, #3
 8009fb4:	f024 0403 	bic.w	r4, r4, #3
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d005      	beq.n	8009fc8 <_malloc_r+0xa8>
 8009fbc:	1a21      	subs	r1, r4, r0
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f000 f808 	bl	8009fd4 <_sbrk_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d0cf      	beq.n	8009f68 <_malloc_r+0x48>
 8009fc8:	6025      	str	r5, [r4, #0]
 8009fca:	e7db      	b.n	8009f84 <_malloc_r+0x64>
 8009fcc:	200001f8 	.word	0x200001f8
 8009fd0:	200001fc 	.word	0x200001fc

08009fd4 <_sbrk_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	4c06      	ldr	r4, [pc, #24]	; (8009ff0 <_sbrk_r+0x1c>)
 8009fd8:	2300      	movs	r3, #0
 8009fda:	4605      	mov	r5, r0
 8009fdc:	4608      	mov	r0, r1
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	f7f6 fc8c 	bl	80008fc <_sbrk>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	d102      	bne.n	8009fee <_sbrk_r+0x1a>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	b103      	cbz	r3, 8009fee <_sbrk_r+0x1a>
 8009fec:	602b      	str	r3, [r5, #0]
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	20020ff4 	.word	0x20020ff4

08009ff4 <__malloc_lock>:
 8009ff4:	4770      	bx	lr

08009ff6 <__malloc_unlock>:
 8009ff6:	4770      	bx	lr

08009ff8 <_init>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	bf00      	nop
 8009ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffe:	bc08      	pop	{r3}
 800a000:	469e      	mov	lr, r3
 800a002:	4770      	bx	lr

0800a004 <_fini>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	bf00      	nop
 800a008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00a:	bc08      	pop	{r3}
 800a00c:	469e      	mov	lr, r3
 800a00e:	4770      	bx	lr
