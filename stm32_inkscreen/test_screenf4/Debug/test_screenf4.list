
test_screenf4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003954  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004604  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008130  08008130  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008130  08008130  00018130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008138  08008138  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008138  08008138  00018138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800813c  0800813c  0001813c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000098  080081d8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20000180  080081d8  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000beaf  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f38  00000000  00000000  0002bf77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a68  00000000  00000000  0002deb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000948  00000000  00000000  0002e918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f60  00000000  00000000  0002f260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009477  00000000  00000000  000511c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7e58  00000000  00000000  0005a637  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012248f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee8  00000000  00000000  0012250c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000098 	.word	0x20000098
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003b14 	.word	0x08003b14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000009c 	.word	0x2000009c
 8000214:	08003b14 	.word	0x08003b14

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <EPD_Init>:
#include <stdlib.h>
#include "epd2in7.h"

#include "epdif.h"

int EPD_Init(EPD* epd) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  epd->reset_pin = RST_PIN;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
  epd->dc_pin = DC_PIN;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2202      	movs	r2, #2
 800052a:	605a      	str	r2, [r3, #4]
  epd->cs_pin = CS_PIN;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  epd->busy_pin = BUSY_PIN;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2203      	movs	r2, #3
 8000536:	60da      	str	r2, [r3, #12]
  epd->width = EPD_WIDTH;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	611a      	str	r2, [r3, #16]
  epd->height = EPD_HEIGHT;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f44f 7294 	mov.w	r2, #296	; 0x128
 8000544:	615a      	str	r2, [r3, #20]
  
  /* this calls the peripheral hardware interface, see epdif */
  if (EpdInitCallback() != 0) {
 8000546:	f000 fa95 	bl	8000a74 <EpdInitCallback>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <EPD_Init+0x3e>
    return -1;
 8000550:	f04f 33ff 	mov.w	r3, #4294967295
 8000554:	e0ad      	b.n	80006b2 <EPD_Init+0x19a>
  }
  
    /* EPD hardware init start */
    EPD_Reset(epd);
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 f916 	bl	8000788 <EPD_Reset>
    EPD_SendCommand(epd, POWER_SETTING);
 800055c:	2101      	movs	r1, #1
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f000 f8d2 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x03);                  // VDS_EN, VDG_EN
 8000564:	2103      	movs	r1, #3
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f8e3 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x00);                  // VCOM_HV, VGHL_LV[1], VGHL_LV[0]
 800056c:	2100      	movs	r1, #0
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 f8df 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x2b);                  // VDH
 8000574:	212b      	movs	r1, #43	; 0x2b
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 f8db 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x2b);                  // VDL
 800057c:	212b      	movs	r1, #43	; 0x2b
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f8d7 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x09);                  // VDHR
 8000584:	2109      	movs	r1, #9
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f000 f8d3 	bl	8000732 <EPD_SendData>
    EPD_SendCommand(epd, BOOSTER_SOFT_START);
 800058c:	2106      	movs	r1, #6
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 f8ba 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x07);
 8000594:	2107      	movs	r1, #7
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f8cb 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x07);
 800059c:	2107      	movs	r1, #7
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 f8c7 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x17);
 80005a4:	2117      	movs	r1, #23
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f8c3 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 80005ac:	21f8      	movs	r1, #248	; 0xf8
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 f8aa 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x60);
 80005b4:	2160      	movs	r1, #96	; 0x60
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 f8bb 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0xA5);
 80005bc:	21a5      	movs	r1, #165	; 0xa5
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 f8b7 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 80005c4:	21f8      	movs	r1, #248	; 0xf8
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 f89e 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x89);
 80005cc:	2189      	movs	r1, #137	; 0x89
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f8af 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0xA5);
 80005d4:	21a5      	movs	r1, #165	; 0xa5
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f8ab 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 80005dc:	21f8      	movs	r1, #248	; 0xf8
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f892 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x90);
 80005e4:	2190      	movs	r1, #144	; 0x90
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 f8a3 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x00);
 80005ec:	2100      	movs	r1, #0
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f89f 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 80005f4:	21f8      	movs	r1, #248	; 0xf8
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f886 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x93);
 80005fc:	2193      	movs	r1, #147	; 0x93
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f897 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x2A);
 8000604:	212a      	movs	r1, #42	; 0x2a
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f893 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 800060c:	21f8      	movs	r1, #248	; 0xf8
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f87a 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0xA0);
 8000614:	21a0      	movs	r1, #160	; 0xa0
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f88b 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0xA5);
 800061c:	21a5      	movs	r1, #165	; 0xa5
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f887 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 8000624:	21f8      	movs	r1, #248	; 0xf8
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f86e 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0xA1);
 800062c:	21a1      	movs	r1, #161	; 0xa1
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f87f 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x00);
 8000634:	2100      	movs	r1, #0
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f87b 	bl	8000732 <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 800063c:	21f8      	movs	r1, #248	; 0xf8
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f862 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x73);
 8000644:	2173      	movs	r1, #115	; 0x73
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f873 	bl	8000732 <EPD_SendData>
    EPD_SendData(epd, 0x41);
 800064c:	2141      	movs	r1, #65	; 0x41
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f86f 	bl	8000732 <EPD_SendData>
    EPD_SendCommand(epd, PARTIAL_DISPLAY_REFRESH);
 8000654:	2116      	movs	r1, #22
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f856 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x00);
 800065c:	2100      	movs	r1, #0
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f867 	bl	8000732 <EPD_SendData>
    EPD_SendCommand(epd, POWER_ON);
 8000664:	2104      	movs	r1, #4
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 f84e 	bl	8000708 <EPD_SendCommand>
    EPD_WaitUntilIdle(epd);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f875 	bl	800075c <EPD_WaitUntilIdle>

    EPD_SendCommand(epd, PANEL_SETTING);
 8000672:	2100      	movs	r1, #0
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f847 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0xAF);        //KW-BF   KWR-AF    BWROTP 0f
 800067a:	21af      	movs	r1, #175	; 0xaf
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f858 	bl	8000732 <EPD_SendData>
    EPD_SendCommand(epd, PLL_CONTROL);
 8000682:	2130      	movs	r1, #48	; 0x30
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f83f 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x3A);       //3A 100HZ   29 150Hz 39 200HZ    31 171HZ
 800068a:	213a      	movs	r1, #58	; 0x3a
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 f850 	bl	8000732 <EPD_SendData>
    EPD_SendCommand(epd, VCM_DC_SETTING_REGISTER);
 8000692:	2182      	movs	r1, #130	; 0x82
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f837 	bl	8000708 <EPD_SendCommand>
    EPD_SendData(epd, 0x12);
 800069a:	2112      	movs	r1, #18
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f848 	bl	8000732 <EPD_SendData>
    EPD_DelayMs(epd, 2);
 80006a2:	2102      	movs	r1, #2
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 f823 	bl	80006f0 <EPD_DelayMs>
    EPD_SetLut(epd);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 f88a 	bl	80007c4 <EPD_SetLut>
    /* EPD hardware init end */
    return 0;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <EPD_DigitalWrite>:

void EPD_DigitalWrite(EPD* epd, int pin, int value) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b084      	sub	sp, #16
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
  EpdDigitalWriteCallback(pin, value);
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	68b8      	ldr	r0, [r7, #8]
 80006ca:	f000 f957 	bl	800097c <EpdDigitalWriteCallback>
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <EPD_DigitalRead>:

int EPD_DigitalRead(EPD* epd, int pin) {
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	6039      	str	r1, [r7, #0]
  return EpdDigitalReadCallback(pin);
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f000 f977 	bl	80009d4 <EpdDigitalReadCallback>
 80006e6:	4603      	mov	r3, r0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <EPD_DelayMs>:

void EPD_DelayMs(EPD* epd, unsigned int delaytime) {  // 1ms
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  EpdDelayMsCallback(delaytime);
 80006fa:	6838      	ldr	r0, [r7, #0]
 80006fc:	f000 f988 	bl	8000a10 <EpdDelayMsCallback>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <EPD_SendCommand>:

void EPD_SendCommand(EPD* epd, unsigned char command) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, LOW);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffcc 	bl	80006ba <EPD_DigitalWrite>
  EpdSpiTransferCallback(command);
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f97f 	bl	8000a28 <EpdSpiTransferCallback>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <EPD_SendData>:

void EPD_SendData(EPD* epd, unsigned char data) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, HIGH);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	4619      	mov	r1, r3
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ffb7 	bl	80006ba <EPD_DigitalWrite>
  EpdSpiTransferCallback(data);
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f96a 	bl	8000a28 <EpdSpiTransferCallback>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <EPD_WaitUntilIdle>:

void EPD_WaitUntilIdle(EPD* epd) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  while(EPD_DigitalRead(epd, epd->busy_pin) == 0) {      //0: busy, 1: idle
 8000764:	e003      	b.n	800076e <EPD_WaitUntilIdle+0x12>
    EPD_DelayMs(epd, 100);
 8000766:	2164      	movs	r1, #100	; 0x64
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ffc1 	bl	80006f0 <EPD_DelayMs>
  while(EPD_DigitalRead(epd, epd->busy_pin) == 0) {      //0: busy, 1: idle
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	4619      	mov	r1, r3
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ffae 	bl	80006d6 <EPD_DigitalRead>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f2      	beq.n	8000766 <EPD_WaitUntilIdle+0xa>
  }      
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <EPD_Reset>:

void EPD_Reset(EPD* epd) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  EPD_DigitalWrite(epd, epd->reset_pin, LOW);                //module reset    
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff8e 	bl	80006ba <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);
 800079e:	21c8      	movs	r1, #200	; 0xc8
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ffa5 	bl	80006f0 <EPD_DelayMs>
  EPD_DigitalWrite(epd, epd->reset_pin, HIGH);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ff83 	bl	80006ba <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);    
 80007b4:	21c8      	movs	r1, #200	; 0xc8
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ff9a 	bl	80006f0 <EPD_DelayMs>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <EPD_SetLut>:

void EPD_SetLut(EPD* epd) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  unsigned int count;     
  EPD_SendCommand(epd, LUT_FOR_VCOM);                            //vcom
 80007cc:	2120      	movs	r1, #32
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff9a 	bl	8000708 <EPD_SendCommand>
  for(count = 0; count < 44; count++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e00a      	b.n	80007f0 <EPD_SetLut+0x2c>
    EPD_SendData(epd, lut_vcom_dc[count]);
 80007da:	4a33      	ldr	r2, [pc, #204]	; (80008a8 <EPD_SetLut+0xe4>)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4619      	mov	r1, r3
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ffa4 	bl	8000732 <EPD_SendData>
  for(count = 0; count < 44; count++) {
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b2b      	cmp	r3, #43	; 0x2b
 80007f4:	d9f1      	bls.n	80007da <EPD_SetLut+0x16>
  }
  
  EPD_SendCommand(epd, LUT_WHITE_TO_WHITE);                      //ww --
 80007f6:	2121      	movs	r1, #33	; 0x21
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff85 	bl	8000708 <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e00a      	b.n	800081a <EPD_SetLut+0x56>
    EPD_SendData(epd, lut_ww[count]);
 8000804:	4a29      	ldr	r2, [pc, #164]	; (80008ac <EPD_SetLut+0xe8>)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff8f 	bl	8000732 <EPD_SendData>
  for(count = 0; count < 42; count++) {
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2b29      	cmp	r3, #41	; 0x29
 800081e:	d9f1      	bls.n	8000804 <EPD_SetLut+0x40>
  }   
  
  EPD_SendCommand(epd, LUT_BLACK_TO_WHITE);                      //bw r
 8000820:	2122      	movs	r1, #34	; 0x22
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ff70 	bl	8000708 <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e00a      	b.n	8000844 <EPD_SetLut+0x80>
    EPD_SendData(epd, lut_bw[count]);
 800082e:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <EPD_SetLut+0xec>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4413      	add	r3, r2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4619      	mov	r1, r3
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff7a 	bl	8000732 <EPD_SendData>
  for(count = 0; count < 42; count++) {
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3301      	adds	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b29      	cmp	r3, #41	; 0x29
 8000848:	d9f1      	bls.n	800082e <EPD_SetLut+0x6a>
  } 

  EPD_SendCommand(epd, LUT_WHITE_TO_BLACK);                      //wb w
 800084a:	2123      	movs	r1, #35	; 0x23
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff5b 	bl	8000708 <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	e00a      	b.n	800086e <EPD_SetLut+0xaa>
    EPD_SendData(epd, lut_bb[count]);
 8000858:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <EPD_SetLut+0xf0>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff65 	bl	8000732 <EPD_SendData>
  for(count = 0; count < 42; count++) {
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3301      	adds	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2b29      	cmp	r3, #41	; 0x29
 8000872:	d9f1      	bls.n	8000858 <EPD_SetLut+0x94>
  } 

  EPD_SendCommand(epd, LUT_BLACK_TO_BLACK);                      //bb b
 8000874:	2124      	movs	r1, #36	; 0x24
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ff46 	bl	8000708 <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	e00a      	b.n	8000898 <EPD_SetLut+0xd4>
    EPD_SendData(epd, lut_wb[count]);
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <EPD_SetLut+0xf4>)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff50 	bl	8000732 <EPD_SendData>
  for(count = 0; count < 42; count++) {
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b29      	cmp	r3, #41	; 0x29
 800089c:	d9f1      	bls.n	8000882 <EPD_SetLut+0xbe>
  } 
}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	08003b64 	.word	0x08003b64
 80008ac:	08003b90 	.word	0x08003b90
 80008b0:	08003bbc 	.word	0x08003bbc
 80008b4:	08003be8 	.word	0x08003be8
 80008b8:	08003c14 	.word	0x08003c14

080008bc <EPD_DisplayFrame>:

void EPD_DisplayFrame(EPD* epd, const unsigned char* frame_buffer) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  if (frame_buffer != NULL) {
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d052      	beq.n	8000972 <EPD_DisplayFrame+0xb6>
    EPD_SendCommand(epd, DATA_START_TRANSMISSION_1);
 80008cc:	2110      	movs	r1, #16
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ff1a 	bl	8000708 <EPD_SendCommand>
    EPD_DelayMs(epd, 2);
 80008d4:	2102      	movs	r1, #2
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff0a 	bl	80006f0 <EPD_DelayMs>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e006      	b.n	80008f0 <EPD_DisplayFrame+0x34>
      EPD_SendData(epd, 0xFF);
 80008e2:	21ff      	movs	r1, #255	; 0xff
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff24 	bl	8000732 <EPD_SendData>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3301      	adds	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	da00      	bge.n	80008fa <EPD_DisplayFrame+0x3e>
 80008f8:	3307      	adds	r3, #7
 80008fa:	10db      	asrs	r3, r3, #3
 80008fc:	461a      	mov	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	fb03 f302 	mul.w	r3, r3, r2
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	429a      	cmp	r2, r3
 800090a:	dbea      	blt.n	80008e2 <EPD_DisplayFrame+0x26>
    }
    EPD_DelayMs(epd, 2);
 800090c:	2102      	movs	r1, #2
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff feee 	bl	80006f0 <EPD_DelayMs>
    EPD_SendCommand(epd, DATA_START_TRANSMISSION_2);
 8000914:	2113      	movs	r1, #19
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fef6 	bl	8000708 <EPD_SendCommand>
    EPD_DelayMs(epd, 2);
 800091c:	2102      	movs	r1, #2
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fee6 	bl	80006f0 <EPD_DelayMs>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	e00a      	b.n	8000940 <EPD_DisplayFrame+0x84>
      EPD_SendData(epd, frame_buffer[i]);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fefc 	bl	8000732 <EPD_SendData>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3301      	adds	r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	2b00      	cmp	r3, #0
 8000946:	da00      	bge.n	800094a <EPD_DisplayFrame+0x8e>
 8000948:	3307      	adds	r3, #7
 800094a:	10db      	asrs	r3, r3, #3
 800094c:	461a      	mov	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	fb03 f302 	mul.w	r3, r3, r2
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	429a      	cmp	r2, r3
 800095a:	dbe6      	blt.n	800092a <EPD_DisplayFrame+0x6e>
    }
    EPD_DelayMs(epd, 2);
 800095c:	2102      	movs	r1, #2
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff fec6 	bl	80006f0 <EPD_DelayMs>
    EPD_SendCommand(epd, DISPLAY_REFRESH);
 8000964:	2112      	movs	r1, #18
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fece 	bl	8000708 <EPD_SendCommand>
    EPD_WaitUntilIdle(epd);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fef5 	bl	800075c <EPD_WaitUntilIdle>
  }
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <EpdDigitalWriteCallback>:
  E_BUSY_Pin,
};

EPD_Pin pins[4];

void EpdDigitalWriteCallback(int pin_num, int value) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  if (value == HIGH) {
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d10e      	bne.n	80009aa <EpdDigitalWriteCallback+0x2e>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_SET);
 800098c:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <EpdDigitalWriteCallback+0x54>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <EpdDigitalWriteCallback+0x54>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4413      	add	r3, r2
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	f001 f99c 	bl	8001ce0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
  }
}
 80009a8:	e00d      	b.n	80009c6 <EpdDigitalWriteCallback+0x4a>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 80009aa:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <EpdDigitalWriteCallback+0x54>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80009b2:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <EpdDigitalWriteCallback+0x54>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	4413      	add	r3, r2
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2200      	movs	r2, #0
 80009c0:	4619      	mov	r1, r3
 80009c2:	f001 f98d 	bl	8001ce0 <HAL_GPIO_WritePin>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000c0 	.word	0x200000c0

080009d4 <EpdDigitalReadCallback>:

int EpdDigitalReadCallback(int pin_num) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(pins[pin_num].port, pins[pin_num].pin) == GPIO_PIN_SET) {
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <EpdDigitalReadCallback+0x38>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80009e4:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <EpdDigitalReadCallback+0x38>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	4413      	add	r3, r2
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4619      	mov	r1, r3
 80009f2:	f001 f95d 	bl	8001cb0 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d101      	bne.n	8000a00 <EpdDigitalReadCallback+0x2c>
    return HIGH;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <EpdDigitalReadCallback+0x2e>
  } else {
    return LOW;
 8000a00:	2300      	movs	r3, #0
  }
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000c0 	.word	0x200000c0

08000a10 <EpdDelayMsCallback>:

void EpdDelayMsCallback(unsigned int delaytime) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  HAL_Delay(delaytime);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 feaf 	bl	800177c <HAL_Delay>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <EpdSpiTransferCallback>:

void EpdSpiTransferCallback(unsigned char data) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_RESET);
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <EpdSpiTransferCallback+0x44>)
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <EpdSpiTransferCallback+0x44>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f001 f94e 	bl	8001ce0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8000a44:	1df9      	adds	r1, r7, #7
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <EpdSpiTransferCallback+0x48>)
 8000a4e:	f001 fdf9 	bl	8002644 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_SET);
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <EpdSpiTransferCallback+0x44>)
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <EpdSpiTransferCallback+0x44>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f001 f93e 	bl	8001ce0 <HAL_GPIO_WritePin>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000c0 	.word	0x200000c0
 8000a70:	20000120 	.word	0x20000120

08000a74 <EpdInitCallback>:

int EpdInitCallback(void) {
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  pins[CS_PIN] = epd_cs_pin;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <EpdInitCallback+0x48>)
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <EpdInitCallback+0x4c>)
 8000a7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a80:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[RST_PIN] = epd_rst_pin;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <EpdInitCallback+0x48>)
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <EpdInitCallback+0x50>)
 8000a88:	3308      	adds	r3, #8
 8000a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a8e:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[DC_PIN] = epd_dc_pin;
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <EpdInitCallback+0x48>)
 8000a94:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <EpdInitCallback+0x54>)
 8000a96:	3310      	adds	r3, #16
 8000a98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a9c:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[BUSY_PIN] = epd_busy_pin;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <EpdInitCallback+0x48>)
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <EpdInitCallback+0x58>)
 8000aa4:	3318      	adds	r3, #24
 8000aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aaa:	e883 0003 	stmia.w	r3, {r0, r1}
  
  return 0;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200000c0 	.word	0x200000c0
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000010 	.word	0x20000010
 8000acc:	20000018 	.word	0x20000018

08000ad0 <Paint_Init>:
 */

#include "epdpaint.h"


void Paint_Init(Paint* paint, unsigned char* image, int width, int height) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
    paint->rotate = ROTATE_0;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
    paint->image = image;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	601a      	str	r2, [r3, #0]
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    paint->width = width % 8 ? width + 8 - (width % 8) : width;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00c      	beq.n	8000b0e <Paint_Init+0x3e>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f103 0208 	add.w	r2, r3, #8
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4259      	negs	r1, r3
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	f001 0107 	and.w	r1, r1, #7
 8000b06:	bf58      	it	pl
 8000b08:	424b      	negpl	r3, r1
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	e000      	b.n	8000b10 <Paint_Init+0x40>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	6053      	str	r3, [r2, #4]
    paint->height = height;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	609a      	str	r2, [r3, #8]
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <Paint_Clear>:

/**
 *  @brief: clear the image
 */
void Paint_Clear(Paint* paint, int colored) {
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
    for (int x = 0; x < paint->width; x++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e013      	b.n	8000b5e <Paint_Clear+0x38>
        for (int y = 0; y < paint->height; y++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	e008      	b.n	8000b4e <Paint_Clear+0x28>
            Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	68f9      	ldr	r1, [r7, #12]
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f814 	bl	8000b70 <Paint_DrawAbsolutePixel>
        for (int y = 0; y < paint->height; y++) {
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf1      	blt.n	8000b3c <Paint_Clear+0x16>
    for (int x = 0; x < paint->width; x++) {
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbe6      	blt.n	8000b36 <Paint_Clear+0x10>
        }
    }
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <Paint_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint_DrawAbsolutePixel(Paint* paint, int x, int y, int colored) {
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	603b      	str	r3, [r7, #0]
    if (x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db5f      	blt.n	8000c44 <Paint_DrawAbsolutePixel+0xd4>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	da5a      	bge.n	8000c44 <Paint_DrawAbsolutePixel+0xd4>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db57      	blt.n	8000c44 <Paint_DrawAbsolutePixel+0xd4>
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	da52      	bge.n	8000c44 <Paint_DrawAbsolutePixel+0xd4>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d026      	beq.n	8000bf2 <Paint_DrawAbsolutePixel+0x82>
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	fb01 f103 	mul.w	r1, r1, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	440b      	add	r3, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	da00      	bge.n	8000bbc <Paint_DrawAbsolutePixel+0x4c>
 8000bba:	3307      	adds	r3, #7
 8000bbc:	10db      	asrs	r3, r3, #3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4413      	add	r3, r2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4259      	negs	r1, r3
 8000bcc:	f003 0307 	and.w	r3, r3, #7
 8000bd0:	f001 0107 	and.w	r1, r1, #7
 8000bd4:	bf58      	it	pl
 8000bd6:	424b      	negpl	r3, r1
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	fa41 f303 	asr.w	r3, r1, r3
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b25a      	sxtb	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4601      	mov	r1, r0
 8000bea:	440b      	add	r3, r1
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e029      	b.n	8000c46 <Paint_DrawAbsolutePixel+0xd6>
        } else {
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	fb01 f103 	mul.w	r1, r1, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	440b      	add	r3, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	da00      	bge.n	8000c0a <Paint_DrawAbsolutePixel+0x9a>
 8000c08:	3307      	adds	r3, #7
 8000c0a:	10db      	asrs	r3, r3, #3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25a      	sxtb	r2, r3
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4259      	negs	r1, r3
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	f001 0107 	and.w	r1, r1, #7
 8000c22:	bf58      	it	pl
 8000c24:	424b      	negpl	r3, r1
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	fa41 f303 	asr.w	r3, r1, r3
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	4013      	ands	r3, r2
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4601      	mov	r1, r0
 8000c3c:	440b      	add	r3, r1
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e000      	b.n	8000c46 <Paint_DrawAbsolutePixel+0xd6>
        return;
 8000c44:	bf00      	nop
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <Paint_DrawPixel>:
}

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint_DrawPixel(Paint* paint, int x, int y, int colored) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	603b      	str	r3, [r7, #0]
    int point_temp;
    if (paint->rotate == ROTATE_0) {
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d117      	bne.n	8000c96 <Paint_DrawPixel+0x46>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f2c0 8081 	blt.w	8000d70 <Paint_DrawPixel+0x120>
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	da7b      	bge.n	8000d70 <Paint_DrawPixel+0x120>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db78      	blt.n	8000d70 <Paint_DrawPixel+0x120>
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	da73      	bge.n	8000d70 <Paint_DrawPixel+0x120>
            return;
        }
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff ff6e 	bl	8000b70 <Paint_DrawAbsolutePixel>
 8000c94:	e073      	b.n	8000d7e <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_90) {
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d11f      	bne.n	8000cde <Paint_DrawPixel+0x8e>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db67      	blt.n	8000d74 <Paint_DrawPixel+0x124>
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	da62      	bge.n	8000d74 <Paint_DrawPixel+0x124>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db5f      	blt.n	8000d74 <Paint_DrawPixel+0x124>
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	da5a      	bge.n	8000d74 <Paint_DrawPixel+0x124>
          return;
        }
        point_temp = x;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	617b      	str	r3, [r7, #20]
        x = paint->width - y;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	60bb      	str	r3, [r7, #8]
        y = point_temp;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff ff4a 	bl	8000b70 <Paint_DrawAbsolutePixel>
 8000cdc:	e04f      	b.n	8000d7e <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_180) {
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d120      	bne.n	8000d28 <Paint_DrawPixel+0xd8>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db45      	blt.n	8000d78 <Paint_DrawPixel+0x128>
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	da40      	bge.n	8000d78 <Paint_DrawPixel+0x128>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db3d      	blt.n	8000d78 <Paint_DrawPixel+0x128>
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	da38      	bge.n	8000d78 <Paint_DrawPixel+0x128>
          return;
        }
        x = paint->width - x;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	60bb      	str	r3, [r7, #8]
        y = paint->height - y;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	68b9      	ldr	r1, [r7, #8]
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f7ff ff25 	bl	8000b70 <Paint_DrawAbsolutePixel>
 8000d26:	e02a      	b.n	8000d7e <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_270) {
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d126      	bne.n	8000d7e <Paint_DrawPixel+0x12e>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db22      	blt.n	8000d7c <Paint_DrawPixel+0x12c>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	da1d      	bge.n	8000d7c <Paint_DrawPixel+0x12c>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db1a      	blt.n	8000d7c <Paint_DrawPixel+0x12c>
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	da15      	bge.n	8000d7c <Paint_DrawPixel+0x12c>
          return;
        }
        point_temp = x;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	617b      	str	r3, [r7, #20]
        x = y;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60bb      	str	r3, [r7, #8]
        y = paint->height - point_temp;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff ff01 	bl	8000b70 <Paint_DrawAbsolutePixel>
 8000d6e:	e006      	b.n	8000d7e <Paint_DrawPixel+0x12e>
            return;
 8000d70:	bf00      	nop
 8000d72:	e004      	b.n	8000d7e <Paint_DrawPixel+0x12e>
          return;
 8000d74:	bf00      	nop
 8000d76:	e002      	b.n	8000d7e <Paint_DrawPixel+0x12e>
          return;
 8000d78:	bf00      	nop
 8000d7a:	e000      	b.n	8000d7e <Paint_DrawPixel+0x12e>
          return;
 8000d7c:	bf00      	nop
    }
}
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <Paint_DrawCharAt>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint_DrawCharAt(Paint* paint, int x, int y, char ascii_char, sFONT* font, int colored) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	70fb      	strb	r3, [r7, #3]
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 8000d92:	78fb      	ldrb	r3, [r7, #3]
 8000d94:	3b20      	subs	r3, #32
 8000d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d98:	88d2      	ldrh	r2, [r2, #6]
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000da0:	8892      	ldrh	r2, [r2, #4]
 8000da2:	08d2      	lsrs	r2, r2, #3
 8000da4:	b292      	uxth	r2, r2
 8000da6:	4611      	mov	r1, r2
 8000da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000daa:	8892      	ldrh	r2, [r2, #4]
 8000dac:	f002 0207 	and.w	r2, r2, #7
 8000db0:	b292      	uxth	r2, r2
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	bf14      	ite	ne
 8000db6:	2201      	movne	r2, #1
 8000db8:	2200      	moveq	r2, #0
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440a      	add	r2, r1
 8000dbe:	fb02 f303 	mul.w	r3, r2, r3
 8000dc2:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 8000dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4413      	add	r3, r2
 8000dcc:	617b      	str	r3, [r7, #20]

    for (j = 0; j < font->Height; j++) {
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	e040      	b.n	8000e56 <Paint_DrawCharAt+0xd2>
        for (i = 0; i < font->Width; i++) {
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	e02a      	b.n	8000e30 <Paint_DrawCharAt+0xac>
            if (*ptr & (0x80 >> (i % 8))) {
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4619      	mov	r1, r3
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	425a      	negs	r2, r3
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	f002 0207 	and.w	r2, r2, #7
 8000dec:	bf58      	it	pl
 8000dee:	4253      	negpl	r3, r2
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	fa42 f303 	asr.w	r3, r2, r3
 8000df6:	400b      	ands	r3, r1
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d009      	beq.n	8000e10 <Paint_DrawCharAt+0x8c>
                Paint_DrawPixel(paint, x + i, y + j, colored);
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	18d1      	adds	r1, r2, r3
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	441a      	add	r2, r3
 8000e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0a:	68f8      	ldr	r0, [r7, #12]
 8000e0c:	f7ff ff20 	bl	8000c50 <Paint_DrawPixel>
            }
            if (i % 8 == 7) {
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	425a      	negs	r2, r3
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	f002 0207 	and.w	r2, r2, #7
 8000e1c:	bf58      	it	pl
 8000e1e:	4253      	negpl	r3, r2
 8000e20:	2b07      	cmp	r3, #7
 8000e22:	d102      	bne.n	8000e2a <Paint_DrawCharAt+0xa6>
                ptr++;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3301      	adds	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e32:	889b      	ldrh	r3, [r3, #4]
 8000e34:	461a      	mov	r2, r3
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	dbce      	blt.n	8000dda <Paint_DrawCharAt+0x56>
            }
        }
        if (font->Width % 8 != 0) {
 8000e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3e:	889b      	ldrh	r3, [r3, #4]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <Paint_DrawCharAt+0xcc>
            ptr++;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	3301      	adds	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e58:	88db      	ldrh	r3, [r3, #6]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	dbb8      	blt.n	8000dd4 <Paint_DrawCharAt+0x50>
        }
    }
}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <Paint_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint_DrawStringAt(Paint* paint, int x, int y, const char* text, sFONT* font, int colored) {
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b08a      	sub	sp, #40	; 0x28
 8000e6e:	af02      	add	r7, sp, #8
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	603b      	str	r3, [r7, #0]
    const char* p_text = text;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	617b      	str	r3, [r7, #20]
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8000e84:	e017      	b.n	8000eb6 <Paint_DrawStringAt+0x4c>
        /* Display one character on EPD */
        Paint_DrawCharAt(paint, refcolumn, y, *p_text, font, colored);
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	4613      	mov	r3, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6979      	ldr	r1, [r7, #20]
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff ff73 	bl	8000d84 <Paint_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 8000e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea0:	889b      	ldrh	r3, [r3, #4]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3301      	adds	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
        counter++;
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1e3      	bne.n	8000e86 <Paint_DrawStringAt+0x1c>
    }
}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	; 0x38
 8000ecc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	unsigned char* frame_buffer = (unsigned char*)malloc(EPD_WIDTH * EPD_HEIGHT / 8);
 8000ece:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8000ed2:	f002 f9a7 	bl	8003224 <malloc>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 fbdd 	bl	8001698 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f887 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 f94f 	bl	8001184 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ee6:	f000 f8ed 	bl	80010c4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000eea:	f000 f921 	bl	8001130 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  EPD epd;
  EPD_Init(&epd);
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fb10 	bl	8000518 <EPD_Init>
    if (EPD_Init(&epd) != 0) {
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fb0b 	bl	8000518 <EPD_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <main+0x4c>
        printf("e-Paper init failed\n");
 8000f08:	4832      	ldr	r0, [pc, #200]	; (8000fd4 <main+0x10c>)
 8000f0a:	f002 fa9f 	bl	800344c <puts>
        return -1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e05b      	b.n	8000fcc <main+0x104>
      }

      Paint paint;
      Paint_Init(&paint, frame_buffer, epd.width, epd.height);
 8000f14:	6a3a      	ldr	r2, [r7, #32]
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	4638      	mov	r0, r7
 8000f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f1c:	f7ff fdd8 	bl	8000ad0 <Paint_Init>
      Paint_Clear(&paint, UNCOLORED);
 8000f20:	463b      	mov	r3, r7
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fdfe 	bl	8000b26 <Paint_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* USER CODE END WHILE */
      for (int i = 0; i <sizeof(qie); i++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f2e:	e01a      	b.n	8000f66 <main+0x9e>
          		if (qie[i] == 1){
 8000f30:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <main+0x110>)
 8000f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f34:	4413      	add	r3, r2
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d111      	bne.n	8000f60 <main+0x98>
          		   Paint_DrawPixel(&paint, i%128,i/128,COLORED);
 8000f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3e:	425a      	negs	r2, r3
 8000f40:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8000f44:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8000f48:	bf58      	it	pl
 8000f4a:	4259      	negpl	r1, r3
 8000f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	da00      	bge.n	8000f54 <main+0x8c>
 8000f52:	337f      	adds	r3, #127	; 0x7f
 8000f54:	11db      	asrs	r3, r3, #7
 8000f56:	461a      	mov	r2, r3
 8000f58:	4638      	mov	r0, r7
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f7ff fe78 	bl	8000c50 <Paint_DrawPixel>
      for (int i = 0; i <sizeof(qie); i++){
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	3301      	adds	r3, #1
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f6c:	d3e0      	bcc.n	8000f30 <main+0x68>
          }

          }
      //18 charachters per row in Font12
      Paint_DrawStringAt(&paint, 0, 180, "lifeng ", &Font12, COLORED);
 8000f6e:	4638      	mov	r0, r7
 8000f70:	2300      	movs	r3, #0
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <main+0x114>)
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <main+0x118>)
 8000f7a:	22b4      	movs	r2, #180	; 0xb4
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	f7ff ff74 	bl	8000e6a <Paint_DrawStringAt>
      Paint_DrawStringAt(&paint, 0, 200, "Purdue ", &Font12, COLORED);
 8000f82:	4638      	mov	r0, r7
 8000f84:	2300      	movs	r3, #0
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <main+0x114>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <main+0x11c>)
 8000f8e:	22c8      	movs	r2, #200	; 0xc8
 8000f90:	2100      	movs	r1, #0
 8000f92:	f7ff ff6a 	bl	8000e6a <Paint_DrawStringAt>
      Paint_DrawStringAt(&paint, 0, 220, "Engineer", &Font12, COLORED);
 8000f96:	4638      	mov	r0, r7
 8000f98:	2300      	movs	r3, #0
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <main+0x114>)
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <main+0x120>)
 8000fa2:	22dc      	movs	r2, #220	; 0xdc
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	f7ff ff60 	bl	8000e6a <Paint_DrawStringAt>
      Paint_DrawStringAt(&paint, 0, 240, "Senior ", &Font12, COLORED);
 8000faa:	4638      	mov	r0, r7
 8000fac:	2300      	movs	r3, #0
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <main+0x114>)
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <main+0x124>)
 8000fb6:	22f0      	movs	r2, #240	; 0xf0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	f7ff ff56 	bl	8000e6a <Paint_DrawStringAt>

          /* Infinite loop */
          /* USER CODE BEGIN WHILE */

          /* USER CODE END WHILE */
          EPD_DisplayFrame(&epd, frame_buffer);
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fc79 	bl	80008bc <EPD_DisplayFrame>
 8000fca:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3730      	adds	r7, #48	; 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08003b2c 	.word	0x08003b2c
 8000fd8:	080040b4 	.word	0x080040b4
 8000fdc:	20000020 	.word	0x20000020
 8000fe0:	08003b40 	.word	0x08003b40
 8000fe4:	08003b48 	.word	0x08003b48
 8000fe8:	08003b50 	.word	0x08003b50
 8000fec:	08003b5c 	.word	0x08003b5c

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	; 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	2234      	movs	r2, #52	; 0x34
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 f918 	bl	8003234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <SystemClock_Config+0xcc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	4a27      	ldr	r2, [pc, #156]	; (80010bc <SystemClock_Config+0xcc>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	; 0x40
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <SystemClock_Config+0xcc>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <SystemClock_Config+0xd0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <SystemClock_Config+0xd0>)
 800103a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <SystemClock_Config+0xd0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	2310      	movs	r3, #16
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800105c:	2300      	movs	r3, #0
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001060:	2308      	movs	r3, #8
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001064:	2360      	movs	r3, #96	; 0x60
 8001066:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800106c:	2308      	movs	r3, #8
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001070:	2302      	movs	r3, #2
 8001072:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4618      	mov	r0, r3
 800107a:	f001 f83d 	bl	80020f8 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001084:	f000 f920 	bl	80012c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2302      	movs	r3, #2
 800108e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	2101      	movs	r1, #1
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fe36 	bl	8001d14 <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010ae:	f000 f90b 	bl	80012c8 <Error_Handler>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3750      	adds	r7, #80	; 0x50
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_SPI1_Init+0x64>)
 80010ca:	4a18      	ldr	r2, [pc, #96]	; (800112c <MX_SPI1_Init+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_SPI1_Init+0x64>)
 80010d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_SPI1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_SPI1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_SPI1_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_SPI1_Init+0x64>)
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_SPI1_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_SPI1_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_SPI1_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_SPI1_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_SPI1_Init+0x64>)
 8001110:	220a      	movs	r2, #10
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_SPI1_Init+0x64>)
 8001116:	f001 fa31 	bl	800257c <HAL_SPI_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001120:	f000 f8d2 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000120 	.word	0x20000120
 800112c:	40013000 	.word	0x40013000

08001130 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <MX_USART1_UART_Init+0x50>)
 8001138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_USART1_UART_Init+0x4c>)
 800113c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_USART1_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_USART1_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001168:	f001 fc4c 	bl	8002a04 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001172:	f000 f8a9 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000e0 	.word	0x200000e0
 8001180:	40011000 	.word	0x40011000

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b45      	ldr	r3, [pc, #276]	; (80012b4 <MX_GPIO_Init+0x130>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a44      	ldr	r2, [pc, #272]	; (80012b4 <MX_GPIO_Init+0x130>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <MX_GPIO_Init+0x130>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b3e      	ldr	r3, [pc, #248]	; (80012b4 <MX_GPIO_Init+0x130>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a3d      	ldr	r2, [pc, #244]	; (80012b4 <MX_GPIO_Init+0x130>)
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <MX_GPIO_Init+0x130>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <MX_GPIO_Init+0x130>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <MX_GPIO_Init+0x130>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <MX_GPIO_Init+0x130>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <MX_GPIO_Init+0x130>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <MX_GPIO_Init+0x130>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <MX_GPIO_Init+0x130>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f248 0180 	movw	r1, #32896	; 0x8080
 8001210:	4829      	ldr	r0, [pc, #164]	; (80012b8 <MX_GPIO_Init+0x134>)
 8001212:	f000 fd65 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, E_DC_Pin|E_RST_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800121c:	4827      	ldr	r0, [pc, #156]	; (80012bc <MX_GPIO_Init+0x138>)
 800121e:	f000 fd5f 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <MX_GPIO_Init+0x13c>)
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4821      	ldr	r0, [pc, #132]	; (80012bc <MX_GPIO_Init+0x138>)
 8001238:	f000 fba8 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_Pin P2_Pin E_BUSY_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P2_Pin|E_BUSY_Pin;
 800123c:	f242 0306 	movw	r3, #8198	; 0x2006
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001246:	2301      	movs	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4819      	ldr	r0, [pc, #100]	; (80012b8 <MX_GPIO_Init+0x134>)
 8001252:	f000 fb9b 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : E_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = E_CS_Pin|LD2_Pin;
 8001256:	f248 0380 	movw	r3, #32896	; 0x8080
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4812      	ldr	r0, [pc, #72]	; (80012b8 <MX_GPIO_Init+0x134>)
 8001270:	f000 fb8c 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : E_DC_Pin E_RST_Pin */
  GPIO_InitStruct.Pin = E_DC_Pin|E_RST_Pin;
 8001274:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <MX_GPIO_Init+0x138>)
 800128e:	f000 fb7d 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin P4_Pin */
  GPIO_InitStruct.Pin = P3_Pin|P4_Pin;
 8001292:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129c:	2301      	movs	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <MX_GPIO_Init+0x140>)
 80012a8:	f000 fb70 	bl	800198c <HAL_GPIO_Init>

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020800 	.word	0x40020800
 80012c0:	10110000 	.word	0x10110000
 80012c4:	40020000 	.word	0x40020000

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_MspInit+0x4c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_MspInit+0x4c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_MspInit+0x4c>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_MspInit+0x4c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <HAL_SPI_MspInit+0xc0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d149      	bne.n	80013de <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <HAL_SPI_MspInit+0xc4>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a26      	ldr	r2, [pc, #152]	; (80013ec <HAL_SPI_MspInit+0xc4>)
 8001354:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <HAL_SPI_MspInit+0xc4>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_SPI_MspInit+0xc4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <HAL_SPI_MspInit+0xc4>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_SPI_MspInit+0xc4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_SPI_MspInit+0xc4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a18      	ldr	r2, [pc, #96]	; (80013ec <HAL_SPI_MspInit+0xc4>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_SPI_MspInit+0xc4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ae:	2305      	movs	r3, #5
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <HAL_SPI_MspInit+0xc8>)
 80013ba:	f000 fae7 	bl	800198c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013be:	2308      	movs	r3, #8
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ce:	2305      	movs	r3, #5
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4806      	ldr	r0, [pc, #24]	; (80013f4 <HAL_SPI_MspInit+0xcc>)
 80013da:	f000 fad7 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40013000 	.word	0x40013000
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400

080013f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_UART_MspInit+0x84>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12c      	bne.n	8001474 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_UART_MspInit+0x88>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_UART_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001452:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001464:	2307      	movs	r3, #7
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <HAL_UART_MspInit+0x8c>)
 8001470:	f000 fa8c 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40011000 	.word	0x40011000
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 f92e 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e00a      	b.n	800150c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	4601      	mov	r1, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	b2ca      	uxtb	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbf0      	blt.n	80014f6 <_read+0x12>
	}

return len;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e009      	b.n	8001544 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf1      	blt.n	8001530 <_write+0x12>
	}
	return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_close>:

int _close(int file)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
	return -1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800157e:	605a      	str	r2, [r3, #4]
	return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_isatty>:

int _isatty(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
	return 1;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
	return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <_sbrk+0x50>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x16>
		heap_end = &end;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <_sbrk+0x50>)
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <_sbrk+0x54>)
 80015d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <_sbrk+0x50>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <_sbrk+0x50>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	466a      	mov	r2, sp
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d907      	bls.n	80015fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015ea:	f001 fdf1 	bl	80031d0 <__errno>
 80015ee:	4602      	mov	r2, r0
 80015f0:	230c      	movs	r3, #12
 80015f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
 80015f8:	e006      	b.n	8001608 <_sbrk+0x48>
	}

	heap_end += incr;
 80015fa:	4b05      	ldr	r3, [pc, #20]	; (8001610 <_sbrk+0x50>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a03      	ldr	r2, [pc, #12]	; (8001610 <_sbrk+0x50>)
 8001604:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000b4 	.word	0x200000b4
 8001614:	20000180 	.word	0x20000180

08001618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <SystemInit+0x28>)
 800161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <SystemInit+0x28>)
 8001624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SystemInit+0x28>)
 800162e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001632:	609a      	str	r2, [r3, #8]
#endif
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
    ldr   sp, =_estack       /* set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001648:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800164a:	e003      	b.n	8001654 <LoopCopyDataInit>

0800164c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800164e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001650:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001652:	3104      	adds	r1, #4

08001654 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001658:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800165a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800165c:	d3f6      	bcc.n	800164c <CopyDataInit>
  ldr  r2, =_sbss
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001660:	e002      	b.n	8001668 <LoopFillZerobss>

08001662 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001662:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001664:	f842 3b04 	str.w	r3, [r2], #4

08001668 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800166a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800166c:	d3f9      	bcc.n	8001662 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800166e:	f7ff ffd3 	bl	8001618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001672:	f001 fdb3 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001676:	f7ff fc27 	bl	8000ec8 <main>
  bx  lr    
 800167a:	4770      	bx	lr
    ldr   sp, =_estack       /* set stack pointer */
 800167c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001680:	08008140 	.word	0x08008140
  ldr  r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001688:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 800168c:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8001690:	20000180 	.word	0x20000180

08001694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC_IRQHandler>
	...

08001698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <HAL_Init+0x40>)
 80016a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_Init+0x40>)
 80016ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_Init+0x40>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f000 f92f 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f808 	bl	80016dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016cc:	f7ff fe04 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023c00 	.word	0x40023c00

080016dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x54>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x58>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f939 	bl	8001972 <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e00e      	b.n	8001728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d80a      	bhi.n	8001726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f000 f90f 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_InitTick+0x5c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000028 	.word	0x20000028
 8001734:	20000030 	.word	0x20000030
 8001738:	2000002c 	.word	0x2000002c

0800173c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000030 	.word	0x20000030
 8001760:	20000178 	.word	0x20000178

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000178 	.word	0x20000178

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_Delay+0x40>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffde 	bl	8001764 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000030 	.word	0x20000030

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff8e 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff47 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff5c 	bl	8001808 <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff8e 	bl	8001878 <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5d 	bl	8001824 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffb0 	bl	80018e0 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	e165      	b.n	8001c74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a8:	2201      	movs	r2, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	f040 8154 	bne.w	8001c6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d00b      	beq.n	80019e6 <HAL_GPIO_Init+0x5a>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019da:	2b11      	cmp	r3, #17
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b12      	cmp	r3, #18
 80019e4:	d130      	bne.n	8001a48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 0201 	and.w	r2, r3, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0xfc>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b12      	cmp	r3, #18
 8001a86:	d123      	bne.n	8001ad0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	08da      	lsrs	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3208      	adds	r2, #8
 8001aca:	69b9      	ldr	r1, [r7, #24]
 8001acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80ae 	beq.w	8001c6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b5c      	ldr	r3, [pc, #368]	; (8001c88 <HAL_GPIO_Init+0x2fc>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a5b      	ldr	r2, [pc, #364]	; (8001c88 <HAL_GPIO_Init+0x2fc>)
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b59      	ldr	r3, [pc, #356]	; (8001c88 <HAL_GPIO_Init+0x2fc>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2e:	4a57      	ldr	r2, [pc, #348]	; (8001c8c <HAL_GPIO_Init+0x300>)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	3302      	adds	r3, #2
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4e      	ldr	r2, [pc, #312]	; (8001c90 <HAL_GPIO_Init+0x304>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d025      	beq.n	8001ba6 <HAL_GPIO_Init+0x21a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4d      	ldr	r2, [pc, #308]	; (8001c94 <HAL_GPIO_Init+0x308>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01f      	beq.n	8001ba2 <HAL_GPIO_Init+0x216>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <HAL_GPIO_Init+0x30c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d019      	beq.n	8001b9e <HAL_GPIO_Init+0x212>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4b      	ldr	r2, [pc, #300]	; (8001c9c <HAL_GPIO_Init+0x310>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0x20e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <HAL_GPIO_Init+0x314>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <HAL_GPIO_Init+0x20a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_GPIO_Init+0x318>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x206>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a48      	ldr	r2, [pc, #288]	; (8001ca8 <HAL_GPIO_Init+0x31c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_GPIO_Init+0x202>
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	e00c      	b.n	8001ba8 <HAL_GPIO_Init+0x21c>
 8001b8e:	2307      	movs	r3, #7
 8001b90:	e00a      	b.n	8001ba8 <HAL_GPIO_Init+0x21c>
 8001b92:	2305      	movs	r3, #5
 8001b94:	e008      	b.n	8001ba8 <HAL_GPIO_Init+0x21c>
 8001b96:	2304      	movs	r3, #4
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x21c>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e004      	b.n	8001ba8 <HAL_GPIO_Init+0x21c>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_Init+0x21c>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x21c>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	4093      	lsls	r3, r2
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb8:	4934      	ldr	r1, [pc, #208]	; (8001c8c <HAL_GPIO_Init+0x300>)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_GPIO_Init+0x320>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bea:	4a30      	ldr	r2, [pc, #192]	; (8001cac <HAL_GPIO_Init+0x320>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_GPIO_Init+0x320>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c14:	4a25      	ldr	r2, [pc, #148]	; (8001cac <HAL_GPIO_Init+0x320>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <HAL_GPIO_Init+0x320>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_GPIO_Init+0x320>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_GPIO_Init+0x320>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c68:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_GPIO_Init+0x320>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3301      	adds	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	f67f ae96 	bls.w	80019a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3724      	adds	r7, #36	; 0x24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40021800 	.word	0x40021800
 8001cac:	40013c00 	.word	0x40013c00

08001cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e001      	b.n	8001cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0cc      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d28:	4b68      	ldr	r3, [pc, #416]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d90c      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b65      	ldr	r3, [pc, #404]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0b8      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d020      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d68:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4a58      	ldr	r2, [pc, #352]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4a52      	ldr	r2, [pc, #328]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b50      	ldr	r3, [pc, #320]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	494d      	ldr	r1, [pc, #308]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d044      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d119      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e07f      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d003      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd2:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06f      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e067      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001df2:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 0203 	bic.w	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4934      	ldr	r1, [pc, #208]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e04:	f7ff fcae 	bl	8001764 <HAL_GetTick>
 8001e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0c:	f7ff fcaa 	bl	8001764 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e04f      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 020c 	and.w	r2, r3, #12
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d1eb      	bne.n	8001e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d20c      	bcs.n	8001e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e032      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4916      	ldr	r1, [pc, #88]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d009      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e9a:	f000 f821 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e9e:	4601      	mov	r1, r0
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	fa21 f303 	lsr.w	r3, r1, r3
 8001eb2:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1c8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fc0e 	bl	80016dc <HAL_InitTick>

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023c00 	.word	0x40023c00
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	080080b4 	.word	0x080080b4
 8001ed8:	20000028 	.word	0x20000028
 8001edc:	2000002c 	.word	0x2000002c

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d007      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x32>
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d008      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x38>
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 80b4 	bne.w	8002074 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b5e      	ldr	r3, [pc, #376]	; (8002088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f0e:	60bb      	str	r3, [r7, #8]
       break;
 8001f10:	e0b3      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f12:	4b5e      	ldr	r3, [pc, #376]	; (800208c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f14:	60bb      	str	r3, [r7, #8]
      break;
 8001f16:	e0b0      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f18:	4b5a      	ldr	r3, [pc, #360]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f22:	4b58      	ldr	r3, [pc, #352]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d04a      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2e:	4b55      	ldr	r3, [pc, #340]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	099b      	lsrs	r3, r3, #6
 8001f34:	f04f 0400 	mov.w	r4, #0
 8001f38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	ea03 0501 	and.w	r5, r3, r1
 8001f44:	ea04 0602 	and.w	r6, r4, r2
 8001f48:	4629      	mov	r1, r5
 8001f4a:	4632      	mov	r2, r6
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	f04f 0400 	mov.w	r4, #0
 8001f54:	0154      	lsls	r4, r2, #5
 8001f56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f5a:	014b      	lsls	r3, r1, #5
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4622      	mov	r2, r4
 8001f60:	1b49      	subs	r1, r1, r5
 8001f62:	eb62 0206 	sbc.w	r2, r2, r6
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	f04f 0400 	mov.w	r4, #0
 8001f6e:	0194      	lsls	r4, r2, #6
 8001f70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f74:	018b      	lsls	r3, r1, #6
 8001f76:	1a5b      	subs	r3, r3, r1
 8001f78:	eb64 0402 	sbc.w	r4, r4, r2
 8001f7c:	f04f 0100 	mov.w	r1, #0
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	00e2      	lsls	r2, r4, #3
 8001f86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f8a:	00d9      	lsls	r1, r3, #3
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4614      	mov	r4, r2
 8001f90:	195b      	adds	r3, r3, r5
 8001f92:	eb44 0406 	adc.w	r4, r4, r6
 8001f96:	f04f 0100 	mov.w	r1, #0
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	0262      	lsls	r2, r4, #9
 8001fa0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fa4:	0259      	lsls	r1, r3, #9
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4614      	mov	r4, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	4621      	mov	r1, r4
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f04f 0400 	mov.w	r4, #0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4623      	mov	r3, r4
 8001fb8:	f7fe f92e 	bl	8000218 <__aeabi_uldivmod>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	460c      	mov	r4, r1
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e049      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	f04f 0400 	mov.w	r4, #0
 8001fce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	ea03 0501 	and.w	r5, r3, r1
 8001fda:	ea04 0602 	and.w	r6, r4, r2
 8001fde:	4629      	mov	r1, r5
 8001fe0:	4632      	mov	r2, r6
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	f04f 0400 	mov.w	r4, #0
 8001fea:	0154      	lsls	r4, r2, #5
 8001fec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ff0:	014b      	lsls	r3, r1, #5
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4622      	mov	r2, r4
 8001ff6:	1b49      	subs	r1, r1, r5
 8001ff8:	eb62 0206 	sbc.w	r2, r2, r6
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	f04f 0400 	mov.w	r4, #0
 8002004:	0194      	lsls	r4, r2, #6
 8002006:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800200a:	018b      	lsls	r3, r1, #6
 800200c:	1a5b      	subs	r3, r3, r1
 800200e:	eb64 0402 	sbc.w	r4, r4, r2
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	00e2      	lsls	r2, r4, #3
 800201c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002020:	00d9      	lsls	r1, r3, #3
 8002022:	460b      	mov	r3, r1
 8002024:	4614      	mov	r4, r2
 8002026:	195b      	adds	r3, r3, r5
 8002028:	eb44 0406 	adc.w	r4, r4, r6
 800202c:	f04f 0100 	mov.w	r1, #0
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	02a2      	lsls	r2, r4, #10
 8002036:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800203a:	0299      	lsls	r1, r3, #10
 800203c:	460b      	mov	r3, r1
 800203e:	4614      	mov	r4, r2
 8002040:	4618      	mov	r0, r3
 8002042:	4621      	mov	r1, r4
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f04f 0400 	mov.w	r4, #0
 800204a:	461a      	mov	r2, r3
 800204c:	4623      	mov	r3, r4
 800204e:	f7fe f8e3 	bl	8000218 <__aeabi_uldivmod>
 8002052:	4603      	mov	r3, r0
 8002054:	460c      	mov	r4, r1
 8002056:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	0c1b      	lsrs	r3, r3, #16
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	3301      	adds	r3, #1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	60bb      	str	r3, [r7, #8]
      break;
 8002072:	e002      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002076:	60bb      	str	r3, [r7, #8]
      break;
 8002078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207a:	68bb      	ldr	r3, [r7, #8]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	00f42400 	.word	0x00f42400
 800208c:	007a1200 	.word	0x007a1200

08002090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000028 	.word	0x20000028

080020a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020ac:	f7ff fff0 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020b0:	4601      	mov	r1, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0a9b      	lsrs	r3, r3, #10
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4a03      	ldr	r2, [pc, #12]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	080080c4 	.word	0x080080c4

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020d4:	f7ff ffdc 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020d8:	4601      	mov	r1, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0b5b      	lsrs	r3, r3, #13
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4a03      	ldr	r2, [pc, #12]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	080080c4 	.word	0x080080c4

080020f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d075      	beq.n	80021fc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002110:	4ba2      	ldr	r3, [pc, #648]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b04      	cmp	r3, #4
 800211a:	d00c      	beq.n	8002136 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211c:	4b9f      	ldr	r3, [pc, #636]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002124:	2b08      	cmp	r3, #8
 8002126:	d112      	bne.n	800214e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002128:	4b9c      	ldr	r3, [pc, #624]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002134:	d10b      	bne.n	800214e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002136:	4b99      	ldr	r3, [pc, #612]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d05b      	beq.n	80021fa <HAL_RCC_OscConfig+0x102>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d157      	bne.n	80021fa <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e20b      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x6e>
 8002158:	4b90      	ldr	r3, [pc, #576]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a8f      	ldr	r2, [pc, #572]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800215e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e01d      	b.n	80021a2 <HAL_RCC_OscConfig+0xaa>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800216e:	d10c      	bne.n	800218a <HAL_RCC_OscConfig+0x92>
 8002170:	4b8a      	ldr	r3, [pc, #552]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a89      	ldr	r2, [pc, #548]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b87      	ldr	r3, [pc, #540]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a86      	ldr	r2, [pc, #536]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e00b      	b.n	80021a2 <HAL_RCC_OscConfig+0xaa>
 800218a:	4b84      	ldr	r3, [pc, #528]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a83      	ldr	r2, [pc, #524]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b81      	ldr	r3, [pc, #516]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a80      	ldr	r2, [pc, #512]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800219c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d013      	beq.n	80021d2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7ff fadb 	bl	8001764 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b2:	f7ff fad7 	bl	8001764 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b64      	cmp	r3, #100	; 0x64
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e1d0      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c4:	4b75      	ldr	r3, [pc, #468]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0xba>
 80021d0:	e014      	b.n	80021fc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7ff fac7 	bl	8001764 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021da:	f7ff fac3 	bl	8001764 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b64      	cmp	r3, #100	; 0x64
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e1bc      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ec:	4b6b      	ldr	r3, [pc, #428]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0xe2>
 80021f8:	e000      	b.n	80021fc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d063      	beq.n	80022d0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002208:	4b64      	ldr	r3, [pc, #400]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002214:	4b61      	ldr	r3, [pc, #388]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800221c:	2b08      	cmp	r3, #8
 800221e:	d11c      	bne.n	800225a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002220:	4b5e      	ldr	r3, [pc, #376]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d116      	bne.n	800225a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222c:	4b5b      	ldr	r3, [pc, #364]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_OscConfig+0x14c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e190      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002244:	4b55      	ldr	r3, [pc, #340]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4952      	ldr	r1, [pc, #328]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002258:	e03a      	b.n	80022d0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d020      	beq.n	80022a4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002262:	4b4f      	ldr	r3, [pc, #316]	; (80023a0 <HAL_RCC_OscConfig+0x2a8>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff fa7c 	bl	8001764 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002270:	f7ff fa78 	bl	8001764 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e171      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002282:	4b46      	ldr	r3, [pc, #280]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b43      	ldr	r3, [pc, #268]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	493f      	ldr	r1, [pc, #252]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
 80022a2:	e015      	b.n	80022d0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a4:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <HAL_RCC_OscConfig+0x2a8>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7ff fa5b 	bl	8001764 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b2:	f7ff fa57 	bl	8001764 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e150      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c4:	4b35      	ldr	r3, [pc, #212]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d030      	beq.n	800233e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d016      	beq.n	8002312 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e4:	4b2f      	ldr	r3, [pc, #188]	; (80023a4 <HAL_RCC_OscConfig+0x2ac>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7ff fa3b 	bl	8001764 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f2:	f7ff fa37 	bl	8001764 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e130      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1fa>
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff fa24 	bl	8001764 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002320:	f7ff fa20 	bl	8001764 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e119      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002332:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 809f 	beq.w	800248a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234c:	2300      	movs	r3, #0
 800234e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10f      	bne.n	800237c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236a:	6413      	str	r3, [r2, #64]	; 0x40
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002378:	2301      	movs	r3, #1
 800237a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_RCC_OscConfig+0x2b0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d120      	bne.n	80023ca <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_RCC_OscConfig+0x2b0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <HAL_RCC_OscConfig+0x2b0>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002392:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002394:	f7ff f9e6 	bl	8001764 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	e010      	b.n	80023be <HAL_RCC_OscConfig+0x2c6>
 800239c:	40023800 	.word	0x40023800
 80023a0:	42470000 	.word	0x42470000
 80023a4:	42470e80 	.word	0x42470e80
 80023a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7ff f9da 	bl	8001764 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e0d3      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b6c      	ldr	r3, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x478>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d106      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2e8>
 80023d2:	4b68      	ldr	r3, [pc, #416]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4a67      	ldr	r2, [pc, #412]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70
 80023de:	e01c      	b.n	800241a <HAL_RCC_OscConfig+0x322>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0x30a>
 80023e8:	4b62      	ldr	r3, [pc, #392]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	4a61      	ldr	r2, [pc, #388]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70
 80023f4:	4b5f      	ldr	r3, [pc, #380]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a5e      	ldr	r2, [pc, #376]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0x322>
 8002402:	4b5c      	ldr	r3, [pc, #368]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	4a5b      	ldr	r2, [pc, #364]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	6713      	str	r3, [r2, #112]	; 0x70
 800240e:	4b59      	ldr	r3, [pc, #356]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a58      	ldr	r2, [pc, #352]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d015      	beq.n	800244e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7ff f99f 	bl	8001764 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff f99b 	bl	8001764 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e092      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ee      	beq.n	800242a <HAL_RCC_OscConfig+0x332>
 800244c:	e014      	b.n	8002478 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7ff f989 	bl	8001764 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7ff f985 	bl	8001764 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e07c      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ee      	bne.n	8002456 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a3c      	ldr	r2, [pc, #240]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d068      	beq.n	8002564 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002492:	4b38      	ldr	r3, [pc, #224]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b08      	cmp	r3, #8
 800249c:	d060      	beq.n	8002560 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d145      	bne.n	8002532 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_RCC_OscConfig+0x480>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff f95a 	bl	8001764 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b4:	f7ff f956 	bl	8001764 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e04f      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	019b      	lsls	r3, r3, #6
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	3b01      	subs	r3, #1
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	061b      	lsls	r3, r3, #24
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	071b      	lsls	r3, r3, #28
 80024fe:	491d      	ldr	r1, [pc, #116]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_RCC_OscConfig+0x480>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7ff f92b 	bl	8001764 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002512:	f7ff f927 	bl	8001764 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e020      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x41a>
 8002530:	e018      	b.n	8002564 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_RCC_OscConfig+0x480>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff f914 	bl	8001764 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff f910 	bl	8001764 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e009      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_RCC_OscConfig+0x47c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x448>
 800255e:	e001      	b.n	8002564 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40007000 	.word	0x40007000
 8002574:	40023800 	.word	0x40023800
 8002578:	42470060 	.word	0x42470060

0800257c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e056      	b.n	800263c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7fe febd 	bl	8001328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	ea42 0103 	orr.w	r1, r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	0c1b      	lsrs	r3, r3, #16
 800260c:	f003 0104 	and.w	r1, r3, #4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800262a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	4613      	mov	r3, r2
 8002652:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_SPI_Transmit+0x22>
 8002662:	2302      	movs	r3, #2
 8002664:	e11e      	b.n	80028a4 <HAL_SPI_Transmit+0x260>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800266e:	f7ff f879 	bl	8001764 <HAL_GetTick>
 8002672:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d002      	beq.n	800268a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002684:	2302      	movs	r3, #2
 8002686:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002688:	e103      	b.n	8002892 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_SPI_Transmit+0x52>
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	77fb      	strb	r3, [r7, #31]
    goto error;
 800269a:	e0fa      	b.n	8002892 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2203      	movs	r2, #3
 80026a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	88fa      	ldrh	r2, [r7, #6]
 80026ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e2:	d107      	bne.n	80026f4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d007      	beq.n	8002712 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800271a:	d14b      	bne.n	80027b4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_SPI_Transmit+0xe6>
 8002724:	8afb      	ldrh	r3, [r7, #22]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d13e      	bne.n	80027a8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	881a      	ldrh	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	1c9a      	adds	r2, r3, #2
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800274e:	e02b      	b.n	80027a8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d112      	bne.n	8002784 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	881a      	ldrh	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	1c9a      	adds	r2, r3, #2
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	86da      	strh	r2, [r3, #54]	; 0x36
 8002782:	e011      	b.n	80027a8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002784:	f7fe ffee 	bl	8001764 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d803      	bhi.n	800279c <HAL_SPI_Transmit+0x158>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d102      	bne.n	80027a2 <HAL_SPI_Transmit+0x15e>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027a6:	e074      	b.n	8002892 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ce      	bne.n	8002750 <HAL_SPI_Transmit+0x10c>
 80027b2:	e04c      	b.n	800284e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_SPI_Transmit+0x17e>
 80027bc:	8afb      	ldrh	r3, [r7, #22]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d140      	bne.n	8002844 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027e8:	e02c      	b.n	8002844 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d113      	bne.n	8002820 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	7812      	ldrb	r2, [r2, #0]
 8002804:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	86da      	strh	r2, [r3, #54]	; 0x36
 800281e:	e011      	b.n	8002844 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002820:	f7fe ffa0 	bl	8001764 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d803      	bhi.n	8002838 <HAL_SPI_Transmit+0x1f4>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d102      	bne.n	800283e <HAL_SPI_Transmit+0x1fa>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002842:	e026      	b.n	8002892 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1cd      	bne.n	80027ea <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f894 	bl	8002980 <SPI_EndRxTxTransaction>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	77fb      	strb	r3, [r7, #31]
 800288e:	e000      	b.n	8002892 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002890:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	4613      	mov	r3, r2
 80028ba:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028bc:	e04c      	b.n	8002958 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d048      	beq.n	8002958 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028c6:	f7fe ff4d 	bl	8001764 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d902      	bls.n	80028dc <SPI_WaitFlagStateUntilTimeout+0x30>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d13d      	bne.n	8002958 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028f4:	d111      	bne.n	800291a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028fe:	d004      	beq.n	800290a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002908:	d107      	bne.n	800291a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002918:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002922:	d10f      	bne.n	8002944 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002942:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e00f      	b.n	8002978 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4013      	ands	r3, r2
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	429a      	cmp	r2, r3
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	429a      	cmp	r2, r3
 8002974:	d1a3      	bne.n	80028be <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <SPI_EndRxTxTransaction+0x7c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <SPI_EndRxTxTransaction+0x80>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0d5b      	lsrs	r3, r3, #21
 8002998:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800299c:	fb02 f303 	mul.w	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029aa:	d112      	bne.n	80029d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	2180      	movs	r1, #128	; 0x80
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f7ff ff78 	bl	80028ac <SPI_WaitFlagStateUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d016      	beq.n	80029f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	f043 0220 	orr.w	r2, r3, #32
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e00f      	b.n	80029f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3b01      	subs	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e8:	2b80      	cmp	r3, #128	; 0x80
 80029ea:	d0f2      	beq.n	80029d2 <SPI_EndRxTxTransaction+0x52>
 80029ec:	e000      	b.n	80029f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80029ee:	bf00      	nop
  }

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000028 	.word	0x20000028
 8002a00:	165e9f81 	.word	0x165e9f81

08002a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e03f      	b.n	8002a96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe fce4 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f829 	bl	8002aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ae2:	f023 030c 	bic.w	r3, r3, #12
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	68f9      	ldr	r1, [r7, #12]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0e:	f040 8199 	bne.w	8002e44 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4ac6      	ldr	r2, [pc, #792]	; (8002e30 <UART_SetConfig+0x390>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d00f      	beq.n	8002b3c <UART_SetConfig+0x9c>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4ac4      	ldr	r2, [pc, #784]	; (8002e34 <UART_SetConfig+0x394>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00a      	beq.n	8002b3c <UART_SetConfig+0x9c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4ac3      	ldr	r2, [pc, #780]	; (8002e38 <UART_SetConfig+0x398>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d005      	beq.n	8002b3c <UART_SetConfig+0x9c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4ac1      	ldr	r2, [pc, #772]	; (8002e3c <UART_SetConfig+0x39c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	f040 80bd 	bne.w	8002cb6 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b3c:	f7ff fac8 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8002b40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	461d      	mov	r5, r3
 8002b46:	f04f 0600 	mov.w	r6, #0
 8002b4a:	46a8      	mov	r8, r5
 8002b4c:	46b1      	mov	r9, r6
 8002b4e:	eb18 0308 	adds.w	r3, r8, r8
 8002b52:	eb49 0409 	adc.w	r4, r9, r9
 8002b56:	4698      	mov	r8, r3
 8002b58:	46a1      	mov	r9, r4
 8002b5a:	eb18 0805 	adds.w	r8, r8, r5
 8002b5e:	eb49 0906 	adc.w	r9, r9, r6
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b76:	4688      	mov	r8, r1
 8002b78:	4691      	mov	r9, r2
 8002b7a:	eb18 0005 	adds.w	r0, r8, r5
 8002b7e:	eb49 0106 	adc.w	r1, r9, r6
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	461d      	mov	r5, r3
 8002b88:	f04f 0600 	mov.w	r6, #0
 8002b8c:	196b      	adds	r3, r5, r5
 8002b8e:	eb46 0406 	adc.w	r4, r6, r6
 8002b92:	461a      	mov	r2, r3
 8002b94:	4623      	mov	r3, r4
 8002b96:	f7fd fb3f 	bl	8000218 <__aeabi_uldivmod>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4ba7      	ldr	r3, [pc, #668]	; (8002e40 <UART_SetConfig+0x3a0>)
 8002ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	461d      	mov	r5, r3
 8002bb0:	f04f 0600 	mov.w	r6, #0
 8002bb4:	46a9      	mov	r9, r5
 8002bb6:	46b2      	mov	sl, r6
 8002bb8:	eb19 0309 	adds.w	r3, r9, r9
 8002bbc:	eb4a 040a 	adc.w	r4, sl, sl
 8002bc0:	4699      	mov	r9, r3
 8002bc2:	46a2      	mov	sl, r4
 8002bc4:	eb19 0905 	adds.w	r9, r9, r5
 8002bc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bcc:	f04f 0100 	mov.w	r1, #0
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002be0:	4689      	mov	r9, r1
 8002be2:	4692      	mov	sl, r2
 8002be4:	eb19 0005 	adds.w	r0, r9, r5
 8002be8:	eb4a 0106 	adc.w	r1, sl, r6
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	461d      	mov	r5, r3
 8002bf2:	f04f 0600 	mov.w	r6, #0
 8002bf6:	196b      	adds	r3, r5, r5
 8002bf8:	eb46 0406 	adc.w	r4, r6, r6
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	f7fd fb0a 	bl	8000218 <__aeabi_uldivmod>
 8002c04:	4603      	mov	r3, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b8d      	ldr	r3, [pc, #564]	; (8002e40 <UART_SetConfig+0x3a0>)
 8002c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	2164      	movs	r1, #100	; 0x64
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	3332      	adds	r3, #50	; 0x32
 8002c1e:	4a88      	ldr	r2, [pc, #544]	; (8002e40 <UART_SetConfig+0x3a0>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c2c:	4498      	add	r8, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	461d      	mov	r5, r3
 8002c32:	f04f 0600 	mov.w	r6, #0
 8002c36:	46a9      	mov	r9, r5
 8002c38:	46b2      	mov	sl, r6
 8002c3a:	eb19 0309 	adds.w	r3, r9, r9
 8002c3e:	eb4a 040a 	adc.w	r4, sl, sl
 8002c42:	4699      	mov	r9, r3
 8002c44:	46a2      	mov	sl, r4
 8002c46:	eb19 0905 	adds.w	r9, r9, r5
 8002c4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c4e:	f04f 0100 	mov.w	r1, #0
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c62:	4689      	mov	r9, r1
 8002c64:	4692      	mov	sl, r2
 8002c66:	eb19 0005 	adds.w	r0, r9, r5
 8002c6a:	eb4a 0106 	adc.w	r1, sl, r6
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	461d      	mov	r5, r3
 8002c74:	f04f 0600 	mov.w	r6, #0
 8002c78:	196b      	adds	r3, r5, r5
 8002c7a:	eb46 0406 	adc.w	r4, r6, r6
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4623      	mov	r3, r4
 8002c82:	f7fd fac9 	bl	8000218 <__aeabi_uldivmod>
 8002c86:	4603      	mov	r3, r0
 8002c88:	460c      	mov	r4, r1
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b6c      	ldr	r3, [pc, #432]	; (8002e40 <UART_SetConfig+0x3a0>)
 8002c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2164      	movs	r1, #100	; 0x64
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	3332      	adds	r3, #50	; 0x32
 8002ca0:	4a67      	ldr	r2, [pc, #412]	; (8002e40 <UART_SetConfig+0x3a0>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	f003 0207 	and.w	r2, r3, #7
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4442      	add	r2, r8
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	e27d      	b.n	80031b2 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cb6:	f7ff f9f7 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 8002cba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	461d      	mov	r5, r3
 8002cc0:	f04f 0600 	mov.w	r6, #0
 8002cc4:	46a8      	mov	r8, r5
 8002cc6:	46b1      	mov	r9, r6
 8002cc8:	eb18 0308 	adds.w	r3, r8, r8
 8002ccc:	eb49 0409 	adc.w	r4, r9, r9
 8002cd0:	4698      	mov	r8, r3
 8002cd2:	46a1      	mov	r9, r4
 8002cd4:	eb18 0805 	adds.w	r8, r8, r5
 8002cd8:	eb49 0906 	adc.w	r9, r9, r6
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ce8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cf0:	4688      	mov	r8, r1
 8002cf2:	4691      	mov	r9, r2
 8002cf4:	eb18 0005 	adds.w	r0, r8, r5
 8002cf8:	eb49 0106 	adc.w	r1, r9, r6
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	461d      	mov	r5, r3
 8002d02:	f04f 0600 	mov.w	r6, #0
 8002d06:	196b      	adds	r3, r5, r5
 8002d08:	eb46 0406 	adc.w	r4, r6, r6
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4623      	mov	r3, r4
 8002d10:	f7fd fa82 	bl	8000218 <__aeabi_uldivmod>
 8002d14:	4603      	mov	r3, r0
 8002d16:	460c      	mov	r4, r1
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <UART_SetConfig+0x3a0>)
 8002d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	461d      	mov	r5, r3
 8002d2a:	f04f 0600 	mov.w	r6, #0
 8002d2e:	46a9      	mov	r9, r5
 8002d30:	46b2      	mov	sl, r6
 8002d32:	eb19 0309 	adds.w	r3, r9, r9
 8002d36:	eb4a 040a 	adc.w	r4, sl, sl
 8002d3a:	4699      	mov	r9, r3
 8002d3c:	46a2      	mov	sl, r4
 8002d3e:	eb19 0905 	adds.w	r9, r9, r5
 8002d42:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d5a:	4689      	mov	r9, r1
 8002d5c:	4692      	mov	sl, r2
 8002d5e:	eb19 0005 	adds.w	r0, r9, r5
 8002d62:	eb4a 0106 	adc.w	r1, sl, r6
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	461d      	mov	r5, r3
 8002d6c:	f04f 0600 	mov.w	r6, #0
 8002d70:	196b      	adds	r3, r5, r5
 8002d72:	eb46 0406 	adc.w	r4, r6, r6
 8002d76:	461a      	mov	r2, r3
 8002d78:	4623      	mov	r3, r4
 8002d7a:	f7fd fa4d 	bl	8000218 <__aeabi_uldivmod>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	460c      	mov	r4, r1
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <UART_SetConfig+0x3a0>)
 8002d86:	fba3 1302 	umull	r1, r3, r3, r2
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2164      	movs	r1, #100	; 0x64
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	3332      	adds	r3, #50	; 0x32
 8002d98:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <UART_SetConfig+0x3a0>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002da6:	4498      	add	r8, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	461d      	mov	r5, r3
 8002dac:	f04f 0600 	mov.w	r6, #0
 8002db0:	46a9      	mov	r9, r5
 8002db2:	46b2      	mov	sl, r6
 8002db4:	eb19 0309 	adds.w	r3, r9, r9
 8002db8:	eb4a 040a 	adc.w	r4, sl, sl
 8002dbc:	4699      	mov	r9, r3
 8002dbe:	46a2      	mov	sl, r4
 8002dc0:	eb19 0905 	adds.w	r9, r9, r5
 8002dc4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dc8:	f04f 0100 	mov.w	r1, #0
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ddc:	4689      	mov	r9, r1
 8002dde:	4692      	mov	sl, r2
 8002de0:	eb19 0005 	adds.w	r0, r9, r5
 8002de4:	eb4a 0106 	adc.w	r1, sl, r6
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	461d      	mov	r5, r3
 8002dee:	f04f 0600 	mov.w	r6, #0
 8002df2:	196b      	adds	r3, r5, r5
 8002df4:	eb46 0406 	adc.w	r4, r6, r6
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	f7fd fa0c 	bl	8000218 <__aeabi_uldivmod>
 8002e00:	4603      	mov	r3, r0
 8002e02:	460c      	mov	r4, r1
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <UART_SetConfig+0x3a0>)
 8002e08:	fba3 1302 	umull	r1, r3, r3, r2
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	2164      	movs	r1, #100	; 0x64
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	3332      	adds	r3, #50	; 0x32
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <UART_SetConfig+0x3a0>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	f003 0207 	and.w	r2, r3, #7
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4442      	add	r2, r8
 8002e2c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002e2e:	e1c0      	b.n	80031b2 <UART_SetConfig+0x712>
 8002e30:	40011000 	.word	0x40011000
 8002e34:	40011400 	.word	0x40011400
 8002e38:	40011800 	.word	0x40011800
 8002e3c:	40011c00 	.word	0x40011c00
 8002e40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4adc      	ldr	r2, [pc, #880]	; (80031bc <UART_SetConfig+0x71c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00f      	beq.n	8002e6e <UART_SetConfig+0x3ce>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4adb      	ldr	r2, [pc, #876]	; (80031c0 <UART_SetConfig+0x720>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00a      	beq.n	8002e6e <UART_SetConfig+0x3ce>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4ad9      	ldr	r2, [pc, #868]	; (80031c4 <UART_SetConfig+0x724>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d005      	beq.n	8002e6e <UART_SetConfig+0x3ce>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4ad8      	ldr	r2, [pc, #864]	; (80031c8 <UART_SetConfig+0x728>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	f040 80d1 	bne.w	8003010 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e6e:	f7ff f92f 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8002e72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	469a      	mov	sl, r3
 8002e78:	f04f 0b00 	mov.w	fp, #0
 8002e7c:	46d0      	mov	r8, sl
 8002e7e:	46d9      	mov	r9, fp
 8002e80:	eb18 0308 	adds.w	r3, r8, r8
 8002e84:	eb49 0409 	adc.w	r4, r9, r9
 8002e88:	4698      	mov	r8, r3
 8002e8a:	46a1      	mov	r9, r4
 8002e8c:	eb18 080a 	adds.w	r8, r8, sl
 8002e90:	eb49 090b 	adc.w	r9, r9, fp
 8002e94:	f04f 0100 	mov.w	r1, #0
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ea0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ea4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ea8:	4688      	mov	r8, r1
 8002eaa:	4691      	mov	r9, r2
 8002eac:	eb1a 0508 	adds.w	r5, sl, r8
 8002eb0:	eb4b 0609 	adc.w	r6, fp, r9
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	f04f 0400 	mov.w	r4, #0
 8002ec6:	0094      	lsls	r4, r2, #2
 8002ec8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ecc:	008b      	lsls	r3, r1, #2
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	4631      	mov	r1, r6
 8002ed6:	f7fd f99f 	bl	8000218 <__aeabi_uldivmod>
 8002eda:	4603      	mov	r3, r0
 8002edc:	460c      	mov	r4, r1
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4bba      	ldr	r3, [pc, #744]	; (80031cc <UART_SetConfig+0x72c>)
 8002ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	469b      	mov	fp, r3
 8002ef0:	f04f 0c00 	mov.w	ip, #0
 8002ef4:	46d9      	mov	r9, fp
 8002ef6:	46e2      	mov	sl, ip
 8002ef8:	eb19 0309 	adds.w	r3, r9, r9
 8002efc:	eb4a 040a 	adc.w	r4, sl, sl
 8002f00:	4699      	mov	r9, r3
 8002f02:	46a2      	mov	sl, r4
 8002f04:	eb19 090b 	adds.w	r9, r9, fp
 8002f08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f20:	4689      	mov	r9, r1
 8002f22:	4692      	mov	sl, r2
 8002f24:	eb1b 0509 	adds.w	r5, fp, r9
 8002f28:	eb4c 060a 	adc.w	r6, ip, sl
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4619      	mov	r1, r3
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	f04f 0400 	mov.w	r4, #0
 8002f3e:	0094      	lsls	r4, r2, #2
 8002f40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f44:	008b      	lsls	r3, r1, #2
 8002f46:	461a      	mov	r2, r3
 8002f48:	4623      	mov	r3, r4
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	4631      	mov	r1, r6
 8002f4e:	f7fd f963 	bl	8000218 <__aeabi_uldivmod>
 8002f52:	4603      	mov	r3, r0
 8002f54:	460c      	mov	r4, r1
 8002f56:	461a      	mov	r2, r3
 8002f58:	4b9c      	ldr	r3, [pc, #624]	; (80031cc <UART_SetConfig+0x72c>)
 8002f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2164      	movs	r1, #100	; 0x64
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	3332      	adds	r3, #50	; 0x32
 8002f6c:	4a97      	ldr	r2, [pc, #604]	; (80031cc <UART_SetConfig+0x72c>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f78:	4498      	add	r8, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	469b      	mov	fp, r3
 8002f7e:	f04f 0c00 	mov.w	ip, #0
 8002f82:	46d9      	mov	r9, fp
 8002f84:	46e2      	mov	sl, ip
 8002f86:	eb19 0309 	adds.w	r3, r9, r9
 8002f8a:	eb4a 040a 	adc.w	r4, sl, sl
 8002f8e:	4699      	mov	r9, r3
 8002f90:	46a2      	mov	sl, r4
 8002f92:	eb19 090b 	adds.w	r9, r9, fp
 8002f96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f9a:	f04f 0100 	mov.w	r1, #0
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002faa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fae:	4689      	mov	r9, r1
 8002fb0:	4692      	mov	sl, r2
 8002fb2:	eb1b 0509 	adds.w	r5, fp, r9
 8002fb6:	eb4c 060a 	adc.w	r6, ip, sl
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	f04f 0400 	mov.w	r4, #0
 8002fcc:	0094      	lsls	r4, r2, #2
 8002fce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fd2:	008b      	lsls	r3, r1, #2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	4628      	mov	r0, r5
 8002fda:	4631      	mov	r1, r6
 8002fdc:	f7fd f91c 	bl	8000218 <__aeabi_uldivmod>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b79      	ldr	r3, [pc, #484]	; (80031cc <UART_SetConfig+0x72c>)
 8002fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	2164      	movs	r1, #100	; 0x64
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	3332      	adds	r3, #50	; 0x32
 8002ffa:	4a74      	ldr	r2, [pc, #464]	; (80031cc <UART_SetConfig+0x72c>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4442      	add	r2, r8
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	e0d0      	b.n	80031b2 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003010:	f7ff f84a 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 8003014:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	469a      	mov	sl, r3
 800301a:	f04f 0b00 	mov.w	fp, #0
 800301e:	46d0      	mov	r8, sl
 8003020:	46d9      	mov	r9, fp
 8003022:	eb18 0308 	adds.w	r3, r8, r8
 8003026:	eb49 0409 	adc.w	r4, r9, r9
 800302a:	4698      	mov	r8, r3
 800302c:	46a1      	mov	r9, r4
 800302e:	eb18 080a 	adds.w	r8, r8, sl
 8003032:	eb49 090b 	adc.w	r9, r9, fp
 8003036:	f04f 0100 	mov.w	r1, #0
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003042:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003046:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800304a:	4688      	mov	r8, r1
 800304c:	4691      	mov	r9, r2
 800304e:	eb1a 0508 	adds.w	r5, sl, r8
 8003052:	eb4b 0609 	adc.w	r6, fp, r9
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4619      	mov	r1, r3
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	f04f 0400 	mov.w	r4, #0
 8003068:	0094      	lsls	r4, r2, #2
 800306a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800306e:	008b      	lsls	r3, r1, #2
 8003070:	461a      	mov	r2, r3
 8003072:	4623      	mov	r3, r4
 8003074:	4628      	mov	r0, r5
 8003076:	4631      	mov	r1, r6
 8003078:	f7fd f8ce 	bl	8000218 <__aeabi_uldivmod>
 800307c:	4603      	mov	r3, r0
 800307e:	460c      	mov	r4, r1
 8003080:	461a      	mov	r2, r3
 8003082:	4b52      	ldr	r3, [pc, #328]	; (80031cc <UART_SetConfig+0x72c>)
 8003084:	fba3 2302 	umull	r2, r3, r3, r2
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	469b      	mov	fp, r3
 8003092:	f04f 0c00 	mov.w	ip, #0
 8003096:	46d9      	mov	r9, fp
 8003098:	46e2      	mov	sl, ip
 800309a:	eb19 0309 	adds.w	r3, r9, r9
 800309e:	eb4a 040a 	adc.w	r4, sl, sl
 80030a2:	4699      	mov	r9, r3
 80030a4:	46a2      	mov	sl, r4
 80030a6:	eb19 090b 	adds.w	r9, r9, fp
 80030aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030c2:	4689      	mov	r9, r1
 80030c4:	4692      	mov	sl, r2
 80030c6:	eb1b 0509 	adds.w	r5, fp, r9
 80030ca:	eb4c 060a 	adc.w	r6, ip, sl
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4619      	mov	r1, r3
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	f04f 0400 	mov.w	r4, #0
 80030e0:	0094      	lsls	r4, r2, #2
 80030e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030e6:	008b      	lsls	r3, r1, #2
 80030e8:	461a      	mov	r2, r3
 80030ea:	4623      	mov	r3, r4
 80030ec:	4628      	mov	r0, r5
 80030ee:	4631      	mov	r1, r6
 80030f0:	f7fd f892 	bl	8000218 <__aeabi_uldivmod>
 80030f4:	4603      	mov	r3, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b34      	ldr	r3, [pc, #208]	; (80031cc <UART_SetConfig+0x72c>)
 80030fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2164      	movs	r1, #100	; 0x64
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	3332      	adds	r3, #50	; 0x32
 800310e:	4a2f      	ldr	r2, [pc, #188]	; (80031cc <UART_SetConfig+0x72c>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800311a:	4498      	add	r8, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	469b      	mov	fp, r3
 8003120:	f04f 0c00 	mov.w	ip, #0
 8003124:	46d9      	mov	r9, fp
 8003126:	46e2      	mov	sl, ip
 8003128:	eb19 0309 	adds.w	r3, r9, r9
 800312c:	eb4a 040a 	adc.w	r4, sl, sl
 8003130:	4699      	mov	r9, r3
 8003132:	46a2      	mov	sl, r4
 8003134:	eb19 090b 	adds.w	r9, r9, fp
 8003138:	eb4a 0a0c 	adc.w	sl, sl, ip
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003148:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800314c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003150:	4689      	mov	r9, r1
 8003152:	4692      	mov	sl, r2
 8003154:	eb1b 0509 	adds.w	r5, fp, r9
 8003158:	eb4c 060a 	adc.w	r6, ip, sl
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4619      	mov	r1, r3
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	f04f 0400 	mov.w	r4, #0
 800316e:	0094      	lsls	r4, r2, #2
 8003170:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003174:	008b      	lsls	r3, r1, #2
 8003176:	461a      	mov	r2, r3
 8003178:	4623      	mov	r3, r4
 800317a:	4628      	mov	r0, r5
 800317c:	4631      	mov	r1, r6
 800317e:	f7fd f84b 	bl	8000218 <__aeabi_uldivmod>
 8003182:	4603      	mov	r3, r0
 8003184:	460c      	mov	r4, r1
 8003186:	461a      	mov	r2, r3
 8003188:	4b10      	ldr	r3, [pc, #64]	; (80031cc <UART_SetConfig+0x72c>)
 800318a:	fba3 1302 	umull	r1, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2164      	movs	r1, #100	; 0x64
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	3332      	adds	r3, #50	; 0x32
 800319c:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <UART_SetConfig+0x72c>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4442      	add	r2, r8
 80031ae:	609a      	str	r2, [r3, #8]
}
 80031b0:	e7ff      	b.n	80031b2 <UART_SetConfig+0x712>
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031bc:	40011000 	.word	0x40011000
 80031c0:	40011400 	.word	0x40011400
 80031c4:	40011800 	.word	0x40011800
 80031c8:	40011c00 	.word	0x40011c00
 80031cc:	51eb851f 	.word	0x51eb851f

080031d0 <__errno>:
 80031d0:	4b01      	ldr	r3, [pc, #4]	; (80031d8 <__errno+0x8>)
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000034 	.word	0x20000034

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4e0d      	ldr	r6, [pc, #52]	; (8003214 <__libc_init_array+0x38>)
 80031e0:	4c0d      	ldr	r4, [pc, #52]	; (8003218 <__libc_init_array+0x3c>)
 80031e2:	1ba4      	subs	r4, r4, r6
 80031e4:	10a4      	asrs	r4, r4, #2
 80031e6:	2500      	movs	r5, #0
 80031e8:	42a5      	cmp	r5, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	4e0b      	ldr	r6, [pc, #44]	; (800321c <__libc_init_array+0x40>)
 80031ee:	4c0c      	ldr	r4, [pc, #48]	; (8003220 <__libc_init_array+0x44>)
 80031f0:	f000 fc90 	bl	8003b14 <_init>
 80031f4:	1ba4      	subs	r4, r4, r6
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	2500      	movs	r5, #0
 80031fa:	42a5      	cmp	r5, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003204:	4798      	blx	r3
 8003206:	3501      	adds	r5, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800320e:	4798      	blx	r3
 8003210:	3501      	adds	r5, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	08008138 	.word	0x08008138
 8003218:	08008138 	.word	0x08008138
 800321c:	08008138 	.word	0x08008138
 8003220:	0800813c 	.word	0x0800813c

08003224 <malloc>:
 8003224:	4b02      	ldr	r3, [pc, #8]	; (8003230 <malloc+0xc>)
 8003226:	4601      	mov	r1, r0
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	f000 b859 	b.w	80032e0 <_malloc_r>
 800322e:	bf00      	nop
 8003230:	20000034 	.word	0x20000034

08003234 <memset>:
 8003234:	4402      	add	r2, r0
 8003236:	4603      	mov	r3, r0
 8003238:	4293      	cmp	r3, r2
 800323a:	d100      	bne.n	800323e <memset+0xa>
 800323c:	4770      	bx	lr
 800323e:	f803 1b01 	strb.w	r1, [r3], #1
 8003242:	e7f9      	b.n	8003238 <memset+0x4>

08003244 <_free_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4605      	mov	r5, r0
 8003248:	2900      	cmp	r1, #0
 800324a:	d045      	beq.n	80032d8 <_free_r+0x94>
 800324c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003250:	1f0c      	subs	r4, r1, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	bfb8      	it	lt
 8003256:	18e4      	addlt	r4, r4, r3
 8003258:	f000 fbae 	bl	80039b8 <__malloc_lock>
 800325c:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <_free_r+0x98>)
 800325e:	6813      	ldr	r3, [r2, #0]
 8003260:	4610      	mov	r0, r2
 8003262:	b933      	cbnz	r3, 8003272 <_free_r+0x2e>
 8003264:	6063      	str	r3, [r4, #4]
 8003266:	6014      	str	r4, [r2, #0]
 8003268:	4628      	mov	r0, r5
 800326a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800326e:	f000 bba4 	b.w	80039ba <__malloc_unlock>
 8003272:	42a3      	cmp	r3, r4
 8003274:	d90c      	bls.n	8003290 <_free_r+0x4c>
 8003276:	6821      	ldr	r1, [r4, #0]
 8003278:	1862      	adds	r2, r4, r1
 800327a:	4293      	cmp	r3, r2
 800327c:	bf04      	itt	eq
 800327e:	681a      	ldreq	r2, [r3, #0]
 8003280:	685b      	ldreq	r3, [r3, #4]
 8003282:	6063      	str	r3, [r4, #4]
 8003284:	bf04      	itt	eq
 8003286:	1852      	addeq	r2, r2, r1
 8003288:	6022      	streq	r2, [r4, #0]
 800328a:	6004      	str	r4, [r0, #0]
 800328c:	e7ec      	b.n	8003268 <_free_r+0x24>
 800328e:	4613      	mov	r3, r2
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	b10a      	cbz	r2, 8003298 <_free_r+0x54>
 8003294:	42a2      	cmp	r2, r4
 8003296:	d9fa      	bls.n	800328e <_free_r+0x4a>
 8003298:	6819      	ldr	r1, [r3, #0]
 800329a:	1858      	adds	r0, r3, r1
 800329c:	42a0      	cmp	r0, r4
 800329e:	d10b      	bne.n	80032b8 <_free_r+0x74>
 80032a0:	6820      	ldr	r0, [r4, #0]
 80032a2:	4401      	add	r1, r0
 80032a4:	1858      	adds	r0, r3, r1
 80032a6:	4282      	cmp	r2, r0
 80032a8:	6019      	str	r1, [r3, #0]
 80032aa:	d1dd      	bne.n	8003268 <_free_r+0x24>
 80032ac:	6810      	ldr	r0, [r2, #0]
 80032ae:	6852      	ldr	r2, [r2, #4]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	4401      	add	r1, r0
 80032b4:	6019      	str	r1, [r3, #0]
 80032b6:	e7d7      	b.n	8003268 <_free_r+0x24>
 80032b8:	d902      	bls.n	80032c0 <_free_r+0x7c>
 80032ba:	230c      	movs	r3, #12
 80032bc:	602b      	str	r3, [r5, #0]
 80032be:	e7d3      	b.n	8003268 <_free_r+0x24>
 80032c0:	6820      	ldr	r0, [r4, #0]
 80032c2:	1821      	adds	r1, r4, r0
 80032c4:	428a      	cmp	r2, r1
 80032c6:	bf04      	itt	eq
 80032c8:	6811      	ldreq	r1, [r2, #0]
 80032ca:	6852      	ldreq	r2, [r2, #4]
 80032cc:	6062      	str	r2, [r4, #4]
 80032ce:	bf04      	itt	eq
 80032d0:	1809      	addeq	r1, r1, r0
 80032d2:	6021      	streq	r1, [r4, #0]
 80032d4:	605c      	str	r4, [r3, #4]
 80032d6:	e7c7      	b.n	8003268 <_free_r+0x24>
 80032d8:	bd38      	pop	{r3, r4, r5, pc}
 80032da:	bf00      	nop
 80032dc:	200000b8 	.word	0x200000b8

080032e0 <_malloc_r>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	1ccd      	adds	r5, r1, #3
 80032e4:	f025 0503 	bic.w	r5, r5, #3
 80032e8:	3508      	adds	r5, #8
 80032ea:	2d0c      	cmp	r5, #12
 80032ec:	bf38      	it	cc
 80032ee:	250c      	movcc	r5, #12
 80032f0:	2d00      	cmp	r5, #0
 80032f2:	4606      	mov	r6, r0
 80032f4:	db01      	blt.n	80032fa <_malloc_r+0x1a>
 80032f6:	42a9      	cmp	r1, r5
 80032f8:	d903      	bls.n	8003302 <_malloc_r+0x22>
 80032fa:	230c      	movs	r3, #12
 80032fc:	6033      	str	r3, [r6, #0]
 80032fe:	2000      	movs	r0, #0
 8003300:	bd70      	pop	{r4, r5, r6, pc}
 8003302:	f000 fb59 	bl	80039b8 <__malloc_lock>
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <_malloc_r+0xac>)
 8003308:	6814      	ldr	r4, [r2, #0]
 800330a:	4621      	mov	r1, r4
 800330c:	b991      	cbnz	r1, 8003334 <_malloc_r+0x54>
 800330e:	4c20      	ldr	r4, [pc, #128]	; (8003390 <_malloc_r+0xb0>)
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	b91b      	cbnz	r3, 800331c <_malloc_r+0x3c>
 8003314:	4630      	mov	r0, r6
 8003316:	f000 f8a1 	bl	800345c <_sbrk_r>
 800331a:	6020      	str	r0, [r4, #0]
 800331c:	4629      	mov	r1, r5
 800331e:	4630      	mov	r0, r6
 8003320:	f000 f89c 	bl	800345c <_sbrk_r>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d124      	bne.n	8003372 <_malloc_r+0x92>
 8003328:	230c      	movs	r3, #12
 800332a:	6033      	str	r3, [r6, #0]
 800332c:	4630      	mov	r0, r6
 800332e:	f000 fb44 	bl	80039ba <__malloc_unlock>
 8003332:	e7e4      	b.n	80032fe <_malloc_r+0x1e>
 8003334:	680b      	ldr	r3, [r1, #0]
 8003336:	1b5b      	subs	r3, r3, r5
 8003338:	d418      	bmi.n	800336c <_malloc_r+0x8c>
 800333a:	2b0b      	cmp	r3, #11
 800333c:	d90f      	bls.n	800335e <_malloc_r+0x7e>
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	50cd      	str	r5, [r1, r3]
 8003342:	18cc      	adds	r4, r1, r3
 8003344:	4630      	mov	r0, r6
 8003346:	f000 fb38 	bl	80039ba <__malloc_unlock>
 800334a:	f104 000b 	add.w	r0, r4, #11
 800334e:	1d23      	adds	r3, r4, #4
 8003350:	f020 0007 	bic.w	r0, r0, #7
 8003354:	1ac3      	subs	r3, r0, r3
 8003356:	d0d3      	beq.n	8003300 <_malloc_r+0x20>
 8003358:	425a      	negs	r2, r3
 800335a:	50e2      	str	r2, [r4, r3]
 800335c:	e7d0      	b.n	8003300 <_malloc_r+0x20>
 800335e:	428c      	cmp	r4, r1
 8003360:	684b      	ldr	r3, [r1, #4]
 8003362:	bf16      	itet	ne
 8003364:	6063      	strne	r3, [r4, #4]
 8003366:	6013      	streq	r3, [r2, #0]
 8003368:	460c      	movne	r4, r1
 800336a:	e7eb      	b.n	8003344 <_malloc_r+0x64>
 800336c:	460c      	mov	r4, r1
 800336e:	6849      	ldr	r1, [r1, #4]
 8003370:	e7cc      	b.n	800330c <_malloc_r+0x2c>
 8003372:	1cc4      	adds	r4, r0, #3
 8003374:	f024 0403 	bic.w	r4, r4, #3
 8003378:	42a0      	cmp	r0, r4
 800337a:	d005      	beq.n	8003388 <_malloc_r+0xa8>
 800337c:	1a21      	subs	r1, r4, r0
 800337e:	4630      	mov	r0, r6
 8003380:	f000 f86c 	bl	800345c <_sbrk_r>
 8003384:	3001      	adds	r0, #1
 8003386:	d0cf      	beq.n	8003328 <_malloc_r+0x48>
 8003388:	6025      	str	r5, [r4, #0]
 800338a:	e7db      	b.n	8003344 <_malloc_r+0x64>
 800338c:	200000b8 	.word	0x200000b8
 8003390:	200000bc 	.word	0x200000bc

08003394 <_puts_r>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	460e      	mov	r6, r1
 8003398:	4605      	mov	r5, r0
 800339a:	b118      	cbz	r0, 80033a4 <_puts_r+0x10>
 800339c:	6983      	ldr	r3, [r0, #24]
 800339e:	b90b      	cbnz	r3, 80033a4 <_puts_r+0x10>
 80033a0:	f000 fa1c 	bl	80037dc <__sinit>
 80033a4:	69ab      	ldr	r3, [r5, #24]
 80033a6:	68ac      	ldr	r4, [r5, #8]
 80033a8:	b913      	cbnz	r3, 80033b0 <_puts_r+0x1c>
 80033aa:	4628      	mov	r0, r5
 80033ac:	f000 fa16 	bl	80037dc <__sinit>
 80033b0:	4b23      	ldr	r3, [pc, #140]	; (8003440 <_puts_r+0xac>)
 80033b2:	429c      	cmp	r4, r3
 80033b4:	d117      	bne.n	80033e6 <_puts_r+0x52>
 80033b6:	686c      	ldr	r4, [r5, #4]
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	071b      	lsls	r3, r3, #28
 80033bc:	d51d      	bpl.n	80033fa <_puts_r+0x66>
 80033be:	6923      	ldr	r3, [r4, #16]
 80033c0:	b1db      	cbz	r3, 80033fa <_puts_r+0x66>
 80033c2:	3e01      	subs	r6, #1
 80033c4:	68a3      	ldr	r3, [r4, #8]
 80033c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80033ca:	3b01      	subs	r3, #1
 80033cc:	60a3      	str	r3, [r4, #8]
 80033ce:	b9e9      	cbnz	r1, 800340c <_puts_r+0x78>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	da2e      	bge.n	8003432 <_puts_r+0x9e>
 80033d4:	4622      	mov	r2, r4
 80033d6:	210a      	movs	r1, #10
 80033d8:	4628      	mov	r0, r5
 80033da:	f000 f84f 	bl	800347c <__swbuf_r>
 80033de:	3001      	adds	r0, #1
 80033e0:	d011      	beq.n	8003406 <_puts_r+0x72>
 80033e2:	200a      	movs	r0, #10
 80033e4:	e011      	b.n	800340a <_puts_r+0x76>
 80033e6:	4b17      	ldr	r3, [pc, #92]	; (8003444 <_puts_r+0xb0>)
 80033e8:	429c      	cmp	r4, r3
 80033ea:	d101      	bne.n	80033f0 <_puts_r+0x5c>
 80033ec:	68ac      	ldr	r4, [r5, #8]
 80033ee:	e7e3      	b.n	80033b8 <_puts_r+0x24>
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <_puts_r+0xb4>)
 80033f2:	429c      	cmp	r4, r3
 80033f4:	bf08      	it	eq
 80033f6:	68ec      	ldreq	r4, [r5, #12]
 80033f8:	e7de      	b.n	80033b8 <_puts_r+0x24>
 80033fa:	4621      	mov	r1, r4
 80033fc:	4628      	mov	r0, r5
 80033fe:	f000 f88f 	bl	8003520 <__swsetup_r>
 8003402:	2800      	cmp	r0, #0
 8003404:	d0dd      	beq.n	80033c2 <_puts_r+0x2e>
 8003406:	f04f 30ff 	mov.w	r0, #4294967295
 800340a:	bd70      	pop	{r4, r5, r6, pc}
 800340c:	2b00      	cmp	r3, #0
 800340e:	da04      	bge.n	800341a <_puts_r+0x86>
 8003410:	69a2      	ldr	r2, [r4, #24]
 8003412:	429a      	cmp	r2, r3
 8003414:	dc06      	bgt.n	8003424 <_puts_r+0x90>
 8003416:	290a      	cmp	r1, #10
 8003418:	d004      	beq.n	8003424 <_puts_r+0x90>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	6022      	str	r2, [r4, #0]
 8003420:	7019      	strb	r1, [r3, #0]
 8003422:	e7cf      	b.n	80033c4 <_puts_r+0x30>
 8003424:	4622      	mov	r2, r4
 8003426:	4628      	mov	r0, r5
 8003428:	f000 f828 	bl	800347c <__swbuf_r>
 800342c:	3001      	adds	r0, #1
 800342e:	d1c9      	bne.n	80033c4 <_puts_r+0x30>
 8003430:	e7e9      	b.n	8003406 <_puts_r+0x72>
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	200a      	movs	r0, #10
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	6022      	str	r2, [r4, #0]
 800343a:	7018      	strb	r0, [r3, #0]
 800343c:	e7e5      	b.n	800340a <_puts_r+0x76>
 800343e:	bf00      	nop
 8003440:	080080f0 	.word	0x080080f0
 8003444:	08008110 	.word	0x08008110
 8003448:	080080d0 	.word	0x080080d0

0800344c <puts>:
 800344c:	4b02      	ldr	r3, [pc, #8]	; (8003458 <puts+0xc>)
 800344e:	4601      	mov	r1, r0
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	f7ff bf9f 	b.w	8003394 <_puts_r>
 8003456:	bf00      	nop
 8003458:	20000034 	.word	0x20000034

0800345c <_sbrk_r>:
 800345c:	b538      	push	{r3, r4, r5, lr}
 800345e:	4c06      	ldr	r4, [pc, #24]	; (8003478 <_sbrk_r+0x1c>)
 8003460:	2300      	movs	r3, #0
 8003462:	4605      	mov	r5, r0
 8003464:	4608      	mov	r0, r1
 8003466:	6023      	str	r3, [r4, #0]
 8003468:	f7fe f8aa 	bl	80015c0 <_sbrk>
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	d102      	bne.n	8003476 <_sbrk_r+0x1a>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	b103      	cbz	r3, 8003476 <_sbrk_r+0x1a>
 8003474:	602b      	str	r3, [r5, #0]
 8003476:	bd38      	pop	{r3, r4, r5, pc}
 8003478:	2000017c 	.word	0x2000017c

0800347c <__swbuf_r>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	460e      	mov	r6, r1
 8003480:	4614      	mov	r4, r2
 8003482:	4605      	mov	r5, r0
 8003484:	b118      	cbz	r0, 800348e <__swbuf_r+0x12>
 8003486:	6983      	ldr	r3, [r0, #24]
 8003488:	b90b      	cbnz	r3, 800348e <__swbuf_r+0x12>
 800348a:	f000 f9a7 	bl	80037dc <__sinit>
 800348e:	4b21      	ldr	r3, [pc, #132]	; (8003514 <__swbuf_r+0x98>)
 8003490:	429c      	cmp	r4, r3
 8003492:	d12a      	bne.n	80034ea <__swbuf_r+0x6e>
 8003494:	686c      	ldr	r4, [r5, #4]
 8003496:	69a3      	ldr	r3, [r4, #24]
 8003498:	60a3      	str	r3, [r4, #8]
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	071a      	lsls	r2, r3, #28
 800349e:	d52e      	bpl.n	80034fe <__swbuf_r+0x82>
 80034a0:	6923      	ldr	r3, [r4, #16]
 80034a2:	b363      	cbz	r3, 80034fe <__swbuf_r+0x82>
 80034a4:	6923      	ldr	r3, [r4, #16]
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	1ac0      	subs	r0, r0, r3
 80034aa:	6963      	ldr	r3, [r4, #20]
 80034ac:	b2f6      	uxtb	r6, r6
 80034ae:	4283      	cmp	r3, r0
 80034b0:	4637      	mov	r7, r6
 80034b2:	dc04      	bgt.n	80034be <__swbuf_r+0x42>
 80034b4:	4621      	mov	r1, r4
 80034b6:	4628      	mov	r0, r5
 80034b8:	f000 f926 	bl	8003708 <_fflush_r>
 80034bc:	bb28      	cbnz	r0, 800350a <__swbuf_r+0x8e>
 80034be:	68a3      	ldr	r3, [r4, #8]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	60a3      	str	r3, [r4, #8]
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	6022      	str	r2, [r4, #0]
 80034ca:	701e      	strb	r6, [r3, #0]
 80034cc:	6963      	ldr	r3, [r4, #20]
 80034ce:	3001      	adds	r0, #1
 80034d0:	4283      	cmp	r3, r0
 80034d2:	d004      	beq.n	80034de <__swbuf_r+0x62>
 80034d4:	89a3      	ldrh	r3, [r4, #12]
 80034d6:	07db      	lsls	r3, r3, #31
 80034d8:	d519      	bpl.n	800350e <__swbuf_r+0x92>
 80034da:	2e0a      	cmp	r6, #10
 80034dc:	d117      	bne.n	800350e <__swbuf_r+0x92>
 80034de:	4621      	mov	r1, r4
 80034e0:	4628      	mov	r0, r5
 80034e2:	f000 f911 	bl	8003708 <_fflush_r>
 80034e6:	b190      	cbz	r0, 800350e <__swbuf_r+0x92>
 80034e8:	e00f      	b.n	800350a <__swbuf_r+0x8e>
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <__swbuf_r+0x9c>)
 80034ec:	429c      	cmp	r4, r3
 80034ee:	d101      	bne.n	80034f4 <__swbuf_r+0x78>
 80034f0:	68ac      	ldr	r4, [r5, #8]
 80034f2:	e7d0      	b.n	8003496 <__swbuf_r+0x1a>
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <__swbuf_r+0xa0>)
 80034f6:	429c      	cmp	r4, r3
 80034f8:	bf08      	it	eq
 80034fa:	68ec      	ldreq	r4, [r5, #12]
 80034fc:	e7cb      	b.n	8003496 <__swbuf_r+0x1a>
 80034fe:	4621      	mov	r1, r4
 8003500:	4628      	mov	r0, r5
 8003502:	f000 f80d 	bl	8003520 <__swsetup_r>
 8003506:	2800      	cmp	r0, #0
 8003508:	d0cc      	beq.n	80034a4 <__swbuf_r+0x28>
 800350a:	f04f 37ff 	mov.w	r7, #4294967295
 800350e:	4638      	mov	r0, r7
 8003510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003512:	bf00      	nop
 8003514:	080080f0 	.word	0x080080f0
 8003518:	08008110 	.word	0x08008110
 800351c:	080080d0 	.word	0x080080d0

08003520 <__swsetup_r>:
 8003520:	4b32      	ldr	r3, [pc, #200]	; (80035ec <__swsetup_r+0xcc>)
 8003522:	b570      	push	{r4, r5, r6, lr}
 8003524:	681d      	ldr	r5, [r3, #0]
 8003526:	4606      	mov	r6, r0
 8003528:	460c      	mov	r4, r1
 800352a:	b125      	cbz	r5, 8003536 <__swsetup_r+0x16>
 800352c:	69ab      	ldr	r3, [r5, #24]
 800352e:	b913      	cbnz	r3, 8003536 <__swsetup_r+0x16>
 8003530:	4628      	mov	r0, r5
 8003532:	f000 f953 	bl	80037dc <__sinit>
 8003536:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <__swsetup_r+0xd0>)
 8003538:	429c      	cmp	r4, r3
 800353a:	d10f      	bne.n	800355c <__swsetup_r+0x3c>
 800353c:	686c      	ldr	r4, [r5, #4]
 800353e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003542:	b29a      	uxth	r2, r3
 8003544:	0715      	lsls	r5, r2, #28
 8003546:	d42c      	bmi.n	80035a2 <__swsetup_r+0x82>
 8003548:	06d0      	lsls	r0, r2, #27
 800354a:	d411      	bmi.n	8003570 <__swsetup_r+0x50>
 800354c:	2209      	movs	r2, #9
 800354e:	6032      	str	r2, [r6, #0]
 8003550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003554:	81a3      	strh	r3, [r4, #12]
 8003556:	f04f 30ff 	mov.w	r0, #4294967295
 800355a:	e03e      	b.n	80035da <__swsetup_r+0xba>
 800355c:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <__swsetup_r+0xd4>)
 800355e:	429c      	cmp	r4, r3
 8003560:	d101      	bne.n	8003566 <__swsetup_r+0x46>
 8003562:	68ac      	ldr	r4, [r5, #8]
 8003564:	e7eb      	b.n	800353e <__swsetup_r+0x1e>
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <__swsetup_r+0xd8>)
 8003568:	429c      	cmp	r4, r3
 800356a:	bf08      	it	eq
 800356c:	68ec      	ldreq	r4, [r5, #12]
 800356e:	e7e6      	b.n	800353e <__swsetup_r+0x1e>
 8003570:	0751      	lsls	r1, r2, #29
 8003572:	d512      	bpl.n	800359a <__swsetup_r+0x7a>
 8003574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003576:	b141      	cbz	r1, 800358a <__swsetup_r+0x6a>
 8003578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800357c:	4299      	cmp	r1, r3
 800357e:	d002      	beq.n	8003586 <__swsetup_r+0x66>
 8003580:	4630      	mov	r0, r6
 8003582:	f7ff fe5f 	bl	8003244 <_free_r>
 8003586:	2300      	movs	r3, #0
 8003588:	6363      	str	r3, [r4, #52]	; 0x34
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003590:	81a3      	strh	r3, [r4, #12]
 8003592:	2300      	movs	r3, #0
 8003594:	6063      	str	r3, [r4, #4]
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	81a3      	strh	r3, [r4, #12]
 80035a2:	6923      	ldr	r3, [r4, #16]
 80035a4:	b94b      	cbnz	r3, 80035ba <__swsetup_r+0x9a>
 80035a6:	89a3      	ldrh	r3, [r4, #12]
 80035a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b0:	d003      	beq.n	80035ba <__swsetup_r+0x9a>
 80035b2:	4621      	mov	r1, r4
 80035b4:	4630      	mov	r0, r6
 80035b6:	f000 f9bf 	bl	8003938 <__smakebuf_r>
 80035ba:	89a2      	ldrh	r2, [r4, #12]
 80035bc:	f012 0301 	ands.w	r3, r2, #1
 80035c0:	d00c      	beq.n	80035dc <__swsetup_r+0xbc>
 80035c2:	2300      	movs	r3, #0
 80035c4:	60a3      	str	r3, [r4, #8]
 80035c6:	6963      	ldr	r3, [r4, #20]
 80035c8:	425b      	negs	r3, r3
 80035ca:	61a3      	str	r3, [r4, #24]
 80035cc:	6923      	ldr	r3, [r4, #16]
 80035ce:	b953      	cbnz	r3, 80035e6 <__swsetup_r+0xc6>
 80035d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80035d8:	d1ba      	bne.n	8003550 <__swsetup_r+0x30>
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	0792      	lsls	r2, r2, #30
 80035de:	bf58      	it	pl
 80035e0:	6963      	ldrpl	r3, [r4, #20]
 80035e2:	60a3      	str	r3, [r4, #8]
 80035e4:	e7f2      	b.n	80035cc <__swsetup_r+0xac>
 80035e6:	2000      	movs	r0, #0
 80035e8:	e7f7      	b.n	80035da <__swsetup_r+0xba>
 80035ea:	bf00      	nop
 80035ec:	20000034 	.word	0x20000034
 80035f0:	080080f0 	.word	0x080080f0
 80035f4:	08008110 	.word	0x08008110
 80035f8:	080080d0 	.word	0x080080d0

080035fc <__sflush_r>:
 80035fc:	898a      	ldrh	r2, [r1, #12]
 80035fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003602:	4605      	mov	r5, r0
 8003604:	0710      	lsls	r0, r2, #28
 8003606:	460c      	mov	r4, r1
 8003608:	d458      	bmi.n	80036bc <__sflush_r+0xc0>
 800360a:	684b      	ldr	r3, [r1, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	dc05      	bgt.n	800361c <__sflush_r+0x20>
 8003610:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	dc02      	bgt.n	800361c <__sflush_r+0x20>
 8003616:	2000      	movs	r0, #0
 8003618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800361c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800361e:	2e00      	cmp	r6, #0
 8003620:	d0f9      	beq.n	8003616 <__sflush_r+0x1a>
 8003622:	2300      	movs	r3, #0
 8003624:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003628:	682f      	ldr	r7, [r5, #0]
 800362a:	6a21      	ldr	r1, [r4, #32]
 800362c:	602b      	str	r3, [r5, #0]
 800362e:	d032      	beq.n	8003696 <__sflush_r+0x9a>
 8003630:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	075a      	lsls	r2, r3, #29
 8003636:	d505      	bpl.n	8003644 <__sflush_r+0x48>
 8003638:	6863      	ldr	r3, [r4, #4]
 800363a:	1ac0      	subs	r0, r0, r3
 800363c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800363e:	b10b      	cbz	r3, 8003644 <__sflush_r+0x48>
 8003640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003642:	1ac0      	subs	r0, r0, r3
 8003644:	2300      	movs	r3, #0
 8003646:	4602      	mov	r2, r0
 8003648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800364a:	6a21      	ldr	r1, [r4, #32]
 800364c:	4628      	mov	r0, r5
 800364e:	47b0      	blx	r6
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	d106      	bne.n	8003664 <__sflush_r+0x68>
 8003656:	6829      	ldr	r1, [r5, #0]
 8003658:	291d      	cmp	r1, #29
 800365a:	d848      	bhi.n	80036ee <__sflush_r+0xf2>
 800365c:	4a29      	ldr	r2, [pc, #164]	; (8003704 <__sflush_r+0x108>)
 800365e:	40ca      	lsrs	r2, r1
 8003660:	07d6      	lsls	r6, r2, #31
 8003662:	d544      	bpl.n	80036ee <__sflush_r+0xf2>
 8003664:	2200      	movs	r2, #0
 8003666:	6062      	str	r2, [r4, #4]
 8003668:	04d9      	lsls	r1, r3, #19
 800366a:	6922      	ldr	r2, [r4, #16]
 800366c:	6022      	str	r2, [r4, #0]
 800366e:	d504      	bpl.n	800367a <__sflush_r+0x7e>
 8003670:	1c42      	adds	r2, r0, #1
 8003672:	d101      	bne.n	8003678 <__sflush_r+0x7c>
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	b903      	cbnz	r3, 800367a <__sflush_r+0x7e>
 8003678:	6560      	str	r0, [r4, #84]	; 0x54
 800367a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800367c:	602f      	str	r7, [r5, #0]
 800367e:	2900      	cmp	r1, #0
 8003680:	d0c9      	beq.n	8003616 <__sflush_r+0x1a>
 8003682:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003686:	4299      	cmp	r1, r3
 8003688:	d002      	beq.n	8003690 <__sflush_r+0x94>
 800368a:	4628      	mov	r0, r5
 800368c:	f7ff fdda 	bl	8003244 <_free_r>
 8003690:	2000      	movs	r0, #0
 8003692:	6360      	str	r0, [r4, #52]	; 0x34
 8003694:	e7c0      	b.n	8003618 <__sflush_r+0x1c>
 8003696:	2301      	movs	r3, #1
 8003698:	4628      	mov	r0, r5
 800369a:	47b0      	blx	r6
 800369c:	1c41      	adds	r1, r0, #1
 800369e:	d1c8      	bne.n	8003632 <__sflush_r+0x36>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0c5      	beq.n	8003632 <__sflush_r+0x36>
 80036a6:	2b1d      	cmp	r3, #29
 80036a8:	d001      	beq.n	80036ae <__sflush_r+0xb2>
 80036aa:	2b16      	cmp	r3, #22
 80036ac:	d101      	bne.n	80036b2 <__sflush_r+0xb6>
 80036ae:	602f      	str	r7, [r5, #0]
 80036b0:	e7b1      	b.n	8003616 <__sflush_r+0x1a>
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b8:	81a3      	strh	r3, [r4, #12]
 80036ba:	e7ad      	b.n	8003618 <__sflush_r+0x1c>
 80036bc:	690f      	ldr	r7, [r1, #16]
 80036be:	2f00      	cmp	r7, #0
 80036c0:	d0a9      	beq.n	8003616 <__sflush_r+0x1a>
 80036c2:	0793      	lsls	r3, r2, #30
 80036c4:	680e      	ldr	r6, [r1, #0]
 80036c6:	bf08      	it	eq
 80036c8:	694b      	ldreq	r3, [r1, #20]
 80036ca:	600f      	str	r7, [r1, #0]
 80036cc:	bf18      	it	ne
 80036ce:	2300      	movne	r3, #0
 80036d0:	eba6 0807 	sub.w	r8, r6, r7
 80036d4:	608b      	str	r3, [r1, #8]
 80036d6:	f1b8 0f00 	cmp.w	r8, #0
 80036da:	dd9c      	ble.n	8003616 <__sflush_r+0x1a>
 80036dc:	4643      	mov	r3, r8
 80036de:	463a      	mov	r2, r7
 80036e0:	6a21      	ldr	r1, [r4, #32]
 80036e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b0      	blx	r6
 80036e8:	2800      	cmp	r0, #0
 80036ea:	dc06      	bgt.n	80036fa <__sflush_r+0xfe>
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f2:	81a3      	strh	r3, [r4, #12]
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	e78e      	b.n	8003618 <__sflush_r+0x1c>
 80036fa:	4407      	add	r7, r0
 80036fc:	eba8 0800 	sub.w	r8, r8, r0
 8003700:	e7e9      	b.n	80036d6 <__sflush_r+0xda>
 8003702:	bf00      	nop
 8003704:	20400001 	.word	0x20400001

08003708 <_fflush_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	690b      	ldr	r3, [r1, #16]
 800370c:	4605      	mov	r5, r0
 800370e:	460c      	mov	r4, r1
 8003710:	b1db      	cbz	r3, 800374a <_fflush_r+0x42>
 8003712:	b118      	cbz	r0, 800371c <_fflush_r+0x14>
 8003714:	6983      	ldr	r3, [r0, #24]
 8003716:	b90b      	cbnz	r3, 800371c <_fflush_r+0x14>
 8003718:	f000 f860 	bl	80037dc <__sinit>
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <_fflush_r+0x48>)
 800371e:	429c      	cmp	r4, r3
 8003720:	d109      	bne.n	8003736 <_fflush_r+0x2e>
 8003722:	686c      	ldr	r4, [r5, #4]
 8003724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003728:	b17b      	cbz	r3, 800374a <_fflush_r+0x42>
 800372a:	4621      	mov	r1, r4
 800372c:	4628      	mov	r0, r5
 800372e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003732:	f7ff bf63 	b.w	80035fc <__sflush_r>
 8003736:	4b07      	ldr	r3, [pc, #28]	; (8003754 <_fflush_r+0x4c>)
 8003738:	429c      	cmp	r4, r3
 800373a:	d101      	bne.n	8003740 <_fflush_r+0x38>
 800373c:	68ac      	ldr	r4, [r5, #8]
 800373e:	e7f1      	b.n	8003724 <_fflush_r+0x1c>
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <_fflush_r+0x50>)
 8003742:	429c      	cmp	r4, r3
 8003744:	bf08      	it	eq
 8003746:	68ec      	ldreq	r4, [r5, #12]
 8003748:	e7ec      	b.n	8003724 <_fflush_r+0x1c>
 800374a:	2000      	movs	r0, #0
 800374c:	bd38      	pop	{r3, r4, r5, pc}
 800374e:	bf00      	nop
 8003750:	080080f0 	.word	0x080080f0
 8003754:	08008110 	.word	0x08008110
 8003758:	080080d0 	.word	0x080080d0

0800375c <std>:
 800375c:	2300      	movs	r3, #0
 800375e:	b510      	push	{r4, lr}
 8003760:	4604      	mov	r4, r0
 8003762:	e9c0 3300 	strd	r3, r3, [r0]
 8003766:	6083      	str	r3, [r0, #8]
 8003768:	8181      	strh	r1, [r0, #12]
 800376a:	6643      	str	r3, [r0, #100]	; 0x64
 800376c:	81c2      	strh	r2, [r0, #14]
 800376e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003772:	6183      	str	r3, [r0, #24]
 8003774:	4619      	mov	r1, r3
 8003776:	2208      	movs	r2, #8
 8003778:	305c      	adds	r0, #92	; 0x5c
 800377a:	f7ff fd5b 	bl	8003234 <memset>
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <std+0x38>)
 8003780:	6263      	str	r3, [r4, #36]	; 0x24
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <std+0x3c>)
 8003784:	62a3      	str	r3, [r4, #40]	; 0x28
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <std+0x40>)
 8003788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <std+0x44>)
 800378c:	6224      	str	r4, [r4, #32]
 800378e:	6323      	str	r3, [r4, #48]	; 0x30
 8003790:	bd10      	pop	{r4, pc}
 8003792:	bf00      	nop
 8003794:	080039bd 	.word	0x080039bd
 8003798:	080039df 	.word	0x080039df
 800379c:	08003a17 	.word	0x08003a17
 80037a0:	08003a3b 	.word	0x08003a3b

080037a4 <_cleanup_r>:
 80037a4:	4901      	ldr	r1, [pc, #4]	; (80037ac <_cleanup_r+0x8>)
 80037a6:	f000 b885 	b.w	80038b4 <_fwalk_reent>
 80037aa:	bf00      	nop
 80037ac:	08003709 	.word	0x08003709

080037b0 <__sfmoreglue>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	1e4a      	subs	r2, r1, #1
 80037b4:	2568      	movs	r5, #104	; 0x68
 80037b6:	4355      	muls	r5, r2
 80037b8:	460e      	mov	r6, r1
 80037ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037be:	f7ff fd8f 	bl	80032e0 <_malloc_r>
 80037c2:	4604      	mov	r4, r0
 80037c4:	b140      	cbz	r0, 80037d8 <__sfmoreglue+0x28>
 80037c6:	2100      	movs	r1, #0
 80037c8:	e9c0 1600 	strd	r1, r6, [r0]
 80037cc:	300c      	adds	r0, #12
 80037ce:	60a0      	str	r0, [r4, #8]
 80037d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037d4:	f7ff fd2e 	bl	8003234 <memset>
 80037d8:	4620      	mov	r0, r4
 80037da:	bd70      	pop	{r4, r5, r6, pc}

080037dc <__sinit>:
 80037dc:	6983      	ldr	r3, [r0, #24]
 80037de:	b510      	push	{r4, lr}
 80037e0:	4604      	mov	r4, r0
 80037e2:	bb33      	cbnz	r3, 8003832 <__sinit+0x56>
 80037e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80037e8:	6503      	str	r3, [r0, #80]	; 0x50
 80037ea:	4b12      	ldr	r3, [pc, #72]	; (8003834 <__sinit+0x58>)
 80037ec:	4a12      	ldr	r2, [pc, #72]	; (8003838 <__sinit+0x5c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6282      	str	r2, [r0, #40]	; 0x28
 80037f2:	4298      	cmp	r0, r3
 80037f4:	bf04      	itt	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	6183      	streq	r3, [r0, #24]
 80037fa:	f000 f81f 	bl	800383c <__sfp>
 80037fe:	6060      	str	r0, [r4, #4]
 8003800:	4620      	mov	r0, r4
 8003802:	f000 f81b 	bl	800383c <__sfp>
 8003806:	60a0      	str	r0, [r4, #8]
 8003808:	4620      	mov	r0, r4
 800380a:	f000 f817 	bl	800383c <__sfp>
 800380e:	2200      	movs	r2, #0
 8003810:	60e0      	str	r0, [r4, #12]
 8003812:	2104      	movs	r1, #4
 8003814:	6860      	ldr	r0, [r4, #4]
 8003816:	f7ff ffa1 	bl	800375c <std>
 800381a:	2201      	movs	r2, #1
 800381c:	2109      	movs	r1, #9
 800381e:	68a0      	ldr	r0, [r4, #8]
 8003820:	f7ff ff9c 	bl	800375c <std>
 8003824:	2202      	movs	r2, #2
 8003826:	2112      	movs	r1, #18
 8003828:	68e0      	ldr	r0, [r4, #12]
 800382a:	f7ff ff97 	bl	800375c <std>
 800382e:	2301      	movs	r3, #1
 8003830:	61a3      	str	r3, [r4, #24]
 8003832:	bd10      	pop	{r4, pc}
 8003834:	080080cc 	.word	0x080080cc
 8003838:	080037a5 	.word	0x080037a5

0800383c <__sfp>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <__sfp+0x70>)
 8003840:	681e      	ldr	r6, [r3, #0]
 8003842:	69b3      	ldr	r3, [r6, #24]
 8003844:	4607      	mov	r7, r0
 8003846:	b913      	cbnz	r3, 800384e <__sfp+0x12>
 8003848:	4630      	mov	r0, r6
 800384a:	f7ff ffc7 	bl	80037dc <__sinit>
 800384e:	3648      	adds	r6, #72	; 0x48
 8003850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003854:	3b01      	subs	r3, #1
 8003856:	d503      	bpl.n	8003860 <__sfp+0x24>
 8003858:	6833      	ldr	r3, [r6, #0]
 800385a:	b133      	cbz	r3, 800386a <__sfp+0x2e>
 800385c:	6836      	ldr	r6, [r6, #0]
 800385e:	e7f7      	b.n	8003850 <__sfp+0x14>
 8003860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003864:	b16d      	cbz	r5, 8003882 <__sfp+0x46>
 8003866:	3468      	adds	r4, #104	; 0x68
 8003868:	e7f4      	b.n	8003854 <__sfp+0x18>
 800386a:	2104      	movs	r1, #4
 800386c:	4638      	mov	r0, r7
 800386e:	f7ff ff9f 	bl	80037b0 <__sfmoreglue>
 8003872:	6030      	str	r0, [r6, #0]
 8003874:	2800      	cmp	r0, #0
 8003876:	d1f1      	bne.n	800385c <__sfp+0x20>
 8003878:	230c      	movs	r3, #12
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4604      	mov	r4, r0
 800387e:	4620      	mov	r0, r4
 8003880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <__sfp+0x74>)
 8003884:	6665      	str	r5, [r4, #100]	; 0x64
 8003886:	e9c4 5500 	strd	r5, r5, [r4]
 800388a:	60a5      	str	r5, [r4, #8]
 800388c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003890:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003894:	2208      	movs	r2, #8
 8003896:	4629      	mov	r1, r5
 8003898:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800389c:	f7ff fcca 	bl	8003234 <memset>
 80038a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038a8:	e7e9      	b.n	800387e <__sfp+0x42>
 80038aa:	bf00      	nop
 80038ac:	080080cc 	.word	0x080080cc
 80038b0:	ffff0001 	.word	0xffff0001

080038b4 <_fwalk_reent>:
 80038b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038b8:	4680      	mov	r8, r0
 80038ba:	4689      	mov	r9, r1
 80038bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038c0:	2600      	movs	r6, #0
 80038c2:	b914      	cbnz	r4, 80038ca <_fwalk_reent+0x16>
 80038c4:	4630      	mov	r0, r6
 80038c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80038ce:	3f01      	subs	r7, #1
 80038d0:	d501      	bpl.n	80038d6 <_fwalk_reent+0x22>
 80038d2:	6824      	ldr	r4, [r4, #0]
 80038d4:	e7f5      	b.n	80038c2 <_fwalk_reent+0xe>
 80038d6:	89ab      	ldrh	r3, [r5, #12]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d907      	bls.n	80038ec <_fwalk_reent+0x38>
 80038dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038e0:	3301      	adds	r3, #1
 80038e2:	d003      	beq.n	80038ec <_fwalk_reent+0x38>
 80038e4:	4629      	mov	r1, r5
 80038e6:	4640      	mov	r0, r8
 80038e8:	47c8      	blx	r9
 80038ea:	4306      	orrs	r6, r0
 80038ec:	3568      	adds	r5, #104	; 0x68
 80038ee:	e7ee      	b.n	80038ce <_fwalk_reent+0x1a>

080038f0 <__swhatbuf_r>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	460e      	mov	r6, r1
 80038f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f8:	2900      	cmp	r1, #0
 80038fa:	b096      	sub	sp, #88	; 0x58
 80038fc:	4614      	mov	r4, r2
 80038fe:	461d      	mov	r5, r3
 8003900:	da07      	bge.n	8003912 <__swhatbuf_r+0x22>
 8003902:	2300      	movs	r3, #0
 8003904:	602b      	str	r3, [r5, #0]
 8003906:	89b3      	ldrh	r3, [r6, #12]
 8003908:	061a      	lsls	r2, r3, #24
 800390a:	d410      	bmi.n	800392e <__swhatbuf_r+0x3e>
 800390c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003910:	e00e      	b.n	8003930 <__swhatbuf_r+0x40>
 8003912:	466a      	mov	r2, sp
 8003914:	f000 f8b8 	bl	8003a88 <_fstat_r>
 8003918:	2800      	cmp	r0, #0
 800391a:	dbf2      	blt.n	8003902 <__swhatbuf_r+0x12>
 800391c:	9a01      	ldr	r2, [sp, #4]
 800391e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003922:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003926:	425a      	negs	r2, r3
 8003928:	415a      	adcs	r2, r3
 800392a:	602a      	str	r2, [r5, #0]
 800392c:	e7ee      	b.n	800390c <__swhatbuf_r+0x1c>
 800392e:	2340      	movs	r3, #64	; 0x40
 8003930:	2000      	movs	r0, #0
 8003932:	6023      	str	r3, [r4, #0]
 8003934:	b016      	add	sp, #88	; 0x58
 8003936:	bd70      	pop	{r4, r5, r6, pc}

08003938 <__smakebuf_r>:
 8003938:	898b      	ldrh	r3, [r1, #12]
 800393a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800393c:	079d      	lsls	r5, r3, #30
 800393e:	4606      	mov	r6, r0
 8003940:	460c      	mov	r4, r1
 8003942:	d507      	bpl.n	8003954 <__smakebuf_r+0x1c>
 8003944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	6123      	str	r3, [r4, #16]
 800394c:	2301      	movs	r3, #1
 800394e:	6163      	str	r3, [r4, #20]
 8003950:	b002      	add	sp, #8
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	ab01      	add	r3, sp, #4
 8003956:	466a      	mov	r2, sp
 8003958:	f7ff ffca 	bl	80038f0 <__swhatbuf_r>
 800395c:	9900      	ldr	r1, [sp, #0]
 800395e:	4605      	mov	r5, r0
 8003960:	4630      	mov	r0, r6
 8003962:	f7ff fcbd 	bl	80032e0 <_malloc_r>
 8003966:	b948      	cbnz	r0, 800397c <__smakebuf_r+0x44>
 8003968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800396c:	059a      	lsls	r2, r3, #22
 800396e:	d4ef      	bmi.n	8003950 <__smakebuf_r+0x18>
 8003970:	f023 0303 	bic.w	r3, r3, #3
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	81a3      	strh	r3, [r4, #12]
 800397a:	e7e3      	b.n	8003944 <__smakebuf_r+0xc>
 800397c:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <__smakebuf_r+0x7c>)
 800397e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	6020      	str	r0, [r4, #0]
 8003984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003988:	81a3      	strh	r3, [r4, #12]
 800398a:	9b00      	ldr	r3, [sp, #0]
 800398c:	6163      	str	r3, [r4, #20]
 800398e:	9b01      	ldr	r3, [sp, #4]
 8003990:	6120      	str	r0, [r4, #16]
 8003992:	b15b      	cbz	r3, 80039ac <__smakebuf_r+0x74>
 8003994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003998:	4630      	mov	r0, r6
 800399a:	f000 f887 	bl	8003aac <_isatty_r>
 800399e:	b128      	cbz	r0, 80039ac <__smakebuf_r+0x74>
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	81a3      	strh	r3, [r4, #12]
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	431d      	orrs	r5, r3
 80039b0:	81a5      	strh	r5, [r4, #12]
 80039b2:	e7cd      	b.n	8003950 <__smakebuf_r+0x18>
 80039b4:	080037a5 	.word	0x080037a5

080039b8 <__malloc_lock>:
 80039b8:	4770      	bx	lr

080039ba <__malloc_unlock>:
 80039ba:	4770      	bx	lr

080039bc <__sread>:
 80039bc:	b510      	push	{r4, lr}
 80039be:	460c      	mov	r4, r1
 80039c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039c4:	f000 f894 	bl	8003af0 <_read_r>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	bfab      	itete	ge
 80039cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039ce:	89a3      	ldrhlt	r3, [r4, #12]
 80039d0:	181b      	addge	r3, r3, r0
 80039d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039d6:	bfac      	ite	ge
 80039d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80039da:	81a3      	strhlt	r3, [r4, #12]
 80039dc:	bd10      	pop	{r4, pc}

080039de <__swrite>:
 80039de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e2:	461f      	mov	r7, r3
 80039e4:	898b      	ldrh	r3, [r1, #12]
 80039e6:	05db      	lsls	r3, r3, #23
 80039e8:	4605      	mov	r5, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	4616      	mov	r6, r2
 80039ee:	d505      	bpl.n	80039fc <__swrite+0x1e>
 80039f0:	2302      	movs	r3, #2
 80039f2:	2200      	movs	r2, #0
 80039f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f8:	f000 f868 	bl	8003acc <_lseek_r>
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a06:	81a3      	strh	r3, [r4, #12]
 8003a08:	4632      	mov	r2, r6
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a12:	f000 b817 	b.w	8003a44 <_write_r>

08003a16 <__sseek>:
 8003a16:	b510      	push	{r4, lr}
 8003a18:	460c      	mov	r4, r1
 8003a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a1e:	f000 f855 	bl	8003acc <_lseek_r>
 8003a22:	1c43      	adds	r3, r0, #1
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	bf15      	itete	ne
 8003a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a32:	81a3      	strheq	r3, [r4, #12]
 8003a34:	bf18      	it	ne
 8003a36:	81a3      	strhne	r3, [r4, #12]
 8003a38:	bd10      	pop	{r4, pc}

08003a3a <__sclose>:
 8003a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3e:	f000 b813 	b.w	8003a68 <_close_r>
	...

08003a44 <_write_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4c07      	ldr	r4, [pc, #28]	; (8003a64 <_write_r+0x20>)
 8003a48:	4605      	mov	r5, r0
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	2200      	movs	r2, #0
 8003a50:	6022      	str	r2, [r4, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f7fd fd63 	bl	800151e <_write>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d102      	bne.n	8003a62 <_write_r+0x1e>
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	b103      	cbz	r3, 8003a62 <_write_r+0x1e>
 8003a60:	602b      	str	r3, [r5, #0]
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	2000017c 	.word	0x2000017c

08003a68 <_close_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4c06      	ldr	r4, [pc, #24]	; (8003a84 <_close_r+0x1c>)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4605      	mov	r5, r0
 8003a70:	4608      	mov	r0, r1
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	f7fd fd6f 	bl	8001556 <_close>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_close_r+0x1a>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_close_r+0x1a>
 8003a80:	602b      	str	r3, [r5, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	2000017c 	.word	0x2000017c

08003a88 <_fstat_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	4c07      	ldr	r4, [pc, #28]	; (8003aa8 <_fstat_r+0x20>)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	4605      	mov	r5, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	f7fd fd6a 	bl	800156e <_fstat>
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	d102      	bne.n	8003aa4 <_fstat_r+0x1c>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	b103      	cbz	r3, 8003aa4 <_fstat_r+0x1c>
 8003aa2:	602b      	str	r3, [r5, #0]
 8003aa4:	bd38      	pop	{r3, r4, r5, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2000017c 	.word	0x2000017c

08003aac <_isatty_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4c06      	ldr	r4, [pc, #24]	; (8003ac8 <_isatty_r+0x1c>)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	4605      	mov	r5, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	6023      	str	r3, [r4, #0]
 8003ab8:	f7fd fd69 	bl	800158e <_isatty>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_isatty_r+0x1a>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_isatty_r+0x1a>
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	2000017c 	.word	0x2000017c

08003acc <_lseek_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	4c07      	ldr	r4, [pc, #28]	; (8003aec <_lseek_r+0x20>)
 8003ad0:	4605      	mov	r5, r0
 8003ad2:	4608      	mov	r0, r1
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	6022      	str	r2, [r4, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f7fd fd62 	bl	80015a4 <_lseek>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d102      	bne.n	8003aea <_lseek_r+0x1e>
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	b103      	cbz	r3, 8003aea <_lseek_r+0x1e>
 8003ae8:	602b      	str	r3, [r5, #0]
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	2000017c 	.word	0x2000017c

08003af0 <_read_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4c07      	ldr	r4, [pc, #28]	; (8003b10 <_read_r+0x20>)
 8003af4:	4605      	mov	r5, r0
 8003af6:	4608      	mov	r0, r1
 8003af8:	4611      	mov	r1, r2
 8003afa:	2200      	movs	r2, #0
 8003afc:	6022      	str	r2, [r4, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f7fd fcf0 	bl	80014e4 <_read>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_read_r+0x1e>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_read_r+0x1e>
 8003b0c:	602b      	str	r3, [r5, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	2000017c 	.word	0x2000017c

08003b14 <_init>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr

08003b20 <_fini>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr
