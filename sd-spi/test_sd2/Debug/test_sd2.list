
test_sd2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  08009180  08009180  00019180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098bc  080098bc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080098bc  080098bc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098bc  080098bc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c0  080098c0  000198c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080098c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000181c  20000088  0800994c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018a4  0800994c  000218a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce50  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002300  00000000  00000000  0002cf00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  0002f200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a60  00000000  00000000  0002fd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fcfa  00000000  00000000  000307f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bfbf  00000000  00000000  000404f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054846  00000000  00000000  0004c4b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a0cf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cbc  00000000  00000000  000a0d74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009168 	.word	0x08009168

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08009168 	.word	0x08009168

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_d2uiz>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	2200      	movs	r2, #0
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <__aeabi_d2uiz+0x38>)
 8000236:	0004      	movs	r4, r0
 8000238:	000d      	movs	r5, r1
 800023a:	f000 fe6d 	bl	8000f18 <__aeabi_dcmpge>
 800023e:	2800      	cmp	r0, #0
 8000240:	d104      	bne.n	800024c <__aeabi_d2uiz+0x1c>
 8000242:	0020      	movs	r0, r4
 8000244:	0029      	movs	r1, r5
 8000246:	f000 fdcb 	bl	8000de0 <__aeabi_d2iz>
 800024a:	bd70      	pop	{r4, r5, r6, pc}
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <__aeabi_d2uiz+0x38>)
 800024e:	2200      	movs	r2, #0
 8000250:	0020      	movs	r0, r4
 8000252:	0029      	movs	r1, r5
 8000254:	f000 fa7c 	bl	8000750 <__aeabi_dsub>
 8000258:	f000 fdc2 	bl	8000de0 <__aeabi_d2iz>
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	061b      	lsls	r3, r3, #24
 8000260:	469c      	mov	ip, r3
 8000262:	4460      	add	r0, ip
 8000264:	e7f1      	b.n	800024a <__aeabi_d2uiz+0x1a>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	41e00000 	.word	0x41e00000

0800026c <__aeabi_dmul>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	4657      	mov	r7, sl
 8000270:	46de      	mov	lr, fp
 8000272:	464e      	mov	r6, r9
 8000274:	4645      	mov	r5, r8
 8000276:	b5e0      	push	{r5, r6, r7, lr}
 8000278:	4683      	mov	fp, r0
 800027a:	0006      	movs	r6, r0
 800027c:	030f      	lsls	r7, r1, #12
 800027e:	0048      	lsls	r0, r1, #1
 8000280:	b087      	sub	sp, #28
 8000282:	4692      	mov	sl, r2
 8000284:	001d      	movs	r5, r3
 8000286:	0b3f      	lsrs	r7, r7, #12
 8000288:	0d40      	lsrs	r0, r0, #21
 800028a:	0fcc      	lsrs	r4, r1, #31
 800028c:	2800      	cmp	r0, #0
 800028e:	d100      	bne.n	8000292 <__aeabi_dmul+0x26>
 8000290:	e06f      	b.n	8000372 <__aeabi_dmul+0x106>
 8000292:	4bde      	ldr	r3, [pc, #888]	; (800060c <__aeabi_dmul+0x3a0>)
 8000294:	4298      	cmp	r0, r3
 8000296:	d038      	beq.n	800030a <__aeabi_dmul+0x9e>
 8000298:	2380      	movs	r3, #128	; 0x80
 800029a:	00ff      	lsls	r7, r7, #3
 800029c:	041b      	lsls	r3, r3, #16
 800029e:	431f      	orrs	r7, r3
 80002a0:	0f73      	lsrs	r3, r6, #29
 80002a2:	433b      	orrs	r3, r7
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	4bda      	ldr	r3, [pc, #872]	; (8000610 <__aeabi_dmul+0x3a4>)
 80002a8:	2700      	movs	r7, #0
 80002aa:	4699      	mov	r9, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	469b      	mov	fp, r3
 80002b0:	00f6      	lsls	r6, r6, #3
 80002b2:	4481      	add	r9, r0
 80002b4:	032b      	lsls	r3, r5, #12
 80002b6:	0069      	lsls	r1, r5, #1
 80002b8:	0b1b      	lsrs	r3, r3, #12
 80002ba:	4652      	mov	r2, sl
 80002bc:	4698      	mov	r8, r3
 80002be:	0d49      	lsrs	r1, r1, #21
 80002c0:	0fed      	lsrs	r5, r5, #31
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d100      	bne.n	80002c8 <__aeabi_dmul+0x5c>
 80002c6:	e085      	b.n	80003d4 <__aeabi_dmul+0x168>
 80002c8:	4bd0      	ldr	r3, [pc, #832]	; (800060c <__aeabi_dmul+0x3a0>)
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d100      	bne.n	80002d0 <__aeabi_dmul+0x64>
 80002ce:	e073      	b.n	80003b8 <__aeabi_dmul+0x14c>
 80002d0:	4643      	mov	r3, r8
 80002d2:	00da      	lsls	r2, r3, #3
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	041b      	lsls	r3, r3, #16
 80002d8:	4313      	orrs	r3, r2
 80002da:	4652      	mov	r2, sl
 80002dc:	48cc      	ldr	r0, [pc, #816]	; (8000610 <__aeabi_dmul+0x3a4>)
 80002de:	0f52      	lsrs	r2, r2, #29
 80002e0:	4684      	mov	ip, r0
 80002e2:	4313      	orrs	r3, r2
 80002e4:	4652      	mov	r2, sl
 80002e6:	2000      	movs	r0, #0
 80002e8:	4461      	add	r1, ip
 80002ea:	00d2      	lsls	r2, r2, #3
 80002ec:	4489      	add	r9, r1
 80002ee:	0021      	movs	r1, r4
 80002f0:	4069      	eors	r1, r5
 80002f2:	9100      	str	r1, [sp, #0]
 80002f4:	468c      	mov	ip, r1
 80002f6:	2101      	movs	r1, #1
 80002f8:	4449      	add	r1, r9
 80002fa:	468a      	mov	sl, r1
 80002fc:	2f0f      	cmp	r7, #15
 80002fe:	d900      	bls.n	8000302 <__aeabi_dmul+0x96>
 8000300:	e090      	b.n	8000424 <__aeabi_dmul+0x1b8>
 8000302:	49c4      	ldr	r1, [pc, #784]	; (8000614 <__aeabi_dmul+0x3a8>)
 8000304:	00bf      	lsls	r7, r7, #2
 8000306:	59cf      	ldr	r7, [r1, r7]
 8000308:	46bf      	mov	pc, r7
 800030a:	465b      	mov	r3, fp
 800030c:	433b      	orrs	r3, r7
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	d000      	beq.n	8000314 <__aeabi_dmul+0xa8>
 8000312:	e16a      	b.n	80005ea <__aeabi_dmul+0x37e>
 8000314:	2302      	movs	r3, #2
 8000316:	2708      	movs	r7, #8
 8000318:	2600      	movs	r6, #0
 800031a:	4681      	mov	r9, r0
 800031c:	469b      	mov	fp, r3
 800031e:	e7c9      	b.n	80002b4 <__aeabi_dmul+0x48>
 8000320:	0032      	movs	r2, r6
 8000322:	4658      	mov	r0, fp
 8000324:	9b01      	ldr	r3, [sp, #4]
 8000326:	4661      	mov	r1, ip
 8000328:	9100      	str	r1, [sp, #0]
 800032a:	2802      	cmp	r0, #2
 800032c:	d100      	bne.n	8000330 <__aeabi_dmul+0xc4>
 800032e:	e075      	b.n	800041c <__aeabi_dmul+0x1b0>
 8000330:	2803      	cmp	r0, #3
 8000332:	d100      	bne.n	8000336 <__aeabi_dmul+0xca>
 8000334:	e1fe      	b.n	8000734 <__aeabi_dmul+0x4c8>
 8000336:	2801      	cmp	r0, #1
 8000338:	d000      	beq.n	800033c <__aeabi_dmul+0xd0>
 800033a:	e12c      	b.n	8000596 <__aeabi_dmul+0x32a>
 800033c:	2300      	movs	r3, #0
 800033e:	2700      	movs	r7, #0
 8000340:	2600      	movs	r6, #0
 8000342:	2500      	movs	r5, #0
 8000344:	033f      	lsls	r7, r7, #12
 8000346:	0d2a      	lsrs	r2, r5, #20
 8000348:	0b3f      	lsrs	r7, r7, #12
 800034a:	48b3      	ldr	r0, [pc, #716]	; (8000618 <__aeabi_dmul+0x3ac>)
 800034c:	0512      	lsls	r2, r2, #20
 800034e:	433a      	orrs	r2, r7
 8000350:	4002      	ands	r2, r0
 8000352:	051b      	lsls	r3, r3, #20
 8000354:	4313      	orrs	r3, r2
 8000356:	9a00      	ldr	r2, [sp, #0]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	07d1      	lsls	r1, r2, #31
 800035c:	085b      	lsrs	r3, r3, #1
 800035e:	430b      	orrs	r3, r1
 8000360:	0030      	movs	r0, r6
 8000362:	0019      	movs	r1, r3
 8000364:	b007      	add	sp, #28
 8000366:	bc3c      	pop	{r2, r3, r4, r5}
 8000368:	4690      	mov	r8, r2
 800036a:	4699      	mov	r9, r3
 800036c:	46a2      	mov	sl, r4
 800036e:	46ab      	mov	fp, r5
 8000370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000372:	465b      	mov	r3, fp
 8000374:	433b      	orrs	r3, r7
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	d100      	bne.n	800037c <__aeabi_dmul+0x110>
 800037a:	e12f      	b.n	80005dc <__aeabi_dmul+0x370>
 800037c:	2f00      	cmp	r7, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_dmul+0x116>
 8000380:	e1a5      	b.n	80006ce <__aeabi_dmul+0x462>
 8000382:	0038      	movs	r0, r7
 8000384:	f000 fdd2 	bl	8000f2c <__clzsi2>
 8000388:	0003      	movs	r3, r0
 800038a:	3b0b      	subs	r3, #11
 800038c:	2b1c      	cmp	r3, #28
 800038e:	dd00      	ble.n	8000392 <__aeabi_dmul+0x126>
 8000390:	e196      	b.n	80006c0 <__aeabi_dmul+0x454>
 8000392:	221d      	movs	r2, #29
 8000394:	1ad3      	subs	r3, r2, r3
 8000396:	465a      	mov	r2, fp
 8000398:	0001      	movs	r1, r0
 800039a:	40da      	lsrs	r2, r3
 800039c:	465e      	mov	r6, fp
 800039e:	3908      	subs	r1, #8
 80003a0:	408f      	lsls	r7, r1
 80003a2:	0013      	movs	r3, r2
 80003a4:	408e      	lsls	r6, r1
 80003a6:	433b      	orrs	r3, r7
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4b9c      	ldr	r3, [pc, #624]	; (800061c <__aeabi_dmul+0x3b0>)
 80003ac:	2700      	movs	r7, #0
 80003ae:	1a1b      	subs	r3, r3, r0
 80003b0:	4699      	mov	r9, r3
 80003b2:	2300      	movs	r3, #0
 80003b4:	469b      	mov	fp, r3
 80003b6:	e77d      	b.n	80002b4 <__aeabi_dmul+0x48>
 80003b8:	4641      	mov	r1, r8
 80003ba:	4653      	mov	r3, sl
 80003bc:	430b      	orrs	r3, r1
 80003be:	4993      	ldr	r1, [pc, #588]	; (800060c <__aeabi_dmul+0x3a0>)
 80003c0:	468c      	mov	ip, r1
 80003c2:	44e1      	add	r9, ip
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d000      	beq.n	80003ca <__aeabi_dmul+0x15e>
 80003c8:	e11a      	b.n	8000600 <__aeabi_dmul+0x394>
 80003ca:	2202      	movs	r2, #2
 80003cc:	2002      	movs	r0, #2
 80003ce:	4317      	orrs	r7, r2
 80003d0:	2200      	movs	r2, #0
 80003d2:	e78c      	b.n	80002ee <__aeabi_dmul+0x82>
 80003d4:	4313      	orrs	r3, r2
 80003d6:	d100      	bne.n	80003da <__aeabi_dmul+0x16e>
 80003d8:	e10d      	b.n	80005f6 <__aeabi_dmul+0x38a>
 80003da:	4643      	mov	r3, r8
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d100      	bne.n	80003e2 <__aeabi_dmul+0x176>
 80003e0:	e181      	b.n	80006e6 <__aeabi_dmul+0x47a>
 80003e2:	4640      	mov	r0, r8
 80003e4:	f000 fda2 	bl	8000f2c <__clzsi2>
 80003e8:	0002      	movs	r2, r0
 80003ea:	3a0b      	subs	r2, #11
 80003ec:	2a1c      	cmp	r2, #28
 80003ee:	dd00      	ble.n	80003f2 <__aeabi_dmul+0x186>
 80003f0:	e172      	b.n	80006d8 <__aeabi_dmul+0x46c>
 80003f2:	0001      	movs	r1, r0
 80003f4:	4643      	mov	r3, r8
 80003f6:	3908      	subs	r1, #8
 80003f8:	408b      	lsls	r3, r1
 80003fa:	4698      	mov	r8, r3
 80003fc:	231d      	movs	r3, #29
 80003fe:	1a9a      	subs	r2, r3, r2
 8000400:	4653      	mov	r3, sl
 8000402:	40d3      	lsrs	r3, r2
 8000404:	001a      	movs	r2, r3
 8000406:	4643      	mov	r3, r8
 8000408:	4313      	orrs	r3, r2
 800040a:	4652      	mov	r2, sl
 800040c:	408a      	lsls	r2, r1
 800040e:	4649      	mov	r1, r9
 8000410:	1a08      	subs	r0, r1, r0
 8000412:	4982      	ldr	r1, [pc, #520]	; (800061c <__aeabi_dmul+0x3b0>)
 8000414:	4689      	mov	r9, r1
 8000416:	4481      	add	r9, r0
 8000418:	2000      	movs	r0, #0
 800041a:	e768      	b.n	80002ee <__aeabi_dmul+0x82>
 800041c:	4b7b      	ldr	r3, [pc, #492]	; (800060c <__aeabi_dmul+0x3a0>)
 800041e:	2700      	movs	r7, #0
 8000420:	2600      	movs	r6, #0
 8000422:	e78e      	b.n	8000342 <__aeabi_dmul+0xd6>
 8000424:	0c14      	lsrs	r4, r2, #16
 8000426:	0412      	lsls	r2, r2, #16
 8000428:	0c12      	lsrs	r2, r2, #16
 800042a:	0011      	movs	r1, r2
 800042c:	0c37      	lsrs	r7, r6, #16
 800042e:	0436      	lsls	r6, r6, #16
 8000430:	0c35      	lsrs	r5, r6, #16
 8000432:	4379      	muls	r1, r7
 8000434:	0028      	movs	r0, r5
 8000436:	468c      	mov	ip, r1
 8000438:	002e      	movs	r6, r5
 800043a:	4360      	muls	r0, r4
 800043c:	4460      	add	r0, ip
 800043e:	4683      	mov	fp, r0
 8000440:	4356      	muls	r6, r2
 8000442:	0021      	movs	r1, r4
 8000444:	0c30      	lsrs	r0, r6, #16
 8000446:	4680      	mov	r8, r0
 8000448:	4658      	mov	r0, fp
 800044a:	4379      	muls	r1, r7
 800044c:	4440      	add	r0, r8
 800044e:	9102      	str	r1, [sp, #8]
 8000450:	4584      	cmp	ip, r0
 8000452:	d906      	bls.n	8000462 <__aeabi_dmul+0x1f6>
 8000454:	4688      	mov	r8, r1
 8000456:	2180      	movs	r1, #128	; 0x80
 8000458:	0249      	lsls	r1, r1, #9
 800045a:	468c      	mov	ip, r1
 800045c:	44e0      	add	r8, ip
 800045e:	4641      	mov	r1, r8
 8000460:	9102      	str	r1, [sp, #8]
 8000462:	0436      	lsls	r6, r6, #16
 8000464:	0c01      	lsrs	r1, r0, #16
 8000466:	0c36      	lsrs	r6, r6, #16
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	468b      	mov	fp, r1
 800046c:	1981      	adds	r1, r0, r6
 800046e:	0c1e      	lsrs	r6, r3, #16
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	0c1b      	lsrs	r3, r3, #16
 8000474:	9103      	str	r1, [sp, #12]
 8000476:	0019      	movs	r1, r3
 8000478:	4379      	muls	r1, r7
 800047a:	468c      	mov	ip, r1
 800047c:	0028      	movs	r0, r5
 800047e:	4375      	muls	r5, r6
 8000480:	4465      	add	r5, ip
 8000482:	46a8      	mov	r8, r5
 8000484:	4358      	muls	r0, r3
 8000486:	0c05      	lsrs	r5, r0, #16
 8000488:	4445      	add	r5, r8
 800048a:	4377      	muls	r7, r6
 800048c:	42a9      	cmp	r1, r5
 800048e:	d903      	bls.n	8000498 <__aeabi_dmul+0x22c>
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	0249      	lsls	r1, r1, #9
 8000494:	468c      	mov	ip, r1
 8000496:	4467      	add	r7, ip
 8000498:	0c29      	lsrs	r1, r5, #16
 800049a:	468c      	mov	ip, r1
 800049c:	0039      	movs	r1, r7
 800049e:	0400      	lsls	r0, r0, #16
 80004a0:	0c00      	lsrs	r0, r0, #16
 80004a2:	042d      	lsls	r5, r5, #16
 80004a4:	182d      	adds	r5, r5, r0
 80004a6:	4461      	add	r1, ip
 80004a8:	44ab      	add	fp, r5
 80004aa:	9105      	str	r1, [sp, #20]
 80004ac:	4659      	mov	r1, fp
 80004ae:	9104      	str	r1, [sp, #16]
 80004b0:	9901      	ldr	r1, [sp, #4]
 80004b2:	040f      	lsls	r7, r1, #16
 80004b4:	0c3f      	lsrs	r7, r7, #16
 80004b6:	0c08      	lsrs	r0, r1, #16
 80004b8:	0039      	movs	r1, r7
 80004ba:	4351      	muls	r1, r2
 80004bc:	4342      	muls	r2, r0
 80004be:	4690      	mov	r8, r2
 80004c0:	0002      	movs	r2, r0
 80004c2:	468c      	mov	ip, r1
 80004c4:	0c09      	lsrs	r1, r1, #16
 80004c6:	468b      	mov	fp, r1
 80004c8:	4362      	muls	r2, r4
 80004ca:	437c      	muls	r4, r7
 80004cc:	4444      	add	r4, r8
 80004ce:	445c      	add	r4, fp
 80004d0:	45a0      	cmp	r8, r4
 80004d2:	d903      	bls.n	80004dc <__aeabi_dmul+0x270>
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0249      	lsls	r1, r1, #9
 80004d8:	4688      	mov	r8, r1
 80004da:	4442      	add	r2, r8
 80004dc:	0c21      	lsrs	r1, r4, #16
 80004de:	4688      	mov	r8, r1
 80004e0:	4661      	mov	r1, ip
 80004e2:	0409      	lsls	r1, r1, #16
 80004e4:	0c09      	lsrs	r1, r1, #16
 80004e6:	468c      	mov	ip, r1
 80004e8:	0039      	movs	r1, r7
 80004ea:	4359      	muls	r1, r3
 80004ec:	4343      	muls	r3, r0
 80004ee:	4370      	muls	r0, r6
 80004f0:	437e      	muls	r6, r7
 80004f2:	0c0f      	lsrs	r7, r1, #16
 80004f4:	18f6      	adds	r6, r6, r3
 80004f6:	0424      	lsls	r4, r4, #16
 80004f8:	19be      	adds	r6, r7, r6
 80004fa:	4464      	add	r4, ip
 80004fc:	4442      	add	r2, r8
 80004fe:	468c      	mov	ip, r1
 8000500:	42b3      	cmp	r3, r6
 8000502:	d903      	bls.n	800050c <__aeabi_dmul+0x2a0>
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	025b      	lsls	r3, r3, #9
 8000508:	4698      	mov	r8, r3
 800050a:	4440      	add	r0, r8
 800050c:	9b02      	ldr	r3, [sp, #8]
 800050e:	4661      	mov	r1, ip
 8000510:	4698      	mov	r8, r3
 8000512:	9b04      	ldr	r3, [sp, #16]
 8000514:	0437      	lsls	r7, r6, #16
 8000516:	4443      	add	r3, r8
 8000518:	469b      	mov	fp, r3
 800051a:	45ab      	cmp	fp, r5
 800051c:	41ad      	sbcs	r5, r5
 800051e:	426b      	negs	r3, r5
 8000520:	040d      	lsls	r5, r1, #16
 8000522:	9905      	ldr	r1, [sp, #20]
 8000524:	0c2d      	lsrs	r5, r5, #16
 8000526:	468c      	mov	ip, r1
 8000528:	197f      	adds	r7, r7, r5
 800052a:	4467      	add	r7, ip
 800052c:	18fd      	adds	r5, r7, r3
 800052e:	46a8      	mov	r8, r5
 8000530:	465d      	mov	r5, fp
 8000532:	192d      	adds	r5, r5, r4
 8000534:	42a5      	cmp	r5, r4
 8000536:	41a4      	sbcs	r4, r4
 8000538:	4693      	mov	fp, r2
 800053a:	4264      	negs	r4, r4
 800053c:	46a4      	mov	ip, r4
 800053e:	44c3      	add	fp, r8
 8000540:	44dc      	add	ip, fp
 8000542:	428f      	cmp	r7, r1
 8000544:	41bf      	sbcs	r7, r7
 8000546:	4598      	cmp	r8, r3
 8000548:	419b      	sbcs	r3, r3
 800054a:	4593      	cmp	fp, r2
 800054c:	4192      	sbcs	r2, r2
 800054e:	45a4      	cmp	ip, r4
 8000550:	41a4      	sbcs	r4, r4
 8000552:	425b      	negs	r3, r3
 8000554:	427f      	negs	r7, r7
 8000556:	431f      	orrs	r7, r3
 8000558:	0c36      	lsrs	r6, r6, #16
 800055a:	4252      	negs	r2, r2
 800055c:	4264      	negs	r4, r4
 800055e:	19bf      	adds	r7, r7, r6
 8000560:	4322      	orrs	r2, r4
 8000562:	18bf      	adds	r7, r7, r2
 8000564:	4662      	mov	r2, ip
 8000566:	1838      	adds	r0, r7, r0
 8000568:	0243      	lsls	r3, r0, #9
 800056a:	0dd2      	lsrs	r2, r2, #23
 800056c:	9903      	ldr	r1, [sp, #12]
 800056e:	4313      	orrs	r3, r2
 8000570:	026a      	lsls	r2, r5, #9
 8000572:	430a      	orrs	r2, r1
 8000574:	1e50      	subs	r0, r2, #1
 8000576:	4182      	sbcs	r2, r0
 8000578:	4661      	mov	r1, ip
 800057a:	0ded      	lsrs	r5, r5, #23
 800057c:	432a      	orrs	r2, r5
 800057e:	024e      	lsls	r6, r1, #9
 8000580:	4332      	orrs	r2, r6
 8000582:	01d9      	lsls	r1, r3, #7
 8000584:	d400      	bmi.n	8000588 <__aeabi_dmul+0x31c>
 8000586:	e0b3      	b.n	80006f0 <__aeabi_dmul+0x484>
 8000588:	2601      	movs	r6, #1
 800058a:	0850      	lsrs	r0, r2, #1
 800058c:	4032      	ands	r2, r6
 800058e:	4302      	orrs	r2, r0
 8000590:	07de      	lsls	r6, r3, #31
 8000592:	4332      	orrs	r2, r6
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	4c22      	ldr	r4, [pc, #136]	; (8000620 <__aeabi_dmul+0x3b4>)
 8000598:	4454      	add	r4, sl
 800059a:	2c00      	cmp	r4, #0
 800059c:	dd62      	ble.n	8000664 <__aeabi_dmul+0x3f8>
 800059e:	0751      	lsls	r1, r2, #29
 80005a0:	d009      	beq.n	80005b6 <__aeabi_dmul+0x34a>
 80005a2:	200f      	movs	r0, #15
 80005a4:	4010      	ands	r0, r2
 80005a6:	2804      	cmp	r0, #4
 80005a8:	d005      	beq.n	80005b6 <__aeabi_dmul+0x34a>
 80005aa:	1d10      	adds	r0, r2, #4
 80005ac:	4290      	cmp	r0, r2
 80005ae:	4192      	sbcs	r2, r2
 80005b0:	4252      	negs	r2, r2
 80005b2:	189b      	adds	r3, r3, r2
 80005b4:	0002      	movs	r2, r0
 80005b6:	01d9      	lsls	r1, r3, #7
 80005b8:	d504      	bpl.n	80005c4 <__aeabi_dmul+0x358>
 80005ba:	2480      	movs	r4, #128	; 0x80
 80005bc:	4819      	ldr	r0, [pc, #100]	; (8000624 <__aeabi_dmul+0x3b8>)
 80005be:	00e4      	lsls	r4, r4, #3
 80005c0:	4003      	ands	r3, r0
 80005c2:	4454      	add	r4, sl
 80005c4:	4818      	ldr	r0, [pc, #96]	; (8000628 <__aeabi_dmul+0x3bc>)
 80005c6:	4284      	cmp	r4, r0
 80005c8:	dd00      	ble.n	80005cc <__aeabi_dmul+0x360>
 80005ca:	e727      	b.n	800041c <__aeabi_dmul+0x1b0>
 80005cc:	075e      	lsls	r6, r3, #29
 80005ce:	025b      	lsls	r3, r3, #9
 80005d0:	08d2      	lsrs	r2, r2, #3
 80005d2:	0b1f      	lsrs	r7, r3, #12
 80005d4:	0563      	lsls	r3, r4, #21
 80005d6:	4316      	orrs	r6, r2
 80005d8:	0d5b      	lsrs	r3, r3, #21
 80005da:	e6b2      	b.n	8000342 <__aeabi_dmul+0xd6>
 80005dc:	2300      	movs	r3, #0
 80005de:	4699      	mov	r9, r3
 80005e0:	3301      	adds	r3, #1
 80005e2:	2704      	movs	r7, #4
 80005e4:	2600      	movs	r6, #0
 80005e6:	469b      	mov	fp, r3
 80005e8:	e664      	b.n	80002b4 <__aeabi_dmul+0x48>
 80005ea:	2303      	movs	r3, #3
 80005ec:	9701      	str	r7, [sp, #4]
 80005ee:	4681      	mov	r9, r0
 80005f0:	270c      	movs	r7, #12
 80005f2:	469b      	mov	fp, r3
 80005f4:	e65e      	b.n	80002b4 <__aeabi_dmul+0x48>
 80005f6:	2201      	movs	r2, #1
 80005f8:	2001      	movs	r0, #1
 80005fa:	4317      	orrs	r7, r2
 80005fc:	2200      	movs	r2, #0
 80005fe:	e676      	b.n	80002ee <__aeabi_dmul+0x82>
 8000600:	2303      	movs	r3, #3
 8000602:	2003      	movs	r0, #3
 8000604:	431f      	orrs	r7, r3
 8000606:	4643      	mov	r3, r8
 8000608:	e671      	b.n	80002ee <__aeabi_dmul+0x82>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	000007ff 	.word	0x000007ff
 8000610:	fffffc01 	.word	0xfffffc01
 8000614:	080092a8 	.word	0x080092a8
 8000618:	800fffff 	.word	0x800fffff
 800061c:	fffffc0d 	.word	0xfffffc0d
 8000620:	000003ff 	.word	0x000003ff
 8000624:	feffffff 	.word	0xfeffffff
 8000628:	000007fe 	.word	0x000007fe
 800062c:	2300      	movs	r3, #0
 800062e:	2780      	movs	r7, #128	; 0x80
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	033f      	lsls	r7, r7, #12
 8000634:	2600      	movs	r6, #0
 8000636:	4b43      	ldr	r3, [pc, #268]	; (8000744 <__aeabi_dmul+0x4d8>)
 8000638:	e683      	b.n	8000342 <__aeabi_dmul+0xd6>
 800063a:	9b01      	ldr	r3, [sp, #4]
 800063c:	0032      	movs	r2, r6
 800063e:	46a4      	mov	ip, r4
 8000640:	4658      	mov	r0, fp
 8000642:	e670      	b.n	8000326 <__aeabi_dmul+0xba>
 8000644:	46ac      	mov	ip, r5
 8000646:	e66e      	b.n	8000326 <__aeabi_dmul+0xba>
 8000648:	2780      	movs	r7, #128	; 0x80
 800064a:	9901      	ldr	r1, [sp, #4]
 800064c:	033f      	lsls	r7, r7, #12
 800064e:	4239      	tst	r1, r7
 8000650:	d02d      	beq.n	80006ae <__aeabi_dmul+0x442>
 8000652:	423b      	tst	r3, r7
 8000654:	d12b      	bne.n	80006ae <__aeabi_dmul+0x442>
 8000656:	431f      	orrs	r7, r3
 8000658:	033f      	lsls	r7, r7, #12
 800065a:	0b3f      	lsrs	r7, r7, #12
 800065c:	9500      	str	r5, [sp, #0]
 800065e:	0016      	movs	r6, r2
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <__aeabi_dmul+0x4d8>)
 8000662:	e66e      	b.n	8000342 <__aeabi_dmul+0xd6>
 8000664:	2501      	movs	r5, #1
 8000666:	1b2d      	subs	r5, r5, r4
 8000668:	2d38      	cmp	r5, #56	; 0x38
 800066a:	dd00      	ble.n	800066e <__aeabi_dmul+0x402>
 800066c:	e666      	b.n	800033c <__aeabi_dmul+0xd0>
 800066e:	2d1f      	cmp	r5, #31
 8000670:	dc40      	bgt.n	80006f4 <__aeabi_dmul+0x488>
 8000672:	4835      	ldr	r0, [pc, #212]	; (8000748 <__aeabi_dmul+0x4dc>)
 8000674:	001c      	movs	r4, r3
 8000676:	4450      	add	r0, sl
 8000678:	0016      	movs	r6, r2
 800067a:	4082      	lsls	r2, r0
 800067c:	4084      	lsls	r4, r0
 800067e:	40ee      	lsrs	r6, r5
 8000680:	1e50      	subs	r0, r2, #1
 8000682:	4182      	sbcs	r2, r0
 8000684:	4334      	orrs	r4, r6
 8000686:	4314      	orrs	r4, r2
 8000688:	40eb      	lsrs	r3, r5
 800068a:	0762      	lsls	r2, r4, #29
 800068c:	d009      	beq.n	80006a2 <__aeabi_dmul+0x436>
 800068e:	220f      	movs	r2, #15
 8000690:	4022      	ands	r2, r4
 8000692:	2a04      	cmp	r2, #4
 8000694:	d005      	beq.n	80006a2 <__aeabi_dmul+0x436>
 8000696:	0022      	movs	r2, r4
 8000698:	1d14      	adds	r4, r2, #4
 800069a:	4294      	cmp	r4, r2
 800069c:	4180      	sbcs	r0, r0
 800069e:	4240      	negs	r0, r0
 80006a0:	181b      	adds	r3, r3, r0
 80006a2:	021a      	lsls	r2, r3, #8
 80006a4:	d53e      	bpl.n	8000724 <__aeabi_dmul+0x4b8>
 80006a6:	2301      	movs	r3, #1
 80006a8:	2700      	movs	r7, #0
 80006aa:	2600      	movs	r6, #0
 80006ac:	e649      	b.n	8000342 <__aeabi_dmul+0xd6>
 80006ae:	2780      	movs	r7, #128	; 0x80
 80006b0:	9b01      	ldr	r3, [sp, #4]
 80006b2:	033f      	lsls	r7, r7, #12
 80006b4:	431f      	orrs	r7, r3
 80006b6:	033f      	lsls	r7, r7, #12
 80006b8:	0b3f      	lsrs	r7, r7, #12
 80006ba:	9400      	str	r4, [sp, #0]
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <__aeabi_dmul+0x4d8>)
 80006be:	e640      	b.n	8000342 <__aeabi_dmul+0xd6>
 80006c0:	0003      	movs	r3, r0
 80006c2:	465a      	mov	r2, fp
 80006c4:	3b28      	subs	r3, #40	; 0x28
 80006c6:	409a      	lsls	r2, r3
 80006c8:	2600      	movs	r6, #0
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	e66d      	b.n	80003aa <__aeabi_dmul+0x13e>
 80006ce:	4658      	mov	r0, fp
 80006d0:	f000 fc2c 	bl	8000f2c <__clzsi2>
 80006d4:	3020      	adds	r0, #32
 80006d6:	e657      	b.n	8000388 <__aeabi_dmul+0x11c>
 80006d8:	0003      	movs	r3, r0
 80006da:	4652      	mov	r2, sl
 80006dc:	3b28      	subs	r3, #40	; 0x28
 80006de:	409a      	lsls	r2, r3
 80006e0:	0013      	movs	r3, r2
 80006e2:	2200      	movs	r2, #0
 80006e4:	e693      	b.n	800040e <__aeabi_dmul+0x1a2>
 80006e6:	4650      	mov	r0, sl
 80006e8:	f000 fc20 	bl	8000f2c <__clzsi2>
 80006ec:	3020      	adds	r0, #32
 80006ee:	e67b      	b.n	80003e8 <__aeabi_dmul+0x17c>
 80006f0:	46ca      	mov	sl, r9
 80006f2:	e750      	b.n	8000596 <__aeabi_dmul+0x32a>
 80006f4:	201f      	movs	r0, #31
 80006f6:	001e      	movs	r6, r3
 80006f8:	4240      	negs	r0, r0
 80006fa:	1b04      	subs	r4, r0, r4
 80006fc:	40e6      	lsrs	r6, r4
 80006fe:	2d20      	cmp	r5, #32
 8000700:	d003      	beq.n	800070a <__aeabi_dmul+0x49e>
 8000702:	4c12      	ldr	r4, [pc, #72]	; (800074c <__aeabi_dmul+0x4e0>)
 8000704:	4454      	add	r4, sl
 8000706:	40a3      	lsls	r3, r4
 8000708:	431a      	orrs	r2, r3
 800070a:	1e50      	subs	r0, r2, #1
 800070c:	4182      	sbcs	r2, r0
 800070e:	4332      	orrs	r2, r6
 8000710:	2607      	movs	r6, #7
 8000712:	2700      	movs	r7, #0
 8000714:	4016      	ands	r6, r2
 8000716:	d009      	beq.n	800072c <__aeabi_dmul+0x4c0>
 8000718:	200f      	movs	r0, #15
 800071a:	2300      	movs	r3, #0
 800071c:	4010      	ands	r0, r2
 800071e:	0014      	movs	r4, r2
 8000720:	2804      	cmp	r0, #4
 8000722:	d1b9      	bne.n	8000698 <__aeabi_dmul+0x42c>
 8000724:	0022      	movs	r2, r4
 8000726:	075e      	lsls	r6, r3, #29
 8000728:	025b      	lsls	r3, r3, #9
 800072a:	0b1f      	lsrs	r7, r3, #12
 800072c:	08d2      	lsrs	r2, r2, #3
 800072e:	4316      	orrs	r6, r2
 8000730:	2300      	movs	r3, #0
 8000732:	e606      	b.n	8000342 <__aeabi_dmul+0xd6>
 8000734:	2780      	movs	r7, #128	; 0x80
 8000736:	033f      	lsls	r7, r7, #12
 8000738:	431f      	orrs	r7, r3
 800073a:	033f      	lsls	r7, r7, #12
 800073c:	0b3f      	lsrs	r7, r7, #12
 800073e:	0016      	movs	r6, r2
 8000740:	4b00      	ldr	r3, [pc, #0]	; (8000744 <__aeabi_dmul+0x4d8>)
 8000742:	e5fe      	b.n	8000342 <__aeabi_dmul+0xd6>
 8000744:	000007ff 	.word	0x000007ff
 8000748:	0000041e 	.word	0x0000041e
 800074c:	0000043e 	.word	0x0000043e

08000750 <__aeabi_dsub>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	4657      	mov	r7, sl
 8000754:	464e      	mov	r6, r9
 8000756:	4645      	mov	r5, r8
 8000758:	46de      	mov	lr, fp
 800075a:	000c      	movs	r4, r1
 800075c:	0309      	lsls	r1, r1, #12
 800075e:	b5e0      	push	{r5, r6, r7, lr}
 8000760:	0a49      	lsrs	r1, r1, #9
 8000762:	0f46      	lsrs	r6, r0, #29
 8000764:	005f      	lsls	r7, r3, #1
 8000766:	4331      	orrs	r1, r6
 8000768:	031e      	lsls	r6, r3, #12
 800076a:	0fdb      	lsrs	r3, r3, #31
 800076c:	0a76      	lsrs	r6, r6, #9
 800076e:	469b      	mov	fp, r3
 8000770:	0f53      	lsrs	r3, r2, #29
 8000772:	4333      	orrs	r3, r6
 8000774:	4ec8      	ldr	r6, [pc, #800]	; (8000a98 <__aeabi_dsub+0x348>)
 8000776:	0065      	lsls	r5, r4, #1
 8000778:	00c0      	lsls	r0, r0, #3
 800077a:	0fe4      	lsrs	r4, r4, #31
 800077c:	00d2      	lsls	r2, r2, #3
 800077e:	0d6d      	lsrs	r5, r5, #21
 8000780:	46a2      	mov	sl, r4
 8000782:	4681      	mov	r9, r0
 8000784:	0d7f      	lsrs	r7, r7, #21
 8000786:	469c      	mov	ip, r3
 8000788:	4690      	mov	r8, r2
 800078a:	42b7      	cmp	r7, r6
 800078c:	d100      	bne.n	8000790 <__aeabi_dsub+0x40>
 800078e:	e0b9      	b.n	8000904 <__aeabi_dsub+0x1b4>
 8000790:	465b      	mov	r3, fp
 8000792:	2601      	movs	r6, #1
 8000794:	4073      	eors	r3, r6
 8000796:	469b      	mov	fp, r3
 8000798:	1bee      	subs	r6, r5, r7
 800079a:	45a3      	cmp	fp, r4
 800079c:	d100      	bne.n	80007a0 <__aeabi_dsub+0x50>
 800079e:	e083      	b.n	80008a8 <__aeabi_dsub+0x158>
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	dd63      	ble.n	800086c <__aeabi_dsub+0x11c>
 80007a4:	2f00      	cmp	r7, #0
 80007a6:	d000      	beq.n	80007aa <__aeabi_dsub+0x5a>
 80007a8:	e0b1      	b.n	800090e <__aeabi_dsub+0x1be>
 80007aa:	4663      	mov	r3, ip
 80007ac:	4313      	orrs	r3, r2
 80007ae:	d100      	bne.n	80007b2 <__aeabi_dsub+0x62>
 80007b0:	e123      	b.n	80009fa <__aeabi_dsub+0x2aa>
 80007b2:	1e73      	subs	r3, r6, #1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d000      	beq.n	80007ba <__aeabi_dsub+0x6a>
 80007b8:	e1ba      	b.n	8000b30 <__aeabi_dsub+0x3e0>
 80007ba:	1a86      	subs	r6, r0, r2
 80007bc:	4663      	mov	r3, ip
 80007be:	42b0      	cmp	r0, r6
 80007c0:	4180      	sbcs	r0, r0
 80007c2:	2501      	movs	r5, #1
 80007c4:	1ac9      	subs	r1, r1, r3
 80007c6:	4240      	negs	r0, r0
 80007c8:	1a09      	subs	r1, r1, r0
 80007ca:	020b      	lsls	r3, r1, #8
 80007cc:	d400      	bmi.n	80007d0 <__aeabi_dsub+0x80>
 80007ce:	e147      	b.n	8000a60 <__aeabi_dsub+0x310>
 80007d0:	0249      	lsls	r1, r1, #9
 80007d2:	0a4b      	lsrs	r3, r1, #9
 80007d4:	4698      	mov	r8, r3
 80007d6:	4643      	mov	r3, r8
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d100      	bne.n	80007de <__aeabi_dsub+0x8e>
 80007dc:	e189      	b.n	8000af2 <__aeabi_dsub+0x3a2>
 80007de:	4640      	mov	r0, r8
 80007e0:	f000 fba4 	bl	8000f2c <__clzsi2>
 80007e4:	0003      	movs	r3, r0
 80007e6:	3b08      	subs	r3, #8
 80007e8:	2b1f      	cmp	r3, #31
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dsub+0x9e>
 80007ec:	e17c      	b.n	8000ae8 <__aeabi_dsub+0x398>
 80007ee:	2220      	movs	r2, #32
 80007f0:	0030      	movs	r0, r6
 80007f2:	1ad2      	subs	r2, r2, r3
 80007f4:	4641      	mov	r1, r8
 80007f6:	40d0      	lsrs	r0, r2
 80007f8:	4099      	lsls	r1, r3
 80007fa:	0002      	movs	r2, r0
 80007fc:	409e      	lsls	r6, r3
 80007fe:	430a      	orrs	r2, r1
 8000800:	429d      	cmp	r5, r3
 8000802:	dd00      	ble.n	8000806 <__aeabi_dsub+0xb6>
 8000804:	e16a      	b.n	8000adc <__aeabi_dsub+0x38c>
 8000806:	1b5d      	subs	r5, r3, r5
 8000808:	1c6b      	adds	r3, r5, #1
 800080a:	2b1f      	cmp	r3, #31
 800080c:	dd00      	ble.n	8000810 <__aeabi_dsub+0xc0>
 800080e:	e194      	b.n	8000b3a <__aeabi_dsub+0x3ea>
 8000810:	2120      	movs	r1, #32
 8000812:	0010      	movs	r0, r2
 8000814:	0035      	movs	r5, r6
 8000816:	1ac9      	subs	r1, r1, r3
 8000818:	408e      	lsls	r6, r1
 800081a:	40da      	lsrs	r2, r3
 800081c:	4088      	lsls	r0, r1
 800081e:	40dd      	lsrs	r5, r3
 8000820:	1e71      	subs	r1, r6, #1
 8000822:	418e      	sbcs	r6, r1
 8000824:	0011      	movs	r1, r2
 8000826:	2207      	movs	r2, #7
 8000828:	4328      	orrs	r0, r5
 800082a:	2500      	movs	r5, #0
 800082c:	4306      	orrs	r6, r0
 800082e:	4032      	ands	r2, r6
 8000830:	2a00      	cmp	r2, #0
 8000832:	d009      	beq.n	8000848 <__aeabi_dsub+0xf8>
 8000834:	230f      	movs	r3, #15
 8000836:	4033      	ands	r3, r6
 8000838:	2b04      	cmp	r3, #4
 800083a:	d005      	beq.n	8000848 <__aeabi_dsub+0xf8>
 800083c:	1d33      	adds	r3, r6, #4
 800083e:	42b3      	cmp	r3, r6
 8000840:	41b6      	sbcs	r6, r6
 8000842:	4276      	negs	r6, r6
 8000844:	1989      	adds	r1, r1, r6
 8000846:	001e      	movs	r6, r3
 8000848:	020b      	lsls	r3, r1, #8
 800084a:	d400      	bmi.n	800084e <__aeabi_dsub+0xfe>
 800084c:	e23d      	b.n	8000cca <__aeabi_dsub+0x57a>
 800084e:	1c6a      	adds	r2, r5, #1
 8000850:	4b91      	ldr	r3, [pc, #580]	; (8000a98 <__aeabi_dsub+0x348>)
 8000852:	0555      	lsls	r5, r2, #21
 8000854:	0d6d      	lsrs	r5, r5, #21
 8000856:	429a      	cmp	r2, r3
 8000858:	d100      	bne.n	800085c <__aeabi_dsub+0x10c>
 800085a:	e119      	b.n	8000a90 <__aeabi_dsub+0x340>
 800085c:	4a8f      	ldr	r2, [pc, #572]	; (8000a9c <__aeabi_dsub+0x34c>)
 800085e:	08f6      	lsrs	r6, r6, #3
 8000860:	400a      	ands	r2, r1
 8000862:	0757      	lsls	r7, r2, #29
 8000864:	0252      	lsls	r2, r2, #9
 8000866:	4337      	orrs	r7, r6
 8000868:	0b12      	lsrs	r2, r2, #12
 800086a:	e09b      	b.n	80009a4 <__aeabi_dsub+0x254>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_dsub+0x122>
 8000870:	e0c5      	b.n	80009fe <__aeabi_dsub+0x2ae>
 8000872:	1c6e      	adds	r6, r5, #1
 8000874:	0576      	lsls	r6, r6, #21
 8000876:	0d76      	lsrs	r6, r6, #21
 8000878:	2e01      	cmp	r6, #1
 800087a:	dc00      	bgt.n	800087e <__aeabi_dsub+0x12e>
 800087c:	e148      	b.n	8000b10 <__aeabi_dsub+0x3c0>
 800087e:	4667      	mov	r7, ip
 8000880:	1a86      	subs	r6, r0, r2
 8000882:	1bcb      	subs	r3, r1, r7
 8000884:	42b0      	cmp	r0, r6
 8000886:	41bf      	sbcs	r7, r7
 8000888:	427f      	negs	r7, r7
 800088a:	46b8      	mov	r8, r7
 800088c:	001f      	movs	r7, r3
 800088e:	4643      	mov	r3, r8
 8000890:	1aff      	subs	r7, r7, r3
 8000892:	003b      	movs	r3, r7
 8000894:	46b8      	mov	r8, r7
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	d500      	bpl.n	800089c <__aeabi_dsub+0x14c>
 800089a:	e15f      	b.n	8000b5c <__aeabi_dsub+0x40c>
 800089c:	4337      	orrs	r7, r6
 800089e:	d19a      	bne.n	80007d6 <__aeabi_dsub+0x86>
 80008a0:	2200      	movs	r2, #0
 80008a2:	2400      	movs	r4, #0
 80008a4:	2500      	movs	r5, #0
 80008a6:	e079      	b.n	800099c <__aeabi_dsub+0x24c>
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	dc00      	bgt.n	80008ae <__aeabi_dsub+0x15e>
 80008ac:	e0fa      	b.n	8000aa4 <__aeabi_dsub+0x354>
 80008ae:	2f00      	cmp	r7, #0
 80008b0:	d100      	bne.n	80008b4 <__aeabi_dsub+0x164>
 80008b2:	e08d      	b.n	80009d0 <__aeabi_dsub+0x280>
 80008b4:	4b78      	ldr	r3, [pc, #480]	; (8000a98 <__aeabi_dsub+0x348>)
 80008b6:	429d      	cmp	r5, r3
 80008b8:	d067      	beq.n	800098a <__aeabi_dsub+0x23a>
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	4667      	mov	r7, ip
 80008be:	041b      	lsls	r3, r3, #16
 80008c0:	431f      	orrs	r7, r3
 80008c2:	46bc      	mov	ip, r7
 80008c4:	2e38      	cmp	r6, #56	; 0x38
 80008c6:	dc00      	bgt.n	80008ca <__aeabi_dsub+0x17a>
 80008c8:	e152      	b.n	8000b70 <__aeabi_dsub+0x420>
 80008ca:	4663      	mov	r3, ip
 80008cc:	4313      	orrs	r3, r2
 80008ce:	1e5a      	subs	r2, r3, #1
 80008d0:	4193      	sbcs	r3, r2
 80008d2:	181e      	adds	r6, r3, r0
 80008d4:	4286      	cmp	r6, r0
 80008d6:	4180      	sbcs	r0, r0
 80008d8:	4240      	negs	r0, r0
 80008da:	1809      	adds	r1, r1, r0
 80008dc:	020b      	lsls	r3, r1, #8
 80008de:	d400      	bmi.n	80008e2 <__aeabi_dsub+0x192>
 80008e0:	e0be      	b.n	8000a60 <__aeabi_dsub+0x310>
 80008e2:	4b6d      	ldr	r3, [pc, #436]	; (8000a98 <__aeabi_dsub+0x348>)
 80008e4:	3501      	adds	r5, #1
 80008e6:	429d      	cmp	r5, r3
 80008e8:	d100      	bne.n	80008ec <__aeabi_dsub+0x19c>
 80008ea:	e0d2      	b.n	8000a92 <__aeabi_dsub+0x342>
 80008ec:	4a6b      	ldr	r2, [pc, #428]	; (8000a9c <__aeabi_dsub+0x34c>)
 80008ee:	0873      	lsrs	r3, r6, #1
 80008f0:	400a      	ands	r2, r1
 80008f2:	2101      	movs	r1, #1
 80008f4:	400e      	ands	r6, r1
 80008f6:	431e      	orrs	r6, r3
 80008f8:	0851      	lsrs	r1, r2, #1
 80008fa:	07d3      	lsls	r3, r2, #31
 80008fc:	2207      	movs	r2, #7
 80008fe:	431e      	orrs	r6, r3
 8000900:	4032      	ands	r2, r6
 8000902:	e795      	b.n	8000830 <__aeabi_dsub+0xe0>
 8000904:	001e      	movs	r6, r3
 8000906:	4316      	orrs	r6, r2
 8000908:	d000      	beq.n	800090c <__aeabi_dsub+0x1bc>
 800090a:	e745      	b.n	8000798 <__aeabi_dsub+0x48>
 800090c:	e740      	b.n	8000790 <__aeabi_dsub+0x40>
 800090e:	4b62      	ldr	r3, [pc, #392]	; (8000a98 <__aeabi_dsub+0x348>)
 8000910:	429d      	cmp	r5, r3
 8000912:	d03a      	beq.n	800098a <__aeabi_dsub+0x23a>
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	4667      	mov	r7, ip
 8000918:	041b      	lsls	r3, r3, #16
 800091a:	431f      	orrs	r7, r3
 800091c:	46bc      	mov	ip, r7
 800091e:	2e38      	cmp	r6, #56	; 0x38
 8000920:	dd00      	ble.n	8000924 <__aeabi_dsub+0x1d4>
 8000922:	e0eb      	b.n	8000afc <__aeabi_dsub+0x3ac>
 8000924:	2e1f      	cmp	r6, #31
 8000926:	dc00      	bgt.n	800092a <__aeabi_dsub+0x1da>
 8000928:	e13a      	b.n	8000ba0 <__aeabi_dsub+0x450>
 800092a:	0033      	movs	r3, r6
 800092c:	4667      	mov	r7, ip
 800092e:	3b20      	subs	r3, #32
 8000930:	40df      	lsrs	r7, r3
 8000932:	003b      	movs	r3, r7
 8000934:	2e20      	cmp	r6, #32
 8000936:	d005      	beq.n	8000944 <__aeabi_dsub+0x1f4>
 8000938:	2740      	movs	r7, #64	; 0x40
 800093a:	1bbf      	subs	r7, r7, r6
 800093c:	4666      	mov	r6, ip
 800093e:	40be      	lsls	r6, r7
 8000940:	4332      	orrs	r2, r6
 8000942:	4690      	mov	r8, r2
 8000944:	4646      	mov	r6, r8
 8000946:	1e72      	subs	r2, r6, #1
 8000948:	4196      	sbcs	r6, r2
 800094a:	4333      	orrs	r3, r6
 800094c:	e0da      	b.n	8000b04 <__aeabi_dsub+0x3b4>
 800094e:	2b00      	cmp	r3, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_dsub+0x204>
 8000952:	e214      	b.n	8000d7e <__aeabi_dsub+0x62e>
 8000954:	4663      	mov	r3, ip
 8000956:	4313      	orrs	r3, r2
 8000958:	d100      	bne.n	800095c <__aeabi_dsub+0x20c>
 800095a:	e168      	b.n	8000c2e <__aeabi_dsub+0x4de>
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	074e      	lsls	r6, r1, #29
 8000960:	08c0      	lsrs	r0, r0, #3
 8000962:	08c9      	lsrs	r1, r1, #3
 8000964:	031b      	lsls	r3, r3, #12
 8000966:	4306      	orrs	r6, r0
 8000968:	4219      	tst	r1, r3
 800096a:	d008      	beq.n	800097e <__aeabi_dsub+0x22e>
 800096c:	4660      	mov	r0, ip
 800096e:	08c0      	lsrs	r0, r0, #3
 8000970:	4218      	tst	r0, r3
 8000972:	d104      	bne.n	800097e <__aeabi_dsub+0x22e>
 8000974:	4663      	mov	r3, ip
 8000976:	0001      	movs	r1, r0
 8000978:	08d2      	lsrs	r2, r2, #3
 800097a:	075e      	lsls	r6, r3, #29
 800097c:	4316      	orrs	r6, r2
 800097e:	00f3      	lsls	r3, r6, #3
 8000980:	4699      	mov	r9, r3
 8000982:	00c9      	lsls	r1, r1, #3
 8000984:	0f72      	lsrs	r2, r6, #29
 8000986:	4d44      	ldr	r5, [pc, #272]	; (8000a98 <__aeabi_dsub+0x348>)
 8000988:	4311      	orrs	r1, r2
 800098a:	464b      	mov	r3, r9
 800098c:	08de      	lsrs	r6, r3, #3
 800098e:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <__aeabi_dsub+0x348>)
 8000990:	074f      	lsls	r7, r1, #29
 8000992:	4337      	orrs	r7, r6
 8000994:	08ca      	lsrs	r2, r1, #3
 8000996:	429d      	cmp	r5, r3
 8000998:	d100      	bne.n	800099c <__aeabi_dsub+0x24c>
 800099a:	e06e      	b.n	8000a7a <__aeabi_dsub+0x32a>
 800099c:	0312      	lsls	r2, r2, #12
 800099e:	056d      	lsls	r5, r5, #21
 80009a0:	0b12      	lsrs	r2, r2, #12
 80009a2:	0d6d      	lsrs	r5, r5, #21
 80009a4:	2100      	movs	r1, #0
 80009a6:	0312      	lsls	r2, r2, #12
 80009a8:	0b13      	lsrs	r3, r2, #12
 80009aa:	0d0a      	lsrs	r2, r1, #20
 80009ac:	0512      	lsls	r2, r2, #20
 80009ae:	431a      	orrs	r2, r3
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <__aeabi_dsub+0x350>)
 80009b2:	052d      	lsls	r5, r5, #20
 80009b4:	4013      	ands	r3, r2
 80009b6:	432b      	orrs	r3, r5
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	07e4      	lsls	r4, r4, #31
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	4323      	orrs	r3, r4
 80009c0:	0038      	movs	r0, r7
 80009c2:	0019      	movs	r1, r3
 80009c4:	bc3c      	pop	{r2, r3, r4, r5}
 80009c6:	4690      	mov	r8, r2
 80009c8:	4699      	mov	r9, r3
 80009ca:	46a2      	mov	sl, r4
 80009cc:	46ab      	mov	fp, r5
 80009ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009d0:	4663      	mov	r3, ip
 80009d2:	4313      	orrs	r3, r2
 80009d4:	d011      	beq.n	80009fa <__aeabi_dsub+0x2aa>
 80009d6:	1e73      	subs	r3, r6, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d000      	beq.n	80009de <__aeabi_dsub+0x28e>
 80009dc:	e107      	b.n	8000bee <__aeabi_dsub+0x49e>
 80009de:	1886      	adds	r6, r0, r2
 80009e0:	4286      	cmp	r6, r0
 80009e2:	4180      	sbcs	r0, r0
 80009e4:	4461      	add	r1, ip
 80009e6:	4240      	negs	r0, r0
 80009e8:	1809      	adds	r1, r1, r0
 80009ea:	2501      	movs	r5, #1
 80009ec:	020b      	lsls	r3, r1, #8
 80009ee:	d537      	bpl.n	8000a60 <__aeabi_dsub+0x310>
 80009f0:	2502      	movs	r5, #2
 80009f2:	e77b      	b.n	80008ec <__aeabi_dsub+0x19c>
 80009f4:	003e      	movs	r6, r7
 80009f6:	4661      	mov	r1, ip
 80009f8:	4691      	mov	r9, r2
 80009fa:	0035      	movs	r5, r6
 80009fc:	e7c5      	b.n	800098a <__aeabi_dsub+0x23a>
 80009fe:	465c      	mov	r4, fp
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d000      	beq.n	8000a06 <__aeabi_dsub+0x2b6>
 8000a04:	e0e1      	b.n	8000bca <__aeabi_dsub+0x47a>
 8000a06:	000b      	movs	r3, r1
 8000a08:	4303      	orrs	r3, r0
 8000a0a:	d0f3      	beq.n	80009f4 <__aeabi_dsub+0x2a4>
 8000a0c:	1c73      	adds	r3, r6, #1
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dsub+0x2c2>
 8000a10:	e1ac      	b.n	8000d6c <__aeabi_dsub+0x61c>
 8000a12:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <__aeabi_dsub+0x348>)
 8000a14:	429f      	cmp	r7, r3
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dsub+0x2ca>
 8000a18:	e13a      	b.n	8000c90 <__aeabi_dsub+0x540>
 8000a1a:	43f3      	mvns	r3, r6
 8000a1c:	2b38      	cmp	r3, #56	; 0x38
 8000a1e:	dd00      	ble.n	8000a22 <__aeabi_dsub+0x2d2>
 8000a20:	e16f      	b.n	8000d02 <__aeabi_dsub+0x5b2>
 8000a22:	2b1f      	cmp	r3, #31
 8000a24:	dd00      	ble.n	8000a28 <__aeabi_dsub+0x2d8>
 8000a26:	e18c      	b.n	8000d42 <__aeabi_dsub+0x5f2>
 8000a28:	2520      	movs	r5, #32
 8000a2a:	000e      	movs	r6, r1
 8000a2c:	1aed      	subs	r5, r5, r3
 8000a2e:	40ae      	lsls	r6, r5
 8000a30:	46b0      	mov	r8, r6
 8000a32:	0006      	movs	r6, r0
 8000a34:	46aa      	mov	sl, r5
 8000a36:	40de      	lsrs	r6, r3
 8000a38:	4645      	mov	r5, r8
 8000a3a:	4335      	orrs	r5, r6
 8000a3c:	002e      	movs	r6, r5
 8000a3e:	4655      	mov	r5, sl
 8000a40:	40d9      	lsrs	r1, r3
 8000a42:	40a8      	lsls	r0, r5
 8000a44:	4663      	mov	r3, ip
 8000a46:	1e45      	subs	r5, r0, #1
 8000a48:	41a8      	sbcs	r0, r5
 8000a4a:	1a5b      	subs	r3, r3, r1
 8000a4c:	469c      	mov	ip, r3
 8000a4e:	4330      	orrs	r0, r6
 8000a50:	1a16      	subs	r6, r2, r0
 8000a52:	42b2      	cmp	r2, r6
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	4663      	mov	r3, ip
 8000a58:	4252      	negs	r2, r2
 8000a5a:	1a99      	subs	r1, r3, r2
 8000a5c:	003d      	movs	r5, r7
 8000a5e:	e6b4      	b.n	80007ca <__aeabi_dsub+0x7a>
 8000a60:	2207      	movs	r2, #7
 8000a62:	4032      	ands	r2, r6
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dsub+0x31a>
 8000a68:	e6e4      	b.n	8000834 <__aeabi_dsub+0xe4>
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <__aeabi_dsub+0x348>)
 8000a6c:	08f6      	lsrs	r6, r6, #3
 8000a6e:	074f      	lsls	r7, r1, #29
 8000a70:	4337      	orrs	r7, r6
 8000a72:	08ca      	lsrs	r2, r1, #3
 8000a74:	429d      	cmp	r5, r3
 8000a76:	d000      	beq.n	8000a7a <__aeabi_dsub+0x32a>
 8000a78:	e790      	b.n	800099c <__aeabi_dsub+0x24c>
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dsub+0x332>
 8000a80:	e1a6      	b.n	8000dd0 <__aeabi_dsub+0x680>
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	031b      	lsls	r3, r3, #12
 8000a86:	431a      	orrs	r2, r3
 8000a88:	0312      	lsls	r2, r2, #12
 8000a8a:	0b12      	lsrs	r2, r2, #12
 8000a8c:	4d02      	ldr	r5, [pc, #8]	; (8000a98 <__aeabi_dsub+0x348>)
 8000a8e:	e789      	b.n	80009a4 <__aeabi_dsub+0x254>
 8000a90:	0015      	movs	r5, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	2700      	movs	r7, #0
 8000a96:	e785      	b.n	80009a4 <__aeabi_dsub+0x254>
 8000a98:	000007ff 	.word	0x000007ff
 8000a9c:	ff7fffff 	.word	0xff7fffff
 8000aa0:	800fffff 	.word	0x800fffff
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_dsub+0x35a>
 8000aa8:	e0c7      	b.n	8000c3a <__aeabi_dsub+0x4ea>
 8000aaa:	1c6b      	adds	r3, r5, #1
 8000aac:	055e      	lsls	r6, r3, #21
 8000aae:	0d76      	lsrs	r6, r6, #21
 8000ab0:	2e01      	cmp	r6, #1
 8000ab2:	dc00      	bgt.n	8000ab6 <__aeabi_dsub+0x366>
 8000ab4:	e0f0      	b.n	8000c98 <__aeabi_dsub+0x548>
 8000ab6:	4dc8      	ldr	r5, [pc, #800]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000ab8:	42ab      	cmp	r3, r5
 8000aba:	d100      	bne.n	8000abe <__aeabi_dsub+0x36e>
 8000abc:	e0b9      	b.n	8000c32 <__aeabi_dsub+0x4e2>
 8000abe:	1885      	adds	r5, r0, r2
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	4285      	cmp	r5, r0
 8000ac4:	4189      	sbcs	r1, r1
 8000ac6:	4462      	add	r2, ip
 8000ac8:	4249      	negs	r1, r1
 8000aca:	1851      	adds	r1, r2, r1
 8000acc:	2207      	movs	r2, #7
 8000ace:	07ce      	lsls	r6, r1, #31
 8000ad0:	086d      	lsrs	r5, r5, #1
 8000ad2:	432e      	orrs	r6, r5
 8000ad4:	0849      	lsrs	r1, r1, #1
 8000ad6:	4032      	ands	r2, r6
 8000ad8:	001d      	movs	r5, r3
 8000ada:	e6a9      	b.n	8000830 <__aeabi_dsub+0xe0>
 8000adc:	49bf      	ldr	r1, [pc, #764]	; (8000ddc <__aeabi_dsub+0x68c>)
 8000ade:	1aed      	subs	r5, r5, r3
 8000ae0:	4011      	ands	r1, r2
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	4032      	ands	r2, r6
 8000ae6:	e6a3      	b.n	8000830 <__aeabi_dsub+0xe0>
 8000ae8:	0032      	movs	r2, r6
 8000aea:	3828      	subs	r0, #40	; 0x28
 8000aec:	4082      	lsls	r2, r0
 8000aee:	2600      	movs	r6, #0
 8000af0:	e686      	b.n	8000800 <__aeabi_dsub+0xb0>
 8000af2:	0030      	movs	r0, r6
 8000af4:	f000 fa1a 	bl	8000f2c <__clzsi2>
 8000af8:	3020      	adds	r0, #32
 8000afa:	e673      	b.n	80007e4 <__aeabi_dsub+0x94>
 8000afc:	4663      	mov	r3, ip
 8000afe:	4313      	orrs	r3, r2
 8000b00:	1e5a      	subs	r2, r3, #1
 8000b02:	4193      	sbcs	r3, r2
 8000b04:	1ac6      	subs	r6, r0, r3
 8000b06:	42b0      	cmp	r0, r6
 8000b08:	4180      	sbcs	r0, r0
 8000b0a:	4240      	negs	r0, r0
 8000b0c:	1a09      	subs	r1, r1, r0
 8000b0e:	e65c      	b.n	80007ca <__aeabi_dsub+0x7a>
 8000b10:	000e      	movs	r6, r1
 8000b12:	4667      	mov	r7, ip
 8000b14:	4306      	orrs	r6, r0
 8000b16:	4317      	orrs	r7, r2
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d15e      	bne.n	8000bda <__aeabi_dsub+0x48a>
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_dsub+0x3d2>
 8000b20:	e0f3      	b.n	8000d0a <__aeabi_dsub+0x5ba>
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dsub+0x3d8>
 8000b26:	e11e      	b.n	8000d66 <__aeabi_dsub+0x616>
 8000b28:	465c      	mov	r4, fp
 8000b2a:	4661      	mov	r1, ip
 8000b2c:	4691      	mov	r9, r2
 8000b2e:	e72c      	b.n	800098a <__aeabi_dsub+0x23a>
 8000b30:	4fa9      	ldr	r7, [pc, #676]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000b32:	42be      	cmp	r6, r7
 8000b34:	d07b      	beq.n	8000c2e <__aeabi_dsub+0x4de>
 8000b36:	001e      	movs	r6, r3
 8000b38:	e6f1      	b.n	800091e <__aeabi_dsub+0x1ce>
 8000b3a:	0010      	movs	r0, r2
 8000b3c:	3d1f      	subs	r5, #31
 8000b3e:	40e8      	lsrs	r0, r5
 8000b40:	2b20      	cmp	r3, #32
 8000b42:	d003      	beq.n	8000b4c <__aeabi_dsub+0x3fc>
 8000b44:	2140      	movs	r1, #64	; 0x40
 8000b46:	1acb      	subs	r3, r1, r3
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	4316      	orrs	r6, r2
 8000b4c:	1e73      	subs	r3, r6, #1
 8000b4e:	419e      	sbcs	r6, r3
 8000b50:	2207      	movs	r2, #7
 8000b52:	4306      	orrs	r6, r0
 8000b54:	4032      	ands	r2, r6
 8000b56:	2100      	movs	r1, #0
 8000b58:	2500      	movs	r5, #0
 8000b5a:	e783      	b.n	8000a64 <__aeabi_dsub+0x314>
 8000b5c:	1a16      	subs	r6, r2, r0
 8000b5e:	4663      	mov	r3, ip
 8000b60:	42b2      	cmp	r2, r6
 8000b62:	4180      	sbcs	r0, r0
 8000b64:	1a59      	subs	r1, r3, r1
 8000b66:	4240      	negs	r0, r0
 8000b68:	1a0b      	subs	r3, r1, r0
 8000b6a:	4698      	mov	r8, r3
 8000b6c:	465c      	mov	r4, fp
 8000b6e:	e632      	b.n	80007d6 <__aeabi_dsub+0x86>
 8000b70:	2e1f      	cmp	r6, #31
 8000b72:	dd00      	ble.n	8000b76 <__aeabi_dsub+0x426>
 8000b74:	e0ab      	b.n	8000cce <__aeabi_dsub+0x57e>
 8000b76:	2720      	movs	r7, #32
 8000b78:	1bbb      	subs	r3, r7, r6
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	4663      	mov	r3, ip
 8000b7e:	4657      	mov	r7, sl
 8000b80:	40bb      	lsls	r3, r7
 8000b82:	4699      	mov	r9, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	464f      	mov	r7, r9
 8000b88:	40f3      	lsrs	r3, r6
 8000b8a:	431f      	orrs	r7, r3
 8000b8c:	003b      	movs	r3, r7
 8000b8e:	4657      	mov	r7, sl
 8000b90:	40ba      	lsls	r2, r7
 8000b92:	1e57      	subs	r7, r2, #1
 8000b94:	41ba      	sbcs	r2, r7
 8000b96:	4313      	orrs	r3, r2
 8000b98:	4662      	mov	r2, ip
 8000b9a:	40f2      	lsrs	r2, r6
 8000b9c:	1889      	adds	r1, r1, r2
 8000b9e:	e698      	b.n	80008d2 <__aeabi_dsub+0x182>
 8000ba0:	2720      	movs	r7, #32
 8000ba2:	1bbb      	subs	r3, r7, r6
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	4657      	mov	r7, sl
 8000baa:	40bb      	lsls	r3, r7
 8000bac:	4699      	mov	r9, r3
 8000bae:	0013      	movs	r3, r2
 8000bb0:	464f      	mov	r7, r9
 8000bb2:	40f3      	lsrs	r3, r6
 8000bb4:	431f      	orrs	r7, r3
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	4657      	mov	r7, sl
 8000bba:	40ba      	lsls	r2, r7
 8000bbc:	1e57      	subs	r7, r2, #1
 8000bbe:	41ba      	sbcs	r2, r7
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	4662      	mov	r2, ip
 8000bc4:	40f2      	lsrs	r2, r6
 8000bc6:	1a89      	subs	r1, r1, r2
 8000bc8:	e79c      	b.n	8000b04 <__aeabi_dsub+0x3b4>
 8000bca:	4b83      	ldr	r3, [pc, #524]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	d05f      	beq.n	8000c90 <__aeabi_dsub+0x540>
 8000bd0:	2580      	movs	r5, #128	; 0x80
 8000bd2:	042d      	lsls	r5, r5, #16
 8000bd4:	4273      	negs	r3, r6
 8000bd6:	4329      	orrs	r1, r5
 8000bd8:	e720      	b.n	8000a1c <__aeabi_dsub+0x2cc>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d10c      	bne.n	8000bf8 <__aeabi_dsub+0x4a8>
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dsub+0x494>
 8000be2:	e0d0      	b.n	8000d86 <__aeabi_dsub+0x636>
 8000be4:	465c      	mov	r4, fp
 8000be6:	4661      	mov	r1, ip
 8000be8:	4691      	mov	r9, r2
 8000bea:	4d7b      	ldr	r5, [pc, #492]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000bec:	e6cd      	b.n	800098a <__aeabi_dsub+0x23a>
 8000bee:	4f7a      	ldr	r7, [pc, #488]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000bf0:	42be      	cmp	r6, r7
 8000bf2:	d01c      	beq.n	8000c2e <__aeabi_dsub+0x4de>
 8000bf4:	001e      	movs	r6, r3
 8000bf6:	e665      	b.n	80008c4 <__aeabi_dsub+0x174>
 8000bf8:	2f00      	cmp	r7, #0
 8000bfa:	d018      	beq.n	8000c2e <__aeabi_dsub+0x4de>
 8000bfc:	08c0      	lsrs	r0, r0, #3
 8000bfe:	074e      	lsls	r6, r1, #29
 8000c00:	4306      	orrs	r6, r0
 8000c02:	2080      	movs	r0, #128	; 0x80
 8000c04:	08c9      	lsrs	r1, r1, #3
 8000c06:	0300      	lsls	r0, r0, #12
 8000c08:	4201      	tst	r1, r0
 8000c0a:	d008      	beq.n	8000c1e <__aeabi_dsub+0x4ce>
 8000c0c:	4663      	mov	r3, ip
 8000c0e:	08dc      	lsrs	r4, r3, #3
 8000c10:	4204      	tst	r4, r0
 8000c12:	d104      	bne.n	8000c1e <__aeabi_dsub+0x4ce>
 8000c14:	0021      	movs	r1, r4
 8000c16:	46da      	mov	sl, fp
 8000c18:	08d2      	lsrs	r2, r2, #3
 8000c1a:	075e      	lsls	r6, r3, #29
 8000c1c:	4316      	orrs	r6, r2
 8000c1e:	00f3      	lsls	r3, r6, #3
 8000c20:	4699      	mov	r9, r3
 8000c22:	2401      	movs	r4, #1
 8000c24:	4653      	mov	r3, sl
 8000c26:	00c9      	lsls	r1, r1, #3
 8000c28:	0f72      	lsrs	r2, r6, #29
 8000c2a:	4311      	orrs	r1, r2
 8000c2c:	401c      	ands	r4, r3
 8000c2e:	4d6a      	ldr	r5, [pc, #424]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000c30:	e6ab      	b.n	800098a <__aeabi_dsub+0x23a>
 8000c32:	001d      	movs	r5, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	2700      	movs	r7, #0
 8000c38:	e6b4      	b.n	80009a4 <__aeabi_dsub+0x254>
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d159      	bne.n	8000cf2 <__aeabi_dsub+0x5a2>
 8000c3e:	000b      	movs	r3, r1
 8000c40:	4303      	orrs	r3, r0
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dsub+0x4f6>
 8000c44:	e6d6      	b.n	80009f4 <__aeabi_dsub+0x2a4>
 8000c46:	1c73      	adds	r3, r6, #1
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dsub+0x4fc>
 8000c4a:	e0b2      	b.n	8000db2 <__aeabi_dsub+0x662>
 8000c4c:	4b62      	ldr	r3, [pc, #392]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d01e      	beq.n	8000c90 <__aeabi_dsub+0x540>
 8000c52:	43f3      	mvns	r3, r6
 8000c54:	2b38      	cmp	r3, #56	; 0x38
 8000c56:	dc6f      	bgt.n	8000d38 <__aeabi_dsub+0x5e8>
 8000c58:	2b1f      	cmp	r3, #31
 8000c5a:	dd00      	ble.n	8000c5e <__aeabi_dsub+0x50e>
 8000c5c:	e097      	b.n	8000d8e <__aeabi_dsub+0x63e>
 8000c5e:	2520      	movs	r5, #32
 8000c60:	000e      	movs	r6, r1
 8000c62:	1aed      	subs	r5, r5, r3
 8000c64:	40ae      	lsls	r6, r5
 8000c66:	46b0      	mov	r8, r6
 8000c68:	0006      	movs	r6, r0
 8000c6a:	46aa      	mov	sl, r5
 8000c6c:	40de      	lsrs	r6, r3
 8000c6e:	4645      	mov	r5, r8
 8000c70:	4335      	orrs	r5, r6
 8000c72:	002e      	movs	r6, r5
 8000c74:	4655      	mov	r5, sl
 8000c76:	40a8      	lsls	r0, r5
 8000c78:	40d9      	lsrs	r1, r3
 8000c7a:	1e45      	subs	r5, r0, #1
 8000c7c:	41a8      	sbcs	r0, r5
 8000c7e:	448c      	add	ip, r1
 8000c80:	4306      	orrs	r6, r0
 8000c82:	18b6      	adds	r6, r6, r2
 8000c84:	4296      	cmp	r6, r2
 8000c86:	4192      	sbcs	r2, r2
 8000c88:	4251      	negs	r1, r2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	003d      	movs	r5, r7
 8000c8e:	e625      	b.n	80008dc <__aeabi_dsub+0x18c>
 8000c90:	003d      	movs	r5, r7
 8000c92:	4661      	mov	r1, ip
 8000c94:	4691      	mov	r9, r2
 8000c96:	e678      	b.n	800098a <__aeabi_dsub+0x23a>
 8000c98:	000b      	movs	r3, r1
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d000      	beq.n	8000ca2 <__aeabi_dsub+0x552>
 8000ca0:	e655      	b.n	800094e <__aeabi_dsub+0x1fe>
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f5      	beq.n	8000c92 <__aeabi_dsub+0x542>
 8000ca6:	4663      	mov	r3, ip
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	d100      	bne.n	8000cae <__aeabi_dsub+0x55e>
 8000cac:	e66d      	b.n	800098a <__aeabi_dsub+0x23a>
 8000cae:	1886      	adds	r6, r0, r2
 8000cb0:	4286      	cmp	r6, r0
 8000cb2:	4180      	sbcs	r0, r0
 8000cb4:	4461      	add	r1, ip
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	1809      	adds	r1, r1, r0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	020b      	lsls	r3, r1, #8
 8000cbe:	d400      	bmi.n	8000cc2 <__aeabi_dsub+0x572>
 8000cc0:	e6d0      	b.n	8000a64 <__aeabi_dsub+0x314>
 8000cc2:	4b46      	ldr	r3, [pc, #280]	; (8000ddc <__aeabi_dsub+0x68c>)
 8000cc4:	3501      	adds	r5, #1
 8000cc6:	4019      	ands	r1, r3
 8000cc8:	e5b2      	b.n	8000830 <__aeabi_dsub+0xe0>
 8000cca:	46b1      	mov	r9, r6
 8000ccc:	e65d      	b.n	800098a <__aeabi_dsub+0x23a>
 8000cce:	0033      	movs	r3, r6
 8000cd0:	4667      	mov	r7, ip
 8000cd2:	3b20      	subs	r3, #32
 8000cd4:	40df      	lsrs	r7, r3
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	2e20      	cmp	r6, #32
 8000cda:	d005      	beq.n	8000ce8 <__aeabi_dsub+0x598>
 8000cdc:	2740      	movs	r7, #64	; 0x40
 8000cde:	1bbf      	subs	r7, r7, r6
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	40be      	lsls	r6, r7
 8000ce4:	4332      	orrs	r2, r6
 8000ce6:	4690      	mov	r8, r2
 8000ce8:	4646      	mov	r6, r8
 8000cea:	1e72      	subs	r2, r6, #1
 8000cec:	4196      	sbcs	r6, r2
 8000cee:	4333      	orrs	r3, r6
 8000cf0:	e5ef      	b.n	80008d2 <__aeabi_dsub+0x182>
 8000cf2:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000cf4:	429f      	cmp	r7, r3
 8000cf6:	d0cb      	beq.n	8000c90 <__aeabi_dsub+0x540>
 8000cf8:	2580      	movs	r5, #128	; 0x80
 8000cfa:	042d      	lsls	r5, r5, #16
 8000cfc:	4273      	negs	r3, r6
 8000cfe:	4329      	orrs	r1, r5
 8000d00:	e7a8      	b.n	8000c54 <__aeabi_dsub+0x504>
 8000d02:	4308      	orrs	r0, r1
 8000d04:	1e41      	subs	r1, r0, #1
 8000d06:	4188      	sbcs	r0, r1
 8000d08:	e6a2      	b.n	8000a50 <__aeabi_dsub+0x300>
 8000d0a:	2f00      	cmp	r7, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_dsub+0x5c0>
 8000d0e:	e63c      	b.n	800098a <__aeabi_dsub+0x23a>
 8000d10:	4663      	mov	r3, ip
 8000d12:	1a86      	subs	r6, r0, r2
 8000d14:	1acf      	subs	r7, r1, r3
 8000d16:	42b0      	cmp	r0, r6
 8000d18:	419b      	sbcs	r3, r3
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	1afb      	subs	r3, r7, r3
 8000d1e:	4698      	mov	r8, r3
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	d54e      	bpl.n	8000dc2 <__aeabi_dsub+0x672>
 8000d24:	1a16      	subs	r6, r2, r0
 8000d26:	4663      	mov	r3, ip
 8000d28:	42b2      	cmp	r2, r6
 8000d2a:	4192      	sbcs	r2, r2
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	4252      	negs	r2, r2
 8000d30:	1a89      	subs	r1, r1, r2
 8000d32:	465c      	mov	r4, fp
 8000d34:	2200      	movs	r2, #0
 8000d36:	e57b      	b.n	8000830 <__aeabi_dsub+0xe0>
 8000d38:	4301      	orrs	r1, r0
 8000d3a:	000e      	movs	r6, r1
 8000d3c:	1e71      	subs	r1, r6, #1
 8000d3e:	418e      	sbcs	r6, r1
 8000d40:	e79f      	b.n	8000c82 <__aeabi_dsub+0x532>
 8000d42:	001d      	movs	r5, r3
 8000d44:	000e      	movs	r6, r1
 8000d46:	3d20      	subs	r5, #32
 8000d48:	40ee      	lsrs	r6, r5
 8000d4a:	46b0      	mov	r8, r6
 8000d4c:	2b20      	cmp	r3, #32
 8000d4e:	d004      	beq.n	8000d5a <__aeabi_dsub+0x60a>
 8000d50:	2540      	movs	r5, #64	; 0x40
 8000d52:	1aeb      	subs	r3, r5, r3
 8000d54:	4099      	lsls	r1, r3
 8000d56:	4308      	orrs	r0, r1
 8000d58:	4681      	mov	r9, r0
 8000d5a:	4648      	mov	r0, r9
 8000d5c:	4643      	mov	r3, r8
 8000d5e:	1e41      	subs	r1, r0, #1
 8000d60:	4188      	sbcs	r0, r1
 8000d62:	4318      	orrs	r0, r3
 8000d64:	e674      	b.n	8000a50 <__aeabi_dsub+0x300>
 8000d66:	2200      	movs	r2, #0
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e617      	b.n	800099c <__aeabi_dsub+0x24c>
 8000d6c:	1a16      	subs	r6, r2, r0
 8000d6e:	4663      	mov	r3, ip
 8000d70:	42b2      	cmp	r2, r6
 8000d72:	4192      	sbcs	r2, r2
 8000d74:	1a59      	subs	r1, r3, r1
 8000d76:	4252      	negs	r2, r2
 8000d78:	1a89      	subs	r1, r1, r2
 8000d7a:	003d      	movs	r5, r7
 8000d7c:	e525      	b.n	80007ca <__aeabi_dsub+0x7a>
 8000d7e:	4661      	mov	r1, ip
 8000d80:	4691      	mov	r9, r2
 8000d82:	4d15      	ldr	r5, [pc, #84]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000d84:	e601      	b.n	800098a <__aeabi_dsub+0x23a>
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	2400      	movs	r4, #0
 8000d8a:	0312      	lsls	r2, r2, #12
 8000d8c:	e679      	b.n	8000a82 <__aeabi_dsub+0x332>
 8000d8e:	001d      	movs	r5, r3
 8000d90:	000e      	movs	r6, r1
 8000d92:	3d20      	subs	r5, #32
 8000d94:	40ee      	lsrs	r6, r5
 8000d96:	46b0      	mov	r8, r6
 8000d98:	2b20      	cmp	r3, #32
 8000d9a:	d004      	beq.n	8000da6 <__aeabi_dsub+0x656>
 8000d9c:	2540      	movs	r5, #64	; 0x40
 8000d9e:	1aeb      	subs	r3, r5, r3
 8000da0:	4099      	lsls	r1, r3
 8000da2:	4308      	orrs	r0, r1
 8000da4:	4681      	mov	r9, r0
 8000da6:	464e      	mov	r6, r9
 8000da8:	4643      	mov	r3, r8
 8000daa:	1e71      	subs	r1, r6, #1
 8000dac:	418e      	sbcs	r6, r1
 8000dae:	431e      	orrs	r6, r3
 8000db0:	e767      	b.n	8000c82 <__aeabi_dsub+0x532>
 8000db2:	1886      	adds	r6, r0, r2
 8000db4:	4296      	cmp	r6, r2
 8000db6:	419b      	sbcs	r3, r3
 8000db8:	4461      	add	r1, ip
 8000dba:	425b      	negs	r3, r3
 8000dbc:	18c9      	adds	r1, r1, r3
 8000dbe:	003d      	movs	r5, r7
 8000dc0:	e58c      	b.n	80008dc <__aeabi_dsub+0x18c>
 8000dc2:	4647      	mov	r7, r8
 8000dc4:	4337      	orrs	r7, r6
 8000dc6:	d0ce      	beq.n	8000d66 <__aeabi_dsub+0x616>
 8000dc8:	2207      	movs	r2, #7
 8000dca:	4641      	mov	r1, r8
 8000dcc:	4032      	ands	r2, r6
 8000dce:	e649      	b.n	8000a64 <__aeabi_dsub+0x314>
 8000dd0:	2700      	movs	r7, #0
 8000dd2:	003a      	movs	r2, r7
 8000dd4:	e5e6      	b.n	80009a4 <__aeabi_dsub+0x254>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	000007ff 	.word	0x000007ff
 8000ddc:	ff7fffff 	.word	0xff7fffff

08000de0 <__aeabi_d2iz>:
 8000de0:	b530      	push	{r4, r5, lr}
 8000de2:	4d14      	ldr	r5, [pc, #80]	; (8000e34 <__aeabi_d2iz+0x54>)
 8000de4:	030a      	lsls	r2, r1, #12
 8000de6:	004b      	lsls	r3, r1, #1
 8000de8:	0b12      	lsrs	r2, r2, #12
 8000dea:	0d5b      	lsrs	r3, r3, #21
 8000dec:	0fc9      	lsrs	r1, r1, #31
 8000dee:	2400      	movs	r4, #0
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	dd11      	ble.n	8000e18 <__aeabi_d2iz+0x38>
 8000df4:	4c10      	ldr	r4, [pc, #64]	; (8000e38 <__aeabi_d2iz+0x58>)
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	dc10      	bgt.n	8000e1c <__aeabi_d2iz+0x3c>
 8000dfa:	2480      	movs	r4, #128	; 0x80
 8000dfc:	0364      	lsls	r4, r4, #13
 8000dfe:	4322      	orrs	r2, r4
 8000e00:	4c0e      	ldr	r4, [pc, #56]	; (8000e3c <__aeabi_d2iz+0x5c>)
 8000e02:	1ae4      	subs	r4, r4, r3
 8000e04:	2c1f      	cmp	r4, #31
 8000e06:	dd0c      	ble.n	8000e22 <__aeabi_d2iz+0x42>
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <__aeabi_d2iz+0x60>)
 8000e0a:	1ac3      	subs	r3, r0, r3
 8000e0c:	40da      	lsrs	r2, r3
 8000e0e:	0013      	movs	r3, r2
 8000e10:	425c      	negs	r4, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d100      	bne.n	8000e18 <__aeabi_d2iz+0x38>
 8000e16:	001c      	movs	r4, r3
 8000e18:	0020      	movs	r0, r4
 8000e1a:	bd30      	pop	{r4, r5, pc}
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <__aeabi_d2iz+0x64>)
 8000e1e:	18cc      	adds	r4, r1, r3
 8000e20:	e7fa      	b.n	8000e18 <__aeabi_d2iz+0x38>
 8000e22:	4d09      	ldr	r5, [pc, #36]	; (8000e48 <__aeabi_d2iz+0x68>)
 8000e24:	40e0      	lsrs	r0, r4
 8000e26:	46ac      	mov	ip, r5
 8000e28:	4463      	add	r3, ip
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	4303      	orrs	r3, r0
 8000e30:	e7ee      	b.n	8000e10 <__aeabi_d2iz+0x30>
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	000003fe 	.word	0x000003fe
 8000e38:	0000041d 	.word	0x0000041d
 8000e3c:	00000433 	.word	0x00000433
 8000e40:	00000413 	.word	0x00000413
 8000e44:	7fffffff 	.word	0x7fffffff
 8000e48:	fffffbed 	.word	0xfffffbed

08000e4c <__aeabi_ui2d>:
 8000e4c:	b510      	push	{r4, lr}
 8000e4e:	1e04      	subs	r4, r0, #0
 8000e50:	d025      	beq.n	8000e9e <__aeabi_ui2d+0x52>
 8000e52:	f000 f86b 	bl	8000f2c <__clzsi2>
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <__aeabi_ui2d+0x5c>)
 8000e58:	1a1b      	subs	r3, r3, r0
 8000e5a:	055b      	lsls	r3, r3, #21
 8000e5c:	0d5b      	lsrs	r3, r3, #21
 8000e5e:	280a      	cmp	r0, #10
 8000e60:	dd12      	ble.n	8000e88 <__aeabi_ui2d+0x3c>
 8000e62:	380b      	subs	r0, #11
 8000e64:	4084      	lsls	r4, r0
 8000e66:	2200      	movs	r2, #0
 8000e68:	0324      	lsls	r4, r4, #12
 8000e6a:	0b24      	lsrs	r4, r4, #12
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	0010      	movs	r0, r2
 8000e70:	0324      	lsls	r4, r4, #12
 8000e72:	0d0a      	lsrs	r2, r1, #20
 8000e74:	0b24      	lsrs	r4, r4, #12
 8000e76:	0512      	lsls	r2, r2, #20
 8000e78:	4322      	orrs	r2, r4
 8000e7a:	4c0c      	ldr	r4, [pc, #48]	; (8000eac <__aeabi_ui2d+0x60>)
 8000e7c:	051b      	lsls	r3, r3, #20
 8000e7e:	4022      	ands	r2, r4
 8000e80:	4313      	orrs	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	0859      	lsrs	r1, r3, #1
 8000e86:	bd10      	pop	{r4, pc}
 8000e88:	0002      	movs	r2, r0
 8000e8a:	0021      	movs	r1, r4
 8000e8c:	3215      	adds	r2, #21
 8000e8e:	4091      	lsls	r1, r2
 8000e90:	000a      	movs	r2, r1
 8000e92:	210b      	movs	r1, #11
 8000e94:	1a08      	subs	r0, r1, r0
 8000e96:	40c4      	lsrs	r4, r0
 8000e98:	0324      	lsls	r4, r4, #12
 8000e9a:	0b24      	lsrs	r4, r4, #12
 8000e9c:	e7e6      	b.n	8000e6c <__aeabi_ui2d+0x20>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	e7e2      	b.n	8000e6c <__aeabi_ui2d+0x20>
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	0000041e 	.word	0x0000041e
 8000eac:	800fffff 	.word	0x800fffff

08000eb0 <__aeabi_cdrcmple>:
 8000eb0:	4684      	mov	ip, r0
 8000eb2:	1c10      	adds	r0, r2, #0
 8000eb4:	4662      	mov	r2, ip
 8000eb6:	468c      	mov	ip, r1
 8000eb8:	1c19      	adds	r1, r3, #0
 8000eba:	4663      	mov	r3, ip
 8000ebc:	e000      	b.n	8000ec0 <__aeabi_cdcmpeq>
 8000ebe:	46c0      	nop			; (mov r8, r8)

08000ec0 <__aeabi_cdcmpeq>:
 8000ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ec2:	f000 f8f1 	bl	80010a8 <__ledf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d401      	bmi.n	8000ece <__aeabi_cdcmpeq+0xe>
 8000eca:	2100      	movs	r1, #0
 8000ecc:	42c8      	cmn	r0, r1
 8000ece:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ed0 <__aeabi_dcmpeq>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	f000 f849 	bl	8000f68 <__eqdf2>
 8000ed6:	4240      	negs	r0, r0
 8000ed8:	3001      	adds	r0, #1
 8000eda:	bd10      	pop	{r4, pc}

08000edc <__aeabi_dcmplt>:
 8000edc:	b510      	push	{r4, lr}
 8000ede:	f000 f8e3 	bl	80010a8 <__ledf2>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	db01      	blt.n	8000eea <__aeabi_dcmplt+0xe>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	bd10      	pop	{r4, pc}
 8000eea:	2001      	movs	r0, #1
 8000eec:	bd10      	pop	{r4, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)

08000ef0 <__aeabi_dcmple>:
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	f000 f8d9 	bl	80010a8 <__ledf2>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	dd01      	ble.n	8000efe <__aeabi_dcmple+0xe>
 8000efa:	2000      	movs	r0, #0
 8000efc:	bd10      	pop	{r4, pc}
 8000efe:	2001      	movs	r0, #1
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)

08000f04 <__aeabi_dcmpgt>:
 8000f04:	b510      	push	{r4, lr}
 8000f06:	f000 f86b 	bl	8000fe0 <__gedf2>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	dc01      	bgt.n	8000f12 <__aeabi_dcmpgt+0xe>
 8000f0e:	2000      	movs	r0, #0
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	2001      	movs	r0, #1
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)

08000f18 <__aeabi_dcmpge>:
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	f000 f861 	bl	8000fe0 <__gedf2>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	da01      	bge.n	8000f26 <__aeabi_dcmpge+0xe>
 8000f22:	2000      	movs	r0, #0
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	2001      	movs	r0, #1
 8000f28:	bd10      	pop	{r4, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)

08000f2c <__clzsi2>:
 8000f2c:	211c      	movs	r1, #28
 8000f2e:	2301      	movs	r3, #1
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d301      	bcc.n	8000f3a <__clzsi2+0xe>
 8000f36:	0c00      	lsrs	r0, r0, #16
 8000f38:	3910      	subs	r1, #16
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	4298      	cmp	r0, r3
 8000f3e:	d301      	bcc.n	8000f44 <__clzsi2+0x18>
 8000f40:	0a00      	lsrs	r0, r0, #8
 8000f42:	3908      	subs	r1, #8
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d301      	bcc.n	8000f4e <__clzsi2+0x22>
 8000f4a:	0900      	lsrs	r0, r0, #4
 8000f4c:	3904      	subs	r1, #4
 8000f4e:	a202      	add	r2, pc, #8	; (adr r2, 8000f58 <__clzsi2+0x2c>)
 8000f50:	5c10      	ldrb	r0, [r2, r0]
 8000f52:	1840      	adds	r0, r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	02020304 	.word	0x02020304
 8000f5c:	01010101 	.word	0x01010101
	...

08000f68 <__eqdf2>:
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	464f      	mov	r7, r9
 8000f6c:	4646      	mov	r6, r8
 8000f6e:	46d6      	mov	lr, sl
 8000f70:	4684      	mov	ip, r0
 8000f72:	b5c0      	push	{r6, r7, lr}
 8000f74:	4680      	mov	r8, r0
 8000f76:	4e19      	ldr	r6, [pc, #100]	; (8000fdc <__eqdf2+0x74>)
 8000f78:	0318      	lsls	r0, r3, #12
 8000f7a:	030f      	lsls	r7, r1, #12
 8000f7c:	004d      	lsls	r5, r1, #1
 8000f7e:	0b00      	lsrs	r0, r0, #12
 8000f80:	005c      	lsls	r4, r3, #1
 8000f82:	4682      	mov	sl, r0
 8000f84:	0b3f      	lsrs	r7, r7, #12
 8000f86:	0d6d      	lsrs	r5, r5, #21
 8000f88:	0fc9      	lsrs	r1, r1, #31
 8000f8a:	4691      	mov	r9, r2
 8000f8c:	0d64      	lsrs	r4, r4, #21
 8000f8e:	0fdb      	lsrs	r3, r3, #31
 8000f90:	2001      	movs	r0, #1
 8000f92:	42b5      	cmp	r5, r6
 8000f94:	d00a      	beq.n	8000fac <__eqdf2+0x44>
 8000f96:	42b4      	cmp	r4, r6
 8000f98:	d003      	beq.n	8000fa2 <__eqdf2+0x3a>
 8000f9a:	42a5      	cmp	r5, r4
 8000f9c:	d101      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000f9e:	4557      	cmp	r7, sl
 8000fa0:	d00c      	beq.n	8000fbc <__eqdf2+0x54>
 8000fa2:	bc1c      	pop	{r2, r3, r4}
 8000fa4:	4690      	mov	r8, r2
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	46a2      	mov	sl, r4
 8000faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fac:	4666      	mov	r6, ip
 8000fae:	433e      	orrs	r6, r7
 8000fb0:	d1f7      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fb2:	42ac      	cmp	r4, r5
 8000fb4:	d1f5      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fb6:	4654      	mov	r4, sl
 8000fb8:	4314      	orrs	r4, r2
 8000fba:	d1f2      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d1ef      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fc2:	4299      	cmp	r1, r3
 8000fc4:	d007      	beq.n	8000fd6 <__eqdf2+0x6e>
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d1eb      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fca:	4663      	mov	r3, ip
 8000fcc:	431f      	orrs	r7, r3
 8000fce:	0038      	movs	r0, r7
 8000fd0:	1e47      	subs	r7, r0, #1
 8000fd2:	41b8      	sbcs	r0, r7
 8000fd4:	e7e5      	b.n	8000fa2 <__eqdf2+0x3a>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	e7e3      	b.n	8000fa2 <__eqdf2+0x3a>
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	000007ff 	.word	0x000007ff

08000fe0 <__gedf2>:
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	464f      	mov	r7, r9
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	004d      	lsls	r5, r1, #1
 8000fea:	b5c0      	push	{r6, r7, lr}
 8000fec:	030e      	lsls	r6, r1, #12
 8000fee:	0fc9      	lsrs	r1, r1, #31
 8000ff0:	468a      	mov	sl, r1
 8000ff2:	492c      	ldr	r1, [pc, #176]	; (80010a4 <__gedf2+0xc4>)
 8000ff4:	031f      	lsls	r7, r3, #12
 8000ff6:	005c      	lsls	r4, r3, #1
 8000ff8:	4680      	mov	r8, r0
 8000ffa:	0b36      	lsrs	r6, r6, #12
 8000ffc:	0d6d      	lsrs	r5, r5, #21
 8000ffe:	4691      	mov	r9, r2
 8001000:	0b3f      	lsrs	r7, r7, #12
 8001002:	0d64      	lsrs	r4, r4, #21
 8001004:	0fdb      	lsrs	r3, r3, #31
 8001006:	428d      	cmp	r5, r1
 8001008:	d01e      	beq.n	8001048 <__gedf2+0x68>
 800100a:	428c      	cmp	r4, r1
 800100c:	d016      	beq.n	800103c <__gedf2+0x5c>
 800100e:	2d00      	cmp	r5, #0
 8001010:	d11e      	bne.n	8001050 <__gedf2+0x70>
 8001012:	4330      	orrs	r0, r6
 8001014:	4684      	mov	ip, r0
 8001016:	2c00      	cmp	r4, #0
 8001018:	d101      	bne.n	800101e <__gedf2+0x3e>
 800101a:	433a      	orrs	r2, r7
 800101c:	d023      	beq.n	8001066 <__gedf2+0x86>
 800101e:	4662      	mov	r2, ip
 8001020:	2a00      	cmp	r2, #0
 8001022:	d01a      	beq.n	800105a <__gedf2+0x7a>
 8001024:	459a      	cmp	sl, r3
 8001026:	d029      	beq.n	800107c <__gedf2+0x9c>
 8001028:	4651      	mov	r1, sl
 800102a:	2002      	movs	r0, #2
 800102c:	3901      	subs	r1, #1
 800102e:	4008      	ands	r0, r1
 8001030:	3801      	subs	r0, #1
 8001032:	bc1c      	pop	{r2, r3, r4}
 8001034:	4690      	mov	r8, r2
 8001036:	4699      	mov	r9, r3
 8001038:	46a2      	mov	sl, r4
 800103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800103c:	0039      	movs	r1, r7
 800103e:	4311      	orrs	r1, r2
 8001040:	d0e5      	beq.n	800100e <__gedf2+0x2e>
 8001042:	2002      	movs	r0, #2
 8001044:	4240      	negs	r0, r0
 8001046:	e7f4      	b.n	8001032 <__gedf2+0x52>
 8001048:	4330      	orrs	r0, r6
 800104a:	d1fa      	bne.n	8001042 <__gedf2+0x62>
 800104c:	42ac      	cmp	r4, r5
 800104e:	d00f      	beq.n	8001070 <__gedf2+0x90>
 8001050:	2c00      	cmp	r4, #0
 8001052:	d10f      	bne.n	8001074 <__gedf2+0x94>
 8001054:	433a      	orrs	r2, r7
 8001056:	d0e7      	beq.n	8001028 <__gedf2+0x48>
 8001058:	e00c      	b.n	8001074 <__gedf2+0x94>
 800105a:	2201      	movs	r2, #1
 800105c:	3b01      	subs	r3, #1
 800105e:	4393      	bics	r3, r2
 8001060:	0018      	movs	r0, r3
 8001062:	3001      	adds	r0, #1
 8001064:	e7e5      	b.n	8001032 <__gedf2+0x52>
 8001066:	4663      	mov	r3, ip
 8001068:	2000      	movs	r0, #0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0e1      	beq.n	8001032 <__gedf2+0x52>
 800106e:	e7db      	b.n	8001028 <__gedf2+0x48>
 8001070:	433a      	orrs	r2, r7
 8001072:	d1e6      	bne.n	8001042 <__gedf2+0x62>
 8001074:	459a      	cmp	sl, r3
 8001076:	d1d7      	bne.n	8001028 <__gedf2+0x48>
 8001078:	42a5      	cmp	r5, r4
 800107a:	dcd5      	bgt.n	8001028 <__gedf2+0x48>
 800107c:	42a5      	cmp	r5, r4
 800107e:	db05      	blt.n	800108c <__gedf2+0xac>
 8001080:	42be      	cmp	r6, r7
 8001082:	d8d1      	bhi.n	8001028 <__gedf2+0x48>
 8001084:	d008      	beq.n	8001098 <__gedf2+0xb8>
 8001086:	2000      	movs	r0, #0
 8001088:	42be      	cmp	r6, r7
 800108a:	d2d2      	bcs.n	8001032 <__gedf2+0x52>
 800108c:	4650      	mov	r0, sl
 800108e:	2301      	movs	r3, #1
 8001090:	3801      	subs	r0, #1
 8001092:	4398      	bics	r0, r3
 8001094:	3001      	adds	r0, #1
 8001096:	e7cc      	b.n	8001032 <__gedf2+0x52>
 8001098:	45c8      	cmp	r8, r9
 800109a:	d8c5      	bhi.n	8001028 <__gedf2+0x48>
 800109c:	2000      	movs	r0, #0
 800109e:	45c8      	cmp	r8, r9
 80010a0:	d3f4      	bcc.n	800108c <__gedf2+0xac>
 80010a2:	e7c6      	b.n	8001032 <__gedf2+0x52>
 80010a4:	000007ff 	.word	0x000007ff

080010a8 <__ledf2>:
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	464f      	mov	r7, r9
 80010ac:	4646      	mov	r6, r8
 80010ae:	46d6      	mov	lr, sl
 80010b0:	004d      	lsls	r5, r1, #1
 80010b2:	b5c0      	push	{r6, r7, lr}
 80010b4:	030e      	lsls	r6, r1, #12
 80010b6:	0fc9      	lsrs	r1, r1, #31
 80010b8:	468a      	mov	sl, r1
 80010ba:	492e      	ldr	r1, [pc, #184]	; (8001174 <__ledf2+0xcc>)
 80010bc:	031f      	lsls	r7, r3, #12
 80010be:	005c      	lsls	r4, r3, #1
 80010c0:	4680      	mov	r8, r0
 80010c2:	0b36      	lsrs	r6, r6, #12
 80010c4:	0d6d      	lsrs	r5, r5, #21
 80010c6:	4691      	mov	r9, r2
 80010c8:	0b3f      	lsrs	r7, r7, #12
 80010ca:	0d64      	lsrs	r4, r4, #21
 80010cc:	0fdb      	lsrs	r3, r3, #31
 80010ce:	428d      	cmp	r5, r1
 80010d0:	d018      	beq.n	8001104 <__ledf2+0x5c>
 80010d2:	428c      	cmp	r4, r1
 80010d4:	d011      	beq.n	80010fa <__ledf2+0x52>
 80010d6:	2d00      	cmp	r5, #0
 80010d8:	d118      	bne.n	800110c <__ledf2+0x64>
 80010da:	4330      	orrs	r0, r6
 80010dc:	4684      	mov	ip, r0
 80010de:	2c00      	cmp	r4, #0
 80010e0:	d11e      	bne.n	8001120 <__ledf2+0x78>
 80010e2:	433a      	orrs	r2, r7
 80010e4:	d11c      	bne.n	8001120 <__ledf2+0x78>
 80010e6:	4663      	mov	r3, ip
 80010e8:	2000      	movs	r0, #0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d030      	beq.n	8001150 <__ledf2+0xa8>
 80010ee:	4651      	mov	r1, sl
 80010f0:	2002      	movs	r0, #2
 80010f2:	3901      	subs	r1, #1
 80010f4:	4008      	ands	r0, r1
 80010f6:	3801      	subs	r0, #1
 80010f8:	e02a      	b.n	8001150 <__ledf2+0xa8>
 80010fa:	0039      	movs	r1, r7
 80010fc:	4311      	orrs	r1, r2
 80010fe:	d0ea      	beq.n	80010d6 <__ledf2+0x2e>
 8001100:	2002      	movs	r0, #2
 8001102:	e025      	b.n	8001150 <__ledf2+0xa8>
 8001104:	4330      	orrs	r0, r6
 8001106:	d1fb      	bne.n	8001100 <__ledf2+0x58>
 8001108:	42ac      	cmp	r4, r5
 800110a:	d026      	beq.n	800115a <__ledf2+0xb2>
 800110c:	2c00      	cmp	r4, #0
 800110e:	d126      	bne.n	800115e <__ledf2+0xb6>
 8001110:	433a      	orrs	r2, r7
 8001112:	d124      	bne.n	800115e <__ledf2+0xb6>
 8001114:	4651      	mov	r1, sl
 8001116:	2002      	movs	r0, #2
 8001118:	3901      	subs	r1, #1
 800111a:	4008      	ands	r0, r1
 800111c:	3801      	subs	r0, #1
 800111e:	e017      	b.n	8001150 <__ledf2+0xa8>
 8001120:	4662      	mov	r2, ip
 8001122:	2a00      	cmp	r2, #0
 8001124:	d00f      	beq.n	8001146 <__ledf2+0x9e>
 8001126:	459a      	cmp	sl, r3
 8001128:	d1e1      	bne.n	80010ee <__ledf2+0x46>
 800112a:	42a5      	cmp	r5, r4
 800112c:	db05      	blt.n	800113a <__ledf2+0x92>
 800112e:	42be      	cmp	r6, r7
 8001130:	d8dd      	bhi.n	80010ee <__ledf2+0x46>
 8001132:	d019      	beq.n	8001168 <__ledf2+0xc0>
 8001134:	2000      	movs	r0, #0
 8001136:	42be      	cmp	r6, r7
 8001138:	d20a      	bcs.n	8001150 <__ledf2+0xa8>
 800113a:	4650      	mov	r0, sl
 800113c:	2301      	movs	r3, #1
 800113e:	3801      	subs	r0, #1
 8001140:	4398      	bics	r0, r3
 8001142:	3001      	adds	r0, #1
 8001144:	e004      	b.n	8001150 <__ledf2+0xa8>
 8001146:	2201      	movs	r2, #1
 8001148:	3b01      	subs	r3, #1
 800114a:	4393      	bics	r3, r2
 800114c:	0018      	movs	r0, r3
 800114e:	3001      	adds	r0, #1
 8001150:	bc1c      	pop	{r2, r3, r4}
 8001152:	4690      	mov	r8, r2
 8001154:	4699      	mov	r9, r3
 8001156:	46a2      	mov	sl, r4
 8001158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115a:	433a      	orrs	r2, r7
 800115c:	d1d0      	bne.n	8001100 <__ledf2+0x58>
 800115e:	459a      	cmp	sl, r3
 8001160:	d1c5      	bne.n	80010ee <__ledf2+0x46>
 8001162:	42a5      	cmp	r5, r4
 8001164:	dcc3      	bgt.n	80010ee <__ledf2+0x46>
 8001166:	e7e0      	b.n	800112a <__ledf2+0x82>
 8001168:	45c8      	cmp	r8, r9
 800116a:	d8c0      	bhi.n	80010ee <__ledf2+0x46>
 800116c:	2000      	movs	r0, #0
 800116e:	45c8      	cmp	r8, r9
 8001170:	d3e3      	bcc.n	800113a <__ledf2+0x92>
 8001172:	e7ed      	b.n	8001150 <__ledf2+0xa8>
 8001174:	000007ff 	.word	0x000007ff

08001178 <SELECT>:

#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4
/* SPI Chip Select */
static void SELECT(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800117c:	2390      	movs	r3, #144	; 0x90
 800117e:	05db      	lsls	r3, r3, #23
 8001180:	2200      	movs	r2, #0
 8001182:	2110      	movs	r1, #16
 8001184:	0018      	movs	r0, r3
 8001186:	f001 fb63 	bl	8002850 <HAL_GPIO_WritePin>
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001194:	2390      	movs	r3, #144	; 0x90
 8001196:	05db      	lsls	r3, r3, #23
 8001198:	2201      	movs	r2, #1
 800119a:	2110      	movs	r1, #16
 800119c:	0018      	movs	r0, r3
 800119e:	f001 fb57 	bl	8002850 <HAL_GPIO_WritePin>
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <SPI_TxByte>:



/* SPI data transfer */
static void SPI_TxByte(BYTE data)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	0002      	movs	r2, r0
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	701a      	strb	r2, [r3, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <SPI_TxByte+0x34>)
 80011b8:	0018      	movs	r0, r3
 80011ba:	f002 fd09 	bl	8003bd0 <HAL_SPI_GetState>
 80011be:	0003      	movs	r3, r0
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d1f8      	bne.n	80011b6 <SPI_TxByte+0xe>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80011c4:	23fa      	movs	r3, #250	; 0xfa
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	1df9      	adds	r1, r7, #7
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <SPI_TxByte+0x34>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	f002 f943 	bl	8003458 <HAL_SPI_Transmit>
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	20000b9c 	.word	0x20000b9c

080011e0 <SPI_RxByte>:

/* SPI data send / receive return type function*/
static uint8_t SPI_RxByte(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	22ff      	movs	r2, #255	; 0xff
 80011ea:	701a      	strb	r2, [r3, #0]
  data = 0;
 80011ec:	1dbb      	adds	r3, r7, #6
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <SPI_RxByte+0x40>)
 80011f6:	0018      	movs	r0, r3
 80011f8:	f002 fcea 	bl	8003bd0 <HAL_SPI_GetState>
 80011fc:	0003      	movs	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d1f8      	bne.n	80011f4 <SPI_RxByte+0x14>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001202:	1dba      	adds	r2, r7, #6
 8001204:	1df9      	adds	r1, r7, #7
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <SPI_RxByte+0x40>)
 8001208:	23fa      	movs	r3, #250	; 0xfa
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	f002 faa4 	bl	800375c <HAL_SPI_TransmitReceive>
  
  return data;
 8001214:	1dbb      	adds	r3, r7, #6
 8001216:	781b      	ldrb	r3, [r3, #0]
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000b9c 	.word	0x20000b9c

08001224 <SPI_RxBytePtr>:

/* SPI data send / receive pointer type function */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800122c:	f7ff ffd8 	bl	80011e0 <SPI_RxByte>
 8001230:	0003      	movs	r3, r0
 8001232:	001a      	movs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	701a      	strb	r2, [r3, #0]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}

08001240 <SD_ReadyWait>:


/* Standby SD card Ready */
static uint8_t SD_ReadyWait(void) 
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500 ms counter ready */
  Timer2 = 50;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <SD_ReadyWait+0x38>)
 8001248:	2232      	movs	r2, #50	; 0x32
 800124a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800124c:	f7ff ffc8 	bl	80011e0 <SPI_RxByte>
  
  do
  {
    /* SPI communication until a value of 0xFF is received */
    res = SPI_RxByte();
 8001250:	1dfc      	adds	r4, r7, #7
 8001252:	f7ff ffc5 	bl	80011e0 <SPI_RxByte>
 8001256:	0003      	movs	r3, r0
 8001258:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2bff      	cmp	r3, #255	; 0xff
 8001260:	d004      	beq.n	800126c <SD_ReadyWait+0x2c>
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SD_ReadyWait+0x38>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f1      	bne.n	8001250 <SD_ReadyWait+0x10>
  
  return res;
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	781b      	ldrb	r3, [r3, #0]
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b003      	add	sp, #12
 8001276:	bd90      	pop	{r4, r7, pc}
 8001278:	20001034 	.word	0x20001034

0800127c <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <SD_PowerOn+0xa0>)
 8001284:	617b      	str	r3, [r7, #20]
  
  /* In the Deselect state, the SPI message is transmitted to the standby state. */
  DESELECT();
 8001286:	f7ff ff83 	bl	8001190 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	e005      	b.n	800129c <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8001290:	20ff      	movs	r0, #255	; 0xff
 8001292:	f7ff ff89 	bl	80011a8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	3301      	adds	r3, #1
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2b09      	cmp	r3, #9
 80012a0:	ddf6      	ble.n	8001290 <SD_PowerOn+0x14>
  }
  
  /* SPI Chips Select */
  SELECT();
 80012a2:	f7ff ff69 	bl	8001178 <SELECT>
  
  /* Initial GO_IDLE_STATE state transition */
  cmd_arg[0] = (CMD0 | 0x40);
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2240      	movs	r2, #64	; 0x40
 80012aa:	701a      	strb	r2, [r3, #0]
  cmd_arg[1] = 0;
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	705a      	strb	r2, [r3, #1]
  cmd_arg[2] = 0;
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	709a      	strb	r2, [r3, #2]
  cmd_arg[3] = 0;
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	70da      	strb	r2, [r3, #3]
  cmd_arg[4] = 0;
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	711a      	strb	r2, [r3, #4]
  cmd_arg[5] = 0x95;
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2295      	movs	r2, #149	; 0x95
 80012c8:	715a      	strb	r2, [r3, #5]
  
  /* Command transmission */
  for (int i = 0; i < 6; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	e009      	b.n	80012e4 <SD_PowerOn+0x68>
  {
    SPI_TxByte(cmd_arg[i]);
 80012d0:	1d3a      	adds	r2, r7, #4
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	18d3      	adds	r3, r2, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff ff65 	bl	80011a8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3301      	adds	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	ddf2      	ble.n	80012d0 <SD_PowerOn+0x54>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80012ea:	e002      	b.n	80012f2 <SD_PowerOn+0x76>
  {
    Count--;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80012f2:	f7ff ff75 	bl	80011e0 <SPI_RxByte>
 80012f6:	0003      	movs	r3, r0
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d002      	beq.n	8001302 <SD_PowerOn+0x86>
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f4      	bne.n	80012ec <SD_PowerOn+0x70>
  }
  
  DESELECT();
 8001302:	f7ff ff45 	bl	8001190 <DESELECT>
  SPI_TxByte(0XFF);
 8001306:	20ff      	movs	r0, #255	; 0xff
 8001308:	f7ff ff4e 	bl	80011a8 <SPI_TxByte>
  
  PowerFlag = 1;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SD_PowerOn+0xa4>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b006      	add	sp, #24
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	00001fff 	.word	0x00001fff
 8001320:	200000a5 	.word	0x200000a5

08001324 <SD_PowerOff>:

/*
Power off */
static void SD_PowerOff(void) 
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <SD_PowerOff+0x10>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200000a5 	.word	0x200000a5

08001338 <SD_CheckPower>:

/* Check power status*/
static uint8_t SD_CheckPower(void) 
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <SD_CheckPower+0x10>)
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	200000a5 	.word	0x200000a5

0800134c <SD_RxDataBlock>:

/*Receive data packet */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms timer */
  Timer1 = 10;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <SD_RxDataBlock+0x74>)
 8001358:	220a      	movs	r2, #10
 800135a:	701a      	strb	r2, [r3, #0]
  
  /* 
Answer waiting */		
  do 
  {    
    token = SPI_RxByte();
 800135c:	250f      	movs	r5, #15
 800135e:	197c      	adds	r4, r7, r5
 8001360:	f7ff ff3e 	bl	80011e0 <SPI_RxByte>
 8001364:	0003      	movs	r3, r0
 8001366:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 8001368:	197b      	adds	r3, r7, r5
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2bff      	cmp	r3, #255	; 0xff
 800136e:	d104      	bne.n	800137a <SD_RxDataBlock+0x2e>
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <SD_RxDataBlock+0x74>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <SD_RxDataBlock+0x10>
  
  /* Error processing when receiving Token other than 0xFE */
  if(token != 0xFE)
 800137a:	230f      	movs	r3, #15
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2bfe      	cmp	r3, #254	; 0xfe
 8001382:	d001      	beq.n	8001388 <SD_RxDataBlock+0x3c>
    return FALSE;
 8001384:	2300      	movs	r3, #0
 8001386:	e016      	b.n	80013b6 <SD_RxDataBlock+0x6a>
  
  /*
Receiving data into a buffer */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	0018      	movs	r0, r3
 8001390:	f7ff ff48 	bl	8001224 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	0018      	movs	r0, r3
 800139c:	f7ff ff42 	bl	8001224 <SPI_RxBytePtr>
  } while(btr -= 2);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	3b02      	subs	r3, #2
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1ed      	bne.n	8001388 <SD_RxDataBlock+0x3c>
  
  SPI_RxByte(); /* Ignore CRC*/
 80013ac:	f7ff ff18 	bl	80011e0 <SPI_RxByte>
  SPI_RxByte();
 80013b0:	f7ff ff16 	bl	80011e0 <SPI_RxByte>
  
  return TRUE;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b004      	add	sp, #16
 80013bc:	bdb0      	pop	{r4, r5, r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	20001035 	.word	0x20001035

080013c4 <SD_TxDataBlock>:

/*Data transmission packet */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	000a      	movs	r2, r1
 80013ce:	1cfb      	adds	r3, r7, #3
 80013d0:	701a      	strb	r2, [r3, #0]
  uint8_t resp, wc;
  uint8_t i = 0;
 80013d2:	230d      	movs	r3, #13
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
    
  /* Waiting for SD card preparation */
  if (SD_ReadyWait() != 0xFF)
 80013da:	f7ff ff31 	bl	8001240 <SD_ReadyWait>
 80013de:	0003      	movs	r3, r0
 80013e0:	2bff      	cmp	r3, #255	; 0xff
 80013e2:	d001      	beq.n	80013e8 <SD_TxDataBlock+0x24>
    return FALSE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e051      	b.n	800148c <SD_TxDataBlock+0xc8>
  
  /*Token transfer */
  SPI_TxByte(token);      
 80013e8:	1cfb      	adds	r3, r7, #3
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff fedb 	bl	80011a8 <SPI_TxByte>
  
  /* For data token */
  if (token != 0xFD) 
 80013f2:	1cfb      	adds	r3, r7, #3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2bfd      	cmp	r3, #253	; 0xfd
 80013f8:	d03e      	beq.n	8001478 <SD_TxDataBlock+0xb4>
  { 
    wc = 0;
 80013fa:	230e      	movs	r3, #14
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
    
    /* 512 byte data transmission */
    do 
    { 
      SPI_TxByte(*buff++);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff fecc 	bl	80011a8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff fec5 	bl	80011a8 <SPI_TxByte>
    } while (--wc);
 800141e:	210e      	movs	r1, #14
 8001420:	187b      	adds	r3, r7, r1
 8001422:	187a      	adds	r2, r7, r1
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	3a01      	subs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	187b      	adds	r3, r7, r1
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1e7      	bne.n	8001402 <SD_TxDataBlock+0x3e>
    
    SPI_RxByte();       /*Ignore CRC */
 8001432:	f7ff fed5 	bl	80011e0 <SPI_RxByte>
    SPI_RxByte();
 8001436:	f7ff fed3 	bl	80011e0 <SPI_RxByte>
    
    /* Receive Date Response*/        
    while (i <= 64) 
 800143a:	e011      	b.n	8001460 <SD_TxDataBlock+0x9c>
    {			
      resp = SPI_RxByte();
 800143c:	250f      	movs	r5, #15
 800143e:	197c      	adds	r4, r7, r5
 8001440:	f7ff fece 	bl	80011e0 <SPI_RxByte>
 8001444:	0003      	movs	r3, r0
 8001446:	7023      	strb	r3, [r4, #0]
      
      /* Error response processing */
      if ((resp & 0x1F) == 0x05) 
 8001448:	197b      	adds	r3, r7, r5
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	221f      	movs	r2, #31
 800144e:	4013      	ands	r3, r2
 8001450:	2b05      	cmp	r3, #5
 8001452:	d00b      	beq.n	800146c <SD_TxDataBlock+0xa8>
        break;
      
      i++;
 8001454:	210d      	movs	r1, #13
 8001456:	187b      	adds	r3, r7, r1
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	187b      	adds	r3, r7, r1
 800145c:	3201      	adds	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
    while (i <= 64) 
 8001460:	230d      	movs	r3, #13
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b40      	cmp	r3, #64	; 0x40
 8001468:	d9e8      	bls.n	800143c <SD_TxDataBlock+0x78>
 800146a:	e000      	b.n	800146e <SD_TxDataBlock+0xaa>
        break;
 800146c:	46c0      	nop			; (mov r8, r8)
    }
    
    /*SPI receive buffer clear*/
    while (SPI_RxByte() == 0);
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	f7ff feb6 	bl	80011e0 <SPI_RxByte>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d0fb      	beq.n	8001470 <SD_TxDataBlock+0xac>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001478:	230f      	movs	r3, #15
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	221f      	movs	r2, #31
 8001480:	4013      	ands	r3, r2
 8001482:	2b05      	cmp	r3, #5
 8001484:	d101      	bne.n	800148a <SD_TxDataBlock+0xc6>
    return TRUE;
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <SD_TxDataBlock+0xc8>
  else
    return FALSE;
 800148a:	2300      	movs	r3, #0
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b004      	add	sp, #16
 8001492:	bdb0      	pop	{r4, r5, r7, pc}

08001494 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD packet transmission */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001494:	b5b0      	push	{r4, r5, r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	0002      	movs	r2, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;
  
  /*SD card standby */
  if (SD_ReadyWait() != 0xFF)
 80014a2:	f7ff fecd 	bl	8001240 <SD_ReadyWait>
 80014a6:	0003      	movs	r3, r0
 80014a8:	2bff      	cmp	r3, #255	; 0xff
 80014aa:	d001      	beq.n	80014b0 <SD_SendCmd+0x1c>
    return 0xFF;
 80014ac:	23ff      	movs	r3, #255	; 0xff
 80014ae:	e057      	b.n	8001560 <SD_SendCmd+0xcc>
  
  /* Command packet transmission */
  SPI_TxByte(cmd); 			/* Command */
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff fe77 	bl	80011a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	0e1b      	lsrs	r3, r3, #24
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff fe71 	bl	80011a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	0c1b      	lsrs	r3, r3, #16
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff fe6b 	bl	80011a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fe65 	bl	80011a8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7ff fe60 	bl	80011a8 <SPI_TxByte>
  
  /* 
Prepare CRC by command */
  crc = 0;  
 80014e8:	230f      	movs	r3, #15
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD0)
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b40      	cmp	r3, #64	; 0x40
 80014f6:	d103      	bne.n	8001500 <SD_SendCmd+0x6c>
    crc = 0x95; /* CRC for CMD0(0) */
 80014f8:	230f      	movs	r3, #15
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	2295      	movs	r2, #149	; 0x95
 80014fe:	701a      	strb	r2, [r3, #0]
  
  if (cmd == CMD8)
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b48      	cmp	r3, #72	; 0x48
 8001506:	d103      	bne.n	8001510 <SD_SendCmd+0x7c>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001508:	230f      	movs	r3, #15
 800150a:	18fb      	adds	r3, r7, r3
 800150c:	2287      	movs	r2, #135	; 0x87
 800150e:	701a      	strb	r2, [r3, #0]
  
  /* CRC transmission */
  SPI_TxByte(crc);
 8001510:	230f      	movs	r3, #15
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff fe46 	bl	80011a8 <SPI_TxByte>
  
  /* 
For the CMD12 Stop Reading command, discard one response byte */
  if (cmd == CMD12)
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b4c      	cmp	r3, #76	; 0x4c
 8001522:	d101      	bne.n	8001528 <SD_SendCmd+0x94>
    SPI_RxByte();
 8001524:	f7ff fe5c 	bl	80011e0 <SPI_RxByte>
  
  /* And receives normal data within 10 times. */
  uint8_t n = 10; 
 8001528:	230e      	movs	r3, #14
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	220a      	movs	r2, #10
 800152e:	701a      	strb	r2, [r3, #0]
  do
  {
    res = SPI_RxByte();
 8001530:	250d      	movs	r5, #13
 8001532:	197c      	adds	r4, r7, r5
 8001534:	f7ff fe54 	bl	80011e0 <SPI_RxByte>
 8001538:	0003      	movs	r3, r0
 800153a:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 800153c:	197b      	adds	r3, r7, r5
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b25b      	sxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	da09      	bge.n	800155a <SD_SendCmd+0xc6>
 8001546:	210e      	movs	r1, #14
 8001548:	187b      	adds	r3, r7, r1
 800154a:	187a      	adds	r2, r7, r1
 800154c:	7812      	ldrb	r2, [r2, #0]
 800154e:	3a01      	subs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	187b      	adds	r3, r7, r1
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ea      	bne.n	8001530 <SD_SendCmd+0x9c>
  
  return res;
 800155a:	230d      	movs	r3, #13
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	781b      	ldrb	r3, [r3, #0]
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	b004      	add	sp, #16
 8001566:	bdb0      	pop	{r4, r5, r7, pc}

08001568 <SD_disk_initialize>:
  Used in the user_diskio.c file.
-----------------------------------------------------------------------*/

/* SD card initialization */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	0002      	movs	r2, r0
 8001570:	1dfb      	adds	r3, r7, #7
 8001572:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];
  
  /* 
Only one type of drive is supported*/
  if(drv)
 8001574:	1dfb      	adds	r3, r7, #7
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SD_disk_initialize+0x18>
    return STA_NOINIT;  
 800157c:	2301      	movs	r3, #1
 800157e:	e0f6      	b.n	800176e <SD_disk_initialize+0x206>
  
  /*No SD card inserted */
  if(Stat & STA_NODISK)
 8001580:	4b7d      	ldr	r3, [pc, #500]	; (8001778 <SD_disk_initialize+0x210>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	001a      	movs	r2, r3
 8001588:	2302      	movs	r3, #2
 800158a:	4013      	ands	r3, r2
 800158c:	d003      	beq.n	8001596 <SD_disk_initialize+0x2e>
    return Stat;        
 800158e:	4b7a      	ldr	r3, [pc, #488]	; (8001778 <SD_disk_initialize+0x210>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	e0eb      	b.n	800176e <SD_disk_initialize+0x206>
  
  /* SD card Power On */
  SD_PowerOn();         
 8001596:	f7ff fe71 	bl	800127c <SD_PowerOn>
  
  /*For SPI communication Chip Select */
  SELECT();             
 800159a:	f7ff fded 	bl	8001178 <SELECT>
  
  /* SD card type variable initialization*/
  type = 0;
 800159e:	230e      	movs	r3, #14
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
  
  /* Idle state entry */
  if (SD_SendCmd(CMD0, 0) == 1) 
 80015a6:	2100      	movs	r1, #0
 80015a8:	2040      	movs	r0, #64	; 0x40
 80015aa:	f7ff ff73 	bl	8001494 <SD_SendCmd>
 80015ae:	0003      	movs	r3, r0
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d000      	beq.n	80015b6 <SD_disk_initialize+0x4e>
 80015b4:	e0c0      	b.n	8001738 <SD_disk_initialize+0x1d0>
  { 
    /*Timer 1 second set */
    Timer1 = 100;
 80015b6:	4b71      	ldr	r3, [pc, #452]	; (800177c <SD_disk_initialize+0x214>)
 80015b8:	2264      	movs	r2, #100	; 0x64
 80015ba:	701a      	strb	r2, [r3, #0]
    
    /* Confirm SD interface operation condition*/
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80015bc:	23d5      	movs	r3, #213	; 0xd5
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	0019      	movs	r1, r3
 80015c2:	2048      	movs	r0, #72	; 0x48
 80015c4:	f7ff ff66 	bl	8001494 <SD_SendCmd>
 80015c8:	0003      	movs	r3, r0
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d000      	beq.n	80015d0 <SD_disk_initialize+0x68>
 80015ce:	e06e      	b.n	80016ae <SD_disk_initialize+0x146>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80015d0:	230f      	movs	r3, #15
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e00e      	b.n	80015f8 <SD_disk_initialize+0x90>
      {
        ocr[n] = SPI_RxByte();
 80015da:	250f      	movs	r5, #15
 80015dc:	197b      	adds	r3, r7, r5
 80015de:	781c      	ldrb	r4, [r3, #0]
 80015e0:	f7ff fdfe 	bl	80011e0 <SPI_RxByte>
 80015e4:	0003      	movs	r3, r0
 80015e6:	001a      	movs	r2, r3
 80015e8:	2308      	movs	r3, #8
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 80015ee:	197b      	adds	r3, r7, r5
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	197b      	adds	r3, r7, r5
 80015f4:	3201      	adds	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	230f      	movs	r3, #15
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d9eb      	bls.n	80015da <SD_disk_initialize+0x72>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001602:	2308      	movs	r3, #8
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	789b      	ldrb	r3, [r3, #2]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d000      	beq.n	800160e <SD_disk_initialize+0xa6>
 800160c:	e094      	b.n	8001738 <SD_disk_initialize+0x1d0>
 800160e:	2308      	movs	r3, #8
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	78db      	ldrb	r3, [r3, #3]
 8001614:	2baa      	cmp	r3, #170	; 0xaa
 8001616:	d000      	beq.n	800161a <SD_disk_initialize+0xb2>
 8001618:	e08e      	b.n	8001738 <SD_disk_initialize+0x1d0>
      { 
        /* 2.7-3.6V Voltage Range Operation */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800161a:	2100      	movs	r1, #0
 800161c:	2077      	movs	r0, #119	; 0x77
 800161e:	f7ff ff39 	bl	8001494 <SD_SendCmd>
 8001622:	0003      	movs	r3, r0
 8001624:	2b01      	cmp	r3, #1
 8001626:	d807      	bhi.n	8001638 <SD_disk_initialize+0xd0>
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	05db      	lsls	r3, r3, #23
 800162c:	0019      	movs	r1, r3
 800162e:	2069      	movs	r0, #105	; 0x69
 8001630:	f7ff ff30 	bl	8001494 <SD_SendCmd>
 8001634:	1e03      	subs	r3, r0, #0
 8001636:	d005      	beq.n	8001644 <SD_disk_initialize+0xdc>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <SD_disk_initialize+0x214>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1eb      	bne.n	800161a <SD_disk_initialize+0xb2>
 8001642:	e000      	b.n	8001646 <SD_disk_initialize+0xde>
            break; /* ACMD41 with HCS bit */
 8001644:	46c0      	nop			; (mov r8, r8)
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001646:	4b4d      	ldr	r3, [pc, #308]	; (800177c <SD_disk_initialize+0x214>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d100      	bne.n	8001652 <SD_disk_initialize+0xea>
 8001650:	e072      	b.n	8001738 <SD_disk_initialize+0x1d0>
 8001652:	2100      	movs	r1, #0
 8001654:	207a      	movs	r0, #122	; 0x7a
 8001656:	f7ff ff1d 	bl	8001494 <SD_SendCmd>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d000      	beq.n	8001660 <SD_disk_initialize+0xf8>
 800165e:	e06b      	b.n	8001738 <SD_disk_initialize+0x1d0>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001660:	230f      	movs	r3, #15
 8001662:	18fb      	adds	r3, r7, r3
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	e00e      	b.n	8001688 <SD_disk_initialize+0x120>
          {
            ocr[n] = SPI_RxByte();
 800166a:	250f      	movs	r5, #15
 800166c:	197b      	adds	r3, r7, r5
 800166e:	781c      	ldrb	r4, [r3, #0]
 8001670:	f7ff fdb6 	bl	80011e0 <SPI_RxByte>
 8001674:	0003      	movs	r3, r0
 8001676:	001a      	movs	r2, r3
 8001678:	2308      	movs	r3, #8
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 800167e:	197b      	adds	r3, r7, r5
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	197b      	adds	r3, r7, r5
 8001684:	3201      	adds	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	230f      	movs	r3, #15
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b03      	cmp	r3, #3
 8001690:	d9eb      	bls.n	800166a <SD_disk_initialize+0x102>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001692:	2308      	movs	r3, #8
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	001a      	movs	r2, r3
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	4013      	ands	r3, r2
 800169e:	d001      	beq.n	80016a4 <SD_disk_initialize+0x13c>
 80016a0:	2206      	movs	r2, #6
 80016a2:	e000      	b.n	80016a6 <SD_disk_initialize+0x13e>
 80016a4:	2202      	movs	r2, #2
 80016a6:	230e      	movs	r3, #14
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e044      	b.n	8001738 <SD_disk_initialize+0x1d0>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80016ae:	2100      	movs	r1, #0
 80016b0:	2077      	movs	r0, #119	; 0x77
 80016b2:	f7ff feef 	bl	8001494 <SD_SendCmd>
 80016b6:	0003      	movs	r3, r0
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d808      	bhi.n	80016ce <SD_disk_initialize+0x166>
 80016bc:	2100      	movs	r1, #0
 80016be:	2069      	movs	r0, #105	; 0x69
 80016c0:	f7ff fee8 	bl	8001494 <SD_SendCmd>
 80016c4:	0003      	movs	r3, r0
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d801      	bhi.n	80016ce <SD_disk_initialize+0x166>
 80016ca:	2202      	movs	r2, #2
 80016cc:	e000      	b.n	80016d0 <SD_disk_initialize+0x168>
 80016ce:	2201      	movs	r2, #1
 80016d0:	230e      	movs	r3, #14
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	701a      	strb	r2, [r3, #0]
      
      do {
        if (type == 2) 
 80016d6:	230e      	movs	r3, #14
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d10d      	bne.n	80016fc <SD_disk_initialize+0x194>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80016e0:	2100      	movs	r1, #0
 80016e2:	2077      	movs	r0, #119	; 0x77
 80016e4:	f7ff fed6 	bl	8001494 <SD_SendCmd>
 80016e8:	0003      	movs	r3, r0
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d80c      	bhi.n	8001708 <SD_disk_initialize+0x1a0>
 80016ee:	2100      	movs	r1, #0
 80016f0:	2069      	movs	r0, #105	; 0x69
 80016f2:	f7ff fecf 	bl	8001494 <SD_SendCmd>
 80016f6:	1e03      	subs	r3, r0, #0
 80016f8:	d106      	bne.n	8001708 <SD_disk_initialize+0x1a0>
            break; /* ACMD41 */
 80016fa:	e00c      	b.n	8001716 <SD_disk_initialize+0x1ae>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80016fc:	2100      	movs	r1, #0
 80016fe:	2041      	movs	r0, #65	; 0x41
 8001700:	f7ff fec8 	bl	8001494 <SD_SendCmd>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d005      	beq.n	8001714 <SD_disk_initialize+0x1ac>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <SD_disk_initialize+0x214>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1e1      	bne.n	80016d6 <SD_disk_initialize+0x16e>
 8001712:	e000      	b.n	8001716 <SD_disk_initialize+0x1ae>
            break; /* CMD1 */
 8001714:	46c0      	nop			; (mov r8, r8)
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <SD_disk_initialize+0x214>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d007      	beq.n	8001730 <SD_disk_initialize+0x1c8>
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	0019      	movs	r1, r3
 8001726:	2050      	movs	r0, #80	; 0x50
 8001728:	f7ff feb4 	bl	8001494 <SD_SendCmd>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d003      	beq.n	8001738 <SD_disk_initialize+0x1d0>
      {
        /*Select block length */
        type = 0;
 8001730:	230e      	movs	r3, #14
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  
  CardType = type;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <SD_disk_initialize+0x218>)
 800173a:	240e      	movs	r4, #14
 800173c:	193a      	adds	r2, r7, r4
 800173e:	7812      	ldrb	r2, [r2, #0]
 8001740:	701a      	strb	r2, [r3, #0]
  
  DESELECT();
 8001742:	f7ff fd25 	bl	8001190 <DESELECT>
  
  SPI_RxByte(); /*Idle state transition(Release DO) */
 8001746:	f7ff fd4b 	bl	80011e0 <SPI_RxByte>
  
  if (type) 
 800174a:	193b      	adds	r3, r7, r4
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d008      	beq.n	8001764 <SD_disk_initialize+0x1fc>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <SD_disk_initialize+0x210>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2201      	movs	r2, #1
 800175a:	4393      	bics	r3, r2
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <SD_disk_initialize+0x210>)
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e001      	b.n	8001768 <SD_disk_initialize+0x200>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001764:	f7ff fdde 	bl	8001324 <SD_PowerOff>
  }
  
  return Stat;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <SD_disk_initialize+0x210>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
}
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b004      	add	sp, #16
 8001774:	bdb0      	pop	{r4, r5, r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	20000000 	.word	0x20000000
 800177c:	20001035 	.word	0x20001035
 8001780:	200000a4 	.word	0x200000a4

08001784 <SD_disk_status>:

/*Check disk status*/
DSTATUS SD_disk_status(BYTE drv) 
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	0002      	movs	r2, r0
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	701a      	strb	r2, [r3, #0]
  if (drv)
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SD_disk_status+0x18>
    return STA_NOINIT; 
 8001798:	2301      	movs	r3, #1
 800179a:	e002      	b.n	80017a2 <SD_disk_status+0x1e>
  
  return Stat;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <SD_disk_status+0x28>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	20000000 	.word	0x20000000

080017b0 <SD_disk_read>:

/*Reading Sectors */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	210f      	movs	r1, #15
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	1c02      	adds	r2, r0, #0
 80017c2:	701a      	strb	r2, [r3, #0]
  if (pdrv || !count)
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <SD_disk_read+0x22>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <SD_disk_read+0x26>
    return RES_PARERR;
 80017d2:	2304      	movs	r3, #4
 80017d4:	e053      	b.n	800187e <SD_disk_read+0xce>
  
  if (Stat & STA_NOINIT)
 80017d6:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <SD_disk_read+0xd8>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	001a      	movs	r2, r3
 80017de:	2301      	movs	r3, #1
 80017e0:	4013      	ands	r3, r2
 80017e2:	d001      	beq.n	80017e8 <SD_disk_read+0x38>
    return RES_NOTRDY;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e04a      	b.n	800187e <SD_disk_read+0xce>
  
  if (!(CardType & 4))
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <SD_disk_read+0xdc>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	001a      	movs	r2, r3
 80017ee:	2304      	movs	r3, #4
 80017f0:	4013      	ands	r3, r2
 80017f2:	d102      	bne.n	80017fa <SD_disk_read+0x4a>
    sector *= 512;      /* Change designated sector to Byte addressing unit*/
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	025b      	lsls	r3, r3, #9
 80017f8:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80017fa:	f7ff fcbd 	bl	8001178 <SELECT>
  
  if (count == 1) 
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d112      	bne.n	800182a <SD_disk_read+0x7a>
  { 
    /* Single block reading */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	0019      	movs	r1, r3
 8001808:	2051      	movs	r0, #81	; 0x51
 800180a:	f7ff fe43 	bl	8001494 <SD_SendCmd>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d12d      	bne.n	800186e <SD_disk_read+0xbe>
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	009a      	lsls	r2, r3, #2
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	0011      	movs	r1, r2
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff fd96 	bl	800134c <SD_RxDataBlock>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d024      	beq.n	800186e <SD_disk_read+0xbe>
      count = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	e021      	b.n	800186e <SD_disk_read+0xbe>
  } 
  else 
  { 
    /* Multiblock Read */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	0019      	movs	r1, r3
 800182e:	2052      	movs	r0, #82	; 0x52
 8001830:	f7ff fe30 	bl	8001494 <SD_SendCmd>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d11a      	bne.n	800186e <SD_disk_read+0xbe>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	009a      	lsls	r2, r3, #2
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f7ff fd83 	bl	800134c <SD_RxDataBlock>
 8001846:	1e03      	subs	r3, r0, #0
 8001848:	d00c      	beq.n	8001864 <SD_disk_read+0xb4>
          break;
        
        buff += 512;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	4694      	mov	ip, r2
 8001852:	4463      	add	r3, ip
 8001854:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	3b01      	subs	r3, #1
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1ea      	bne.n	8001838 <SD_disk_read+0x88>
 8001862:	e000      	b.n	8001866 <SD_disk_read+0xb6>
          break;
 8001864:	46c0      	nop			; (mov r8, r8)
      
      /*STOP_TRANSMISSION, after reading all blocks, */
      SD_SendCmd(CMD12, 0); 
 8001866:	2100      	movs	r1, #0
 8001868:	204c      	movs	r0, #76	; 0x4c
 800186a:	f7ff fe13 	bl	8001494 <SD_SendCmd>
    }
  }
  
  DESELECT();
 800186e:	f7ff fc8f 	bl	8001190 <DESELECT>
  SPI_RxByte(); /* Idle state (Release DO) */
 8001872:	f7ff fcb5 	bl	80011e0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	1e5a      	subs	r2, r3, #1
 800187a:	4193      	sbcs	r3, r2
 800187c:	b2db      	uxtb	r3, r3
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b004      	add	sp, #16
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	20000000 	.word	0x20000000
 800188c:	200000a4 	.word	0x200000a4

08001890 <SD_disk_write>:

/* Sector writing*/
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	210f      	movs	r1, #15
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	1c02      	adds	r2, r0, #0
 80018a2:	701a      	strb	r2, [r3, #0]
  if (pdrv || !count)
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <SD_disk_write+0x22>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <SD_disk_write+0x26>
    return RES_PARERR;
 80018b2:	2304      	movs	r3, #4
 80018b4:	e06b      	b.n	800198e <SD_disk_write+0xfe>
  
  if (Stat & STA_NOINIT)
 80018b6:	4b38      	ldr	r3, [pc, #224]	; (8001998 <SD_disk_write+0x108>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	001a      	movs	r2, r3
 80018be:	2301      	movs	r3, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	d001      	beq.n	80018c8 <SD_disk_write+0x38>
    return RES_NOTRDY;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e062      	b.n	800198e <SD_disk_write+0xfe>
  
  if (Stat & STA_PROTECT)
 80018c8:	4b33      	ldr	r3, [pc, #204]	; (8001998 <SD_disk_write+0x108>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	001a      	movs	r2, r3
 80018d0:	2304      	movs	r3, #4
 80018d2:	4013      	ands	r3, r2
 80018d4:	d001      	beq.n	80018da <SD_disk_write+0x4a>
    return RES_WRPRT;
 80018d6:	2302      	movs	r3, #2
 80018d8:	e059      	b.n	800198e <SD_disk_write+0xfe>
  
  if (!(CardType & 4))
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <SD_disk_write+0x10c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	001a      	movs	r2, r3
 80018e0:	2304      	movs	r3, #4
 80018e2:	4013      	ands	r3, r2
 80018e4:	d102      	bne.n	80018ec <SD_disk_write+0x5c>
    sector *= 512; /*Change designated sector to Byte addressing unit */
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	025b      	lsls	r3, r3, #9
 80018ea:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80018ec:	f7ff fc44 	bl	8001178 <SELECT>
  
  if (count == 1) 
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d110      	bne.n	8001918 <SD_disk_write+0x88>
  { 
    /* Single block writing */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0019      	movs	r1, r3
 80018fa:	2058      	movs	r0, #88	; 0x58
 80018fc:	f7ff fdca 	bl	8001494 <SD_SendCmd>
 8001900:	1e03      	subs	r3, r0, #0
 8001902:	d13c      	bne.n	800197e <SD_disk_write+0xee>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	21fe      	movs	r1, #254	; 0xfe
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff fd5b 	bl	80013c4 <SD_TxDataBlock>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d035      	beq.n	800197e <SD_disk_write+0xee>
      count = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	e032      	b.n	800197e <SD_disk_write+0xee>
  } 
  else 
  { 
    /* Multiblock Writing */
    if (CardType & 2) 
 8001918:	4b20      	ldr	r3, [pc, #128]	; (800199c <SD_disk_write+0x10c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	001a      	movs	r2, r3
 800191e:	2302      	movs	r3, #2
 8001920:	4013      	ands	r3, r2
 8001922:	d008      	beq.n	8001936 <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 8001924:	2100      	movs	r1, #0
 8001926:	2077      	movs	r0, #119	; 0x77
 8001928:	f7ff fdb4 	bl	8001494 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	0019      	movs	r1, r3
 8001930:	2057      	movs	r0, #87	; 0x57
 8001932:	f7ff fdaf 	bl	8001494 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0019      	movs	r1, r3
 800193a:	2059      	movs	r0, #89	; 0x59
 800193c:	f7ff fdaa 	bl	8001494 <SD_SendCmd>
 8001940:	1e03      	subs	r3, r0, #0
 8001942:	d11c      	bne.n	800197e <SD_disk_write+0xee>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	21fc      	movs	r1, #252	; 0xfc
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff fd3b 	bl	80013c4 <SD_TxDataBlock>
 800194e:	1e03      	subs	r3, r0, #0
 8001950:	d00c      	beq.n	800196c <SD_disk_write+0xdc>
          break;
        
        buff += 512;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	4694      	mov	ip, r2
 800195a:	4463      	add	r3, ip
 800195c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3b01      	subs	r3, #1
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ec      	bne.n	8001944 <SD_disk_write+0xb4>
 800196a:	e000      	b.n	800196e <SD_disk_write+0xde>
          break;
 800196c:	46c0      	nop			; (mov r8, r8)
      
      if(!SD_TxDataBlock(0, 0xFD))
 800196e:	21fd      	movs	r1, #253	; 0xfd
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff fd27 	bl	80013c4 <SD_TxDataBlock>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d101      	bne.n	800197e <SD_disk_write+0xee>
      {        
        count = 1;
 800197a:	2301      	movs	r3, #1
 800197c:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 800197e:	f7ff fc07 	bl	8001190 <DESELECT>
  SPI_RxByte();
 8001982:	f7ff fc2d 	bl	80011e0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	4193      	sbcs	r3, r2
 800198c:	b2db      	uxtb	r3, r3
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	20000000 	.word	0x20000000
 800199c:	200000a4 	.word	0x200000a4

080019a0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* Other functions */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b08b      	sub	sp, #44	; 0x2c
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	603a      	str	r2, [r7, #0]
 80019a8:	1dfb      	adds	r3, r7, #7
 80019aa:	1c02      	adds	r2, r0, #0
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	1dbb      	adds	r3, r7, #6
 80019b0:	1c0a      	adds	r2, r1, #0
 80019b2:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80019b8:	1dfb      	adds	r3, r7, #7
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SD_disk_ioctl+0x24>
    return RES_PARERR;
 80019c0:	2304      	movs	r3, #4
 80019c2:	e11d      	b.n	8001c00 <SD_disk_ioctl+0x260>
  
  res = RES_ERROR;
 80019c4:	2327      	movs	r3, #39	; 0x27
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
  
  if (ctrl == CTRL_POWER) 
 80019cc:	1dbb      	adds	r3, r7, #6
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d129      	bne.n	8001a28 <SD_disk_ioctl+0x88>
  {
    switch (*ptr) 
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d00e      	beq.n	80019fa <SD_disk_ioctl+0x5a>
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d013      	beq.n	8001a08 <SD_disk_ioctl+0x68>
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d11c      	bne.n	8001a1e <SD_disk_ioctl+0x7e>
    {
    case 0:
      if (SD_CheckPower())
 80019e4:	f7ff fca8 	bl	8001338 <SD_CheckPower>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d001      	beq.n	80019f0 <SD_disk_ioctl+0x50>
        SD_PowerOff();          /* Power Off */
 80019ec:	f7ff fc9a 	bl	8001324 <SD_PowerOff>
      res = RES_OK;
 80019f0:	2327      	movs	r3, #39	; 0x27
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
      break;
 80019f8:	e0ff      	b.n	8001bfa <SD_disk_ioctl+0x25a>
    case 1:
      SD_PowerOn();             /* Power On */
 80019fa:	f7ff fc3f 	bl	800127c <SD_PowerOn>
      res = RES_OK;
 80019fe:	2327      	movs	r3, #39	; 0x27
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
      break;
 8001a06:	e0f8      	b.n	8001bfa <SD_disk_ioctl+0x25a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	1c5c      	adds	r4, r3, #1
 8001a0c:	f7ff fc94 	bl	8001338 <SD_CheckPower>
 8001a10:	0003      	movs	r3, r0
 8001a12:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001a14:	2327      	movs	r3, #39	; 0x27
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
      break;
 8001a1c:	e0ed      	b.n	8001bfa <SD_disk_ioctl+0x25a>
    default:
      res = RES_PARERR;
 8001a1e:	2327      	movs	r3, #39	; 0x27
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	2204      	movs	r2, #4
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e0e8      	b.n	8001bfa <SD_disk_ioctl+0x25a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001a28:	4b77      	ldr	r3, [pc, #476]	; (8001c08 <SD_disk_ioctl+0x268>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	001a      	movs	r2, r3
 8001a30:	2301      	movs	r3, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	d001      	beq.n	8001a3a <SD_disk_ioctl+0x9a>
      return RES_NOTRDY;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0e2      	b.n	8001c00 <SD_disk_ioctl+0x260>
    
    SELECT();
 8001a3a:	f7ff fb9d 	bl	8001178 <SELECT>
    
    switch (ctrl) 
 8001a3e:	1dbb      	adds	r3, r7, #6
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b0d      	cmp	r3, #13
 8001a44:	d900      	bls.n	8001a48 <SD_disk_ioctl+0xa8>
 8001a46:	e0c8      	b.n	8001bda <SD_disk_ioctl+0x23a>
 8001a48:	009a      	lsls	r2, r3, #2
 8001a4a:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <SD_disk_ioctl+0x26c>)
 8001a4c:	18d3      	adds	r3, r2, r3
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT: 
      /* 	Number of Sectors in SD Card (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001a52:	2100      	movs	r1, #0
 8001a54:	2049      	movs	r0, #73	; 0x49
 8001a56:	f7ff fd1d 	bl	8001494 <SD_SendCmd>
 8001a5a:	1e03      	subs	r3, r0, #0
 8001a5c:	d000      	beq.n	8001a60 <SD_disk_ioctl+0xc0>
 8001a5e:	e0c1      	b.n	8001be4 <SD_disk_ioctl+0x244>
 8001a60:	230c      	movs	r3, #12
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	2110      	movs	r1, #16
 8001a66:	0018      	movs	r0, r3
 8001a68:	f7ff fc70 	bl	800134c <SD_RxDataBlock>
 8001a6c:	1e03      	subs	r3, r0, #0
 8001a6e:	d100      	bne.n	8001a72 <SD_disk_ioctl+0xd2>
 8001a70:	e0b8      	b.n	8001be4 <SD_disk_ioctl+0x244>
      {
        if ((csd[0] >> 6) == 1) 
 8001a72:	230c      	movs	r3, #12
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	099b      	lsrs	r3, r3, #6
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d114      	bne.n	8001aaa <SD_disk_ioctl+0x10a>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a80:	210c      	movs	r1, #12
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	7a5b      	ldrb	r3, [r3, #9]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	7a1b      	ldrb	r3, [r3, #8]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	18d3      	adds	r3, r2, r3
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	211e      	movs	r1, #30
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	3201      	adds	r2, #1
 8001a9c:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	029a      	lsls	r2, r3, #10
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e03a      	b.n	8001b20 <SD_disk_ioctl+0x180>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001aaa:	200c      	movs	r0, #12
 8001aac:	183b      	adds	r3, r7, r0
 8001aae:	795b      	ldrb	r3, [r3, #5]
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	183b      	adds	r3, r7, r0
 8001ab8:	7a9b      	ldrb	r3, [r3, #10]
 8001aba:	09db      	lsrs	r3, r3, #7
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	18d3      	adds	r3, r2, r3
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	183b      	adds	r3, r7, r0
 8001ac4:	7a5b      	ldrb	r3, [r3, #9]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2106      	movs	r1, #6
 8001acc:	400b      	ands	r3, r1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	18d3      	adds	r3, r2, r3
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	2426      	movs	r4, #38	; 0x26
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	3202      	adds	r2, #2
 8001ada:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001adc:	183b      	adds	r3, r7, r0
 8001ade:	7a1b      	ldrb	r3, [r3, #8]
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	183b      	adds	r3, r7, r0
 8001ae8:	79db      	ldrb	r3, [r3, #7]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	18d3      	adds	r3, r2, r3
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	183b      	adds	r3, r7, r0
 8001af6:	799b      	ldrb	r3, [r3, #6]
 8001af8:	029b      	lsls	r3, r3, #10
 8001afa:	b299      	uxth	r1, r3
 8001afc:	23c0      	movs	r3, #192	; 0xc0
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	400b      	ands	r3, r1
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	18d3      	adds	r3, r2, r3
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	211e      	movs	r1, #30
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	3201      	adds	r2, #1
 8001b0e:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	881a      	ldrh	r2, [r3, #0]
 8001b14:	193b      	adds	r3, r7, r4
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3b09      	subs	r3, #9
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001b20:	2327      	movs	r3, #39	; 0x27
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001b28:	e05c      	b.n	8001be4 <SD_disk_ioctl+0x244>
      
    case GET_SECTOR_SIZE: 
      /*Unit size of the sector (WORD) */
      *(WORD*) buff = 512;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001b32:	2327      	movs	r3, #39	; 0x27
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
      break;
 8001b3a:	e05a      	b.n	8001bf2 <SD_disk_ioctl+0x252>
      
    case CTRL_SYNC: 
      /* Write synchronization */
      if (SD_ReadyWait() == 0xFF)
 8001b3c:	f7ff fb80 	bl	8001240 <SD_ReadyWait>
 8001b40:	0003      	movs	r3, r0
 8001b42:	2bff      	cmp	r3, #255	; 0xff
 8001b44:	d150      	bne.n	8001be8 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001b46:	2327      	movs	r3, #39	; 0x27
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
      break;
 8001b4e:	e04b      	b.n	8001be8 <SD_disk_ioctl+0x248>
      
    case MMC_GET_CSD: 
      /* Receiving CSD information(16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b50:	2100      	movs	r1, #0
 8001b52:	2049      	movs	r0, #73	; 0x49
 8001b54:	f7ff fc9e 	bl	8001494 <SD_SendCmd>
 8001b58:	1e03      	subs	r3, r0, #0
 8001b5a:	d147      	bne.n	8001bec <SD_disk_ioctl+0x24c>
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	2110      	movs	r1, #16
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff fbf3 	bl	800134c <SD_RxDataBlock>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d040      	beq.n	8001bec <SD_disk_ioctl+0x24c>
        res = RES_OK;
 8001b6a:	2327      	movs	r3, #39	; 0x27
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
      break;
 8001b72:	e03b      	b.n	8001bec <SD_disk_ioctl+0x24c>
      
    case MMC_GET_CID: 
      /* Receiving CID information(16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b74:	2100      	movs	r1, #0
 8001b76:	204a      	movs	r0, #74	; 0x4a
 8001b78:	f7ff fc8c 	bl	8001494 <SD_SendCmd>
 8001b7c:	1e03      	subs	r3, r0, #0
 8001b7e:	d137      	bne.n	8001bf0 <SD_disk_ioctl+0x250>
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	2110      	movs	r1, #16
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7ff fbe1 	bl	800134c <SD_RxDataBlock>
 8001b8a:	1e03      	subs	r3, r0, #0
 8001b8c:	d030      	beq.n	8001bf0 <SD_disk_ioctl+0x250>
        res = RES_OK;
 8001b8e:	2327      	movs	r3, #39	; 0x27
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
      break;
 8001b96:	e02b      	b.n	8001bf0 <SD_disk_ioctl+0x250>
      
    case MMC_GET_OCR: 
      /* Receive OCR information(4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001b98:	2100      	movs	r1, #0
 8001b9a:	207a      	movs	r0, #122	; 0x7a
 8001b9c:	f7ff fc7a 	bl	8001494 <SD_SendCmd>
 8001ba0:	1e03      	subs	r3, r0, #0
 8001ba2:	d11a      	bne.n	8001bda <SD_disk_ioctl+0x23a>
      {         
        for (n = 0; n < 4; n++)
 8001ba4:	2326      	movs	r3, #38	; 0x26
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	e00c      	b.n	8001bc8 <SD_disk_ioctl+0x228>
        {
          *ptr++ = SPI_RxByte();
 8001bae:	6a3c      	ldr	r4, [r7, #32]
 8001bb0:	1c63      	adds	r3, r4, #1
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	f7ff fb14 	bl	80011e0 <SPI_RxByte>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001bbc:	2126      	movs	r1, #38	; 0x26
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	3201      	adds	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	2326      	movs	r3, #38	; 0x26
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d9ed      	bls.n	8001bae <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8001bd2:	2327      	movs	r3, #39	; 0x27
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
      }     
      
    default:
      res = RES_PARERR;
 8001bda:	2327      	movs	r3, #39	; 0x27
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	2204      	movs	r2, #4
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e006      	b.n	8001bf2 <SD_disk_ioctl+0x252>
      break;
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	e004      	b.n	8001bf2 <SD_disk_ioctl+0x252>
      break;
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	e002      	b.n	8001bf2 <SD_disk_ioctl+0x252>
      break;
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	e000      	b.n	8001bf2 <SD_disk_ioctl+0x252>
      break;
 8001bf0:	46c0      	nop			; (mov r8, r8)
    }
    
    DESELECT();
 8001bf2:	f7ff facd 	bl	8001190 <DESELECT>
    SPI_RxByte();
 8001bf6:	f7ff faf3 	bl	80011e0 <SPI_RxByte>
  }
  
  return res;
 8001bfa:	2327      	movs	r3, #39	; 0x27
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
}
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b00b      	add	sp, #44	; 0x2c
 8001c06:	bd90      	pop	{r4, r7, pc}
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	080092e8 	.word	0x080092e8

08001c10 <send_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_uart (char *string)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7fe fa74 	bl	8000108 <strlen>
 8001c20:	0002      	movs	r2, r0
 8001c22:	210f      	movs	r1, #15
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	23fa      	movs	r3, #250	; 0xfa
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4803      	ldr	r0, [pc, #12]	; (8001c44 <send_uart+0x34>)
 8001c36:	f002 f955 	bl	8003ee4 <HAL_UART_Transmit>

}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	20000718 	.word	0x20000718

08001c48 <bufclear>:
	}
	return i;
}

void bufclear (void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
	for(int i = 0; i<1024; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	e007      	b.n	8001c64 <bufclear+0x1c>
	{
		buffer[i] = '\0';
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <bufclear+0x2c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	18d3      	adds	r3, r2, r3
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<1024; i++)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3301      	adds	r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <bufclear+0x30>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	ddf3      	ble.n	8001c54 <bufclear+0xc>
	}
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000798 	.word	0x20000798
 8001c78:	000003ff 	.word	0x000003ff

08001c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c7c:	b5b0      	push	{r4, r5, r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c80:	f000 fb5e 	bl	8002340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c84:	f000 f8cc 	bl	8001e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c88:	f000 f998 	bl	8001fbc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c8c:	f000 f928 	bl	8001ee0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001c90:	f000 f964 	bl	8001f5c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001c94:	f002 fccc 	bl	8004630 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  fres = f_mount(&fs, "", 0);
 8001c98:	494e      	ldr	r1, [pc, #312]	; (8001dd4 <main+0x158>)
 8001c9a:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <main+0x15c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f005 fb4e 	bl	8007340 <f_mount>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <main+0x160>)
 8001caa:	701a      	strb	r2, [r3, #0]
  if(fres != FR_OK) send_uart("error in mounting SD Card...\n");
 8001cac:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <main+0x160>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <main+0x42>
 8001cb4:	4b4a      	ldr	r3, [pc, #296]	; (8001de0 <main+0x164>)
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f7ff ffaa 	bl	8001c10 <send_uart>
 8001cbc:	e003      	b.n	8001cc6 <main+0x4a>
  else send_uart("SD CARD mounted successfully...\n");
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <main+0x168>)
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff ffa5 	bl	8001c10 <send_uart>

  // check free space
        f_getfree("", &fre_clust, &pfs);
 8001cc6:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <main+0x16c>)
 8001cc8:	4948      	ldr	r1, [pc, #288]	; (8001dec <main+0x170>)
 8001cca:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <main+0x158>)
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f006 fb75 	bl	80083bc <f_getfree>
        total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001cd2:	4b45      	ldr	r3, [pc, #276]	; (8001de8 <main+0x16c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a46      	ldr	r2, [pc, #280]	; (8001df0 <main+0x174>)
 8001cd8:	589b      	ldr	r3, [r3, r2]
 8001cda:	1e9a      	subs	r2, r3, #2
 8001cdc:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <main+0x16c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4944      	ldr	r1, [pc, #272]	; (8001df4 <main+0x178>)
 8001ce2:	5c5b      	ldrb	r3, [r3, r1]
 8001ce4:	4353      	muls	r3, r2
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f7ff f8b0 	bl	8000e4c <__aeabi_ui2d>
 8001cec:	2200      	movs	r2, #0
 8001cee:	4b42      	ldr	r3, [pc, #264]	; (8001df8 <main+0x17c>)
 8001cf0:	f7fe fabc 	bl	800026c <__aeabi_dmul>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	000c      	movs	r4, r1
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	0021      	movs	r1, r4
 8001cfc:	f7fe fa98 	bl	8000230 <__aeabi_d2uiz>
 8001d00:	0002      	movs	r2, r0
 8001d02:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <main+0x180>)
 8001d04:	601a      	str	r2, [r3, #0]
        sprintf (buffer, "SD CARD Free Space: \t%lu\n",free1);
 8001d06:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <main+0x184>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	493e      	ldr	r1, [pc, #248]	; (8001e04 <main+0x188>)
 8001d0c:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <main+0x18c>)
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f006 fe22 	bl	8008958 <siprintf>
        bufclear();
 8001d14:	f7ff ff98 	bl	8001c48 <bufclear>
        free1 = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001d18:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <main+0x16c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a35      	ldr	r2, [pc, #212]	; (8001df4 <main+0x178>)
 8001d1e:	5c9b      	ldrb	r3, [r3, r2]
 8001d20:	001a      	movs	r2, r3
 8001d22:	4b32      	ldr	r3, [pc, #200]	; (8001dec <main+0x170>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4353      	muls	r3, r2
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7ff f88f 	bl	8000e4c <__aeabi_ui2d>
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <main+0x17c>)
 8001d32:	f7fe fa9b 	bl	800026c <__aeabi_dmul>
 8001d36:	0003      	movs	r3, r0
 8001d38:	000c      	movs	r4, r1
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	0021      	movs	r1, r4
 8001d3e:	f7fe fa77 	bl	8000230 <__aeabi_d2uiz>
 8001d42:	0002      	movs	r2, r0
 8001d44:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <main+0x184>)
 8001d46:	601a      	str	r2, [r3, #0]
        send_uart(buffer);
 8001d48:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <main+0x18c>)
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff ff60 	bl	8001c10 <send_uart>

      // Open file to write
        fres = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001d50:	492e      	ldr	r1, [pc, #184]	; (8001e0c <main+0x190>)
 8001d52:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <main+0x194>)
 8001d54:	2213      	movs	r2, #19
 8001d56:	0018      	movs	r0, r3
 8001d58:	f005 fb42 	bl	80073e0 <f_open>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	001a      	movs	r2, r3
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <main+0x160>)
 8001d62:	701a      	strb	r2, [r3, #0]
      // writing text
        fres = f_puts("This data is from the First FILE\n\n", &fil);
 8001d64:	4a2a      	ldr	r2, [pc, #168]	; (8001e10 <main+0x194>)
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <main+0x198>)
 8001d68:	0011      	movs	r1, r2
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f006 fc92 	bl	8008694 <f_puts>
 8001d70:	0003      	movs	r3, r0
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <main+0x160>)
 8001d76:	701a      	strb	r2, [r3, #0]
        send_uart ("File1.txt created and the data is written \n");
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <main+0x19c>)
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff ff48 	bl	8001c10 <send_uart>

      // close file
        fres = f_close(&fil);
 8001d80:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <main+0x194>)
 8001d82:	0018      	movs	r0, r3
 8001d84:	f006 fae2 	bl	800834c <f_close>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <main+0x160>)
 8001d8e:	701a      	strb	r2, [r3, #0]

        send_uart ("File1.txt created and the data is written \n");
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <main+0x19c>)
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7ff ff3c 	bl	8001c10 <send_uart>

      //open file to read
        fres = f_open(&fil, "file1.txt", FA_READ);
 8001d98:	491c      	ldr	r1, [pc, #112]	; (8001e0c <main+0x190>)
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <main+0x194>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f005 fb1e 	bl	80073e0 <f_open>
 8001da4:	0003      	movs	r3, r0
 8001da6:	001a      	movs	r2, r3
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <main+0x160>)
 8001daa:	701a      	strb	r2, [r3, #0]

      //Read string from the file
        f_gets(buffer, fil.fsize, &fil);
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <main+0x194>)
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <main+0x1a0>)
 8001db0:	589b      	ldr	r3, [r3, r2]
 8001db2:	0019      	movs	r1, r3
 8001db4:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <main+0x194>)
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <main+0x18c>)
 8001db8:	0018      	movs	r0, r3
 8001dba:	f006 fbe5 	bl	8008588 <f_gets>
        send_uart(buffer);
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <main+0x18c>)
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff ff25 	bl	8001c10 <send_uart>
        f_close(&fil);
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <main+0x194>)
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f006 fabf 	bl	800834c <f_close>
        bufclear();
 8001dce:	f7ff ff3b 	bl	8001c48 <bufclear>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <main+0x156>
 8001dd4:	08009180 	.word	0x08009180
 8001dd8:	200002e4 	.word	0x200002e4
 8001ddc:	20000c04 	.word	0x20000c04
 8001de0:	08009184 	.word	0x08009184
 8001de4:	080091a4 	.word	0x080091a4
 8001de8:	20000b98 	.word	0x20000b98
 8001dec:	200002e0 	.word	0x200002e0
 8001df0:	00000414 	.word	0x00000414
 8001df4:	00000402 	.word	0x00000402
 8001df8:	3fe00000 	.word	0x3fe00000
 8001dfc:	20000c00 	.word	0x20000c00
 8001e00:	20000714 	.word	0x20000714
 8001e04:	080091c8 	.word	0x080091c8
 8001e08:	20000798 	.word	0x20000798
 8001e0c:	080091e4 	.word	0x080091e4
 8001e10:	20000c08 	.word	0x20000c08
 8001e14:	080091f0 	.word	0x080091f0
 8001e18:	08009214 	.word	0x08009214
 8001e1c:	0000040c 	.word	0x0000040c

08001e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b097      	sub	sp, #92	; 0x5c
 8001e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e26:	2428      	movs	r4, #40	; 0x28
 8001e28:	193b      	adds	r3, r7, r4
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	2330      	movs	r3, #48	; 0x30
 8001e2e:	001a      	movs	r2, r3
 8001e30:	2100      	movs	r1, #0
 8001e32:	f006 fd89 	bl	8008948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e36:	2318      	movs	r3, #24
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	2310      	movs	r3, #16
 8001e3e:	001a      	movs	r2, r3
 8001e40:	2100      	movs	r1, #0
 8001e42:	f006 fd81 	bl	8008948 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	0018      	movs	r0, r3
 8001e4a:	2314      	movs	r3, #20
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	2100      	movs	r1, #0
 8001e50:	f006 fd7a 	bl	8008948 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e54:	0021      	movs	r1, r4
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	2201      	movs	r2, #1
 8001e60:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2202      	movs	r2, #2
 8001e66:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	0252      	lsls	r2, r2, #9
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	0352      	lsls	r2, r2, #13
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001e78:	187b      	adds	r3, r7, r1
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7e:	187b      	adds	r3, r7, r1
 8001e80:	0018      	movs	r0, r3
 8001e82:	f000 fd03 	bl	800288c <HAL_RCC_OscConfig>
 8001e86:	1e03      	subs	r3, r0, #0
 8001e88:	d001      	beq.n	8001e8e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001e8a:	f000 f8ed 	bl	8002068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8e:	2118      	movs	r1, #24
 8001e90:	187b      	adds	r3, r7, r1
 8001e92:	2207      	movs	r2, #7
 8001e94:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	2202      	movs	r2, #2
 8001e9a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	2101      	movs	r1, #1
 8001eac:	0018      	movs	r0, r3
 8001eae:	f001 f809 	bl	8002ec4 <HAL_RCC_ClockConfig>
 8001eb2:	1e03      	subs	r3, r0, #0
 8001eb4:	d001      	beq.n	8001eba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001eb6:	f000 f8d7 	bl	8002068 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f001 f94d 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 8001ece:	1e03      	subs	r3, r0, #0
 8001ed0:	d001      	beq.n	8001ed6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001ed2:	f000 f8c9 	bl	8002068 <Error_Handler>
  }
}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b017      	add	sp, #92	; 0x5c
 8001edc:	bd90      	pop	{r4, r7, pc}
	...

08001ee0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <MX_SPI1_Init+0x78>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001eec:	2282      	movs	r2, #130	; 0x82
 8001eee:	0052      	lsls	r2, r2, #1
 8001ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001efa:	22c0      	movs	r2, #192	; 0xc0
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001f16:	2210      	movs	r2, #16
 8001f18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001f2e:	2207      	movs	r2, #7
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <MX_SPI1_Init+0x74>)
 8001f40:	0018      	movs	r0, r3
 8001f42:	f001 f9ef 	bl	8003324 <HAL_SPI_Init>
 8001f46:	1e03      	subs	r3, r0, #0
 8001f48:	d001      	beq.n	8001f4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f4a:	f000 f88d 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000b9c 	.word	0x20000b9c
 8001f58:	40013000 	.word	0x40013000

08001f5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_USART1_UART_Init+0x58>)
 8001f62:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <MX_USART1_UART_Init+0x5c>)
 8001f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <MX_USART1_UART_Init+0x58>)
 8001f68:	22e1      	movs	r2, #225	; 0xe1
 8001f6a:	0252      	lsls	r2, r2, #9
 8001f6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_USART1_UART_Init+0x58>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_USART1_UART_Init+0x58>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_USART1_UART_Init+0x58>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_USART1_UART_Init+0x58>)
 8001f82:	220c      	movs	r2, #12
 8001f84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <MX_USART1_UART_Init+0x58>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_USART1_UART_Init+0x58>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <MX_USART1_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_USART1_UART_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <MX_USART1_UART_Init+0x58>)
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f001 ff4b 	bl	8003e3c <HAL_UART_Init>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001faa:	f000 f85d 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000718 	.word	0x20000718
 8001fb8:	40013800 	.word	0x40013800

08001fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	240c      	movs	r4, #12
 8001fc4:	193b      	adds	r3, r7, r4
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	2314      	movs	r3, #20
 8001fca:	001a      	movs	r2, r3
 8001fcc:	2100      	movs	r1, #0
 8001fce:	f006 fcbb 	bl	8008948 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd2:	4b23      	ldr	r3, [pc, #140]	; (8002060 <MX_GPIO_Init+0xa4>)
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	4b22      	ldr	r3, [pc, #136]	; (8002060 <MX_GPIO_Init+0xa4>)
 8001fd8:	2180      	movs	r1, #128	; 0x80
 8001fda:	03c9      	lsls	r1, r1, #15
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	615a      	str	r2, [r3, #20]
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <MX_GPIO_Init+0xa4>)
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	03db      	lsls	r3, r3, #15
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <MX_GPIO_Init+0xa4>)
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <MX_GPIO_Init+0xa4>)
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	0289      	lsls	r1, r1, #10
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	615a      	str	r2, [r3, #20]
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <MX_GPIO_Init+0xa4>)
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	029b      	lsls	r3, r3, #10
 8002004:	4013      	ands	r3, r2
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <MX_GPIO_Init+0xa4>)
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <MX_GPIO_Init+0xa4>)
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	02c9      	lsls	r1, r1, #11
 8002014:	430a      	orrs	r2, r1
 8002016:	615a      	str	r2, [r3, #20]
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <MX_GPIO_Init+0xa4>)
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	02db      	lsls	r3, r3, #11
 8002020:	4013      	ands	r3, r2
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_GPIO_Init+0xa8>)
 8002028:	2200      	movs	r2, #0
 800202a:	2101      	movs	r1, #1
 800202c:	0018      	movs	r0, r3
 800202e:	f000 fc0f 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002032:	0021      	movs	r1, r4
 8002034:	187b      	adds	r3, r7, r1
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	187b      	adds	r3, r7, r1
 800203c:	2201      	movs	r2, #1
 800203e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	187b      	adds	r3, r7, r1
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	187b      	adds	r3, r7, r1
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	187b      	adds	r3, r7, r1
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <MX_GPIO_Init+0xa8>)
 8002050:	0019      	movs	r1, r3
 8002052:	0010      	movs	r0, r2
 8002054:	f000 fa8c 	bl	8002570 <HAL_GPIO_Init>

}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b009      	add	sp, #36	; 0x24
 800205e:	bd90      	pop	{r4, r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	48000400 	.word	0x48000400

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800206c:	46c0      	nop			; (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_MspInit+0x44>)
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_MspInit+0x44>)
 8002080:	2101      	movs	r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	619a      	str	r2, [r3, #24]
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_MspInit+0x44>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2201      	movs	r2, #1
 800208c:	4013      	ands	r3, r2
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_MspInit+0x44>)
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_MspInit+0x44>)
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	0549      	lsls	r1, r1, #21
 800209c:	430a      	orrs	r2, r1
 800209e:	61da      	str	r2, [r3, #28]
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_MspInit+0x44>)
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	055b      	lsls	r3, r3, #21
 80020a8:	4013      	ands	r3, r2
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b002      	add	sp, #8
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	40021000 	.word	0x40021000

080020bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	2314      	movs	r3, #20
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	0018      	movs	r0, r3
 80020ca:	2314      	movs	r3, #20
 80020cc:	001a      	movs	r2, r3
 80020ce:	2100      	movs	r1, #0
 80020d0:	f006 fc3a 	bl	8008948 <memset>
  if(hspi->Instance==SPI1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_SPI_MspInit+0x90>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d132      	bne.n	8002144 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_SPI_MspInit+0x94>)
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_SPI_MspInit+0x94>)
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0149      	lsls	r1, r1, #5
 80020e8:	430a      	orrs	r2, r1
 80020ea:	619a      	str	r2, [r3, #24]
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_SPI_MspInit+0x94>)
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	015b      	lsls	r3, r3, #5
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_SPI_MspInit+0x94>)
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_SPI_MspInit+0x94>)
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	0289      	lsls	r1, r1, #10
 8002104:	430a      	orrs	r2, r1
 8002106:	615a      	str	r2, [r3, #20]
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_SPI_MspInit+0x94>)
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	029b      	lsls	r3, r3, #10
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002116:	2114      	movs	r1, #20
 8002118:	187b      	adds	r3, r7, r1
 800211a:	22e0      	movs	r2, #224	; 0xe0
 800211c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	187b      	adds	r3, r7, r1
 8002120:	2202      	movs	r2, #2
 8002122:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	187b      	adds	r3, r7, r1
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800212a:	187b      	adds	r3, r7, r1
 800212c:	2203      	movs	r2, #3
 800212e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002130:	187b      	adds	r3, r7, r1
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	187a      	adds	r2, r7, r1
 8002138:	2390      	movs	r3, #144	; 0x90
 800213a:	05db      	lsls	r3, r3, #23
 800213c:	0011      	movs	r1, r2
 800213e:	0018      	movs	r0, r3
 8002140:	f000 fa16 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b00a      	add	sp, #40	; 0x28
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40013000 	.word	0x40013000
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	2314      	movs	r3, #20
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	0018      	movs	r0, r3
 8002162:	2314      	movs	r3, #20
 8002164:	001a      	movs	r2, r3
 8002166:	2100      	movs	r1, #0
 8002168:	f006 fbee 	bl	8008948 <memset>
  if(huart->Instance==USART1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <HAL_UART_MspInit+0x94>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d133      	bne.n	80021de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_UART_MspInit+0x98>)
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_UART_MspInit+0x98>)
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	01c9      	lsls	r1, r1, #7
 8002180:	430a      	orrs	r2, r1
 8002182:	619a      	str	r2, [r3, #24]
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_UART_MspInit+0x98>)
 8002186:	699a      	ldr	r2, [r3, #24]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	01db      	lsls	r3, r3, #7
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_UART_MspInit+0x98>)
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_UART_MspInit+0x98>)
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	0289      	lsls	r1, r1, #10
 800219c:	430a      	orrs	r2, r1
 800219e:	615a      	str	r2, [r3, #20]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_UART_MspInit+0x98>)
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021ae:	2114      	movs	r1, #20
 80021b0:	187b      	adds	r3, r7, r1
 80021b2:	22c0      	movs	r2, #192	; 0xc0
 80021b4:	00d2      	lsls	r2, r2, #3
 80021b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	2202      	movs	r2, #2
 80021bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	2203      	movs	r2, #3
 80021c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	2201      	movs	r2, #1
 80021ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d0:	187a      	adds	r2, r7, r1
 80021d2:	2390      	movs	r3, #144	; 0x90
 80021d4:	05db      	lsls	r3, r3, #23
 80021d6:	0011      	movs	r1, r2
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 f9c9 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b00a      	add	sp, #40	; 0x28
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40021000 	.word	0x40021000

080021f0 <SDTimer_Handler>:
/* USER CODE BEGIN PFP */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <SDTimer_Handler+0x3c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <SDTimer_Handler+0x1c>
		Timer1--;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <SDTimer_Handler+0x3c>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <SDTimer_Handler+0x3c>)
 800220a:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <SDTimer_Handler+0x40>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <SDTimer_Handler+0x34>
		Timer2--;
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <SDTimer_Handler+0x40>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <SDTimer_Handler+0x40>)
 8002222:	701a      	strb	r2, [r3, #0]
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	20001035 	.word	0x20001035
 8002230:	20001034 	.word	0x20001034

08002234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <SysTick_Handler+0x30>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	3301      	adds	r3, #1
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <SysTick_Handler+0x30>)
 8002264:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <SysTick_Handler+0x30>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b09      	cmp	r3, #9
 800226e:	d904      	bls.n	800227a <SysTick_Handler+0x26>
	{
	 FatFsCnt = 0;
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <SysTick_Handler+0x30>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
	 SDTimer_Handler();
 8002276:	f7ff ffbb 	bl	80021f0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227a:	f000 f8a9 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200000a6 	.word	0x200000a6

08002288 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <_sbrk+0x50>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_sbrk+0x16>
		heap_end = &end;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <_sbrk+0x50>)
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <_sbrk+0x54>)
 800229c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <_sbrk+0x50>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <_sbrk+0x50>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	18d3      	adds	r3, r2, r3
 80022ac:	466a      	mov	r2, sp
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d907      	bls.n	80022c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022b2:	f006 fb1f 	bl	80088f4 <__errno>
 80022b6:	0003      	movs	r3, r0
 80022b8:	220c      	movs	r2, #12
 80022ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80022bc:	2301      	movs	r3, #1
 80022be:	425b      	negs	r3, r3
 80022c0:	e006      	b.n	80022d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <_sbrk+0x50>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	18d2      	adds	r2, r2, r3
 80022ca:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <_sbrk+0x50>)
 80022cc:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b004      	add	sp, #16
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	200000a8 	.word	0x200000a8
 80022dc:	200018a8 	.word	0x200018a8

080022e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f0:	480d      	ldr	r0, [pc, #52]	; (8002328 <LoopForever+0x6>)
  ldr r1, =_edata
 80022f2:	490e      	ldr	r1, [pc, #56]	; (800232c <LoopForever+0xa>)
  ldr r2, =_sidata
 80022f4:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <LoopForever+0xe>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f8:	e002      	b.n	8002300 <LoopCopyDataInit>

080022fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fe:	3304      	adds	r3, #4

08002300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002304:	d3f9      	bcc.n	80022fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002306:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002308:	4c0b      	ldr	r4, [pc, #44]	; (8002338 <LoopForever+0x16>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800230c:	e001      	b.n	8002312 <LoopFillZerobss>

0800230e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002310:	3204      	adds	r2, #4

08002312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002314:	d3fb      	bcc.n	800230e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002316:	f7ff ffe3 	bl	80022e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800231a:	f006 faf1 	bl	8008900 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800231e:	f7ff fcad 	bl	8001c7c <main>

08002322 <LoopForever>:

LoopForever:
    b LoopForever
 8002322:	e7fe      	b.n	8002322 <LoopForever>
  ldr   r0, =_estack
 8002324:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800232c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002330:	080098c4 	.word	0x080098c4
  ldr r2, =_sbss
 8002334:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002338:	200018a4 	.word	0x200018a4

0800233c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800233c:	e7fe      	b.n	800233c <ADC1_COMP_IRQHandler>
	...

08002340 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <HAL_Init+0x24>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_Init+0x24>)
 800234a:	2110      	movs	r1, #16
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002350:	2000      	movs	r0, #0
 8002352:	f000 f809 	bl	8002368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002356:	f7ff fe8d 	bl	8002074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	40022000 	.word	0x40022000

08002368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_InitTick+0x5c>)
 8002372:	681c      	ldr	r4, [r3, #0]
 8002374:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <HAL_InitTick+0x60>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	0019      	movs	r1, r3
 800237a:	23fa      	movs	r3, #250	; 0xfa
 800237c:	0098      	lsls	r0, r3, #2
 800237e:	f7fd fecb 	bl	8000118 <__udivsi3>
 8002382:	0003      	movs	r3, r0
 8002384:	0019      	movs	r1, r3
 8002386:	0020      	movs	r0, r4
 8002388:	f7fd fec6 	bl	8000118 <__udivsi3>
 800238c:	0003      	movs	r3, r0
 800238e:	0018      	movs	r0, r3
 8002390:	f000 f8e1 	bl	8002556 <HAL_SYSTICK_Config>
 8002394:	1e03      	subs	r3, r0, #0
 8002396:	d001      	beq.n	800239c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e00f      	b.n	80023bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d80b      	bhi.n	80023ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	2301      	movs	r3, #1
 80023a6:	425b      	negs	r3, r3
 80023a8:	2200      	movs	r2, #0
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 f8be 	bl	800252c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_InitTick+0x64>)
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	b003      	add	sp, #12
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	20000004 	.word	0x20000004
 80023c8:	2000000c 	.word	0x2000000c
 80023cc:	20000008 	.word	0x20000008

080023d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_IncTick+0x1c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	001a      	movs	r2, r3
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_IncTick+0x20>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	18d2      	adds	r2, r2, r3
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <HAL_IncTick+0x20>)
 80023e2:	601a      	str	r2, [r3, #0]
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	2000000c 	.word	0x2000000c
 80023f0:	20001038 	.word	0x20001038

080023f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b02      	ldr	r3, [pc, #8]	; (8002404 <HAL_GetTick+0x10>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	20001038 	.word	0x20001038

08002408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	0002      	movs	r2, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002416:	1dfb      	adds	r3, r7, #7
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b7f      	cmp	r3, #127	; 0x7f
 800241c:	d828      	bhi.n	8002470 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800241e:	4a2f      	ldr	r2, [pc, #188]	; (80024dc <__NVIC_SetPriority+0xd4>)
 8002420:	1dfb      	adds	r3, r7, #7
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b25b      	sxtb	r3, r3
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	33c0      	adds	r3, #192	; 0xc0
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	589b      	ldr	r3, [r3, r2]
 800242e:	1dfa      	adds	r2, r7, #7
 8002430:	7812      	ldrb	r2, [r2, #0]
 8002432:	0011      	movs	r1, r2
 8002434:	2203      	movs	r2, #3
 8002436:	400a      	ands	r2, r1
 8002438:	00d2      	lsls	r2, r2, #3
 800243a:	21ff      	movs	r1, #255	; 0xff
 800243c:	4091      	lsls	r1, r2
 800243e:	000a      	movs	r2, r1
 8002440:	43d2      	mvns	r2, r2
 8002442:	401a      	ands	r2, r3
 8002444:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	019b      	lsls	r3, r3, #6
 800244a:	22ff      	movs	r2, #255	; 0xff
 800244c:	401a      	ands	r2, r3
 800244e:	1dfb      	adds	r3, r7, #7
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	0018      	movs	r0, r3
 8002454:	2303      	movs	r3, #3
 8002456:	4003      	ands	r3, r0
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800245c:	481f      	ldr	r0, [pc, #124]	; (80024dc <__NVIC_SetPriority+0xd4>)
 800245e:	1dfb      	adds	r3, r7, #7
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b25b      	sxtb	r3, r3
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	430a      	orrs	r2, r1
 8002468:	33c0      	adds	r3, #192	; 0xc0
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800246e:	e031      	b.n	80024d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002470:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <__NVIC_SetPriority+0xd8>)
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	0019      	movs	r1, r3
 8002478:	230f      	movs	r3, #15
 800247a:	400b      	ands	r3, r1
 800247c:	3b08      	subs	r3, #8
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3306      	adds	r3, #6
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	18d3      	adds	r3, r2, r3
 8002486:	3304      	adds	r3, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	1dfa      	adds	r2, r7, #7
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	0011      	movs	r1, r2
 8002490:	2203      	movs	r2, #3
 8002492:	400a      	ands	r2, r1
 8002494:	00d2      	lsls	r2, r2, #3
 8002496:	21ff      	movs	r1, #255	; 0xff
 8002498:	4091      	lsls	r1, r2
 800249a:	000a      	movs	r2, r1
 800249c:	43d2      	mvns	r2, r2
 800249e:	401a      	ands	r2, r3
 80024a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	22ff      	movs	r2, #255	; 0xff
 80024a8:	401a      	ands	r2, r3
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	0018      	movs	r0, r3
 80024b0:	2303      	movs	r3, #3
 80024b2:	4003      	ands	r3, r0
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <__NVIC_SetPriority+0xd8>)
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	001c      	movs	r4, r3
 80024c0:	230f      	movs	r3, #15
 80024c2:	4023      	ands	r3, r4
 80024c4:	3b08      	subs	r3, #8
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	430a      	orrs	r2, r1
 80024ca:	3306      	adds	r3, #6
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	18c3      	adds	r3, r0, r3
 80024d0:	3304      	adds	r3, #4
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b003      	add	sp, #12
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	e000e100 	.word	0xe000e100
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	4a0c      	ldr	r2, [pc, #48]	; (8002524 <SysTick_Config+0x40>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f6:	2301      	movs	r3, #1
 80024f8:	e010      	b.n	800251c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <SysTick_Config+0x44>)
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	3a01      	subs	r2, #1
 8002500:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002502:	2301      	movs	r3, #1
 8002504:	425b      	negs	r3, r3
 8002506:	2103      	movs	r1, #3
 8002508:	0018      	movs	r0, r3
 800250a:	f7ff ff7d 	bl	8002408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <SysTick_Config+0x44>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <SysTick_Config+0x44>)
 8002516:	2207      	movs	r2, #7
 8002518:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251a:	2300      	movs	r3, #0
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00ffffff 	.word	0x00ffffff
 8002528:	e000e010 	.word	0xe000e010

0800252c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	210f      	movs	r1, #15
 8002538:	187b      	adds	r3, r7, r1
 800253a:	1c02      	adds	r2, r0, #0
 800253c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	187b      	adds	r3, r7, r1
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b25b      	sxtb	r3, r3
 8002546:	0011      	movs	r1, r2
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff ff5d 	bl	8002408 <__NVIC_SetPriority>
}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b004      	add	sp, #16
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff ffbf 	bl	80024e4 <SysTick_Config>
 8002566:	0003      	movs	r3, r0
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257e:	e14f      	b.n	8002820 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2101      	movs	r1, #1
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4091      	lsls	r1, r2
 800258a:	000a      	movs	r2, r1
 800258c:	4013      	ands	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d100      	bne.n	8002598 <HAL_GPIO_Init+0x28>
 8002596:	e140      	b.n	800281a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x38>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b12      	cmp	r3, #18
 80025a6:	d123      	bne.n	80025f0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	08da      	lsrs	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3208      	adds	r2, #8
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	58d3      	ldr	r3, [r2, r3]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2207      	movs	r2, #7
 80025ba:	4013      	ands	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	409a      	lsls	r2, r3
 80025c2:	0013      	movs	r3, r2
 80025c4:	43da      	mvns	r2, r3
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2107      	movs	r1, #7
 80025d4:	400b      	ands	r3, r1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	409a      	lsls	r2, r3
 80025da:	0013      	movs	r3, r2
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	08da      	lsrs	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3208      	adds	r2, #8
 80025ea:	0092      	lsls	r2, r2, #2
 80025ec:	6939      	ldr	r1, [r7, #16]
 80025ee:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	409a      	lsls	r2, r3
 80025fe:	0013      	movs	r3, r2
 8002600:	43da      	mvns	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2203      	movs	r2, #3
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	409a      	lsls	r2, r3
 8002616:	0013      	movs	r3, r2
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d00b      	beq.n	8002644 <HAL_GPIO_Init+0xd4>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d007      	beq.n	8002644 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002638:	2b11      	cmp	r3, #17
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b12      	cmp	r3, #18
 8002642:	d130      	bne.n	80026a6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	409a      	lsls	r2, r3
 8002652:	0013      	movs	r3, r2
 8002654:	43da      	mvns	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	409a      	lsls	r2, r3
 8002666:	0013      	movs	r3, r2
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800267a:	2201      	movs	r2, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	43da      	mvns	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	2201      	movs	r2, #1
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
 8002698:	0013      	movs	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	409a      	lsls	r2, r3
 80026b4:	0013      	movs	r3, r2
 80026b6:	43da      	mvns	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	409a      	lsls	r2, r3
 80026c8:	0013      	movs	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	055b      	lsls	r3, r3, #21
 80026de:	4013      	ands	r3, r2
 80026e0:	d100      	bne.n	80026e4 <HAL_GPIO_Init+0x174>
 80026e2:	e09a      	b.n	800281a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e4:	4b54      	ldr	r3, [pc, #336]	; (8002838 <HAL_GPIO_Init+0x2c8>)
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <HAL_GPIO_Init+0x2c8>)
 80026ea:	2101      	movs	r1, #1
 80026ec:	430a      	orrs	r2, r1
 80026ee:	619a      	str	r2, [r3, #24]
 80026f0:	4b51      	ldr	r3, [pc, #324]	; (8002838 <HAL_GPIO_Init+0x2c8>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026fc:	4a4f      	ldr	r2, [pc, #316]	; (800283c <HAL_GPIO_Init+0x2cc>)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	3302      	adds	r3, #2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	589b      	ldr	r3, [r3, r2]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2203      	movs	r2, #3
 800270e:	4013      	ands	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	409a      	lsls	r2, r3
 8002716:	0013      	movs	r3, r2
 8002718:	43da      	mvns	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	2390      	movs	r3, #144	; 0x90
 8002724:	05db      	lsls	r3, r3, #23
 8002726:	429a      	cmp	r2, r3
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0x1e2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a44      	ldr	r2, [pc, #272]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_GPIO_Init+0x1de>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a43      	ldr	r2, [pc, #268]	; (8002844 <HAL_GPIO_Init+0x2d4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x1da>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a42      	ldr	r2, [pc, #264]	; (8002848 <HAL_GPIO_Init+0x2d8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_GPIO_Init+0x1d6>
 8002742:	2303      	movs	r3, #3
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x1e4>
 8002746:	2305      	movs	r3, #5
 8002748:	e004      	b.n	8002754 <HAL_GPIO_Init+0x1e4>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <HAL_GPIO_Init+0x1e4>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x1e4>
 8002752:	2300      	movs	r3, #0
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	2103      	movs	r1, #3
 8002758:	400a      	ands	r2, r1
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	4093      	lsls	r3, r2
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002764:	4935      	ldr	r1, [pc, #212]	; (800283c <HAL_GPIO_Init+0x2cc>)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002772:	4b36      	ldr	r3, [pc, #216]	; (800284c <HAL_GPIO_Init+0x2dc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43da      	mvns	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	025b      	lsls	r3, r3, #9
 800278a:	4013      	ands	r3, r2
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_GPIO_Init+0x2dc>)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_GPIO_Init+0x2dc>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	43da      	mvns	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	4013      	ands	r3, r2
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027c0:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_GPIO_Init+0x2dc>)
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027c6:	4b21      	ldr	r3, [pc, #132]	; (800284c <HAL_GPIO_Init+0x2dc>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	43da      	mvns	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	035b      	lsls	r3, r3, #13
 80027de:	4013      	ands	r3, r2
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_GPIO_Init+0x2dc>)
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_GPIO_Init+0x2dc>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43da      	mvns	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	039b      	lsls	r3, r3, #14
 8002808:	4013      	ands	r3, r2
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_GPIO_Init+0x2dc>)
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3301      	adds	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	40da      	lsrs	r2, r3
 8002828:	1e13      	subs	r3, r2, #0
 800282a:	d000      	beq.n	800282e <HAL_GPIO_Init+0x2be>
 800282c:	e6a8      	b.n	8002580 <HAL_GPIO_Init+0x10>
  } 
}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	b006      	add	sp, #24
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	40021000 	.word	0x40021000
 800283c:	40010000 	.word	0x40010000
 8002840:	48000400 	.word	0x48000400
 8002844:	48000800 	.word	0x48000800
 8002848:	48000c00 	.word	0x48000c00
 800284c:	40010400 	.word	0x40010400

08002850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	0008      	movs	r0, r1
 800285a:	0011      	movs	r1, r2
 800285c:	1cbb      	adds	r3, r7, #2
 800285e:	1c02      	adds	r2, r0, #0
 8002860:	801a      	strh	r2, [r3, #0]
 8002862:	1c7b      	adds	r3, r7, #1
 8002864:	1c0a      	adds	r2, r1, #0
 8002866:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002868:	1c7b      	adds	r3, r7, #1
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002870:	1cbb      	adds	r3, r7, #2
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002878:	e003      	b.n	8002882 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287a:	1cbb      	adds	r3, r7, #2
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b002      	add	sp, #8
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e303      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2201      	movs	r2, #1
 80028a4:	4013      	ands	r3, r2
 80028a6:	d100      	bne.n	80028aa <HAL_RCC_OscConfig+0x1e>
 80028a8:	e08d      	b.n	80029c6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028aa:	4bc4      	ldr	r3, [pc, #784]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	220c      	movs	r2, #12
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d00e      	beq.n	80028d4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028b6:	4bc1      	ldr	r3, [pc, #772]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	220c      	movs	r2, #12
 80028bc:	4013      	ands	r3, r2
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d116      	bne.n	80028f0 <HAL_RCC_OscConfig+0x64>
 80028c2:	4bbe      	ldr	r3, [pc, #760]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	025b      	lsls	r3, r3, #9
 80028ca:	401a      	ands	r2, r3
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	025b      	lsls	r3, r3, #9
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d10d      	bne.n	80028f0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d4:	4bb9      	ldr	r3, [pc, #740]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	029b      	lsls	r3, r3, #10
 80028dc:	4013      	ands	r3, r2
 80028de:	d100      	bne.n	80028e2 <HAL_RCC_OscConfig+0x56>
 80028e0:	e070      	b.n	80029c4 <HAL_RCC_OscConfig+0x138>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d000      	beq.n	80028ec <HAL_RCC_OscConfig+0x60>
 80028ea:	e06b      	b.n	80029c4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e2da      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_OscConfig+0x7c>
 80028f8:	4bb0      	ldr	r3, [pc, #704]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4baf      	ldr	r3, [pc, #700]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	0249      	lsls	r1, r1, #9
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e02f      	b.n	8002968 <HAL_RCC_OscConfig+0xdc>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10c      	bne.n	800292a <HAL_RCC_OscConfig+0x9e>
 8002910:	4baa      	ldr	r3, [pc, #680]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4ba9      	ldr	r3, [pc, #676]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002916:	49aa      	ldr	r1, [pc, #680]	; (8002bc0 <HAL_RCC_OscConfig+0x334>)
 8002918:	400a      	ands	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4ba7      	ldr	r3, [pc, #668]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4ba6      	ldr	r3, [pc, #664]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002922:	49a8      	ldr	r1, [pc, #672]	; (8002bc4 <HAL_RCC_OscConfig+0x338>)
 8002924:	400a      	ands	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	e01e      	b.n	8002968 <HAL_RCC_OscConfig+0xdc>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b05      	cmp	r3, #5
 8002930:	d10e      	bne.n	8002950 <HAL_RCC_OscConfig+0xc4>
 8002932:	4ba2      	ldr	r3, [pc, #648]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4ba1      	ldr	r3, [pc, #644]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	02c9      	lsls	r1, r1, #11
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	4b9e      	ldr	r3, [pc, #632]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b9d      	ldr	r3, [pc, #628]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002946:	2180      	movs	r1, #128	; 0x80
 8002948:	0249      	lsls	r1, r1, #9
 800294a:	430a      	orrs	r2, r1
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xdc>
 8002950:	4b9a      	ldr	r3, [pc, #616]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b99      	ldr	r3, [pc, #612]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002956:	499a      	ldr	r1, [pc, #616]	; (8002bc0 <HAL_RCC_OscConfig+0x334>)
 8002958:	400a      	ands	r2, r1
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	4b97      	ldr	r3, [pc, #604]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b96      	ldr	r3, [pc, #600]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002962:	4998      	ldr	r1, [pc, #608]	; (8002bc4 <HAL_RCC_OscConfig+0x338>)
 8002964:	400a      	ands	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d014      	beq.n	800299a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff fd40 	bl	80023f4 <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297a:	f7ff fd3b 	bl	80023f4 <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b64      	cmp	r3, #100	; 0x64
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e28c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298c:	4b8b      	ldr	r3, [pc, #556]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	029b      	lsls	r3, r3, #10
 8002994:	4013      	ands	r3, r2
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0xee>
 8002998:	e015      	b.n	80029c6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7ff fd2b 	bl	80023f4 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a4:	f7ff fd26 	bl	80023f4 <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e277      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	4b81      	ldr	r3, [pc, #516]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	029b      	lsls	r3, r3, #10
 80029be:	4013      	ands	r3, r2
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x118>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2202      	movs	r2, #2
 80029cc:	4013      	ands	r3, r2
 80029ce:	d100      	bne.n	80029d2 <HAL_RCC_OscConfig+0x146>
 80029d0:	e069      	b.n	8002aa6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029d2:	4b7a      	ldr	r3, [pc, #488]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	220c      	movs	r2, #12
 80029d8:	4013      	ands	r3, r2
 80029da:	d00b      	beq.n	80029f4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029dc:	4b77      	ldr	r3, [pc, #476]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	220c      	movs	r2, #12
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d11c      	bne.n	8002a22 <HAL_RCC_OscConfig+0x196>
 80029e8:	4b74      	ldr	r3, [pc, #464]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	025b      	lsls	r3, r3, #9
 80029f0:	4013      	ands	r3, r2
 80029f2:	d116      	bne.n	8002a22 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f4:	4b71      	ldr	r3, [pc, #452]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2202      	movs	r2, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x17e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e24d      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b6c      	ldr	r3, [pc, #432]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	22f8      	movs	r2, #248	; 0xf8
 8002a10:	4393      	bics	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	00da      	lsls	r2, r3, #3
 8002a1a:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a20:	e041      	b.n	8002aa6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d024      	beq.n	8002a74 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a2a:	4b64      	ldr	r3, [pc, #400]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7ff fcdd 	bl	80023f4 <HAL_GetTick>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a40:	f7ff fcd8 	bl	80023f4 <HAL_GetTick>
 8002a44:	0002      	movs	r2, r0
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e229      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b5a      	ldr	r3, [pc, #360]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2202      	movs	r2, #2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d0f1      	beq.n	8002a40 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b57      	ldr	r3, [pc, #348]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	22f8      	movs	r2, #248	; 0xf8
 8002a62:	4393      	bics	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00da      	lsls	r2, r3, #3
 8002a6c:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e018      	b.n	8002aa6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a74:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7ff fcb8 	bl	80023f4 <HAL_GetTick>
 8002a84:	0003      	movs	r3, r0
 8002a86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8a:	f7ff fcb3 	bl	80023f4 <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e204      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9c:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d1f1      	bne.n	8002a8a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2208      	movs	r2, #8
 8002aac:	4013      	ands	r3, r2
 8002aae:	d036      	beq.n	8002b1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d019      	beq.n	8002aec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab8:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002abc:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002abe:	2101      	movs	r1, #1
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac4:	f7ff fc96 	bl	80023f4 <HAL_GetTick>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ace:	f7ff fc91 	bl	80023f4 <HAL_GetTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1e2      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae0:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d0f1      	beq.n	8002ace <HAL_RCC_OscConfig+0x242>
 8002aea:	e018      	b.n	8002b1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aec:	4b33      	ldr	r3, [pc, #204]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	438a      	bics	r2, r1
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af8:	f7ff fc7c 	bl	80023f4 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b02:	f7ff fc77 	bl	80023f4 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e1c8      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2202      	movs	r2, #2
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d1f1      	bne.n	8002b02 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2204      	movs	r2, #4
 8002b24:	4013      	ands	r3, r2
 8002b26:	d100      	bne.n	8002b2a <HAL_RCC_OscConfig+0x29e>
 8002b28:	e0b6      	b.n	8002c98 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	231f      	movs	r3, #31
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002b34:	69da      	ldr	r2, [r3, #28]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	055b      	lsls	r3, r3, #21
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d111      	bne.n	8002b62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	0549      	lsls	r1, r1, #21
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	61da      	str	r2, [r3, #28]
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	055b      	lsls	r3, r3, #21
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b5a:	231f      	movs	r3, #31
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b62:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCC_OscConfig+0x33c>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d11a      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6e:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_RCC_OscConfig+0x33c>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_RCC_OscConfig+0x33c>)
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	0049      	lsls	r1, r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7c:	f7ff fc3a 	bl	80023f4 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b86:	f7ff fc35 	bl	80023f4 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b64      	cmp	r3, #100	; 0x64
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e186      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_OscConfig+0x33c>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10f      	bne.n	8002bcc <HAL_RCC_OscConfig+0x340>
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002bae:	6a1a      	ldr	r2, [r3, #32]
 8002bb0:	4b02      	ldr	r3, [pc, #8]	; (8002bbc <HAL_RCC_OscConfig+0x330>)
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	621a      	str	r2, [r3, #32]
 8002bb8:	e036      	b.n	8002c28 <HAL_RCC_OscConfig+0x39c>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	fffeffff 	.word	0xfffeffff
 8002bc4:	fffbffff 	.word	0xfffbffff
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10c      	bne.n	8002bee <HAL_RCC_OscConfig+0x362>
 8002bd4:	4bb6      	ldr	r3, [pc, #728]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	4bb5      	ldr	r3, [pc, #724]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	438a      	bics	r2, r1
 8002bde:	621a      	str	r2, [r3, #32]
 8002be0:	4bb3      	ldr	r3, [pc, #716]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002be2:	6a1a      	ldr	r2, [r3, #32]
 8002be4:	4bb2      	ldr	r3, [pc, #712]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002be6:	2104      	movs	r1, #4
 8002be8:	438a      	bics	r2, r1
 8002bea:	621a      	str	r2, [r3, #32]
 8002bec:	e01c      	b.n	8002c28 <HAL_RCC_OscConfig+0x39c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x384>
 8002bf6:	4bae      	ldr	r3, [pc, #696]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002bf8:	6a1a      	ldr	r2, [r3, #32]
 8002bfa:	4bad      	ldr	r3, [pc, #692]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002bfc:	2104      	movs	r1, #4
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	621a      	str	r2, [r3, #32]
 8002c02:	4bab      	ldr	r3, [pc, #684]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002c04:	6a1a      	ldr	r2, [r3, #32]
 8002c06:	4baa      	ldr	r3, [pc, #680]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002c08:	2101      	movs	r1, #1
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	621a      	str	r2, [r3, #32]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0x39c>
 8002c10:	4ba7      	ldr	r3, [pc, #668]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002c12:	6a1a      	ldr	r2, [r3, #32]
 8002c14:	4ba6      	ldr	r3, [pc, #664]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002c16:	2101      	movs	r1, #1
 8002c18:	438a      	bics	r2, r1
 8002c1a:	621a      	str	r2, [r3, #32]
 8002c1c:	4ba4      	ldr	r3, [pc, #656]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002c1e:	6a1a      	ldr	r2, [r3, #32]
 8002c20:	4ba3      	ldr	r3, [pc, #652]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002c22:	2104      	movs	r1, #4
 8002c24:	438a      	bics	r2, r1
 8002c26:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d014      	beq.n	8002c5a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7ff fbe0 	bl	80023f4 <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c38:	e009      	b.n	8002c4e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7ff fbdb 	bl	80023f4 <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	4a9b      	ldr	r2, [pc, #620]	; (8002eb4 <HAL_RCC_OscConfig+0x628>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e12b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4e:	4b98      	ldr	r3, [pc, #608]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	2202      	movs	r2, #2
 8002c54:	4013      	ands	r3, r2
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x3ae>
 8002c58:	e013      	b.n	8002c82 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7ff fbcb 	bl	80023f4 <HAL_GetTick>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c62:	e009      	b.n	8002c78 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c64:	f7ff fbc6 	bl	80023f4 <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	4a91      	ldr	r2, [pc, #580]	; (8002eb4 <HAL_RCC_OscConfig+0x628>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e116      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c78:	4b8d      	ldr	r3, [pc, #564]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c82:	231f      	movs	r3, #31
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8c:	4b88      	ldr	r3, [pc, #544]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	4b87      	ldr	r3, [pc, #540]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002c92:	4989      	ldr	r1, [pc, #548]	; (8002eb8 <HAL_RCC_OscConfig+0x62c>)
 8002c94:	400a      	ands	r2, r1
 8002c96:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d063      	beq.n	8002d6a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d12a      	bne.n	8002d00 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002caa:	4b81      	ldr	r3, [pc, #516]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cae:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002cb6:	4b7e      	ldr	r3, [pc, #504]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cba:	4b7d      	ldr	r3, [pc, #500]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc2:	f7ff fb97 	bl	80023f4 <HAL_GetTick>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ccc:	f7ff fb92 	bl	80023f4 <HAL_GetTick>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0e3      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cde:	4b74      	ldr	r3, [pc, #464]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d0f1      	beq.n	8002ccc <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ce8:	4b71      	ldr	r3, [pc, #452]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cec:	22f8      	movs	r2, #248	; 0xf8
 8002cee:	4393      	bics	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	00da      	lsls	r2, r3, #3
 8002cf8:	4b6d      	ldr	r3, [pc, #436]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cfe:	e034      	b.n	8002d6a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	3305      	adds	r3, #5
 8002d06:	d111      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002d08:	4b69      	ldr	r3, [pc, #420]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0c:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d0e:	2104      	movs	r1, #4
 8002d10:	438a      	bics	r2, r1
 8002d12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d14:	4b66      	ldr	r3, [pc, #408]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	22f8      	movs	r2, #248	; 0xf8
 8002d1a:	4393      	bics	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	00da      	lsls	r2, r3, #3
 8002d24:	4b62      	ldr	r3, [pc, #392]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d26:	430a      	orrs	r2, r1
 8002d28:	635a      	str	r2, [r3, #52]	; 0x34
 8002d2a:	e01e      	b.n	8002d6a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d2c:	4b60      	ldr	r3, [pc, #384]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d30:	4b5f      	ldr	r3, [pc, #380]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d32:	2104      	movs	r1, #4
 8002d34:	430a      	orrs	r2, r1
 8002d36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d38:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3c:	4b5c      	ldr	r3, [pc, #368]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d3e:	2101      	movs	r1, #1
 8002d40:	438a      	bics	r2, r1
 8002d42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d44:	f7ff fb56 	bl	80023f4 <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d4e:	f7ff fb51 	bl	80023f4 <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0a2      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	2202      	movs	r2, #2
 8002d66:	4013      	ands	r3, r2
 8002d68:	d1f1      	bne.n	8002d4e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d100      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4e8>
 8002d72:	e097      	b.n	8002ea4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d74:	4b4e      	ldr	r3, [pc, #312]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	220c      	movs	r2, #12
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d100      	bne.n	8002d82 <HAL_RCC_OscConfig+0x4f6>
 8002d80:	e06b      	b.n	8002e5a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d14c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8a:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002d90:	494a      	ldr	r1, [pc, #296]	; (8002ebc <HAL_RCC_OscConfig+0x630>)
 8002d92:	400a      	ands	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7ff fb2d 	bl	80023f4 <HAL_GetTick>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da0:	f7ff fb28 	bl	80023f4 <HAL_GetTick>
 8002da4:	0002      	movs	r2, r0
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e079      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db2:	4b3f      	ldr	r3, [pc, #252]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	049b      	lsls	r3, r3, #18
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dbe:	4b3c      	ldr	r3, [pc, #240]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	220f      	movs	r2, #15
 8002dc4:	4393      	bics	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dcc:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dd2:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4a3a      	ldr	r2, [pc, #232]	; (8002ec0 <HAL_RCC_OscConfig+0x634>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	0019      	movs	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	431a      	orrs	r2, r3
 8002de6:	4b32      	ldr	r3, [pc, #200]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002df2:	2180      	movs	r1, #128	; 0x80
 8002df4:	0449      	lsls	r1, r1, #17
 8002df6:	430a      	orrs	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7ff fafb 	bl	80023f4 <HAL_GetTick>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e04:	f7ff faf6 	bl	80023f4 <HAL_GetTick>
 8002e08:	0002      	movs	r2, r0
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e047      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e16:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	049b      	lsls	r3, r3, #18
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x578>
 8002e22:	e03f      	b.n	8002ea4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002e2a:	4924      	ldr	r1, [pc, #144]	; (8002ebc <HAL_RCC_OscConfig+0x630>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7ff fae0 	bl	80023f4 <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7ff fadb 	bl	80023f4 <HAL_GetTick>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e02c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4c:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	049b      	lsls	r3, r3, #18
 8002e54:	4013      	ands	r3, r2
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x5ae>
 8002e58:	e024      	b.n	8002ea4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e01f      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_RCC_OscConfig+0x624>)
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	025b      	lsls	r3, r3, #9
 8002e78:	401a      	ands	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10e      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	220f      	movs	r2, #15
 8002e86:	401a      	ands	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	23f0      	movs	r3, #240	; 0xf0
 8002e94:	039b      	lsls	r3, r3, #14
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b008      	add	sp, #32
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	00001388 	.word	0x00001388
 8002eb8:	efffffff 	.word	0xefffffff
 8002ebc:	feffffff 	.word	0xfeffffff
 8002ec0:	ffc2ffff 	.word	0xffc2ffff

08002ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0b3      	b.n	8003040 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b5b      	ldr	r3, [pc, #364]	; (8003048 <HAL_RCC_ClockConfig+0x184>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d911      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b58      	ldr	r3, [pc, #352]	; (8003048 <HAL_RCC_ClockConfig+0x184>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2201      	movs	r2, #1
 8002eec:	4393      	bics	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	4b55      	ldr	r3, [pc, #340]	; (8003048 <HAL_RCC_ClockConfig+0x184>)
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef8:	4b53      	ldr	r3, [pc, #332]	; (8003048 <HAL_RCC_ClockConfig+0x184>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2201      	movs	r2, #1
 8002efe:	4013      	ands	r3, r2
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e09a      	b.n	8003040 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	4013      	ands	r3, r2
 8002f12:	d015      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d006      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f1e:	4b4b      	ldr	r3, [pc, #300]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4b4a      	ldr	r3, [pc, #296]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8002f24:	21e0      	movs	r1, #224	; 0xe0
 8002f26:	00c9      	lsls	r1, r1, #3
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b47      	ldr	r3, [pc, #284]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	22f0      	movs	r2, #240	; 0xf0
 8002f32:	4393      	bics	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	4b44      	ldr	r3, [pc, #272]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	d040      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b3e      	ldr	r3, [pc, #248]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	029b      	lsls	r3, r3, #10
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d114      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06e      	b.n	8003040 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b38      	ldr	r3, [pc, #224]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	049b      	lsls	r3, r3, #18
 8002f72:	4013      	ands	r3, r2
 8002f74:	d108      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e062      	b.n	8003040 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	4b34      	ldr	r3, [pc, #208]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e05b      	b.n	8003040 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f88:	4b30      	ldr	r3, [pc, #192]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	4393      	bics	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7ff fa2a 	bl	80023f4 <HAL_GetTick>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa4:	e009      	b.n	8002fba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa6:	f7ff fa25 	bl	80023f4 <HAL_GetTick>
 8002faa:	0002      	movs	r2, r0
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	4a27      	ldr	r2, [pc, #156]	; (8003050 <HAL_RCC_ClockConfig+0x18c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e042      	b.n	8003040 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b24      	ldr	r3, [pc, #144]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1ec      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <HAL_RCC_ClockConfig+0x184>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d211      	bcs.n	8002ffe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <HAL_RCC_ClockConfig+0x184>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	4393      	bics	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <HAL_RCC_ClockConfig+0x184>)
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fec:	4b16      	ldr	r3, [pc, #88]	; (8003048 <HAL_RCC_ClockConfig+0x184>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e020      	b.n	8003040 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2204      	movs	r2, #4
 8003004:	4013      	ands	r3, r2
 8003006:	d009      	beq.n	800301c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003008:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4a11      	ldr	r2, [pc, #68]	; (8003054 <HAL_RCC_ClockConfig+0x190>)
 800300e:	4013      	ands	r3, r2
 8003010:	0019      	movs	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800301c:	f000 f820 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8003020:	0001      	movs	r1, r0
 8003022:	4b0a      	ldr	r3, [pc, #40]	; (800304c <HAL_RCC_ClockConfig+0x188>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	220f      	movs	r2, #15
 800302a:	4013      	ands	r3, r2
 800302c:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_RCC_ClockConfig+0x194>)
 800302e:	5cd3      	ldrb	r3, [r2, r3]
 8003030:	000a      	movs	r2, r1
 8003032:	40da      	lsrs	r2, r3
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x198>)
 8003036:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003038:	2000      	movs	r0, #0
 800303a:	f7ff f995 	bl	8002368 <HAL_InitTick>
  
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	b004      	add	sp, #16
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40022000 	.word	0x40022000
 800304c:	40021000 	.word	0x40021000
 8003050:	00001388 	.word	0x00001388
 8003054:	fffff8ff 	.word	0xfffff8ff
 8003058:	08009320 	.word	0x08009320
 800305c:	20000004 	.word	0x20000004

08003060 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b08f      	sub	sp, #60	; 0x3c
 8003064:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003066:	2314      	movs	r3, #20
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	4a2b      	ldr	r2, [pc, #172]	; (8003118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800306c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800306e:	c313      	stmia	r3!, {r0, r1, r4}
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	4a29      	ldr	r2, [pc, #164]	; (800311c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003078:	ca13      	ldmia	r2!, {r0, r1, r4}
 800307a:	c313      	stmia	r3!, {r0, r1, r4}
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003084:	2300      	movs	r3, #0
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
 8003088:	2300      	movs	r3, #0
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003094:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	220c      	movs	r2, #12
 800309e:	4013      	ands	r3, r2
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d002      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x4a>
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d003      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x50>
 80030a8:	e02d      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030aa:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030ae:	e02d      	b.n	800310c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	0c9b      	lsrs	r3, r3, #18
 80030b4:	220f      	movs	r2, #15
 80030b6:	4013      	ands	r3, r2
 80030b8:	2214      	movs	r2, #20
 80030ba:	18ba      	adds	r2, r7, r2
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	220f      	movs	r2, #15
 80030c6:	4013      	ands	r3, r2
 80030c8:	1d3a      	adds	r2, r7, #4
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	025b      	lsls	r3, r3, #9
 80030d4:	4013      	ands	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030da:	4812      	ldr	r0, [pc, #72]	; (8003124 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030dc:	f7fd f81c 	bl	8000118 <__udivsi3>
 80030e0:	0003      	movs	r3, r0
 80030e2:	001a      	movs	r2, r3
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	4353      	muls	r3, r2
 80030e8:	637b      	str	r3, [r7, #52]	; 0x34
 80030ea:	e009      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ee:	000a      	movs	r2, r1
 80030f0:	0152      	lsls	r2, r2, #5
 80030f2:	1a52      	subs	r2, r2, r1
 80030f4:	0193      	lsls	r3, r2, #6
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	185b      	adds	r3, r3, r1
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003104:	e002      	b.n	800310c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003108:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800310a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b00f      	add	sp, #60	; 0x3c
 8003114:	bd90      	pop	{r4, r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	08009240 	.word	0x08009240
 800311c:	08009250 	.word	0x08009250
 8003120:	40021000 	.word	0x40021000
 8003124:	007a1200 	.word	0x007a1200

08003128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800312c:	4b02      	ldr	r3, [pc, #8]	; (8003138 <HAL_RCC_GetHCLKFreq+0x10>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	20000004 	.word	0x20000004

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003140:	f7ff fff2 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 8003144:	0001      	movs	r1, r0
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	2207      	movs	r2, #7
 800314e:	4013      	ands	r3, r2
 8003150:	4a04      	ldr	r2, [pc, #16]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003152:	5cd3      	ldrb	r3, [r2, r3]
 8003154:	40d9      	lsrs	r1, r3
 8003156:	000b      	movs	r3, r1
}    
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	40021000 	.word	0x40021000
 8003164:	08009330 	.word	0x08009330

08003168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	025b      	lsls	r3, r3, #9
 8003180:	4013      	ands	r3, r2
 8003182:	d100      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003184:	e08f      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003186:	2317      	movs	r3, #23
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318e:	4b5f      	ldr	r3, [pc, #380]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	055b      	lsls	r3, r3, #21
 8003196:	4013      	ands	r3, r2
 8003198:	d111      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	4b5b      	ldr	r3, [pc, #364]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	0549      	lsls	r1, r1, #21
 80031a4:	430a      	orrs	r2, r1
 80031a6:	61da      	str	r2, [r3, #28]
 80031a8:	4b58      	ldr	r3, [pc, #352]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	055b      	lsls	r3, r3, #21
 80031b0:	4013      	ands	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2317      	movs	r3, #23
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b54      	ldr	r3, [pc, #336]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4013      	ands	r3, r2
 80031c8:	d11a      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b51      	ldr	r3, [pc, #324]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	0049      	lsls	r1, r1, #1
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d8:	f7ff f90c 	bl	80023f4 <HAL_GetTick>
 80031dc:	0003      	movs	r3, r0
 80031de:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7ff f907 	bl	80023f4 <HAL_GetTick>
 80031e6:	0002      	movs	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b64      	cmp	r3, #100	; 0x64
 80031ee:	d901      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e087      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b46      	ldr	r3, [pc, #280]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4013      	ands	r3, r2
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003200:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	23c0      	movs	r3, #192	; 0xc0
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4013      	ands	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d034      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	23c0      	movs	r3, #192	; 0xc0
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4013      	ands	r3, r2
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	429a      	cmp	r2, r3
 8003220:	d02c      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003222:	4b3a      	ldr	r3, [pc, #232]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a3b      	ldr	r2, [pc, #236]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800322c:	4b37      	ldr	r3, [pc, #220]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800322e:	6a1a      	ldr	r2, [r3, #32]
 8003230:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	0249      	lsls	r1, r1, #9
 8003236:	430a      	orrs	r2, r1
 8003238:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800323a:	4b34      	ldr	r3, [pc, #208]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800323c:	6a1a      	ldr	r2, [r3, #32]
 800323e:	4b33      	ldr	r3, [pc, #204]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003240:	4935      	ldr	r1, [pc, #212]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003242:	400a      	ands	r2, r1
 8003244:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003246:	4b31      	ldr	r3, [pc, #196]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	4013      	ands	r3, r2
 8003252:	d013      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7ff f8ce 	bl	80023f4 <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325c:	e009      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7ff f8c9 	bl	80023f4 <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	4a2c      	ldr	r2, [pc, #176]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e048      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	2202      	movs	r2, #2
 8003278:	4013      	ands	r3, r2
 800327a:	d0f0      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800327c:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4a24      	ldr	r2, [pc, #144]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800328c:	430a      	orrs	r2, r1
 800328e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003290:	2317      	movs	r3, #23
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d105      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329a:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032a0:	491f      	ldr	r1, [pc, #124]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032a2:	400a      	ands	r2, r1
 80032a4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	4013      	ands	r3, r2
 80032ae:	d009      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b0:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	2203      	movs	r2, #3
 80032b6:	4393      	bics	r3, r2
 80032b8:	0019      	movs	r1, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032c0:	430a      	orrs	r2, r1
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2220      	movs	r2, #32
 80032ca:	4013      	ands	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	2210      	movs	r2, #16
 80032d4:	4393      	bics	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032de:	430a      	orrs	r2, r1
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4013      	ands	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	4393      	bics	r3, r2
 80032f6:	0019      	movs	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032fe:	430a      	orrs	r2, r1
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b006      	add	sp, #24
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	40007000 	.word	0x40007000
 8003314:	fffffcff 	.word	0xfffffcff
 8003318:	fffeffff 	.word	0xfffeffff
 800331c:	00001388 	.word	0x00001388
 8003320:	efffffff 	.word	0xefffffff

08003324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e08a      	b.n	800344c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	225d      	movs	r2, #93	; 0x5d
 8003340:	5c9b      	ldrb	r3, [r3, r2]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d107      	bne.n	8003358 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	225c      	movs	r2, #92	; 0x5c
 800334c:	2100      	movs	r1, #0
 800334e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	0018      	movs	r0, r3
 8003354:	f7fe feb2 	bl	80020bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	225d      	movs	r2, #93	; 0x5d
 800335c:	2102      	movs	r1, #2
 800335e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2140      	movs	r1, #64	; 0x40
 800336c:	438a      	bics	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	23e0      	movs	r3, #224	; 0xe0
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	429a      	cmp	r2, r3
 800337a:	d902      	bls.n	8003382 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e002      	b.n	8003388 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	015b      	lsls	r3, r3, #5
 8003386:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	23f0      	movs	r3, #240	; 0xf0
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	429a      	cmp	r2, r3
 8003392:	d008      	beq.n	80033a6 <HAL_SPI_Init+0x82>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	23e0      	movs	r3, #224	; 0xe0
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	429a      	cmp	r2, r3
 800339e:	d002      	beq.n	80033a6 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	23e0      	movs	r3, #224	; 0xe0
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d903      	bls.n	80033c2 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
 80033c0:	e002      	b.n	80033c8 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6999      	ldr	r1, [r3, #24]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	400b      	ands	r3, r1
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	0011      	movs	r1, r2
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	2204      	movs	r2, #4
 800340c:	401a      	ands	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	431a      	orrs	r2, r3
 8003420:	0011      	movs	r1, r2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4907      	ldr	r1, [pc, #28]	; (8003454 <HAL_SPI_Init+0x130>)
 8003438:	400a      	ands	r2, r1
 800343a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	225d      	movs	r2, #93	; 0x5d
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b004      	add	sp, #16
 8003452:	bd80      	pop	{r7, pc}
 8003454:	fffff7ff 	.word	0xfffff7ff

08003458 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	1dbb      	adds	r3, r7, #6
 8003466:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003468:	231f      	movs	r3, #31
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	225c      	movs	r2, #92	; 0x5c
 8003474:	5c9b      	ldrb	r3, [r3, r2]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_SPI_Transmit+0x26>
 800347a:	2302      	movs	r3, #2
 800347c:	e169      	b.n	8003752 <HAL_SPI_Transmit+0x2fa>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	225c      	movs	r2, #92	; 0x5c
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003486:	f7fe ffb5 	bl	80023f4 <HAL_GetTick>
 800348a:	0003      	movs	r3, r0
 800348c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800348e:	2316      	movs	r3, #22
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	1dba      	adds	r2, r7, #6
 8003494:	8812      	ldrh	r2, [r2, #0]
 8003496:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	225d      	movs	r2, #93	; 0x5d
 800349c:	5c9b      	ldrb	r3, [r3, r2]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d004      	beq.n	80034ae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80034a4:	231f      	movs	r3, #31
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	2202      	movs	r2, #2
 80034aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80034ac:	e146      	b.n	800373c <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_SPI_Transmit+0x64>
 80034b4:	1dbb      	adds	r3, r7, #6
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d104      	bne.n	80034c6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80034bc:	231f      	movs	r3, #31
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80034c4:	e13a      	b.n	800373c <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	225d      	movs	r2, #93	; 0x5d
 80034ca:	2103      	movs	r1, #3
 80034cc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1dba      	adds	r2, r7, #6
 80034de:	8812      	ldrh	r2, [r2, #0]
 80034e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1dba      	adds	r2, r7, #6
 80034e6:	8812      	ldrh	r2, [r2, #0]
 80034e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2244      	movs	r2, #68	; 0x44
 80034f4:	2100      	movs	r1, #0
 80034f6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2246      	movs	r2, #70	; 0x46
 80034fc:	2100      	movs	r1, #0
 80034fe:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	429a      	cmp	r2, r3
 8003516:	d108      	bne.n	800352a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	01c9      	lsls	r1, r1, #7
 8003526:	430a      	orrs	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2240      	movs	r2, #64	; 0x40
 8003532:	4013      	ands	r3, r2
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d007      	beq.n	8003548 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2140      	movs	r1, #64	; 0x40
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	23e0      	movs	r3, #224	; 0xe0
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	429a      	cmp	r2, r3
 8003552:	d94e      	bls.n	80035f2 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <HAL_SPI_Transmit+0x10e>
 800355c:	2316      	movs	r3, #22
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d13f      	bne.n	80035e6 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	881a      	ldrh	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	1c9a      	adds	r2, r3, #2
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800358a:	e02c      	b.n	80035e6 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2202      	movs	r2, #2
 8003594:	4013      	ands	r3, r2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d112      	bne.n	80035c0 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	881a      	ldrh	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	1c9a      	adds	r2, r3, #2
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035be:	e012      	b.n	80035e6 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035c0:	f7fe ff18 	bl	80023f4 <HAL_GetTick>
 80035c4:	0002      	movs	r2, r0
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d802      	bhi.n	80035d6 <HAL_SPI_Transmit+0x17e>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	d102      	bne.n	80035dc <HAL_SPI_Transmit+0x184>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80035dc:	231f      	movs	r3, #31
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	2203      	movs	r2, #3
 80035e2:	701a      	strb	r2, [r3, #0]
          goto error;
 80035e4:	e0aa      	b.n	800373c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1cd      	bne.n	800358c <HAL_SPI_Transmit+0x134>
 80035f0:	e080      	b.n	80036f4 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_SPI_Transmit+0x1ae>
 80035fa:	2316      	movs	r3, #22
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d000      	beq.n	8003606 <HAL_SPI_Transmit+0x1ae>
 8003604:	e071      	b.n	80036ea <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d912      	bls.n	8003636 <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	881a      	ldrh	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	1c9a      	adds	r2, r3, #2
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b02      	subs	r3, #2
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003634:	e059      	b.n	80036ea <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	7812      	ldrb	r2, [r2, #0]
 8003642:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800365c:	e045      	b.n	80036ea <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2202      	movs	r2, #2
 8003666:	4013      	ands	r3, r2
 8003668:	2b02      	cmp	r3, #2
 800366a:	d12b      	bne.n	80036c4 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d912      	bls.n	800369c <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	881a      	ldrh	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	1c9a      	adds	r2, r3, #2
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b02      	subs	r3, #2
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	87da      	strh	r2, [r3, #62]	; 0x3e
 800369a:	e026      	b.n	80036ea <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	7812      	ldrb	r2, [r2, #0]
 80036a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036c2:	e012      	b.n	80036ea <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036c4:	f7fe fe96 	bl	80023f4 <HAL_GetTick>
 80036c8:	0002      	movs	r2, r0
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d802      	bhi.n	80036da <HAL_SPI_Transmit+0x282>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	d102      	bne.n	80036e0 <HAL_SPI_Transmit+0x288>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d104      	bne.n	80036ea <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 80036e0:	231f      	movs	r3, #31
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	2203      	movs	r2, #3
 80036e6:	701a      	strb	r2, [r3, #0]
          goto error;
 80036e8:	e028      	b.n	800373c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1b4      	bne.n	800365e <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 fb58 	bl	8003db0 <SPI_EndRxTxTransaction>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d002      	beq.n	800370a <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8003730:	231f      	movs	r3, #31
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e000      	b.n	800373c <HAL_SPI_Transmit+0x2e4>
  }

error:
 800373a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	225d      	movs	r2, #93	; 0x5d
 8003740:	2101      	movs	r1, #1
 8003742:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	225c      	movs	r2, #92	; 0x5c
 8003748:	2100      	movs	r1, #0
 800374a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800374c:	231f      	movs	r3, #31
 800374e:	18fb      	adds	r3, r7, r3
 8003750:	781b      	ldrb	r3, [r3, #0]
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b008      	add	sp, #32
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	001a      	movs	r2, r3
 800376a:	1cbb      	adds	r3, r7, #2
 800376c:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800376e:	2301      	movs	r3, #1
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003772:	2323      	movs	r3, #35	; 0x23
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	225c      	movs	r2, #92	; 0x5c
 800377e:	5c9b      	ldrb	r3, [r3, r2]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x2c>
 8003784:	2302      	movs	r3, #2
 8003786:	e21f      	b.n	8003bc8 <HAL_SPI_TransmitReceive+0x46c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	225c      	movs	r2, #92	; 0x5c
 800378c:	2101      	movs	r1, #1
 800378e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003790:	f7fe fe30 	bl	80023f4 <HAL_GetTick>
 8003794:	0003      	movs	r3, r0
 8003796:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003798:	201b      	movs	r0, #27
 800379a:	183b      	adds	r3, r7, r0
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	215d      	movs	r1, #93	; 0x5d
 80037a0:	5c52      	ldrb	r2, [r2, r1]
 80037a2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80037aa:	2312      	movs	r3, #18
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	1cba      	adds	r2, r7, #2
 80037b0:	8812      	ldrh	r2, [r2, #0]
 80037b2:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 80037b4:	2310      	movs	r3, #16
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	1cba      	adds	r2, r7, #2
 80037ba:	8812      	ldrh	r2, [r2, #0]
 80037bc:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037be:	183b      	adds	r3, r7, r0
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d012      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x90>
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	2382      	movs	r3, #130	; 0x82
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d108      	bne.n	80037e2 <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <HAL_SPI_TransmitReceive+0x86>
 80037d8:	231b      	movs	r3, #27
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d004      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 80037e2:	2323      	movs	r3, #35	; 0x23
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2202      	movs	r2, #2
 80037e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80037ea:	e1e2      	b.n	8003bb2 <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <HAL_SPI_TransmitReceive+0xa4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_SPI_TransmitReceive+0xa4>
 80037f8:	1cbb      	adds	r3, r7, #2
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 8003800:	2323      	movs	r3, #35	; 0x23
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2201      	movs	r2, #1
 8003806:	701a      	strb	r2, [r3, #0]
    goto error;
 8003808:	e1d3      	b.n	8003bb2 <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	225d      	movs	r2, #93	; 0x5d
 800380e:	5c9b      	ldrb	r3, [r3, r2]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b04      	cmp	r3, #4
 8003814:	d003      	beq.n	800381e <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	225d      	movs	r2, #93	; 0x5d
 800381a:	2105      	movs	r1, #5
 800381c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1cba      	adds	r2, r7, #2
 800382e:	2146      	movs	r1, #70	; 0x46
 8003830:	8812      	ldrh	r2, [r2, #0]
 8003832:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1cba      	adds	r2, r7, #2
 8003838:	2144      	movs	r1, #68	; 0x44
 800383a:	8812      	ldrh	r2, [r2, #0]
 800383c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1cba      	adds	r2, r7, #2
 8003848:	8812      	ldrh	r2, [r2, #0]
 800384a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1cba      	adds	r2, r7, #2
 8003850:	8812      	ldrh	r2, [r2, #0]
 8003852:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	23e0      	movs	r3, #224	; 0xe0
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	429a      	cmp	r2, r3
 800386a:	d804      	bhi.n	8003876 <HAL_SPI_TransmitReceive+0x11a>
 800386c:	2310      	movs	r3, #16
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d908      	bls.n	8003888 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	49ca      	ldr	r1, [pc, #808]	; (8003bac <HAL_SPI_TransmitReceive+0x450>)
 8003882:	400a      	ands	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	e008      	b.n	800389a <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	0149      	lsls	r1, r1, #5
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2240      	movs	r2, #64	; 0x40
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d007      	beq.n	80038b8 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2140      	movs	r1, #64	; 0x40
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	23e0      	movs	r3, #224	; 0xe0
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d800      	bhi.n	80038c6 <HAL_SPI_TransmitReceive+0x16a>
 80038c4:	e07f      	b.n	80039c6 <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_SPI_TransmitReceive+0x17e>
 80038ce:	2312      	movs	r3, #18
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d000      	beq.n	80038da <HAL_SPI_TransmitReceive+0x17e>
 80038d8:	e069      	b.n	80039ae <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	881a      	ldrh	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	1c9a      	adds	r2, r3, #2
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038fe:	e056      	b.n	80039ae <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2202      	movs	r2, #2
 8003908:	4013      	ands	r3, r2
 800390a:	2b02      	cmp	r3, #2
 800390c:	d11b      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x1ea>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d016      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x1ea>
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	2b01      	cmp	r3, #1
 800391c:	d113      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	881a      	ldrh	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	1c9a      	adds	r2, r3, #2
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2201      	movs	r2, #1
 800394e:	4013      	ands	r3, r2
 8003950:	2b01      	cmp	r3, #1
 8003952:	d11c      	bne.n	800398e <HAL_SPI_TransmitReceive+0x232>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2246      	movs	r2, #70	; 0x46
 8003958:	5a9b      	ldrh	r3, [r3, r2]
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d016      	beq.n	800398e <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	b292      	uxth	r2, r2
 800396c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	1c9a      	adds	r2, r3, #2
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2246      	movs	r2, #70	; 0x46
 800397c:	5a9b      	ldrh	r3, [r3, r2]
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b299      	uxth	r1, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2246      	movs	r2, #70	; 0x46
 8003988:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800398a:	2301      	movs	r3, #1
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800398e:	f7fe fd31 	bl	80023f4 <HAL_GetTick>
 8003992:	0002      	movs	r2, r0
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800399a:	429a      	cmp	r2, r3
 800399c:	d807      	bhi.n	80039ae <HAL_SPI_TransmitReceive+0x252>
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	3301      	adds	r3, #1
 80039a2:	d004      	beq.n	80039ae <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 80039a4:	2323      	movs	r3, #35	; 0x23
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2203      	movs	r2, #3
 80039aa:	701a      	strb	r2, [r3, #0]
        goto error;
 80039ac:	e101      	b.n	8003bb2 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1a3      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x1a4>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2246      	movs	r2, #70	; 0x46
 80039bc:	5a9b      	ldrh	r3, [r3, r2]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d19d      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x1a4>
 80039c4:	e0e2      	b.n	8003b8c <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_SPI_TransmitReceive+0x27e>
 80039ce:	2312      	movs	r3, #18
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d000      	beq.n	80039da <HAL_SPI_TransmitReceive+0x27e>
 80039d8:	e0cb      	b.n	8003b72 <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d912      	bls.n	8003a0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	1c9a      	adds	r2, r3, #2
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b02      	subs	r3, #2
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a08:	e0b3      	b.n	8003b72 <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	7812      	ldrb	r2, [r2, #0]
 8003a16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a30:	e09f      	b.n	8003b72 <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d134      	bne.n	8003aaa <HAL_SPI_TransmitReceive+0x34e>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02f      	beq.n	8003aaa <HAL_SPI_TransmitReceive+0x34e>
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d12c      	bne.n	8003aaa <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d912      	bls.n	8003a80 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	881a      	ldrh	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	1c9a      	adds	r2, r3, #2
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b02      	subs	r3, #2
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a7e:	e012      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	7812      	ldrb	r2, [r2, #0]
 8003a8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d149      	bne.n	8003b4c <HAL_SPI_TransmitReceive+0x3f0>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2246      	movs	r2, #70	; 0x46
 8003abc:	5a9b      	ldrh	r3, [r3, r2]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d043      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2246      	movs	r2, #70	; 0x46
 8003ac8:	5a9b      	ldrh	r3, [r3, r2]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d924      	bls.n	8003b1a <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	b292      	uxth	r2, r2
 8003adc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2246      	movs	r2, #70	; 0x46
 8003aec:	5a9b      	ldrh	r3, [r3, r2]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b02      	subs	r3, #2
 8003af2:	b299      	uxth	r1, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2246      	movs	r2, #70	; 0x46
 8003af8:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2246      	movs	r2, #70	; 0x46
 8003afe:	5a9b      	ldrh	r3, [r3, r2]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d820      	bhi.n	8003b48 <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	0149      	lsls	r1, r1, #5
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	e016      	b.n	8003b48 <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	330c      	adds	r3, #12
 8003b20:	001a      	movs	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	7812      	ldrb	r2, [r2, #0]
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2246      	movs	r2, #70	; 0x46
 8003b3a:	5a9b      	ldrh	r3, [r3, r2]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b299      	uxth	r1, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2246      	movs	r2, #70	; 0x46
 8003b46:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b4c:	f7fe fc52 	bl	80023f4 <HAL_GetTick>
 8003b50:	0002      	movs	r2, r0
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d802      	bhi.n	8003b62 <HAL_SPI_TransmitReceive+0x406>
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	3301      	adds	r3, #1
 8003b60:	d102      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0x40c>
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d104      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 8003b68:	2323      	movs	r3, #35	; 0x23
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	701a      	strb	r2, [r3, #0]
        goto error;
 8003b70:	e01f      	b.n	8003bb2 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d000      	beq.n	8003b7e <HAL_SPI_TransmitReceive+0x422>
 8003b7c:	e759      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x2d6>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2246      	movs	r2, #70	; 0x46
 8003b82:	5a9b      	ldrh	r3, [r3, r2]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d000      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x430>
 8003b8a:	e752      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 f90c 	bl	8003db0 <SPI_EndRxTxTransaction>
 8003b98:	1e03      	subs	r3, r0, #0
 8003b9a:	d009      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 8003b9c:	2323      	movs	r3, #35	; 0x23
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	661a      	str	r2, [r3, #96]	; 0x60
 8003baa:	e002      	b.n	8003bb2 <HAL_SPI_TransmitReceive+0x456>
 8003bac:	ffffefff 	.word	0xffffefff
  }

error :
 8003bb0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	225d      	movs	r2, #93	; 0x5d
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	225c      	movs	r2, #92	; 0x5c
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003bc2:	2323      	movs	r3, #35	; 0x23
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	781b      	ldrb	r3, [r3, #0]
}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b00a      	add	sp, #40	; 0x28
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	225d      	movs	r2, #93	; 0x5d
 8003bdc:	5c9b      	ldrb	r3, [r3, r2]
 8003bde:	b2db      	uxtb	r3, r3
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	1dfb      	adds	r3, r7, #7
 8003bf6:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bf8:	e050      	b.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	d04d      	beq.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c00:	f7fe fbf8 	bl	80023f4 <HAL_GetTick>
 8003c04:	0002      	movs	r2, r0
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d902      	bls.n	8003c16 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d142      	bne.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	21e0      	movs	r1, #224	; 0xe0
 8003c22:	438a      	bics	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	2382      	movs	r3, #130	; 0x82
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d113      	bne.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0x72>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d005      	beq.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d107      	bne.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2140      	movs	r1, #64	; 0x40
 8003c56:	438a      	bics	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	019b      	lsls	r3, r3, #6
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d110      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4914      	ldr	r1, [pc, #80]	; (8003cc4 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8003c72:	400a      	ands	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	0189      	lsls	r1, r1, #6
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	225d      	movs	r2, #93	; 0x5d
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	225c      	movs	r2, #92	; 0x5c
 8003c94:	2100      	movs	r1, #0
 8003c96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e00f      	b.n	8003cbc <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	425a      	negs	r2, r3
 8003cac:	4153      	adcs	r3, r2
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	001a      	movs	r2, r3
 8003cb2:	1dfb      	adds	r3, r7, #7
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d19f      	bne.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b004      	add	sp, #16
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	ffffdfff 	.word	0xffffdfff

08003cc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cd6:	e05c      	b.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	23c0      	movs	r3, #192	; 0xc0
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d106      	bne.n	8003cf0 <SPI_WaitFifoStateUntilTimeout+0x28>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d103      	bne.n	8003cf0 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	d04d      	beq.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003cf6:	f7fe fb7d 	bl	80023f4 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d902      	bls.n	8003d0c <SPI_WaitFifoStateUntilTimeout+0x44>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d142      	bne.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	21e0      	movs	r1, #224	; 0xe0
 8003d18:	438a      	bics	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	2382      	movs	r3, #130	; 0x82
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d113      	bne.n	8003d50 <SPI_WaitFifoStateUntilTimeout+0x88>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d005      	beq.n	8003d40 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d107      	bne.n	8003d50 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2140      	movs	r1, #64	; 0x40
 8003d4c:	438a      	bics	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	019b      	lsls	r3, r3, #6
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d110      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4911      	ldr	r1, [pc, #68]	; (8003dac <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8003d68:	400a      	ands	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	0189      	lsls	r1, r1, #6
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	225d      	movs	r2, #93	; 0x5d
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	225c      	movs	r2, #92	; 0x5c
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e008      	b.n	8003da4 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d19a      	bne.n	8003cd8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b004      	add	sp, #16
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	ffffdfff 	.word	0xffffdfff

08003db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	23c0      	movs	r3, #192	; 0xc0
 8003dc0:	0159      	lsls	r1, r3, #5
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	0013      	movs	r3, r2
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f7ff ff7c 	bl	8003cc8 <SPI_WaitFifoStateUntilTimeout>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d007      	beq.n	8003de4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	2220      	movs	r2, #32
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e027      	b.n	8003e34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	0013      	movs	r3, r2
 8003dee:	2200      	movs	r2, #0
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	f7ff fef9 	bl	8003be8 <SPI_WaitFlagStateUntilTimeout>
 8003df6:	1e03      	subs	r3, r0, #0
 8003df8:	d007      	beq.n	8003e0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfe:	2220      	movs	r2, #32
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e014      	b.n	8003e34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	23c0      	movs	r3, #192	; 0xc0
 8003e0e:	00d9      	lsls	r1, r3, #3
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	0013      	movs	r3, r2
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f7ff ff55 	bl	8003cc8 <SPI_WaitFifoStateUntilTimeout>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d007      	beq.n	8003e32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e26:	2220      	movs	r2, #32
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e000      	b.n	8003e34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b004      	add	sp, #16
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e044      	b.n	8003ed8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d107      	bne.n	8003e66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2270      	movs	r2, #112	; 0x70
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7fe f977 	bl	8002154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2224      	movs	r2, #36	; 0x24
 8003e6a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2101      	movs	r1, #1
 8003e78:	438a      	bics	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f000 f8d8 	bl	8004034 <UART_SetConfig>
 8003e84:	0003      	movs	r3, r0
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e024      	b.n	8003ed8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f000 fa51 	bl	8004340 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	490d      	ldr	r1, [pc, #52]	; (8003ee0 <HAL_UART_Init+0xa4>)
 8003eaa:	400a      	ands	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	212a      	movs	r1, #42	; 0x2a
 8003eba:	438a      	bics	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 fae9 	bl	80044a8 <UART_CheckIdleState>
 8003ed6:	0003      	movs	r3, r0
}
 8003ed8:	0018      	movs	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b002      	add	sp, #8
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	ffffb7ff 	.word	0xffffb7ff

08003ee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	1dbb      	adds	r3, r7, #6
 8003ef2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d000      	beq.n	8003efe <HAL_UART_Transmit+0x1a>
 8003efc:	e095      	b.n	800402a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_UART_Transmit+0x28>
 8003f04:	1dbb      	adds	r3, r7, #6
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e08d      	b.n	800402c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	015b      	lsls	r3, r3, #5
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d109      	bne.n	8003f30 <HAL_UART_Transmit+0x4c>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2201      	movs	r2, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d001      	beq.n	8003f30 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e07d      	b.n	800402c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2270      	movs	r2, #112	; 0x70
 8003f34:	5c9b      	ldrb	r3, [r3, r2]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_UART_Transmit+0x5a>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e076      	b.n	800402c <HAL_UART_Transmit+0x148>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2270      	movs	r2, #112	; 0x70
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2221      	movs	r2, #33	; 0x21
 8003f50:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003f52:	f7fe fa4f 	bl	80023f4 <HAL_GetTick>
 8003f56:	0003      	movs	r3, r0
 8003f58:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1dba      	adds	r2, r7, #6
 8003f5e:	2150      	movs	r1, #80	; 0x50
 8003f60:	8812      	ldrh	r2, [r2, #0]
 8003f62:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1dba      	adds	r2, r7, #6
 8003f68:	2152      	movs	r1, #82	; 0x52
 8003f6a:	8812      	ldrh	r2, [r2, #0]
 8003f6c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	015b      	lsls	r3, r3, #5
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d108      	bne.n	8003f8c <HAL_UART_Transmit+0xa8>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	e003      	b.n	8003f94 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f94:	e02d      	b.n	8003ff2 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	0013      	movs	r3, r2
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2180      	movs	r1, #128	; 0x80
 8003fa4:	f000 fac6 	bl	8004534 <UART_WaitOnFlagUntilTimeout>
 8003fa8:	1e03      	subs	r3, r0, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e03d      	b.n	800402c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10b      	bne.n	8003fce <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	881a      	ldrh	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	05d2      	lsls	r2, r2, #23
 8003fc0:	0dd2      	lsrs	r2, r2, #23
 8003fc2:	b292      	uxth	r2, r2
 8003fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	3302      	adds	r3, #2
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	e008      	b.n	8003fe0 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b292      	uxth	r2, r2
 8003fd8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2252      	movs	r2, #82	; 0x52
 8003fe4:	5a9b      	ldrh	r3, [r3, r2]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b299      	uxth	r1, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2252      	movs	r2, #82	; 0x52
 8003ff0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2252      	movs	r2, #82	; 0x52
 8003ff6:	5a9b      	ldrh	r3, [r3, r2]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1cb      	bne.n	8003f96 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	0013      	movs	r3, r2
 8004008:	2200      	movs	r2, #0
 800400a:	2140      	movs	r1, #64	; 0x40
 800400c:	f000 fa92 	bl	8004534 <UART_WaitOnFlagUntilTimeout>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d001      	beq.n	8004018 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e009      	b.n	800402c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2270      	movs	r2, #112	; 0x70
 8004022:	2100      	movs	r1, #0
 8004024:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e000      	b.n	800402c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800402a:	2302      	movs	r3, #2
  }
}
 800402c:	0018      	movs	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	b008      	add	sp, #32
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800403c:	2300      	movs	r3, #0
 800403e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004040:	2317      	movs	r3, #23
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4aad      	ldr	r2, [pc, #692]	; (800431c <UART_SetConfig+0x2e8>)
 8004068:	4013      	ands	r3, r2
 800406a:	0019      	movs	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	430a      	orrs	r2, r1
 8004074:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4aa8      	ldr	r2, [pc, #672]	; (8004320 <UART_SetConfig+0x2ec>)
 800407e:	4013      	ands	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a9f      	ldr	r2, [pc, #636]	; (8004324 <UART_SetConfig+0x2f0>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	0019      	movs	r1, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a9b      	ldr	r2, [pc, #620]	; (8004328 <UART_SetConfig+0x2f4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d125      	bne.n	800410a <UART_SetConfig+0xd6>
 80040be:	4b9b      	ldr	r3, [pc, #620]	; (800432c <UART_SetConfig+0x2f8>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	2203      	movs	r2, #3
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d00f      	beq.n	80040ea <UART_SetConfig+0xb6>
 80040ca:	d304      	bcc.n	80040d6 <UART_SetConfig+0xa2>
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d011      	beq.n	80040f4 <UART_SetConfig+0xc0>
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d005      	beq.n	80040e0 <UART_SetConfig+0xac>
 80040d4:	e013      	b.n	80040fe <UART_SetConfig+0xca>
 80040d6:	231f      	movs	r3, #31
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	e022      	b.n	8004126 <UART_SetConfig+0xf2>
 80040e0:	231f      	movs	r3, #31
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	2202      	movs	r2, #2
 80040e6:	701a      	strb	r2, [r3, #0]
 80040e8:	e01d      	b.n	8004126 <UART_SetConfig+0xf2>
 80040ea:	231f      	movs	r3, #31
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	2204      	movs	r2, #4
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	e018      	b.n	8004126 <UART_SetConfig+0xf2>
 80040f4:	231f      	movs	r3, #31
 80040f6:	18fb      	adds	r3, r7, r3
 80040f8:	2208      	movs	r2, #8
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e013      	b.n	8004126 <UART_SetConfig+0xf2>
 80040fe:	231f      	movs	r3, #31
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	2210      	movs	r2, #16
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	e00d      	b.n	8004126 <UART_SetConfig+0xf2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a88      	ldr	r2, [pc, #544]	; (8004330 <UART_SetConfig+0x2fc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d104      	bne.n	800411e <UART_SetConfig+0xea>
 8004114:	231f      	movs	r3, #31
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e003      	b.n	8004126 <UART_SetConfig+0xf2>
 800411e:	231f      	movs	r3, #31
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	2210      	movs	r2, #16
 8004124:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	429a      	cmp	r2, r3
 8004130:	d000      	beq.n	8004134 <UART_SetConfig+0x100>
 8004132:	e07d      	b.n	8004230 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8004134:	231f      	movs	r3, #31
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d01c      	beq.n	8004178 <UART_SetConfig+0x144>
 800413e:	dc02      	bgt.n	8004146 <UART_SetConfig+0x112>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <UART_SetConfig+0x11c>
 8004144:	e04b      	b.n	80041de <UART_SetConfig+0x1aa>
 8004146:	2b04      	cmp	r3, #4
 8004148:	d025      	beq.n	8004196 <UART_SetConfig+0x162>
 800414a:	2b08      	cmp	r3, #8
 800414c:	d037      	beq.n	80041be <UART_SetConfig+0x18a>
 800414e:	e046      	b.n	80041de <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004150:	f7fe fff4 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8004154:	0003      	movs	r3, r0
 8004156:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	005a      	lsls	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	18d2      	adds	r2, r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	0019      	movs	r1, r3
 800416a:	0010      	movs	r0, r2
 800416c:	f7fb ffd4 	bl	8000118 <__udivsi3>
 8004170:	0003      	movs	r3, r0
 8004172:	b29b      	uxth	r3, r3
 8004174:	61bb      	str	r3, [r7, #24]
        break;
 8004176:	e037      	b.n	80041e8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	4a6d      	ldr	r2, [pc, #436]	; (8004334 <UART_SetConfig+0x300>)
 8004180:	189a      	adds	r2, r3, r2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	0019      	movs	r1, r3
 8004188:	0010      	movs	r0, r2
 800418a:	f7fb ffc5 	bl	8000118 <__udivsi3>
 800418e:	0003      	movs	r3, r0
 8004190:	b29b      	uxth	r3, r3
 8004192:	61bb      	str	r3, [r7, #24]
        break;
 8004194:	e028      	b.n	80041e8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7fe ff63 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 800419a:	0003      	movs	r3, r0
 800419c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	005a      	lsls	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	18d2      	adds	r2, r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	0019      	movs	r1, r3
 80041b0:	0010      	movs	r0, r2
 80041b2:	f7fb ffb1 	bl	8000118 <__udivsi3>
 80041b6:	0003      	movs	r3, r0
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	61bb      	str	r3, [r7, #24]
        break;
 80041bc:	e014      	b.n	80041e8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	2280      	movs	r2, #128	; 0x80
 80041c6:	0252      	lsls	r2, r2, #9
 80041c8:	189a      	adds	r2, r3, r2
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	0019      	movs	r1, r3
 80041d0:	0010      	movs	r0, r2
 80041d2:	f7fb ffa1 	bl	8000118 <__udivsi3>
 80041d6:	0003      	movs	r3, r0
 80041d8:	b29b      	uxth	r3, r3
 80041da:	61bb      	str	r3, [r7, #24]
        break;
 80041dc:	e004      	b.n	80041e8 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80041de:	2317      	movs	r3, #23
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
        break;
 80041e6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	d91b      	bls.n	8004226 <UART_SetConfig+0x1f2>
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	4a51      	ldr	r2, [pc, #324]	; (8004338 <UART_SetConfig+0x304>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d817      	bhi.n	8004226 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	200a      	movs	r0, #10
 80041fc:	183b      	adds	r3, r7, r0
 80041fe:	210f      	movs	r1, #15
 8004200:	438a      	bics	r2, r1
 8004202:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	b29b      	uxth	r3, r3
 800420a:	2207      	movs	r2, #7
 800420c:	4013      	ands	r3, r2
 800420e:	b299      	uxth	r1, r3
 8004210:	183b      	adds	r3, r7, r0
 8004212:	183a      	adds	r2, r7, r0
 8004214:	8812      	ldrh	r2, [r2, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	183a      	adds	r2, r7, r0
 8004220:	8812      	ldrh	r2, [r2, #0]
 8004222:	60da      	str	r2, [r3, #12]
 8004224:	e06c      	b.n	8004300 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004226:	2317      	movs	r3, #23
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e067      	b.n	8004300 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8004230:	231f      	movs	r3, #31
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d01b      	beq.n	8004272 <UART_SetConfig+0x23e>
 800423a:	dc02      	bgt.n	8004242 <UART_SetConfig+0x20e>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <UART_SetConfig+0x218>
 8004240:	e049      	b.n	80042d6 <UART_SetConfig+0x2a2>
 8004242:	2b04      	cmp	r3, #4
 8004244:	d024      	beq.n	8004290 <UART_SetConfig+0x25c>
 8004246:	2b08      	cmp	r3, #8
 8004248:	d035      	beq.n	80042b6 <UART_SetConfig+0x282>
 800424a:	e044      	b.n	80042d6 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800424c:	f7fe ff76 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8004250:	0003      	movs	r3, r0
 8004252:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	085a      	lsrs	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	18d2      	adds	r2, r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	0019      	movs	r1, r3
 8004264:	0010      	movs	r0, r2
 8004266:	f7fb ff57 	bl	8000118 <__udivsi3>
 800426a:	0003      	movs	r3, r0
 800426c:	b29b      	uxth	r3, r3
 800426e:	61bb      	str	r3, [r7, #24]
        break;
 8004270:	e036      	b.n	80042e0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	4a30      	ldr	r2, [pc, #192]	; (800433c <UART_SetConfig+0x308>)
 800427a:	189a      	adds	r2, r3, r2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	0019      	movs	r1, r3
 8004282:	0010      	movs	r0, r2
 8004284:	f7fb ff48 	bl	8000118 <__udivsi3>
 8004288:	0003      	movs	r3, r0
 800428a:	b29b      	uxth	r3, r3
 800428c:	61bb      	str	r3, [r7, #24]
        break;
 800428e:	e027      	b.n	80042e0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004290:	f7fe fee6 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8004294:	0003      	movs	r3, r0
 8004296:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	085a      	lsrs	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	18d2      	adds	r2, r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	0019      	movs	r1, r3
 80042a8:	0010      	movs	r0, r2
 80042aa:	f7fb ff35 	bl	8000118 <__udivsi3>
 80042ae:	0003      	movs	r3, r0
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	61bb      	str	r3, [r7, #24]
        break;
 80042b4:	e014      	b.n	80042e0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	2280      	movs	r2, #128	; 0x80
 80042be:	0212      	lsls	r2, r2, #8
 80042c0:	189a      	adds	r2, r3, r2
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0019      	movs	r1, r3
 80042c8:	0010      	movs	r0, r2
 80042ca:	f7fb ff25 	bl	8000118 <__udivsi3>
 80042ce:	0003      	movs	r3, r0
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	61bb      	str	r3, [r7, #24]
        break;
 80042d4:	e004      	b.n	80042e0 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80042d6:	2317      	movs	r3, #23
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
        break;
 80042de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	d908      	bls.n	80042f8 <UART_SetConfig+0x2c4>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4a13      	ldr	r2, [pc, #76]	; (8004338 <UART_SetConfig+0x304>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d804      	bhi.n	80042f8 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	e003      	b.n	8004300 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80042f8:	2317      	movs	r3, #23
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	2201      	movs	r2, #1
 80042fe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800430c:	2317      	movs	r3, #23
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	781b      	ldrb	r3, [r3, #0]
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b008      	add	sp, #32
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	ffff69f3 	.word	0xffff69f3
 8004320:	ffffcfff 	.word	0xffffcfff
 8004324:	fffff4ff 	.word	0xfffff4ff
 8004328:	40013800 	.word	0x40013800
 800432c:	40021000 	.word	0x40021000
 8004330:	40004400 	.word	0x40004400
 8004334:	00f42400 	.word	0x00f42400
 8004338:	0000ffff 	.word	0x0000ffff
 800433c:	007a1200 	.word	0x007a1200

08004340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	2201      	movs	r2, #1
 800434e:	4013      	ands	r3, r2
 8004350:	d00b      	beq.n	800436a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a4a      	ldr	r2, [pc, #296]	; (8004484 <UART_AdvFeatureConfig+0x144>)
 800435a:	4013      	ands	r3, r2
 800435c:	0019      	movs	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	2202      	movs	r2, #2
 8004370:	4013      	ands	r3, r2
 8004372:	d00b      	beq.n	800438c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4a43      	ldr	r2, [pc, #268]	; (8004488 <UART_AdvFeatureConfig+0x148>)
 800437c:	4013      	ands	r3, r2
 800437e:	0019      	movs	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	2204      	movs	r2, #4
 8004392:	4013      	ands	r3, r2
 8004394:	d00b      	beq.n	80043ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4a3b      	ldr	r2, [pc, #236]	; (800448c <UART_AdvFeatureConfig+0x14c>)
 800439e:	4013      	ands	r3, r2
 80043a0:	0019      	movs	r1, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	2208      	movs	r2, #8
 80043b4:	4013      	ands	r3, r2
 80043b6:	d00b      	beq.n	80043d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4a34      	ldr	r2, [pc, #208]	; (8004490 <UART_AdvFeatureConfig+0x150>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	0019      	movs	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	2210      	movs	r2, #16
 80043d6:	4013      	ands	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a2c      	ldr	r2, [pc, #176]	; (8004494 <UART_AdvFeatureConfig+0x154>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	0019      	movs	r1, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	2220      	movs	r2, #32
 80043f8:	4013      	ands	r3, r2
 80043fa:	d00b      	beq.n	8004414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	4a25      	ldr	r2, [pc, #148]	; (8004498 <UART_AdvFeatureConfig+0x158>)
 8004404:	4013      	ands	r3, r2
 8004406:	0019      	movs	r1, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2240      	movs	r2, #64	; 0x40
 800441a:	4013      	ands	r3, r2
 800441c:	d01d      	beq.n	800445a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a1d      	ldr	r2, [pc, #116]	; (800449c <UART_AdvFeatureConfig+0x15c>)
 8004426:	4013      	ands	r3, r2
 8004428:	0019      	movs	r1, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	035b      	lsls	r3, r3, #13
 800443e:	429a      	cmp	r2, r3
 8004440:	d10b      	bne.n	800445a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <UART_AdvFeatureConfig+0x160>)
 800444a:	4013      	ands	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	2280      	movs	r2, #128	; 0x80
 8004460:	4013      	ands	r3, r2
 8004462:	d00b      	beq.n	800447c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4a0e      	ldr	r2, [pc, #56]	; (80044a4 <UART_AdvFeatureConfig+0x164>)
 800446c:	4013      	ands	r3, r2
 800446e:	0019      	movs	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}
 8004484:	fffdffff 	.word	0xfffdffff
 8004488:	fffeffff 	.word	0xfffeffff
 800448c:	fffbffff 	.word	0xfffbffff
 8004490:	ffff7fff 	.word	0xffff7fff
 8004494:	ffffefff 	.word	0xffffefff
 8004498:	ffffdfff 	.word	0xffffdfff
 800449c:	ffefffff 	.word	0xffefffff
 80044a0:	ff9fffff 	.word	0xff9fffff
 80044a4:	fff7ffff 	.word	0xfff7ffff

080044a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044b6:	f7fd ff9d 	bl	80023f4 <HAL_GetTick>
 80044ba:	0003      	movs	r3, r0
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2208      	movs	r2, #8
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d10d      	bne.n	80044e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	0399      	lsls	r1, r3, #14
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	4b16      	ldr	r3, [pc, #88]	; (8004530 <UART_CheckIdleState+0x88>)
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	0013      	movs	r3, r2
 80044da:	2200      	movs	r2, #0
 80044dc:	f000 f82a 	bl	8004534 <UART_WaitOnFlagUntilTimeout>
 80044e0:	1e03      	subs	r3, r0, #0
 80044e2:	d001      	beq.n	80044e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e01f      	b.n	8004528 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2204      	movs	r2, #4
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d10d      	bne.n	8004512 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	03d9      	lsls	r1, r3, #15
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <UART_CheckIdleState+0x88>)
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	0013      	movs	r3, r2
 8004504:	2200      	movs	r2, #0
 8004506:	f000 f815 	bl	8004534 <UART_WaitOnFlagUntilTimeout>
 800450a:	1e03      	subs	r3, r0, #0
 800450c:	d001      	beq.n	8004512 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e00a      	b.n	8004528 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2270      	movs	r2, #112	; 0x70
 8004522:	2100      	movs	r1, #0
 8004524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	0018      	movs	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	b004      	add	sp, #16
 800452e:	bd80      	pop	{r7, pc}
 8004530:	01ffffff 	.word	0x01ffffff

08004534 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	1dfb      	adds	r3, r7, #7
 8004542:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004544:	e05d      	b.n	8004602 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	3301      	adds	r3, #1
 800454a:	d05a      	beq.n	8004602 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454c:	f7fd ff52 	bl	80023f4 <HAL_GetTick>
 8004550:	0002      	movs	r2, r0
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	429a      	cmp	r2, r3
 800455a:	d302      	bcc.n	8004562 <UART_WaitOnFlagUntilTimeout+0x2e>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d11b      	bne.n	800459a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	492f      	ldr	r1, [pc, #188]	; (800462c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800456e:	400a      	ands	r2, r1
 8004570:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2101      	movs	r1, #1
 800457e:	438a      	bics	r2, r1
 8004580:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2270      	movs	r2, #112	; 0x70
 8004592:	2100      	movs	r1, #0
 8004594:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e043      	b.n	8004622 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2204      	movs	r2, #4
 80045a2:	4013      	ands	r3, r2
 80045a4:	d02d      	beq.n	8004602 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	401a      	ands	r2, r3
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d123      	bne.n	8004602 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2280      	movs	r2, #128	; 0x80
 80045c0:	0112      	lsls	r2, r2, #4
 80045c2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4917      	ldr	r1, [pc, #92]	; (800462c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80045d0:	400a      	ands	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2101      	movs	r1, #1
 80045e0:	438a      	bics	r2, r1
 80045e2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2270      	movs	r2, #112	; 0x70
 80045fa:	2100      	movs	r1, #0
 80045fc:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e00f      	b.n	8004622 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	4013      	ands	r3, r2
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	425a      	negs	r2, r3
 8004612:	4153      	adcs	r3, r2
 8004614:	b2db      	uxtb	r3, r3
 8004616:	001a      	movs	r2, r3
 8004618:	1dfb      	adds	r3, r7, #7
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d092      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b004      	add	sp, #16
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	fffffe5f 	.word	0xfffffe5f

08004630 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004634:	4a06      	ldr	r2, [pc, #24]	; (8004650 <MX_FATFS_Init+0x20>)
 8004636:	4b07      	ldr	r3, [pc, #28]	; (8004654 <MX_FATFS_Init+0x24>)
 8004638:	0011      	movs	r1, r2
 800463a:	0018      	movs	r0, r3
 800463c:	f004 f8c6 	bl	80087cc <FATFS_LinkDriver>
 8004640:	0003      	movs	r3, r0
 8004642:	001a      	movs	r2, r3
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <MX_FATFS_Init+0x28>)
 8004646:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	2000103c 	.word	0x2000103c
 8004654:	20000010 	.word	0x20000010
 8004658:	20001040 	.word	0x20001040

0800465c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004660:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8004662:	0018      	movs	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	0002      	movs	r2, r0
 8004670:	1dfb      	adds	r3, r7, #7
 8004672:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	SD_disk_initialize (pdrv);
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	0018      	movs	r0, r3
 800467a:	f7fc ff75 	bl	8001568 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}

08004688 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	0002      	movs	r2, r0
 8004690:	1dfb      	adds	r3, r7, #7
 8004692:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */

    return SD_disk_status (pdrv);
 8004694:	1dfb      	adds	r3, r7, #7
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	0018      	movs	r0, r3
 800469a:	f7fd f873 	bl	8001784 <SD_disk_status>
 800469e:	0003      	movs	r3, r0
 80046a0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80046a2:	0018      	movs	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b002      	add	sp, #8
 80046a8:	bd80      	pop	{r7, pc}

080046aa <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
 80046b6:	210f      	movs	r1, #15
 80046b8:	187b      	adds	r3, r7, r1
 80046ba:	1c02      	adds	r2, r0, #0
 80046bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80046be:	187b      	adds	r3, r7, r1
 80046c0:	7818      	ldrb	r0, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	f7fd f872 	bl	80017b0 <SD_disk_read>
 80046cc:	0003      	movs	r3, r0
 80046ce:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b004      	add	sp, #16
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	210f      	movs	r1, #15
 80046e6:	187b      	adds	r3, r7, r1
 80046e8:	1c02      	adds	r2, r0, #0
 80046ea:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return  SD_disk_write(pdrv, buff, sector, count);
 80046ec:	187b      	adds	r3, r7, r1
 80046ee:	7818      	ldrb	r0, [r3, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68b9      	ldr	r1, [r7, #8]
 80046f6:	f7fd f8cb 	bl	8001890 <SD_disk_write>
 80046fa:	0003      	movs	r3, r0
 80046fc:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80046fe:	0018      	movs	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	b004      	add	sp, #16
 8004704:	bd80      	pop	{r7, pc}

08004706 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	603a      	str	r2, [r7, #0]
 800470e:	1dfb      	adds	r3, r7, #7
 8004710:	1c02      	adds	r2, r0, #0
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	1dbb      	adds	r3, r7, #6
 8004716:	1c0a      	adds	r2, r1, #0
 8004718:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 800471a:	1dfb      	adds	r3, r7, #7
 800471c:	7818      	ldrb	r0, [r3, #0]
 800471e:	1dbb      	adds	r3, r7, #6
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	0019      	movs	r1, r3
 8004726:	f7fd f93b 	bl	80019a0 <SD_disk_ioctl>
 800472a:	0003      	movs	r3, r0
 800472c:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800472e:	0018      	movs	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	b002      	add	sp, #8
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	0002      	movs	r2, r0
 8004740:	1dfb      	adds	r3, r7, #7
 8004742:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004744:	1dfb      	adds	r3, r7, #7
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	4a0b      	ldr	r2, [pc, #44]	; (8004778 <disk_status+0x40>)
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	18d3      	adds	r3, r2, r3
 800474e:	3304      	adds	r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	1dfa      	adds	r2, r7, #7
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	4907      	ldr	r1, [pc, #28]	; (8004778 <disk_status+0x40>)
 800475a:	188a      	adds	r2, r1, r2
 800475c:	7a12      	ldrb	r2, [r2, #8]
 800475e:	250f      	movs	r5, #15
 8004760:	197c      	adds	r4, r7, r5
 8004762:	0010      	movs	r0, r2
 8004764:	4798      	blx	r3
 8004766:	0003      	movs	r3, r0
 8004768:	7023      	strb	r3, [r4, #0]
  return stat;
 800476a:	197b      	adds	r3, r7, r5
 800476c:	781b      	ldrb	r3, [r3, #0]
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b004      	add	sp, #16
 8004774:	bdb0      	pop	{r4, r5, r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	200002cc 	.word	0x200002cc

0800477c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	0002      	movs	r2, r0
 8004784:	1dfb      	adds	r3, r7, #7
 8004786:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8004788:	230f      	movs	r3, #15
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 8004790:	1dfb      	adds	r3, r7, #7
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	4a11      	ldr	r2, [pc, #68]	; (80047dc <disk_initialize+0x60>)
 8004796:	5cd3      	ldrb	r3, [r2, r3]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d117      	bne.n	80047cc <disk_initialize+0x50>
  { 
    disk.is_initialized[pdrv] = 1;
 800479c:	1dfb      	adds	r3, r7, #7
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	4a0e      	ldr	r2, [pc, #56]	; (80047dc <disk_initialize+0x60>)
 80047a2:	2101      	movs	r1, #1
 80047a4:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80047a6:	1dfb      	adds	r3, r7, #7
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	4a0c      	ldr	r2, [pc, #48]	; (80047dc <disk_initialize+0x60>)
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	18d3      	adds	r3, r2, r3
 80047b0:	3304      	adds	r3, #4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	1dfa      	adds	r2, r7, #7
 80047b8:	7812      	ldrb	r2, [r2, #0]
 80047ba:	4908      	ldr	r1, [pc, #32]	; (80047dc <disk_initialize+0x60>)
 80047bc:	188a      	adds	r2, r1, r2
 80047be:	7a12      	ldrb	r2, [r2, #8]
 80047c0:	210f      	movs	r1, #15
 80047c2:	187c      	adds	r4, r7, r1
 80047c4:	0010      	movs	r0, r2
 80047c6:	4798      	blx	r3
 80047c8:	0003      	movs	r3, r0
 80047ca:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80047cc:	230f      	movs	r3, #15
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	781b      	ldrb	r3, [r3, #0]
}
 80047d2:	0018      	movs	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b005      	add	sp, #20
 80047d8:	bd90      	pop	{r4, r7, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	200002cc 	.word	0x200002cc

080047e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80047e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	210f      	movs	r1, #15
 80047ee:	187b      	adds	r3, r7, r1
 80047f0:	1c02      	adds	r2, r0, #0
 80047f2:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80047f4:	187b      	adds	r3, r7, r1
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	4a0c      	ldr	r2, [pc, #48]	; (800482c <disk_read+0x4c>)
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	18d3      	adds	r3, r2, r3
 80047fe:	3304      	adds	r3, #4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689d      	ldr	r5, [r3, #8]
 8004804:	187b      	adds	r3, r7, r1
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <disk_read+0x4c>)
 800480a:	18d3      	adds	r3, r2, r3
 800480c:	7a18      	ldrb	r0, [r3, #8]
 800480e:	2617      	movs	r6, #23
 8004810:	19bc      	adds	r4, r7, r6
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	47a8      	blx	r5
 800481a:	0003      	movs	r3, r0
 800481c:	7023      	strb	r3, [r4, #0]
  return res;
 800481e:	19bb      	adds	r3, r7, r6
 8004820:	781b      	ldrb	r3, [r3, #0]
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b007      	add	sp, #28
 8004828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	200002cc 	.word	0x200002cc

08004830 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	210f      	movs	r1, #15
 800483e:	187b      	adds	r3, r7, r1
 8004840:	1c02      	adds	r2, r0, #0
 8004842:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004844:	187b      	adds	r3, r7, r1
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	4a0c      	ldr	r2, [pc, #48]	; (800487c <disk_write+0x4c>)
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	18d3      	adds	r3, r2, r3
 800484e:	3304      	adds	r3, #4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68dd      	ldr	r5, [r3, #12]
 8004854:	187b      	adds	r3, r7, r1
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	4a08      	ldr	r2, [pc, #32]	; (800487c <disk_write+0x4c>)
 800485a:	18d3      	adds	r3, r2, r3
 800485c:	7a18      	ldrb	r0, [r3, #8]
 800485e:	2617      	movs	r6, #23
 8004860:	19bc      	adds	r4, r7, r6
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	47a8      	blx	r5
 800486a:	0003      	movs	r3, r0
 800486c:	7023      	strb	r3, [r4, #0]
  return res;
 800486e:	19bb      	adds	r3, r7, r6
 8004870:	781b      	ldrb	r3, [r3, #0]
}
 8004872:	0018      	movs	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	b007      	add	sp, #28
 8004878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	200002cc 	.word	0x200002cc

08004880 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	603a      	str	r2, [r7, #0]
 8004888:	1dfb      	adds	r3, r7, #7
 800488a:	1c02      	adds	r2, r0, #0
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	1dbb      	adds	r3, r7, #6
 8004890:	1c0a      	adds	r2, r1, #0
 8004892:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004894:	1dfb      	adds	r3, r7, #7
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	4a0c      	ldr	r2, [pc, #48]	; (80048cc <disk_ioctl+0x4c>)
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	18d3      	adds	r3, r2, r3
 800489e:	3304      	adds	r3, #4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	1dfa      	adds	r2, r7, #7
 80048a6:	7812      	ldrb	r2, [r2, #0]
 80048a8:	4908      	ldr	r1, [pc, #32]	; (80048cc <disk_ioctl+0x4c>)
 80048aa:	188a      	adds	r2, r1, r2
 80048ac:	7a10      	ldrb	r0, [r2, #8]
 80048ae:	260f      	movs	r6, #15
 80048b0:	19bc      	adds	r4, r7, r6
 80048b2:	683d      	ldr	r5, [r7, #0]
 80048b4:	1dba      	adds	r2, r7, #6
 80048b6:	7811      	ldrb	r1, [r2, #0]
 80048b8:	002a      	movs	r2, r5
 80048ba:	4798      	blx	r3
 80048bc:	0003      	movs	r3, r0
 80048be:	7023      	strb	r3, [r4, #0]
  return res;
 80048c0:	19bb      	adds	r3, r7, r6
 80048c2:	781b      	ldrb	r3, [r3, #0]
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b005      	add	sp, #20
 80048ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048cc:	200002cc 	.word	0x200002cc

080048d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80048e4:	e007      	b.n	80048f6 <mem_cpy+0x26>
		*d++ = *s++;
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	1c53      	adds	r3, r2, #1
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	1c59      	adds	r1, r3, #1
 80048f0:	6179      	str	r1, [r7, #20]
 80048f2:	7812      	ldrb	r2, [r2, #0]
 80048f4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	1e5a      	subs	r2, r3, #1
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f2      	bne.n	80048e6 <mem_cpy+0x16>
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b006      	add	sp, #24
 8004906:	bd80      	pop	{r7, pc}

08004908 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004918:	e005      	b.n	8004926 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	617a      	str	r2, [r7, #20]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	1e5a      	subs	r2, r3, #1
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f4      	bne.n	800491a <mem_set+0x12>
}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	b006      	add	sp, #24
 8004936:	bd80      	pop	{r7, pc}

08004938 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	1e5a      	subs	r2, r3, #1
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00d      	beq.n	8004978 <mem_cmp+0x40>
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	61fa      	str	r2, [r7, #28]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	0019      	movs	r1, r3
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	61ba      	str	r2, [r7, #24]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	1acb      	subs	r3, r1, r3
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ec      	beq.n	8004952 <mem_cmp+0x1a>
	return r;
 8004978:	697b      	ldr	r3, [r7, #20]
}
 800497a:	0018      	movs	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	b008      	add	sp, #32
 8004980:	bd80      	pop	{r7, pc}

08004982 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800498c:	e002      	b.n	8004994 <chk_chr+0x12>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3301      	adds	r3, #1
 8004992:	607b      	str	r3, [r7, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <chk_chr+0x26>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	001a      	movs	r2, r3
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d1f2      	bne.n	800498e <chk_chr+0xc>
	return *str;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	781b      	ldrb	r3, [r3, #0]
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b002      	add	sp, #8
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	e038      	b.n	8004a3a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80049c8:	492f      	ldr	r1, [pc, #188]	; (8004a88 <chk_lock+0xd4>)
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	0013      	movs	r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	189b      	adds	r3, r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	585b      	ldr	r3, [r3, r1]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d02a      	beq.n	8004a30 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80049da:	492b      	ldr	r1, [pc, #172]	; (8004a88 <chk_lock+0xd4>)
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	0013      	movs	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	585a      	ldr	r2, [r3, r1]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	58cb      	ldr	r3, [r1, r3]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d11f      	bne.n	8004a34 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80049f4:	4924      	ldr	r1, [pc, #144]	; (8004a88 <chk_lock+0xd4>)
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	0013      	movs	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	189b      	adds	r3, r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	18cb      	adds	r3, r1, r3
 8004a02:	3304      	adds	r3, #4
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	2381      	movs	r3, #129	; 0x81
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d110      	bne.n	8004a34 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004a12:	491d      	ldr	r1, [pc, #116]	; (8004a88 <chk_lock+0xd4>)
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	0013      	movs	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	189b      	adds	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	18cb      	adds	r3, r1, r3
 8004a20:	3308      	adds	r3, #8
 8004a22:	881a      	ldrh	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4919      	ldr	r1, [pc, #100]	; (8004a8c <chk_lock+0xd8>)
 8004a28:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d102      	bne.n	8004a34 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004a2e:	e007      	b.n	8004a40 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004a30:	2301      	movs	r3, #1
 8004a32:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3301      	adds	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d9c3      	bls.n	80049c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d109      	bne.n	8004a5a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <chk_lock+0x9e>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d101      	bne.n	8004a56 <chk_lock+0xa2>
 8004a52:	2300      	movs	r3, #0
 8004a54:	e014      	b.n	8004a80 <chk_lock+0xcc>
 8004a56:	2312      	movs	r3, #18
 8004a58:	e012      	b.n	8004a80 <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10c      	bne.n	8004a7a <chk_lock+0xc6>
 8004a60:	4909      	ldr	r1, [pc, #36]	; (8004a88 <chk_lock+0xd4>)
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	0013      	movs	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	189b      	adds	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	18cb      	adds	r3, r1, r3
 8004a6e:	330a      	adds	r3, #10
 8004a70:	881a      	ldrh	r2, [r3, #0]
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d101      	bne.n	8004a7e <chk_lock+0xca>
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	e000      	b.n	8004a80 <chk_lock+0xcc>
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	0018      	movs	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b004      	add	sp, #16
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	200000b4 	.word	0x200000b4
 8004a8c:	00000406 	.word	0x00000406

08004a90 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004a96:	2300      	movs	r3, #0
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	e002      	b.n	8004aa2 <enq_lock+0x12>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d808      	bhi.n	8004aba <enq_lock+0x2a>
 8004aa8:	4908      	ldr	r1, [pc, #32]	; (8004acc <enq_lock+0x3c>)
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	0013      	movs	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	189b      	adds	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	585b      	ldr	r3, [r3, r1]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3b02      	subs	r3, #2
 8004abe:	1e5a      	subs	r2, r3, #1
 8004ac0:	4193      	sbcs	r3, r2
 8004ac2:	b2db      	uxtb	r3, r3
}
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b002      	add	sp, #8
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	200000b4 	.word	0x200000b4

08004ad0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e02c      	b.n	8004b3a <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 8004ae0:	4955      	ldr	r1, [pc, #340]	; (8004c38 <inc_lock+0x168>)
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	0013      	movs	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	189b      	adds	r3, r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	585a      	ldr	r2, [r3, r1]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	58cb      	ldr	r3, [r1, r3]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d11c      	bne.n	8004b34 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 8004afa:	494f      	ldr	r1, [pc, #316]	; (8004c38 <inc_lock+0x168>)
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	0013      	movs	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	189b      	adds	r3, r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	18cb      	adds	r3, r1, r3
 8004b08:	3304      	adds	r3, #4
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	2381      	movs	r3, #129	; 0x81
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d10d      	bne.n	8004b34 <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 8004b18:	4947      	ldr	r1, [pc, #284]	; (8004c38 <inc_lock+0x168>)
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	0013      	movs	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	189b      	adds	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	18cb      	adds	r3, r1, r3
 8004b26:	3308      	adds	r3, #8
 8004b28:	881a      	ldrh	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4943      	ldr	r1, [pc, #268]	; (8004c3c <inc_lock+0x16c>)
 8004b2e:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d006      	beq.n	8004b42 <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d9cf      	bls.n	8004ae0 <inc_lock+0x10>
 8004b40:	e000      	b.n	8004b44 <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 8004b42:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d145      	bne.n	8004bd6 <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e002      	b.n	8004b56 <inc_lock+0x86>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3301      	adds	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d808      	bhi.n	8004b6e <inc_lock+0x9e>
 8004b5c:	4936      	ldr	r1, [pc, #216]	; (8004c38 <inc_lock+0x168>)
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	0013      	movs	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	189b      	adds	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	585b      	ldr	r3, [r3, r1]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d101      	bne.n	8004b78 <inc_lock+0xa8>
 8004b74:	2300      	movs	r3, #0
 8004b76:	e05a      	b.n	8004c2e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	58d0      	ldr	r0, [r2, r3]
 8004b80:	492d      	ldr	r1, [pc, #180]	; (8004c38 <inc_lock+0x168>)
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	0013      	movs	r3, r2
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	189b      	adds	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	2381      	movs	r3, #129	; 0x81
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	58d1      	ldr	r1, [r2, r3]
 8004b96:	4828      	ldr	r0, [pc, #160]	; (8004c38 <inc_lock+0x168>)
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	0013      	movs	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	18c3      	adds	r3, r0, r3
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <inc_lock+0x16c>)
 8004bac:	5a98      	ldrh	r0, [r3, r2]
 8004bae:	4922      	ldr	r1, [pc, #136]	; (8004c38 <inc_lock+0x168>)
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	0013      	movs	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	18cb      	adds	r3, r1, r3
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	1c02      	adds	r2, r0, #0
 8004bc0:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004bc2:	491d      	ldr	r1, [pc, #116]	; (8004c38 <inc_lock+0x168>)
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	0013      	movs	r3, r2
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	18cb      	adds	r3, r1, r3
 8004bd0:	330a      	adds	r3, #10
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00c      	beq.n	8004bf6 <inc_lock+0x126>
 8004bdc:	4916      	ldr	r1, [pc, #88]	; (8004c38 <inc_lock+0x168>)
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	0013      	movs	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	189b      	adds	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	18cb      	adds	r3, r1, r3
 8004bea:	330a      	adds	r3, #10
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <inc_lock+0x126>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e01b      	b.n	8004c2e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10b      	bne.n	8004c14 <inc_lock+0x144>
 8004bfc:	490e      	ldr	r1, [pc, #56]	; (8004c38 <inc_lock+0x168>)
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	0013      	movs	r3, r2
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	189b      	adds	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	18cb      	adds	r3, r1, r3
 8004c0a:	330a      	adds	r3, #10
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	e001      	b.n	8004c18 <inc_lock+0x148>
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	005a      	lsls	r2, r3, #1
 8004c18:	4807      	ldr	r0, [pc, #28]	; (8004c38 <inc_lock+0x168>)
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	000b      	movs	r3, r1
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	185b      	adds	r3, r3, r1
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	18c3      	adds	r3, r0, r3
 8004c26:	330a      	adds	r3, #10
 8004c28:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3301      	adds	r3, #1
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b004      	add	sp, #16
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	200000b4 	.word	0x200000b4
 8004c3c:	00000406 	.word	0x00000406

08004c40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d83d      	bhi.n	8004cd0 <dec_lock+0x90>
		n = Files[i].ctr;
 8004c54:	240e      	movs	r4, #14
 8004c56:	1939      	adds	r1, r7, r4
 8004c58:	4823      	ldr	r0, [pc, #140]	; (8004ce8 <dec_lock+0xa8>)
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	0013      	movs	r3, r2
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	189b      	adds	r3, r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	18c3      	adds	r3, r0, r3
 8004c66:	330a      	adds	r3, #10
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004c6c:	193b      	adds	r3, r7, r4
 8004c6e:	881a      	ldrh	r2, [r3, #0]
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d103      	bne.n	8004c80 <dec_lock+0x40>
 8004c78:	230e      	movs	r3, #14
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 8004c80:	230e      	movs	r3, #14
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <dec_lock+0x56>
 8004c8a:	210e      	movs	r1, #14
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	3a01      	subs	r2, #1
 8004c94:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8004c96:	4914      	ldr	r1, [pc, #80]	; (8004ce8 <dec_lock+0xa8>)
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	0013      	movs	r3, r2
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	18cb      	adds	r3, r1, r3
 8004ca4:	330a      	adds	r3, #10
 8004ca6:	210e      	movs	r1, #14
 8004ca8:	187a      	adds	r2, r7, r1
 8004caa:	8812      	ldrh	r2, [r2, #0]
 8004cac:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004cae:	187b      	adds	r3, r7, r1
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d107      	bne.n	8004cc6 <dec_lock+0x86>
 8004cb6:	490c      	ldr	r1, [pc, #48]	; (8004ce8 <dec_lock+0xa8>)
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	0013      	movs	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 8004cc6:	230d      	movs	r3, #13
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e003      	b.n	8004cd8 <dec_lock+0x98>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004cd0:	230d      	movs	r3, #13
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8004cd8:	230d      	movs	r3, #13
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	781b      	ldrb	r3, [r3, #0]
}
 8004cde:	0018      	movs	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b005      	add	sp, #20
 8004ce4:	bd90      	pop	{r4, r7, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	200000b4 	.word	0x200000b4

08004cec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e014      	b.n	8004d24 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004cfa:	490e      	ldr	r1, [pc, #56]	; (8004d34 <clear_lock+0x48>)
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	0013      	movs	r3, r2
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	585b      	ldr	r3, [r3, r1]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d107      	bne.n	8004d1e <clear_lock+0x32>
 8004d0e:	4909      	ldr	r1, [pc, #36]	; (8004d34 <clear_lock+0x48>)
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	0013      	movs	r3, r2
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3301      	adds	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d9e7      	bls.n	8004cfa <clear_lock+0xe>
	}
}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b004      	add	sp, #16
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	200000b4 	.word	0x200000b4

08004d38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d40:	230f      	movs	r3, #15
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a24      	ldr	r2, [pc, #144]	; (8004ddc <sync_window+0xa4>)
 8004d4c:	5c9b      	ldrb	r3, [r3, r2]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d03c      	beq.n	8004dcc <sync_window+0x94>
		wsect = fs->winsect;	/* Current sector number */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <sync_window+0xa8>)
 8004d56:	589b      	ldr	r3, [r3, r2]
 8004d58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a21      	ldr	r2, [pc, #132]	; (8004de4 <sync_window+0xac>)
 8004d5e:	5c98      	ldrb	r0, [r3, r2]
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	2301      	movs	r3, #1
 8004d66:	f7ff fd63 	bl	8004830 <disk_write>
 8004d6a:	1e03      	subs	r3, r0, #0
 8004d6c:	d004      	beq.n	8004d78 <sync_window+0x40>
			res = FR_DISK_ERR;
 8004d6e:	230f      	movs	r3, #15
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	e029      	b.n	8004dcc <sync_window+0x94>
		} else {
			fs->wflag = 0;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a18      	ldr	r2, [pc, #96]	; (8004ddc <sync_window+0xa4>)
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	5499      	strb	r1, [r3, r2]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	2384      	movs	r3, #132	; 0x84
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	58d3      	ldr	r3, [r2, r3]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	1ad2      	subs	r2, r2, r3
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	2383      	movs	r3, #131	; 0x83
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	58cb      	ldr	r3, [r1, r3]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d219      	bcs.n	8004dcc <sync_window+0x94>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <sync_window+0xb0>)
 8004d9c:	5c9b      	ldrb	r3, [r3, r2]
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	e011      	b.n	8004dc6 <sync_window+0x8e>
					wsect += fs->fsize;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	2383      	movs	r3, #131	; 0x83
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	58d3      	ldr	r3, [r2, r3]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	18d3      	adds	r3, r2, r3
 8004dae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a0c      	ldr	r2, [pc, #48]	; (8004de4 <sync_window+0xac>)
 8004db4:	5c98      	ldrb	r0, [r3, r2]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f7ff fd38 	bl	8004830 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d8ea      	bhi.n	8004da2 <sync_window+0x6a>
				}
			}
		}
	}
	return res;
 8004dcc:	230f      	movs	r3, #15
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	781b      	ldrb	r3, [r3, #0]
}
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b006      	add	sp, #24
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	00000404 	.word	0x00000404
 8004de0:	0000042c 	.word	0x0000042c
 8004de4:	00000401 	.word	0x00000401
 8004de8:	00000403 	.word	0x00000403

08004dec <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004dec:	b5b0      	push	{r4, r5, r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004df6:	230f      	movs	r3, #15
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a16      	ldr	r2, [pc, #88]	; (8004e5c <move_window+0x70>)
 8004e02:	589b      	ldr	r3, [r3, r2]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d020      	beq.n	8004e4c <move_window+0x60>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004e0a:	250f      	movs	r5, #15
 8004e0c:	197c      	adds	r4, r7, r5
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7ff ff91 	bl	8004d38 <sync_window>
 8004e16:	0003      	movs	r3, r0
 8004e18:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004e1a:	197b      	adds	r3, r7, r5
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d114      	bne.n	8004e4c <move_window+0x60>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a0e      	ldr	r2, [pc, #56]	; (8004e60 <move_window+0x74>)
 8004e26:	5c98      	ldrb	r0, [r3, r2]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f7ff fcd7 	bl	80047e0 <disk_read>
 8004e32:	1e03      	subs	r3, r0, #0
 8004e34:	d006      	beq.n	8004e44 <move_window+0x58>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e36:	2301      	movs	r3, #1
 8004e38:	425b      	negs	r3, r3
 8004e3a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e3c:	230f      	movs	r3, #15
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	2201      	movs	r2, #1
 8004e42:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4905      	ldr	r1, [pc, #20]	; (8004e5c <move_window+0x70>)
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	505a      	str	r2, [r3, r1]
		}
	}
	return res;
 8004e4c:	230f      	movs	r3, #15
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	781b      	ldrb	r3, [r3, #0]
}
 8004e52:	0018      	movs	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b004      	add	sp, #16
 8004e58:	bdb0      	pop	{r4, r5, r7, pc}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	0000042c 	.word	0x0000042c
 8004e60:	00000401 	.word	0x00000401

08004e64 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004e64:	b5b0      	push	{r4, r5, r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e6c:	250f      	movs	r5, #15
 8004e6e:	197c      	adds	r4, r7, r5
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	0018      	movs	r0, r3
 8004e74:	f7ff ff60 	bl	8004d38 <sync_window>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8004e7c:	197b      	adds	r3, r7, r5
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d000      	beq.n	8004e86 <sync_fs+0x22>
 8004e84:	e0ae      	b.n	8004fe4 <sync_fs+0x180>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	5cd3      	ldrb	r3, [r2, r3]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d000      	beq.n	8004e94 <sync_fs+0x30>
 8004e92:	e099      	b.n	8004fc8 <sync_fs+0x164>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a57      	ldr	r2, [pc, #348]	; (8004ff4 <sync_fs+0x190>)
 8004e98:	5c9b      	ldrb	r3, [r3, r2]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d000      	beq.n	8004ea0 <sync_fs+0x3c>
 8004e9e:	e093      	b.n	8004fc8 <sync_fs+0x164>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a54      	ldr	r2, [pc, #336]	; (8004ff8 <sync_fs+0x194>)
 8004ea6:	5a9b      	ldrh	r3, [r3, r2]
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	2100      	movs	r1, #0
 8004eac:	f7ff fd2c 	bl	8004908 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	23ff      	movs	r3, #255	; 0xff
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	2155      	movs	r1, #85	; 0x55
 8004eb8:	54d1      	strb	r1, [r2, r3]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4f      	ldr	r2, [pc, #316]	; (8004ffc <sync_fs+0x198>)
 8004ebe:	21aa      	movs	r1, #170	; 0xaa
 8004ec0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2252      	movs	r2, #82	; 0x52
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2252      	movs	r2, #82	; 0x52
 8004ecc:	705a      	strb	r2, [r3, #1]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2261      	movs	r2, #97	; 0x61
 8004ed2:	709a      	strb	r2, [r3, #2]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2241      	movs	r2, #65	; 0x41
 8004ed8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	23f2      	movs	r3, #242	; 0xf2
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	2172      	movs	r1, #114	; 0x72
 8004ee2:	54d1      	strb	r1, [r2, r3]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	23e6      	movs	r3, #230	; 0xe6
 8004ee8:	33ff      	adds	r3, #255	; 0xff
 8004eea:	2172      	movs	r1, #114	; 0x72
 8004eec:	54d1      	strb	r1, [r2, r3]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	23f3      	movs	r3, #243	; 0xf3
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	2141      	movs	r1, #65	; 0x41
 8004ef6:	54d1      	strb	r1, [r2, r3]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	23e8      	movs	r3, #232	; 0xe8
 8004efc:	33ff      	adds	r3, #255	; 0xff
 8004efe:	2161      	movs	r1, #97	; 0x61
 8004f00:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	2382      	movs	r3, #130	; 0x82
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	58d3      	ldr	r3, [r2, r3]
 8004f0a:	b2d9      	uxtb	r1, r3
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	23f4      	movs	r3, #244	; 0xf4
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	54d1      	strb	r1, [r2, r3]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	2382      	movs	r3, #130	; 0x82
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	58d3      	ldr	r3, [r2, r3]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	0a1b      	lsrs	r3, r3, #8
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	b2d9      	uxtb	r1, r3
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	23ea      	movs	r3, #234	; 0xea
 8004f28:	33ff      	adds	r3, #255	; 0xff
 8004f2a:	54d1      	strb	r1, [r2, r3]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	2382      	movs	r3, #130	; 0x82
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	58d3      	ldr	r3, [r2, r3]
 8004f34:	0c1b      	lsrs	r3, r3, #16
 8004f36:	b2d9      	uxtb	r1, r3
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	23f5      	movs	r3, #245	; 0xf5
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	54d1      	strb	r1, [r2, r3]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	2382      	movs	r3, #130	; 0x82
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	58d3      	ldr	r3, [r2, r3]
 8004f48:	0e1b      	lsrs	r3, r3, #24
 8004f4a:	b2d9      	uxtb	r1, r3
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	23ec      	movs	r3, #236	; 0xec
 8004f50:	33ff      	adds	r3, #255	; 0xff
 8004f52:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <sync_fs+0x19c>)
 8004f58:	589b      	ldr	r3, [r3, r2]
 8004f5a:	b2d9      	uxtb	r1, r3
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	23f6      	movs	r3, #246	; 0xf6
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	54d1      	strb	r1, [r2, r3]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a26      	ldr	r2, [pc, #152]	; (8005000 <sync_fs+0x19c>)
 8004f68:	589b      	ldr	r3, [r3, r2]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	0a1b      	lsrs	r3, r3, #8
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	b2d9      	uxtb	r1, r3
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	23ee      	movs	r3, #238	; 0xee
 8004f76:	33ff      	adds	r3, #255	; 0xff
 8004f78:	54d1      	strb	r1, [r2, r3]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a20      	ldr	r2, [pc, #128]	; (8005000 <sync_fs+0x19c>)
 8004f7e:	589b      	ldr	r3, [r3, r2]
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	b2d9      	uxtb	r1, r3
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	23f7      	movs	r3, #247	; 0xf7
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	54d1      	strb	r1, [r2, r3]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a1c      	ldr	r2, [pc, #112]	; (8005000 <sync_fs+0x19c>)
 8004f90:	589b      	ldr	r3, [r3, r2]
 8004f92:	0e1b      	lsrs	r3, r3, #24
 8004f94:	b2d9      	uxtb	r1, r3
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	23f0      	movs	r3, #240	; 0xf0
 8004f9a:	33ff      	adds	r3, #255	; 0xff
 8004f9c:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a18      	ldr	r2, [pc, #96]	; (8005004 <sync_fs+0x1a0>)
 8004fa2:	589b      	ldr	r3, [r3, r2]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4917      	ldr	r1, [pc, #92]	; (8005008 <sync_fs+0x1a4>)
 8004faa:	505a      	str	r2, [r3, r1]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a17      	ldr	r2, [pc, #92]	; (800500c <sync_fs+0x1a8>)
 8004fb0:	5c98      	ldrb	r0, [r3, r2]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a14      	ldr	r2, [pc, #80]	; (8005008 <sync_fs+0x1a4>)
 8004fb8:	589a      	ldr	r2, [r3, r2]
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f7ff fc38 	bl	8004830 <disk_write>
			fs->fsi_flag = 0;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a0c      	ldr	r2, [pc, #48]	; (8004ff4 <sync_fs+0x190>)
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a10      	ldr	r2, [pc, #64]	; (800500c <sync_fs+0x1a8>)
 8004fcc:	5c9b      	ldrb	r3, [r3, r2]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f7ff fc54 	bl	8004880 <disk_ioctl>
 8004fd8:	1e03      	subs	r3, r0, #0
 8004fda:	d003      	beq.n	8004fe4 <sync_fs+0x180>
			res = FR_DISK_ERR;
 8004fdc:	230f      	movs	r3, #15
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8004fe4:	230f      	movs	r3, #15
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	781b      	ldrb	r3, [r3, #0]
}
 8004fea:	0018      	movs	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b004      	add	sp, #16
 8004ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	00000405 	.word	0x00000405
 8004ff8:	0000040a 	.word	0x0000040a
 8004ffc:	000001ff 	.word	0x000001ff
 8005000:	0000040c 	.word	0x0000040c
 8005004:	0000041c 	.word	0x0000041c
 8005008:	0000042c 	.word	0x0000042c
 800500c:	00000401 	.word	0x00000401

08005010 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	3b02      	subs	r3, #2
 800501e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <clust2sect+0x40>)
 8005024:	589b      	ldr	r3, [r3, r2]
 8005026:	3b02      	subs	r3, #2
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d301      	bcc.n	8005032 <clust2sect+0x22>
 800502e:	2300      	movs	r3, #0
 8005030:	e00a      	b.n	8005048 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a07      	ldr	r2, [pc, #28]	; (8005054 <clust2sect+0x44>)
 8005036:	5c9b      	ldrb	r3, [r3, r2]
 8005038:	001a      	movs	r2, r3
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	435a      	muls	r2, r3
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	2385      	movs	r3, #133	; 0x85
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	58cb      	ldr	r3, [r1, r3]
 8005046:	18d3      	adds	r3, r2, r3
}
 8005048:	0018      	movs	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	b002      	add	sp, #8
 800504e:	bd80      	pop	{r7, pc}
 8005050:	00000414 	.word	0x00000414
 8005054:	00000402 	.word	0x00000402

08005058 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d905      	bls.n	8005074 <get_fat+0x1c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a76      	ldr	r2, [pc, #472]	; (8005244 <get_fat+0x1ec>)
 800506c:	589b      	ldr	r3, [r3, r2]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d302      	bcc.n	800507a <get_fat+0x22>
		val = 1;	/* Internal error */
 8005074:	2301      	movs	r3, #1
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e0de      	b.n	8005238 <get_fat+0x1e0>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800507a:	2301      	movs	r3, #1
 800507c:	425b      	negs	r3, r3
 800507e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	5cd3      	ldrb	r3, [r2, r3]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d063      	beq.n	8005154 <get_fat+0xfc>
 800508c:	2b03      	cmp	r3, #3
 800508e:	d100      	bne.n	8005092 <get_fat+0x3a>
 8005090:	e090      	b.n	80051b4 <get_fat+0x15c>
 8005092:	2b01      	cmp	r3, #1
 8005094:	d000      	beq.n	8005098 <get_fat+0x40>
 8005096:	e0c5      	b.n	8005224 <get_fat+0x1cc>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	085b      	lsrs	r3, r3, #1
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	18d3      	adds	r3, r2, r3
 80050a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	2384      	movs	r3, #132	; 0x84
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	58d4      	ldr	r4, [r2, r3]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a65      	ldr	r2, [pc, #404]	; (8005248 <get_fat+0x1f0>)
 80050b2:	5a9b      	ldrh	r3, [r3, r2]
 80050b4:	0019      	movs	r1, r3
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7fb f82e 	bl	8000118 <__udivsi3>
 80050bc:	0003      	movs	r3, r0
 80050be:	18e2      	adds	r2, r4, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	0011      	movs	r1, r2
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7ff fe91 	bl	8004dec <move_window>
 80050ca:	1e03      	subs	r3, r0, #0
 80050cc:	d000      	beq.n	80050d0 <get_fat+0x78>
 80050ce:	e0ac      	b.n	800522a <get_fat+0x1d2>
			wc = fs->win.d8[bc++ % SS(fs)];
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	60fa      	str	r2, [r7, #12]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	495b      	ldr	r1, [pc, #364]	; (8005248 <get_fat+0x1f0>)
 80050da:	5a52      	ldrh	r2, [r2, r1]
 80050dc:	0011      	movs	r1, r2
 80050de:	0018      	movs	r0, r3
 80050e0:	f7fb f8a0 	bl	8000224 <__aeabi_uidivmod>
 80050e4:	000b      	movs	r3, r1
 80050e6:	001a      	movs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	5c9b      	ldrb	r3, [r3, r2]
 80050ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	2384      	movs	r3, #132	; 0x84
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	58d4      	ldr	r4, [r2, r3]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a53      	ldr	r2, [pc, #332]	; (8005248 <get_fat+0x1f0>)
 80050fa:	5a9b      	ldrh	r3, [r3, r2]
 80050fc:	0019      	movs	r1, r3
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7fb f80a 	bl	8000118 <__udivsi3>
 8005104:	0003      	movs	r3, r0
 8005106:	18e2      	adds	r2, r4, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	0011      	movs	r1, r2
 800510c:	0018      	movs	r0, r3
 800510e:	f7ff fe6d 	bl	8004dec <move_window>
 8005112:	1e03      	subs	r3, r0, #0
 8005114:	d000      	beq.n	8005118 <get_fat+0xc0>
 8005116:	e08a      	b.n	800522e <get_fat+0x1d6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a4b      	ldr	r2, [pc, #300]	; (8005248 <get_fat+0x1f0>)
 800511c:	5a9b      	ldrh	r3, [r3, r2]
 800511e:	001a      	movs	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	0011      	movs	r1, r2
 8005124:	0018      	movs	r0, r3
 8005126:	f7fb f87d 	bl	8000224 <__aeabi_uidivmod>
 800512a:	000b      	movs	r3, r1
 800512c:	001a      	movs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	5c9b      	ldrb	r3, [r3, r2]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	001a      	movs	r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4313      	orrs	r3, r2
 800513a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	4013      	ands	r3, r2
 8005142:	d002      	beq.n	800514a <get_fat+0xf2>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	091b      	lsrs	r3, r3, #4
 8005148:	e002      	b.n	8005150 <get_fat+0xf8>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	051b      	lsls	r3, r3, #20
 800514e:	0d1b      	lsrs	r3, r3, #20
 8005150:	617b      	str	r3, [r7, #20]
			break;
 8005152:	e071      	b.n	8005238 <get_fat+0x1e0>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	2384      	movs	r3, #132	; 0x84
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	58d4      	ldr	r4, [r2, r3]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a3a      	ldr	r2, [pc, #232]	; (8005248 <get_fat+0x1f0>)
 8005160:	5a9b      	ldrh	r3, [r3, r2]
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	0019      	movs	r1, r3
 8005168:	6838      	ldr	r0, [r7, #0]
 800516a:	f7fa ffd5 	bl	8000118 <__udivsi3>
 800516e:	0003      	movs	r3, r0
 8005170:	18e2      	adds	r2, r4, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0011      	movs	r1, r2
 8005176:	0018      	movs	r0, r3
 8005178:	f7ff fe38 	bl	8004dec <move_window>
 800517c:	1e03      	subs	r3, r0, #0
 800517e:	d158      	bne.n	8005232 <get_fat+0x1da>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	0058      	lsls	r0, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a30      	ldr	r2, [pc, #192]	; (8005248 <get_fat+0x1f0>)
 8005188:	5a9b      	ldrh	r3, [r3, r2]
 800518a:	0019      	movs	r1, r3
 800518c:	f7fb f84a 	bl	8000224 <__aeabi_uidivmod>
 8005190:	000b      	movs	r3, r1
 8005192:	001a      	movs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	189b      	adds	r3, r3, r2
 8005198:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	3301      	adds	r3, #1
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	b21a      	sxth	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	b21b      	sxth	r3, r3
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b21b      	sxth	r3, r3
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	617b      	str	r3, [r7, #20]
			break;
 80051b2:	e041      	b.n	8005238 <get_fat+0x1e0>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	2384      	movs	r3, #132	; 0x84
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	58d4      	ldr	r4, [r2, r3]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a22      	ldr	r2, [pc, #136]	; (8005248 <get_fat+0x1f0>)
 80051c0:	5a9b      	ldrh	r3, [r3, r2]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	0019      	movs	r1, r3
 80051c8:	6838      	ldr	r0, [r7, #0]
 80051ca:	f7fa ffa5 	bl	8000118 <__udivsi3>
 80051ce:	0003      	movs	r3, r0
 80051d0:	18e2      	adds	r2, r4, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	0011      	movs	r1, r2
 80051d6:	0018      	movs	r0, r3
 80051d8:	f7ff fe08 	bl	8004dec <move_window>
 80051dc:	1e03      	subs	r3, r0, #0
 80051de:	d12a      	bne.n	8005236 <get_fat+0x1de>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	0098      	lsls	r0, r3, #2
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a18      	ldr	r2, [pc, #96]	; (8005248 <get_fat+0x1f0>)
 80051e8:	5a9b      	ldrh	r3, [r3, r2]
 80051ea:	0019      	movs	r1, r3
 80051ec:	f7fb f81a 	bl	8000224 <__aeabi_uidivmod>
 80051f0:	000b      	movs	r3, r1
 80051f2:	001a      	movs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	3303      	adds	r3, #3
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	061a      	lsls	r2, r3, #24
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	3302      	adds	r3, #2
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	4313      	orrs	r3, r2
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	3201      	adds	r2, #1
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	0212      	lsls	r2, r2, #8
 8005214:	4313      	orrs	r3, r2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	4313      	orrs	r3, r2
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	091b      	lsrs	r3, r3, #4
 8005220:	617b      	str	r3, [r7, #20]
			break;
 8005222:	e009      	b.n	8005238 <get_fat+0x1e0>

		default:
			val = 1;	/* Internal error */
 8005224:	2301      	movs	r3, #1
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e006      	b.n	8005238 <get_fat+0x1e0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	e004      	b.n	8005238 <get_fat+0x1e0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	e002      	b.n	8005238 <get_fat+0x1e0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	e000      	b.n	8005238 <get_fat+0x1e0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005236:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8005238:	697b      	ldr	r3, [r7, #20]
}
 800523a:	0018      	movs	r0, r3
 800523c:	46bd      	mov	sp, r7
 800523e:	b007      	add	sp, #28
 8005240:	bd90      	pop	{r4, r7, pc}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	00000414 	.word	0x00000414
 8005248:	0000040a 	.word	0x0000040a

0800524c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800524c:	b5b0      	push	{r4, r5, r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d905      	bls.n	800526a <put_fat+0x1e>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4aa9      	ldr	r2, [pc, #676]	; (8005508 <put_fat+0x2bc>)
 8005262:	589b      	ldr	r3, [r3, r2]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	429a      	cmp	r2, r3
 8005268:	d304      	bcc.n	8005274 <put_fat+0x28>
		res = FR_INT_ERR;
 800526a:	231f      	movs	r3, #31
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	2202      	movs	r2, #2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e141      	b.n	80054f8 <put_fat+0x2ac>

	} else {
		switch (fs->fs_type) {
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	5cd3      	ldrb	r3, [r2, r3]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d100      	bne.n	8005282 <put_fat+0x36>
 8005280:	e097      	b.n	80053b2 <put_fat+0x166>
 8005282:	2b03      	cmp	r3, #3
 8005284:	d100      	bne.n	8005288 <put_fat+0x3c>
 8005286:	e0cf      	b.n	8005428 <put_fat+0x1dc>
 8005288:	2b01      	cmp	r3, #1
 800528a:	d000      	beq.n	800528e <put_fat+0x42>
 800528c:	e128      	b.n	80054e0 <put_fat+0x294>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	18d3      	adds	r3, r2, r3
 800529a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	2384      	movs	r3, #132	; 0x84
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	58d4      	ldr	r4, [r2, r3]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a99      	ldr	r2, [pc, #612]	; (800550c <put_fat+0x2c0>)
 80052a8:	5a9b      	ldrh	r3, [r3, r2]
 80052aa:	0019      	movs	r1, r3
 80052ac:	6978      	ldr	r0, [r7, #20]
 80052ae:	f7fa ff33 	bl	8000118 <__udivsi3>
 80052b2:	0003      	movs	r3, r0
 80052b4:	18e2      	adds	r2, r4, r3
 80052b6:	251f      	movs	r5, #31
 80052b8:	197c      	adds	r4, r7, r5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	0011      	movs	r1, r2
 80052be:	0018      	movs	r0, r3
 80052c0:	f7ff fd94 	bl	8004dec <move_window>
 80052c4:	0003      	movs	r3, r0
 80052c6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80052c8:	197b      	adds	r3, r7, r5
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d000      	beq.n	80052d2 <put_fat+0x86>
 80052d0:	e10b      	b.n	80054ea <put_fat+0x29e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	617a      	str	r2, [r7, #20]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	498c      	ldr	r1, [pc, #560]	; (800550c <put_fat+0x2c0>)
 80052dc:	5a52      	ldrh	r2, [r2, r1]
 80052de:	0011      	movs	r1, r2
 80052e0:	0018      	movs	r0, r3
 80052e2:	f7fa ff9f 	bl	8000224 <__aeabi_uidivmod>
 80052e6:	000b      	movs	r3, r1
 80052e8:	001a      	movs	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	189b      	adds	r3, r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2201      	movs	r2, #1
 80052f4:	4013      	ands	r3, r2
 80052f6:	d00d      	beq.n	8005314 <put_fat+0xc8>
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	b25b      	sxtb	r3, r3
 80052fe:	220f      	movs	r2, #15
 8005300:	4013      	ands	r3, r2
 8005302:	b25a      	sxtb	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	b25b      	sxtb	r3, r3
 800530c:	4313      	orrs	r3, r2
 800530e:	b25b      	sxtb	r3, r3
 8005310:	b2db      	uxtb	r3, r3
 8005312:	e001      	b.n	8005318 <put_fat+0xcc>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a7c      	ldr	r2, [pc, #496]	; (8005510 <put_fat+0x2c4>)
 8005320:	2101      	movs	r1, #1
 8005322:	5499      	strb	r1, [r3, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	2384      	movs	r3, #132	; 0x84
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	58d4      	ldr	r4, [r2, r3]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a77      	ldr	r2, [pc, #476]	; (800550c <put_fat+0x2c0>)
 8005330:	5a9b      	ldrh	r3, [r3, r2]
 8005332:	0019      	movs	r1, r3
 8005334:	6978      	ldr	r0, [r7, #20]
 8005336:	f7fa feef 	bl	8000118 <__udivsi3>
 800533a:	0003      	movs	r3, r0
 800533c:	18e2      	adds	r2, r4, r3
 800533e:	251f      	movs	r5, #31
 8005340:	197c      	adds	r4, r7, r5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	0011      	movs	r1, r2
 8005346:	0018      	movs	r0, r3
 8005348:	f7ff fd50 	bl	8004dec <move_window>
 800534c:	0003      	movs	r3, r0
 800534e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005350:	197b      	adds	r3, r7, r5
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d000      	beq.n	800535a <put_fat+0x10e>
 8005358:	e0c9      	b.n	80054ee <put_fat+0x2a2>
			p = &fs->win.d8[bc % SS(fs)];
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4a6b      	ldr	r2, [pc, #428]	; (800550c <put_fat+0x2c0>)
 800535e:	5a9b      	ldrh	r3, [r3, r2]
 8005360:	001a      	movs	r2, r3
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	0011      	movs	r1, r2
 8005366:	0018      	movs	r0, r3
 8005368:	f7fa ff5c 	bl	8000224 <__aeabi_uidivmod>
 800536c:	000b      	movs	r3, r1
 800536e:	001a      	movs	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	189b      	adds	r3, r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2201      	movs	r2, #1
 800537a:	4013      	ands	r3, r2
 800537c:	d003      	beq.n	8005386 <put_fat+0x13a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	b2db      	uxtb	r3, r3
 8005384:	e00e      	b.n	80053a4 <put_fat+0x158>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	b25b      	sxtb	r3, r3
 800538c:	220f      	movs	r2, #15
 800538e:	4393      	bics	r3, r2
 8005390:	b25a      	sxtb	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0a1b      	lsrs	r3, r3, #8
 8005396:	b25b      	sxtb	r3, r3
 8005398:	210f      	movs	r1, #15
 800539a:	400b      	ands	r3, r1
 800539c:	b25b      	sxtb	r3, r3
 800539e:	4313      	orrs	r3, r2
 80053a0:	b25b      	sxtb	r3, r3
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4a59      	ldr	r2, [pc, #356]	; (8005510 <put_fat+0x2c4>)
 80053ac:	2101      	movs	r1, #1
 80053ae:	5499      	strb	r1, [r3, r2]
			break;
 80053b0:	e0a2      	b.n	80054f8 <put_fat+0x2ac>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	2384      	movs	r3, #132	; 0x84
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	58d4      	ldr	r4, [r2, r3]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4a53      	ldr	r2, [pc, #332]	; (800550c <put_fat+0x2c0>)
 80053be:	5a9b      	ldrh	r3, [r3, r2]
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	0019      	movs	r1, r3
 80053c6:	68b8      	ldr	r0, [r7, #8]
 80053c8:	f7fa fea6 	bl	8000118 <__udivsi3>
 80053cc:	0003      	movs	r3, r0
 80053ce:	18e2      	adds	r2, r4, r3
 80053d0:	251f      	movs	r5, #31
 80053d2:	197c      	adds	r4, r7, r5
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	0011      	movs	r1, r2
 80053d8:	0018      	movs	r0, r3
 80053da:	f7ff fd07 	bl	8004dec <move_window>
 80053de:	0003      	movs	r3, r0
 80053e0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80053e2:	197b      	adds	r3, r7, r5
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d000      	beq.n	80053ec <put_fat+0x1a0>
 80053ea:	e082      	b.n	80054f2 <put_fat+0x2a6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	0058      	lsls	r0, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4a46      	ldr	r2, [pc, #280]	; (800550c <put_fat+0x2c0>)
 80053f4:	5a9b      	ldrh	r3, [r3, r2]
 80053f6:	0019      	movs	r1, r3
 80053f8:	f7fa ff14 	bl	8000224 <__aeabi_uidivmod>
 80053fc:	000b      	movs	r3, r1
 80053fe:	001a      	movs	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	189b      	adds	r3, r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	b29b      	uxth	r3, r3
 8005412:	0a1b      	lsrs	r3, r3, #8
 8005414:	b29a      	uxth	r2, r3
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	3301      	adds	r3, #1
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a3b      	ldr	r2, [pc, #236]	; (8005510 <put_fat+0x2c4>)
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]
			break;
 8005426:	e067      	b.n	80054f8 <put_fat+0x2ac>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	2384      	movs	r3, #132	; 0x84
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	58d4      	ldr	r4, [r2, r3]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a36      	ldr	r2, [pc, #216]	; (800550c <put_fat+0x2c0>)
 8005434:	5a9b      	ldrh	r3, [r3, r2]
 8005436:	089b      	lsrs	r3, r3, #2
 8005438:	b29b      	uxth	r3, r3
 800543a:	0019      	movs	r1, r3
 800543c:	68b8      	ldr	r0, [r7, #8]
 800543e:	f7fa fe6b 	bl	8000118 <__udivsi3>
 8005442:	0003      	movs	r3, r0
 8005444:	18e2      	adds	r2, r4, r3
 8005446:	251f      	movs	r5, #31
 8005448:	197c      	adds	r4, r7, r5
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	0011      	movs	r1, r2
 800544e:	0018      	movs	r0, r3
 8005450:	f7ff fccc 	bl	8004dec <move_window>
 8005454:	0003      	movs	r3, r0
 8005456:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005458:	197b      	adds	r3, r7, r5
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d14a      	bne.n	80054f6 <put_fat+0x2aa>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	0098      	lsls	r0, r3, #2
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a29      	ldr	r2, [pc, #164]	; (800550c <put_fat+0x2c0>)
 8005468:	5a9b      	ldrh	r3, [r3, r2]
 800546a:	0019      	movs	r1, r3
 800546c:	f7fa feda 	bl	8000224 <__aeabi_uidivmod>
 8005470:	000b      	movs	r3, r1
 8005472:	001a      	movs	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	189b      	adds	r3, r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	3303      	adds	r3, #3
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	061a      	lsls	r2, r3, #24
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	3302      	adds	r3, #2
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	4313      	orrs	r3, r2
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	3201      	adds	r2, #1
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	0212      	lsls	r2, r2, #8
 8005494:	4313      	orrs	r3, r2
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	7812      	ldrb	r2, [r2, #0]
 800549a:	4313      	orrs	r3, r2
 800549c:	0f1b      	lsrs	r3, r3, #28
 800549e:	071b      	lsls	r3, r3, #28
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	3301      	adds	r3, #1
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	0c1a      	lsrs	r2, r3, #16
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	3302      	adds	r3, #2
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	0e1a      	lsrs	r2, r3, #24
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	3303      	adds	r3, #3
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <put_fat+0x2c4>)
 80054da:	2101      	movs	r1, #1
 80054dc:	5499      	strb	r1, [r3, r2]
			break;
 80054de:	e00b      	b.n	80054f8 <put_fat+0x2ac>

		default :
			res = FR_INT_ERR;
 80054e0:	231f      	movs	r3, #31
 80054e2:	18fb      	adds	r3, r7, r3
 80054e4:	2202      	movs	r2, #2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	e006      	b.n	80054f8 <put_fat+0x2ac>
			if (res != FR_OK) break;
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	e004      	b.n	80054f8 <put_fat+0x2ac>
			if (res != FR_OK) break;
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	e002      	b.n	80054f8 <put_fat+0x2ac>
			if (res != FR_OK) break;
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	e000      	b.n	80054f8 <put_fat+0x2ac>
			if (res != FR_OK) break;
 80054f6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 80054f8:	231f      	movs	r3, #31
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	781b      	ldrb	r3, [r3, #0]
}
 80054fe:	0018      	movs	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	b008      	add	sp, #32
 8005504:	bdb0      	pop	{r4, r5, r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	00000414 	.word	0x00000414
 800550c:	0000040a 	.word	0x0000040a
 8005510:	00000404 	.word	0x00000404

08005514 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005514:	b5b0      	push	{r4, r5, r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d905      	bls.n	8005530 <remove_chain+0x1c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a31      	ldr	r2, [pc, #196]	; (80055ec <remove_chain+0xd8>)
 8005528:	589b      	ldr	r3, [r3, r2]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d304      	bcc.n	800553a <remove_chain+0x26>
		res = FR_INT_ERR;
 8005530:	230f      	movs	r3, #15
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	2202      	movs	r2, #2
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e051      	b.n	80055de <remove_chain+0xca>

	} else {
		res = FR_OK;
 800553a:	230f      	movs	r3, #15
 800553c:	18fb      	adds	r3, r7, r3
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005542:	e042      	b.n	80055ca <remove_chain+0xb6>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	0011      	movs	r1, r2
 800554a:	0018      	movs	r0, r3
 800554c:	f7ff fd84 	bl	8005058 <get_fat>
 8005550:	0003      	movs	r3, r0
 8005552:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d03e      	beq.n	80055d8 <remove_chain+0xc4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d104      	bne.n	800556a <remove_chain+0x56>
 8005560:	230f      	movs	r3, #15
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	2202      	movs	r2, #2
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e039      	b.n	80055de <remove_chain+0xca>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3301      	adds	r3, #1
 800556e:	d104      	bne.n	800557a <remove_chain+0x66>
 8005570:	230f      	movs	r3, #15
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	e031      	b.n	80055de <remove_chain+0xca>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800557a:	250f      	movs	r5, #15
 800557c:	197c      	adds	r4, r7, r5
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	0018      	movs	r0, r3
 8005586:	f7ff fe61 	bl	800524c <put_fat>
 800558a:	0003      	movs	r3, r0
 800558c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800558e:	197b      	adds	r3, r7, r5
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d122      	bne.n	80055dc <remove_chain+0xc8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	2382      	movs	r3, #130	; 0x82
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	58d3      	ldr	r3, [r2, r3]
 800559e:	3301      	adds	r3, #1
 80055a0:	d011      	beq.n	80055c6 <remove_chain+0xb2>
				fs->free_clust++;
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	2382      	movs	r3, #130	; 0x82
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	58d3      	ldr	r3, [r2, r3]
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	2382      	movs	r3, #130	; 0x82
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a0e      	ldr	r2, [pc, #56]	; (80055f0 <remove_chain+0xdc>)
 80055b8:	5c9b      	ldrb	r3, [r3, r2]
 80055ba:	2201      	movs	r2, #1
 80055bc:	4313      	orrs	r3, r2
 80055be:	b2d9      	uxtb	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a0b      	ldr	r2, [pc, #44]	; (80055f0 <remove_chain+0xdc>)
 80055c4:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a07      	ldr	r2, [pc, #28]	; (80055ec <remove_chain+0xd8>)
 80055ce:	589b      	ldr	r3, [r3, r2]
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d3b6      	bcc.n	8005544 <remove_chain+0x30>
 80055d6:	e002      	b.n	80055de <remove_chain+0xca>
			if (nxt == 0) break;				/* Empty cluster? */
 80055d8:	46c0      	nop			; (mov r8, r8)
 80055da:	e000      	b.n	80055de <remove_chain+0xca>
			if (res != FR_OK) break;
 80055dc:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 80055de:	230f      	movs	r3, #15
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	781b      	ldrb	r3, [r3, #0]
}
 80055e4:	0018      	movs	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	b004      	add	sp, #16
 80055ea:	bdb0      	pop	{r4, r5, r7, pc}
 80055ec:	00000414 	.word	0x00000414
 80055f0:	00000405 	.word	0x00000405

080055f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80055f4:	b5b0      	push	{r4, r5, r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10f      	bne.n	8005624 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a52      	ldr	r2, [pc, #328]	; (8005750 <create_chain+0x15c>)
 8005608:	589b      	ldr	r3, [r3, r2]
 800560a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <create_chain+0x2a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a4f      	ldr	r2, [pc, #316]	; (8005754 <create_chain+0x160>)
 8005616:	589b      	ldr	r3, [r3, r2]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	429a      	cmp	r2, r3
 800561c:	d31e      	bcc.n	800565c <create_chain+0x68>
 800561e:	2301      	movs	r3, #1
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e01b      	b.n	800565c <create_chain+0x68>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	0011      	movs	r1, r2
 800562a:	0018      	movs	r0, r3
 800562c:	f7ff fd14 	bl	8005058 <get_fat>
 8005630:	0003      	movs	r3, r0
 8005632:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d801      	bhi.n	800563e <create_chain+0x4a>
 800563a:	2301      	movs	r3, #1
 800563c:	e083      	b.n	8005746 <create_chain+0x152>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	3301      	adds	r3, #1
 8005642:	d101      	bne.n	8005648 <create_chain+0x54>
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	e07e      	b.n	8005746 <create_chain+0x152>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a42      	ldr	r2, [pc, #264]	; (8005754 <create_chain+0x160>)
 800564c:	589b      	ldr	r3, [r3, r2]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	429a      	cmp	r2, r3
 8005652:	d201      	bcs.n	8005658 <create_chain+0x64>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	e076      	b.n	8005746 <create_chain+0x152>
		scl = clst;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	3301      	adds	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a3a      	ldr	r2, [pc, #232]	; (8005754 <create_chain+0x160>)
 800566a:	589b      	ldr	r3, [r3, r2]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	429a      	cmp	r2, r3
 8005670:	d307      	bcc.n	8005682 <create_chain+0x8e>
			ncl = 2;
 8005672:	2302      	movs	r3, #2
 8005674:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	429a      	cmp	r2, r3
 800567c:	d901      	bls.n	8005682 <create_chain+0x8e>
 800567e:	2300      	movs	r3, #0
 8005680:	e061      	b.n	8005746 <create_chain+0x152>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	0011      	movs	r1, r2
 8005688:	0018      	movs	r0, r3
 800568a:	f7ff fce5 	bl	8005058 <get_fat>
 800568e:	0003      	movs	r3, r0
 8005690:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00d      	beq.n	80056b4 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	3301      	adds	r3, #1
 800569c:	d002      	beq.n	80056a4 <create_chain+0xb0>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <create_chain+0xb4>
			return cs;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	e04e      	b.n	8005746 <create_chain+0x152>
		if (ncl == scl) return 0;		/* No free cluster */
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d1d7      	bne.n	8005660 <create_chain+0x6c>
 80056b0:	2300      	movs	r3, #0
 80056b2:	e048      	b.n	8005746 <create_chain+0x152>
		if (cs == 0) break;				/* Found a free cluster */
 80056b4:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80056b6:	250f      	movs	r5, #15
 80056b8:	197c      	adds	r4, r7, r5
 80056ba:	4a27      	ldr	r2, [pc, #156]	; (8005758 <create_chain+0x164>)
 80056bc:	6979      	ldr	r1, [r7, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	0018      	movs	r0, r3
 80056c2:	f7ff fdc3 	bl	800524c <put_fat>
 80056c6:	0003      	movs	r3, r0
 80056c8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 80056ca:	197b      	adds	r3, r7, r5
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10c      	bne.n	80056ec <create_chain+0xf8>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d009      	beq.n	80056ec <create_chain+0xf8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80056d8:	230f      	movs	r3, #15
 80056da:	18fc      	adds	r4, r7, r3
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0018      	movs	r0, r3
 80056e4:	f7ff fdb2 	bl	800524c <put_fat>
 80056e8:	0003      	movs	r3, r0
 80056ea:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 80056ec:	230f      	movs	r3, #15
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d11c      	bne.n	8005730 <create_chain+0x13c>
		fs->last_clust = ncl;			/* Update FSINFO */
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4915      	ldr	r1, [pc, #84]	; (8005750 <create_chain+0x15c>)
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	505a      	str	r2, [r3, r1]
		if (fs->free_clust != 0xFFFFFFFF) {
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	2382      	movs	r3, #130	; 0x82
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	58d3      	ldr	r3, [r2, r3]
 8005706:	3301      	adds	r3, #1
 8005708:	d01c      	beq.n	8005744 <create_chain+0x150>
			fs->free_clust--;
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	2382      	movs	r3, #130	; 0x82
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	58d3      	ldr	r3, [r2, r3]
 8005712:	1e59      	subs	r1, r3, #1
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	2382      	movs	r3, #130	; 0x82
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a0f      	ldr	r2, [pc, #60]	; (800575c <create_chain+0x168>)
 8005720:	5c9b      	ldrb	r3, [r3, r2]
 8005722:	2201      	movs	r2, #1
 8005724:	4313      	orrs	r3, r2
 8005726:	b2d9      	uxtb	r1, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a0c      	ldr	r2, [pc, #48]	; (800575c <create_chain+0x168>)
 800572c:	5499      	strb	r1, [r3, r2]
 800572e:	e009      	b.n	8005744 <create_chain+0x150>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005730:	230f      	movs	r3, #15
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d102      	bne.n	8005740 <create_chain+0x14c>
 800573a:	2301      	movs	r3, #1
 800573c:	425b      	negs	r3, r3
 800573e:	e000      	b.n	8005742 <create_chain+0x14e>
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005744:	697b      	ldr	r3, [r7, #20]
}
 8005746:	0018      	movs	r0, r3
 8005748:	46bd      	mov	sp, r7
 800574a:	b006      	add	sp, #24
 800574c:	bdb0      	pop	{r4, r5, r7, pc}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	0000040c 	.word	0x0000040c
 8005754:	00000414 	.word	0x00000414
 8005758:	0fffffff 	.word	0x0fffffff
 800575c:	00000405 	.word	0x00000405

08005760 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1c      	ldr	r2, [pc, #112]	; (80057e0 <clmt_clust+0x80>)
 800576e:	589b      	ldr	r3, [r3, r2]
 8005770:	3304      	adds	r3, #4
 8005772:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	2380      	movs	r3, #128	; 0x80
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	58d3      	ldr	r3, [r2, r3]
 800577c:	4a19      	ldr	r2, [pc, #100]	; (80057e4 <clmt_clust+0x84>)
 800577e:	5a9b      	ldrh	r3, [r3, r2]
 8005780:	0019      	movs	r1, r3
 8005782:	6838      	ldr	r0, [r7, #0]
 8005784:	f7fa fcc8 	bl	8000118 <__udivsi3>
 8005788:	0003      	movs	r3, r0
 800578a:	0018      	movs	r0, r3
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	2380      	movs	r3, #128	; 0x80
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	58d3      	ldr	r3, [r2, r3]
 8005794:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <clmt_clust+0x88>)
 8005796:	5c9b      	ldrb	r3, [r3, r2]
 8005798:	0019      	movs	r1, r3
 800579a:	f7fa fcbd 	bl	8000118 <__udivsi3>
 800579e:	0003      	movs	r3, r0
 80057a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1d1a      	adds	r2, r3, #4
 80057a6:	613a      	str	r2, [r7, #16]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <clmt_clust+0x56>
 80057b2:	2300      	movs	r3, #0
 80057b4:	e010      	b.n	80057d8 <clmt_clust+0x78>
		if (cl < ncl) break;	/* In this fragment? */
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d307      	bcc.n	80057ce <clmt_clust+0x6e>
		cl -= ncl; tbl++;		/* Next fragment */
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	3304      	adds	r3, #4
 80057ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80057cc:	e7e9      	b.n	80057a2 <clmt_clust+0x42>
		if (cl < ncl) break;	/* In this fragment? */
 80057ce:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	18d3      	adds	r3, r2, r3
}
 80057d8:	0018      	movs	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	b006      	add	sp, #24
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	00000424 	.word	0x00000424
 80057e4:	0000040a 	.word	0x0000040a
 80057e8:	00000402 	.word	0x00000402

080057ec <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80057ec:	b590      	push	{r4, r7, lr}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	b299      	uxth	r1, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a5e      	ldr	r2, [pc, #376]	; (8005978 <dir_sdi+0x18c>)
 80057fe:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	2381      	movs	r3, #129	; 0x81
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	58d3      	ldr	r3, [r2, r3]
 8005808:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d008      	beq.n	8005822 <dir_sdi+0x36>
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	2380      	movs	r3, #128	; 0x80
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	58d3      	ldr	r3, [r2, r3]
 8005818:	4a58      	ldr	r2, [pc, #352]	; (800597c <dir_sdi+0x190>)
 800581a:	589b      	ldr	r3, [r3, r2]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	429a      	cmp	r2, r3
 8005820:	d301      	bcc.n	8005826 <dir_sdi+0x3a>
		return FR_INT_ERR;
 8005822:	2302      	movs	r3, #2
 8005824:	e0a4      	b.n	8005970 <dir_sdi+0x184>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10f      	bne.n	800584c <dir_sdi+0x60>
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	58d2      	ldr	r2, [r2, r3]
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	5cd3      	ldrb	r3, [r2, r3]
 800583a:	2b03      	cmp	r3, #3
 800583c:	d106      	bne.n	800584c <dir_sdi+0x60>
		clst = dp->fs->dirbase;
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	58d3      	ldr	r3, [r2, r3]
 8005846:	4a4e      	ldr	r2, [pc, #312]	; (8005980 <dir_sdi+0x194>)
 8005848:	589b      	ldr	r3, [r3, r2]
 800584a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d114      	bne.n	800587c <dir_sdi+0x90>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	58d2      	ldr	r2, [r2, r3]
 800585a:	2381      	movs	r3, #129	; 0x81
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	5ad3      	ldrh	r3, [r2, r3]
 8005860:	001a      	movs	r2, r3
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	4293      	cmp	r3, r2
 8005866:	d301      	bcc.n	800586c <dir_sdi+0x80>
			return FR_INT_ERR;
 8005868:	2302      	movs	r3, #2
 800586a:	e081      	b.n	8005970 <dir_sdi+0x184>
		sect = dp->fs->dirbase;
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	2380      	movs	r3, #128	; 0x80
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	58d3      	ldr	r3, [r2, r3]
 8005874:	4a42      	ldr	r2, [pc, #264]	; (8005980 <dir_sdi+0x194>)
 8005876:	589b      	ldr	r3, [r3, r2]
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	e042      	b.n	8005902 <dir_sdi+0x116>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	2380      	movs	r3, #128	; 0x80
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	58d3      	ldr	r3, [r2, r3]
 8005884:	4a3f      	ldr	r2, [pc, #252]	; (8005984 <dir_sdi+0x198>)
 8005886:	5a9b      	ldrh	r3, [r3, r2]
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	b29b      	uxth	r3, r3
 800588c:	0019      	movs	r1, r3
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	58d3      	ldr	r3, [r2, r3]
 8005896:	4a3c      	ldr	r2, [pc, #240]	; (8005988 <dir_sdi+0x19c>)
 8005898:	5c9b      	ldrb	r3, [r3, r2]
 800589a:	434b      	muls	r3, r1
 800589c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800589e:	e021      	b.n	80058e4 <dir_sdi+0xf8>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	2380      	movs	r3, #128	; 0x80
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	58d3      	ldr	r3, [r2, r3]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7ff fbd3 	bl	8005058 <get_fat>
 80058b2:	0003      	movs	r3, r0
 80058b4:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	3301      	adds	r3, #1
 80058ba:	d101      	bne.n	80058c0 <dir_sdi+0xd4>
 80058bc:	2301      	movs	r3, #1
 80058be:	e057      	b.n	8005970 <dir_sdi+0x184>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d908      	bls.n	80058d8 <dir_sdi+0xec>
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	58d3      	ldr	r3, [r2, r3]
 80058ce:	4a2b      	ldr	r2, [pc, #172]	; (800597c <dir_sdi+0x190>)
 80058d0:	589b      	ldr	r3, [r3, r2]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d301      	bcc.n	80058dc <dir_sdi+0xf0>
				return FR_INT_ERR;
 80058d8:	2302      	movs	r3, #2
 80058da:	e049      	b.n	8005970 <dir_sdi+0x184>
			idx -= ic;
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d2d9      	bcs.n	80058a0 <dir_sdi+0xb4>
		}
		sect = clust2sect(dp->fs, clst);
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	2380      	movs	r3, #128	; 0x80
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	58d3      	ldr	r3, [r2, r3]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	0011      	movs	r1, r2
 80058f8:	0018      	movs	r0, r3
 80058fa:	f7ff fb89 	bl	8005010 <clust2sect>
 80058fe:	0003      	movs	r3, r0
 8005900:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4921      	ldr	r1, [pc, #132]	; (800598c <dir_sdi+0x1a0>)
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	505a      	str	r2, [r3, r1]
	if (!sect) return FR_INT_ERR;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <dir_sdi+0x128>
 8005910:	2302      	movs	r3, #2
 8005912:	e02d      	b.n	8005970 <dir_sdi+0x184>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	2380      	movs	r3, #128	; 0x80
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	58d3      	ldr	r3, [r2, r3]
 800591c:	4a19      	ldr	r2, [pc, #100]	; (8005984 <dir_sdi+0x198>)
 800591e:	5a9b      	ldrh	r3, [r3, r2]
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	b29b      	uxth	r3, r3
 8005924:	0019      	movs	r1, r3
 8005926:	6838      	ldr	r0, [r7, #0]
 8005928:	f7fa fbf6 	bl	8000118 <__udivsi3>
 800592c:	0003      	movs	r3, r0
 800592e:	001a      	movs	r2, r3
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	18d1      	adds	r1, r2, r3
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	2382      	movs	r3, #130	; 0x82
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	2380      	movs	r3, #128	; 0x80
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	58d3      	ldr	r3, [r2, r3]
 8005944:	001c      	movs	r4, r3
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	58d3      	ldr	r3, [r2, r3]
 800594e:	4a0d      	ldr	r2, [pc, #52]	; (8005984 <dir_sdi+0x198>)
 8005950:	5a9b      	ldrh	r3, [r3, r2]
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	b29b      	uxth	r3, r3
 8005956:	001a      	movs	r2, r3
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	0011      	movs	r1, r2
 800595c:	0018      	movs	r0, r3
 800595e:	f7fa fc61 	bl	8000224 <__aeabi_uidivmod>
 8005962:	000b      	movs	r3, r1
 8005964:	015b      	lsls	r3, r3, #5
 8005966:	18e2      	adds	r2, r4, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4904      	ldr	r1, [pc, #16]	; (800597c <dir_sdi+0x190>)
 800596c:	505a      	str	r2, [r3, r1]

	return FR_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	0018      	movs	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	b007      	add	sp, #28
 8005976:	bd90      	pop	{r4, r7, pc}
 8005978:	00000406 	.word	0x00000406
 800597c:	00000414 	.word	0x00000414
 8005980:	00000424 	.word	0x00000424
 8005984:	0000040a 	.word	0x0000040a
 8005988:	00000402 	.word	0x00000402
 800598c:	0000040c 	.word	0x0000040c

08005990 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a95      	ldr	r2, [pc, #596]	; (8005bf4 <dir_next+0x264>)
 800599e:	5a9b      	ldrh	r3, [r3, r2]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	0c1b      	lsrs	r3, r3, #16
 80059aa:	d005      	beq.n	80059b8 <dir_next+0x28>
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	2382      	movs	r3, #130	; 0x82
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	58d3      	ldr	r3, [r2, r3]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <dir_next+0x2c>
		return FR_NO_FILE;
 80059b8:	2304      	movs	r3, #4
 80059ba:	e117      	b.n	8005bec <dir_next+0x25c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	2380      	movs	r3, #128	; 0x80
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	58d3      	ldr	r3, [r2, r3]
 80059c4:	4a8c      	ldr	r2, [pc, #560]	; (8005bf8 <dir_next+0x268>)
 80059c6:	5a9b      	ldrh	r3, [r3, r2]
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	001a      	movs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	0011      	movs	r1, r2
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7fa fc26 	bl	8000224 <__aeabi_uidivmod>
 80059d8:	1e0b      	subs	r3, r1, #0
 80059da:	d000      	beq.n	80059de <dir_next+0x4e>
 80059dc:	e0e7      	b.n	8005bae <dir_next+0x21e>
		dp->sect++;					/* Next sector */
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	2382      	movs	r3, #130	; 0x82
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	58d3      	ldr	r3, [r2, r3]
 80059e6:	1c59      	adds	r1, r3, #1
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	2382      	movs	r3, #130	; 0x82
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a82      	ldr	r2, [pc, #520]	; (8005bfc <dir_next+0x26c>)
 80059f4:	589b      	ldr	r3, [r3, r2]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10d      	bne.n	8005a16 <dir_next+0x86>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	58d2      	ldr	r2, [r2, r3]
 8005a02:	2381      	movs	r3, #129	; 0x81
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	5ad3      	ldrh	r3, [r2, r3]
 8005a08:	001a      	movs	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d200      	bcs.n	8005a12 <dir_next+0x82>
 8005a10:	e0cd      	b.n	8005bae <dir_next+0x21e>
				return FR_NO_FILE;
 8005a12:	2304      	movs	r3, #4
 8005a14:	e0ea      	b.n	8005bec <dir_next+0x25c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	2380      	movs	r3, #128	; 0x80
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	58d3      	ldr	r3, [r2, r3]
 8005a1e:	4a76      	ldr	r2, [pc, #472]	; (8005bf8 <dir_next+0x268>)
 8005a20:	5a9b      	ldrh	r3, [r3, r2]
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	0019      	movs	r1, r3
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7fa fb75 	bl	8000118 <__udivsi3>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	0019      	movs	r1, r3
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	58d3      	ldr	r3, [r2, r3]
 8005a3a:	4a71      	ldr	r2, [pc, #452]	; (8005c00 <dir_next+0x270>)
 8005a3c:	5c9b      	ldrb	r3, [r3, r2]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	400b      	ands	r3, r1
 8005a42:	d000      	beq.n	8005a46 <dir_next+0xb6>
 8005a44:	e0b3      	b.n	8005bae <dir_next+0x21e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	58d0      	ldr	r0, [r2, r3]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a6a      	ldr	r2, [pc, #424]	; (8005bfc <dir_next+0x26c>)
 8005a52:	589b      	ldr	r3, [r3, r2]
 8005a54:	0019      	movs	r1, r3
 8005a56:	f7ff faff 	bl	8005058 <get_fat>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d801      	bhi.n	8005a68 <dir_next+0xd8>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e0c1      	b.n	8005bec <dir_next+0x25c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <dir_next+0xe2>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e0bc      	b.n	8005bec <dir_next+0x25c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	2380      	movs	r3, #128	; 0x80
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	58d3      	ldr	r3, [r2, r3]
 8005a7a:	4a62      	ldr	r2, [pc, #392]	; (8005c04 <dir_next+0x274>)
 8005a7c:	589b      	ldr	r3, [r3, r2]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d200      	bcs.n	8005a86 <dir_next+0xf6>
 8005a84:	e081      	b.n	8005b8a <dir_next+0x1fa>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <dir_next+0x100>
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	e0ad      	b.n	8005bec <dir_next+0x25c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	2380      	movs	r3, #128	; 0x80
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	58d0      	ldr	r0, [r2, r3]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a58      	ldr	r2, [pc, #352]	; (8005bfc <dir_next+0x26c>)
 8005a9c:	589b      	ldr	r3, [r3, r2]
 8005a9e:	0019      	movs	r1, r3
 8005aa0:	f7ff fda8 	bl	80055f4 <create_chain>
 8005aa4:	0003      	movs	r3, r0
 8005aa6:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <dir_next+0x122>
 8005aae:	2307      	movs	r3, #7
 8005ab0:	e09c      	b.n	8005bec <dir_next+0x25c>
					if (clst == 1) return FR_INT_ERR;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <dir_next+0x12c>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e097      	b.n	8005bec <dir_next+0x25c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <dir_next+0x136>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e092      	b.n	8005bec <dir_next+0x25c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	58d3      	ldr	r3, [r2, r3]
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f7ff f932 	bl	8004d38 <sync_window>
 8005ad4:	1e03      	subs	r3, r0, #0
 8005ad6:	d001      	beq.n	8005adc <dir_next+0x14c>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e087      	b.n	8005bec <dir_next+0x25c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	2380      	movs	r3, #128	; 0x80
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	58d3      	ldr	r3, [r2, r3]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	58d3      	ldr	r3, [r2, r3]
 8005aee:	4a42      	ldr	r2, [pc, #264]	; (8005bf8 <dir_next+0x268>)
 8005af0:	5a9b      	ldrh	r3, [r3, r2]
 8005af2:	001a      	movs	r2, r3
 8005af4:	2100      	movs	r1, #0
 8005af6:	f7fe ff07 	bl	8004908 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	58d0      	ldr	r0, [r2, r3]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	2380      	movs	r3, #128	; 0x80
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	58d4      	ldr	r4, [r2, r3]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	f7ff fa7f 	bl	8005010 <clust2sect>
 8005b12:	0002      	movs	r2, r0
 8005b14:	4b3c      	ldr	r3, [pc, #240]	; (8005c08 <dir_next+0x278>)
 8005b16:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005b18:	2300      	movs	r3, #0
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	e01d      	b.n	8005b5a <dir_next+0x1ca>
						dp->fs->wflag = 1;
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	58d3      	ldr	r3, [r2, r3]
 8005b26:	4a39      	ldr	r2, [pc, #228]	; (8005c0c <dir_next+0x27c>)
 8005b28:	2101      	movs	r1, #1
 8005b2a:	5499      	strb	r1, [r3, r2]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	2380      	movs	r3, #128	; 0x80
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	58d3      	ldr	r3, [r2, r3]
 8005b34:	0018      	movs	r0, r3
 8005b36:	f7ff f8ff 	bl	8004d38 <sync_window>
 8005b3a:	1e03      	subs	r3, r0, #0
 8005b3c:	d001      	beq.n	8005b42 <dir_next+0x1b2>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e054      	b.n	8005bec <dir_next+0x25c>
						dp->fs->winsect++;
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	58d3      	ldr	r3, [r2, r3]
 8005b4a:	4a2f      	ldr	r2, [pc, #188]	; (8005c08 <dir_next+0x278>)
 8005b4c:	589a      	ldr	r2, [r3, r2]
 8005b4e:	3201      	adds	r2, #1
 8005b50:	492d      	ldr	r1, [pc, #180]	; (8005c08 <dir_next+0x278>)
 8005b52:	505a      	str	r2, [r3, r1]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	3301      	adds	r3, #1
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	58d3      	ldr	r3, [r2, r3]
 8005b62:	4a27      	ldr	r2, [pc, #156]	; (8005c00 <dir_next+0x270>)
 8005b64:	5c9b      	ldrb	r3, [r3, r2]
 8005b66:	001a      	movs	r2, r3
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d3d7      	bcc.n	8005b1e <dir_next+0x18e>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	58d3      	ldr	r3, [r2, r3]
 8005b76:	4a24      	ldr	r2, [pc, #144]	; (8005c08 <dir_next+0x278>)
 8005b78:	5899      	ldr	r1, [r3, r2]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	58d3      	ldr	r3, [r2, r3]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	1a8a      	subs	r2, r1, r2
 8005b86:	4920      	ldr	r1, [pc, #128]	; (8005c08 <dir_next+0x278>)
 8005b88:	505a      	str	r2, [r3, r1]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	491b      	ldr	r1, [pc, #108]	; (8005bfc <dir_next+0x26c>)
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	505a      	str	r2, [r3, r1]
				dp->sect = clust2sect(dp->fs, clst);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	58d3      	ldr	r3, [r2, r3]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	0011      	movs	r1, r2
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f7ff fa36 	bl	8005010 <clust2sect>
 8005ba4:	0001      	movs	r1, r0
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	2382      	movs	r3, #130	; 0x82
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	b299      	uxth	r1, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a0f      	ldr	r2, [pc, #60]	; (8005bf4 <dir_next+0x264>)
 8005bb6:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	58d3      	ldr	r3, [r2, r3]
 8005bc0:	001c      	movs	r4, r3
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	2380      	movs	r3, #128	; 0x80
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	58d3      	ldr	r3, [r2, r3]
 8005bca:	4a0b      	ldr	r2, [pc, #44]	; (8005bf8 <dir_next+0x268>)
 8005bcc:	5a9b      	ldrh	r3, [r3, r2]
 8005bce:	095b      	lsrs	r3, r3, #5
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	001a      	movs	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	0011      	movs	r1, r2
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f7fa fb23 	bl	8000224 <__aeabi_uidivmod>
 8005bde:	000b      	movs	r3, r1
 8005be0:	015b      	lsls	r3, r3, #5
 8005be2:	18e2      	adds	r2, r4, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4907      	ldr	r1, [pc, #28]	; (8005c04 <dir_next+0x274>)
 8005be8:	505a      	str	r2, [r3, r1]

	return FR_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	0018      	movs	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b007      	add	sp, #28
 8005bf2:	bd90      	pop	{r4, r7, pc}
 8005bf4:	00000406 	.word	0x00000406
 8005bf8:	0000040a 	.word	0x0000040a
 8005bfc:	0000040c 	.word	0x0000040c
 8005c00:	00000402 	.word	0x00000402
 8005c04:	00000414 	.word	0x00000414
 8005c08:	0000042c 	.word	0x0000042c
 8005c0c:	00000404 	.word	0x00000404

08005c10 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005c10:	b5b0      	push	{r4, r5, r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005c1a:	250f      	movs	r5, #15
 8005c1c:	197c      	adds	r4, r7, r5
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2100      	movs	r1, #0
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7ff fde2 	bl	80057ec <dir_sdi>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005c2c:	197b      	adds	r3, r7, r5
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d139      	bne.n	8005ca8 <dir_alloc+0x98>
		n = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	2380      	movs	r3, #128	; 0x80
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	58d0      	ldr	r0, [r2, r3]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	2382      	movs	r3, #130	; 0x82
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	58d3      	ldr	r3, [r2, r3]
 8005c48:	250f      	movs	r5, #15
 8005c4a:	197c      	adds	r4, r7, r5
 8005c4c:	0019      	movs	r1, r3
 8005c4e:	f7ff f8cd 	bl	8004dec <move_window>
 8005c52:	0003      	movs	r3, r0
 8005c54:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005c56:	197b      	adds	r3, r7, r5
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d123      	bne.n	8005ca6 <dir_alloc+0x96>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <dir_alloc+0xb8>)
 8005c62:	589b      	ldr	r3, [r3, r2]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2be5      	cmp	r3, #229	; 0xe5
 8005c68:	d005      	beq.n	8005c76 <dir_alloc+0x66>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <dir_alloc+0xb8>)
 8005c6e:	589b      	ldr	r3, [r3, r2]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d107      	bne.n	8005c86 <dir_alloc+0x76>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60bb      	str	r3, [r7, #8]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d102      	bne.n	8005c8a <dir_alloc+0x7a>
 8005c84:	e010      	b.n	8005ca8 <dir_alloc+0x98>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005c86:	2300      	movs	r3, #0
 8005c88:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005c8a:	250f      	movs	r5, #15
 8005c8c:	197c      	adds	r4, r7, r5
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2101      	movs	r1, #1
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7ff fe7c 	bl	8005990 <dir_next>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 8005c9c:	197b      	adds	r3, r7, r5
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0c9      	beq.n	8005c38 <dir_alloc+0x28>
 8005ca4:	e000      	b.n	8005ca8 <dir_alloc+0x98>
			if (res != FR_OK) break;
 8005ca6:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005ca8:	230f      	movs	r3, #15
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d103      	bne.n	8005cba <dir_alloc+0xaa>
 8005cb2:	230f      	movs	r3, #15
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	2207      	movs	r2, #7
 8005cb8:	701a      	strb	r2, [r3, #0]
	return res;
 8005cba:	230f      	movs	r3, #15
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	781b      	ldrb	r3, [r3, #0]
}
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b004      	add	sp, #16
 8005cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8005cc8:	00000414 	.word	0x00000414

08005ccc <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	331b      	adds	r3, #27
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	b21a      	sxth	r2, r3
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	331a      	adds	r3, #26
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	b21b      	sxth	r3, r3
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	b21b      	sxth	r3, r3
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	2380      	movs	r3, #128	; 0x80
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	5cd3      	ldrb	r3, [r2, r3]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d10f      	bne.n	8005d1c <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	3315      	adds	r3, #21
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	b21a      	sxth	r2, r3
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	b21b      	sxth	r3, r3
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b21b      	sxth	r3, r3
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

	return cl;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
}
 8005d1e:	0018      	movs	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b004      	add	sp, #16
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	331a      	adds	r3, #26
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	0a1b      	lsrs	r3, r3, #8
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	331b      	adds	r3, #27
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	0c1a      	lsrs	r2, r3, #16
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3314      	adds	r3, #20
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	0a1b      	lsrs	r3, r3, #8
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3315      	adds	r3, #21
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	701a      	strb	r2, [r3, #0]
}
 8005d68:	46c0      	nop			; (mov r8, r8)
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	b002      	add	sp, #8
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005d70:	b590      	push	{r4, r7, lr}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	001a      	movs	r2, r3
 8005d80:	2340      	movs	r3, #64	; 0x40
 8005d82:	439a      	bics	r2, r3
 8005d84:	0013      	movs	r3, r2
 8005d86:	1e5a      	subs	r2, r3, #1
 8005d88:	0013      	movs	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	189b      	adds	r3, r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	189b      	adds	r3, r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	230e      	movs	r3, #14
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005da0:	4a31      	ldr	r2, [pc, #196]	; (8005e68 <cmp_lfn+0xf8>)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	18d3      	adds	r3, r2, r3
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	18d3      	adds	r3, r2, r3
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	b21a      	sxth	r2, r3
 8005db4:	492c      	ldr	r1, [pc, #176]	; (8005e68 <cmp_lfn+0xf8>)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	18cb      	adds	r3, r1, r3
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	0019      	movs	r1, r3
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	185b      	adds	r3, r3, r1
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	b21b      	sxth	r3, r3
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	b21a      	sxth	r2, r3
 8005dca:	230c      	movs	r3, #12
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last character has not been processed */
 8005dd0:	230e      	movs	r3, #14
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d01f      	beq.n	8005e1a <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005dda:	230e      	movs	r3, #14
 8005ddc:	18fc      	adds	r4, r7, r3
 8005dde:	230c      	movs	r3, #12
 8005de0:	18fb      	adds	r3, r7, r3
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f002 fd55 	bl	8008894 <ff_wtoupper>
 8005dea:	0003      	movs	r3, r0
 8005dec:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2bfe      	cmp	r3, #254	; 0xfe
 8005df2:	d810      	bhi.n	8005e16 <cmp_lfn+0xa6>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	617a      	str	r2, [r7, #20]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	18d3      	adds	r3, r2, r3
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	0018      	movs	r0, r3
 8005e04:	f002 fd46 	bl	8008894 <ff_wtoupper>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	001a      	movs	r2, r3
 8005e0c:	230e      	movs	r3, #14
 8005e0e:	18fb      	adds	r3, r7, r3
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <cmp_lfn+0xba>
				return 0;				/* Not matched */
 8005e16:	2300      	movs	r3, #0
 8005e18:	e022      	b.n	8005e60 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005e1a:	230c      	movs	r3, #12
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	4a12      	ldr	r2, [pc, #72]	; (8005e6c <cmp_lfn+0xfc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d001      	beq.n	8005e2a <cmp_lfn+0xba>
 8005e26:	2300      	movs	r3, #0
 8005e28:	e01a      	b.n	8005e60 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b0c      	cmp	r3, #12
 8005e34:	d9b4      	bls.n	8005da0 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	001a      	movs	r2, r3
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d00d      	beq.n	8005e5e <cmp_lfn+0xee>
 8005e42:	230e      	movs	r3, #14
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <cmp_lfn+0xee>
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	18d3      	adds	r3, r2, r3
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <cmp_lfn+0xee>
		return 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e000      	b.n	8005e60 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
 8005e5e:	2301      	movs	r3, #1
}
 8005e60:	0018      	movs	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b007      	add	sp, #28
 8005e66:	bd90      	pop	{r4, r7, pc}
 8005e68:	080093b8 	.word	0x080093b8
 8005e6c:	0000ffff 	.word	0x0000ffff

08005e70 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	0019      	movs	r1, r3
 8005e7c:	1dfb      	adds	r3, r7, #7
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	1dbb      	adds	r3, r7, #6
 8005e82:	1c0a      	adds	r2, r1, #0
 8005e84:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	330d      	adds	r3, #13
 8005e8a:	1dba      	adds	r2, r7, #6
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	330b      	adds	r3, #11
 8005e94:	220f      	movs	r2, #15
 8005e96:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	331a      	adds	r3, #26
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	331b      	adds	r3, #27
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005eb0:	1dfb      	adds	r3, r7, #7
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	1e5a      	subs	r2, r3, #1
 8005eb6:	0013      	movs	r3, r2
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	189b      	adds	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005ec2:	2316      	movs	r3, #22
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005ece:	2316      	movs	r3, #22
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	4a27      	ldr	r2, [pc, #156]	; (8005f74 <fit_lfn+0x104>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d009      	beq.n	8005eee <fit_lfn+0x7e>
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	61fa      	str	r2, [r7, #28]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	18d2      	adds	r2, r2, r3
 8005ee6:	2316      	movs	r3, #22
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	8812      	ldrh	r2, [r2, #0]
 8005eec:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005eee:	4a22      	ldr	r2, [pc, #136]	; (8005f78 <fit_lfn+0x108>)
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	18d3      	adds	r3, r2, r3
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	001a      	movs	r2, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	189b      	adds	r3, r3, r2
 8005efc:	2016      	movs	r0, #22
 8005efe:	183a      	adds	r2, r7, r0
 8005f00:	8812      	ldrh	r2, [r2, #0]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	183b      	adds	r3, r7, r0
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	b299      	uxth	r1, r3
 8005f0e:	4a1a      	ldr	r2, [pc, #104]	; (8005f78 <fit_lfn+0x108>)
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	18d3      	adds	r3, r2, r3
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	3301      	adds	r3, #1
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	18d3      	adds	r3, r2, r3
 8005f1c:	b2ca      	uxtb	r2, r1
 8005f1e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005f20:	183b      	adds	r3, r7, r0
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <fit_lfn+0xc2>
 8005f28:	2316      	movs	r3, #22
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	4252      	negs	r2, r2
 8005f30:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	3301      	adds	r3, #1
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b0c      	cmp	r3, #12
 8005f3c:	d9c7      	bls.n	8005ece <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005f3e:	2316      	movs	r3, #22
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <fit_lfn+0x104>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d006      	beq.n	8005f58 <fit_lfn+0xe8>
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	18d3      	adds	r3, r2, r3
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d105      	bne.n	8005f64 <fit_lfn+0xf4>
 8005f58:	1dfb      	adds	r3, r7, #7
 8005f5a:	1dfa      	adds	r2, r7, #7
 8005f5c:	7812      	ldrb	r2, [r2, #0]
 8005f5e:	2140      	movs	r1, #64	; 0x40
 8005f60:	430a      	orrs	r2, r1
 8005f62:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	1dfa      	adds	r2, r7, #7
 8005f68:	7812      	ldrb	r2, [r2, #0]
 8005f6a:	701a      	strb	r2, [r3, #0]
}
 8005f6c:	46c0      	nop			; (mov r8, r8)
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	b008      	add	sp, #32
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	0000ffff 	.word	0x0000ffff
 8005f78:	080093b8 	.word	0x080093b8

08005f7c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08c      	sub	sp, #48	; 0x30
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	220b      	movs	r2, #11
 8005f90:	0018      	movs	r0, r3
 8005f92:	f7fe fc9d 	bl	80048d0 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b05      	cmp	r3, #5
 8005f9a:	d92f      	bls.n	8005ffc <gen_numname+0x80>
		sr = seq;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005fa0:	e026      	b.n	8005ff0 <gen_numname+0x74>
			wc = *lfn++;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	1c9a      	adds	r2, r3, #2
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	2222      	movs	r2, #34	; 0x22
 8005faa:	18ba      	adds	r2, r7, r2
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb4:	e019      	b.n	8005fea <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	005a      	lsls	r2, r3, #1
 8005fba:	2022      	movs	r0, #34	; 0x22
 8005fbc:	183b      	adds	r3, r7, r0
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	400b      	ands	r3, r1
 8005fc4:	18d3      	adds	r3, r2, r3
 8005fc6:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005fc8:	183b      	adds	r3, r7, r0
 8005fca:	183a      	adds	r2, r7, r0
 8005fcc:	8812      	ldrh	r2, [r2, #0]
 8005fce:	0852      	lsrs	r2, r2, #1
 8005fd0:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	2380      	movs	r3, #128	; 0x80
 8005fd6:	025b      	lsls	r3, r3, #9
 8005fd8:	4013      	ands	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <gen_numname+0x68>
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	4a31      	ldr	r2, [pc, #196]	; (80060a4 <gen_numname+0x128>)
 8005fe0:	4053      	eors	r3, r2
 8005fe2:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	2b0f      	cmp	r3, #15
 8005fee:	d9e2      	bls.n	8005fb6 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1d4      	bne.n	8005fa2 <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005ffc:	2307      	movs	r3, #7
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	220f      	movs	r2, #15
 8006006:	4013      	ands	r3, r2
 8006008:	b2da      	uxtb	r2, r3
 800600a:	212f      	movs	r1, #47	; 0x2f
 800600c:	187b      	adds	r3, r7, r1
 800600e:	3230      	adds	r2, #48	; 0x30
 8006010:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8006012:	187b      	adds	r3, r7, r1
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b39      	cmp	r3, #57	; 0x39
 8006018:	d905      	bls.n	8006026 <gen_numname+0xaa>
 800601a:	222f      	movs	r2, #47	; 0x2f
 800601c:	18bb      	adds	r3, r7, r2
 800601e:	18ba      	adds	r2, r7, r2
 8006020:	7812      	ldrb	r2, [r2, #0]
 8006022:	3207      	adds	r2, #7
 8006024:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	1e5a      	subs	r2, r3, #1
 800602a:	62ba      	str	r2, [r7, #40]	; 0x28
 800602c:	2214      	movs	r2, #20
 800602e:	18ba      	adds	r2, r7, r2
 8006030:	212f      	movs	r1, #47	; 0x2f
 8006032:	1879      	adds	r1, r7, r1
 8006034:	7809      	ldrb	r1, [r1, #0]
 8006036:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	091b      	lsrs	r3, r3, #4
 800603c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1dd      	bne.n	8006000 <gen_numname+0x84>
	ns[i] = '~';
 8006044:	2314      	movs	r3, #20
 8006046:	18fa      	adds	r2, r7, r3
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	18d3      	adds	r3, r2, r3
 800604c:	227e      	movs	r2, #126	; 0x7e
 800604e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006050:	2300      	movs	r3, #0
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
 8006054:	e002      	b.n	800605c <gen_numname+0xe0>
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	3301      	adds	r3, #1
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
 800605c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	429a      	cmp	r2, r3
 8006062:	d205      	bcs.n	8006070 <gen_numname+0xf4>
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	18d3      	adds	r3, r2, r3
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b20      	cmp	r3, #32
 800606e:	d1f2      	bne.n	8006056 <gen_numname+0xda>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	2b07      	cmp	r3, #7
 8006074:	d806      	bhi.n	8006084 <gen_numname+0x108>
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	62ba      	str	r2, [r7, #40]	; 0x28
 800607c:	2214      	movs	r2, #20
 800607e:	18ba      	adds	r2, r7, r2
 8006080:	5cd1      	ldrb	r1, [r2, r3]
 8006082:	e000      	b.n	8006086 <gen_numname+0x10a>
 8006084:	2120      	movs	r1, #32
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	627a      	str	r2, [r7, #36]	; 0x24
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	18d3      	adds	r3, r2, r3
 8006090:	1c0a      	adds	r2, r1, #0
 8006092:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	2b07      	cmp	r3, #7
 8006098:	d9ea      	bls.n	8006070 <gen_numname+0xf4>
}
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	46bd      	mov	sp, r7
 800609e:	b00c      	add	sp, #48	; 0x30
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	00011021 	.word	0x00011021

080060a8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80060b0:	230f      	movs	r3, #15
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 80060b8:	230b      	movs	r3, #11
 80060ba:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80060bc:	200f      	movs	r0, #15
 80060be:	183b      	adds	r3, r7, r0
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	0852      	lsrs	r2, r2, #1
 80060c6:	01db      	lsls	r3, r3, #7
 80060c8:	4313      	orrs	r3, r2
 80060ca:	b2d9      	uxtb	r1, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	781a      	ldrb	r2, [r3, #0]
 80060d4:	183b      	adds	r3, r7, r0
 80060d6:	188a      	adds	r2, r1, r2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	3b01      	subs	r3, #1
 80060de:	60bb      	str	r3, [r7, #8]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1ea      	bne.n	80060bc <sum_sfn+0x14>
	return sum;
 80060e6:	230f      	movs	r3, #15
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	781b      	ldrb	r3, [r3, #0]
}
 80060ec:	0018      	movs	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b004      	add	sp, #16
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80060f4:	b5b0      	push	{r4, r5, r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80060fc:	2517      	movs	r5, #23
 80060fe:	197c      	adds	r4, r7, r5
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2100      	movs	r1, #0
 8006104:	0018      	movs	r0, r3
 8006106:	f7ff fb71 	bl	80057ec <dir_sdi>
 800610a:	0003      	movs	r3, r0
 800610c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800610e:	197b      	adds	r3, r7, r5
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <dir_find+0x2a>
 8006116:	2317      	movs	r3, #23
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	e0e9      	b.n	80062f2 <dir_find+0x1fe>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800611e:	2114      	movs	r1, #20
 8006120:	187b      	adds	r3, r7, r1
 8006122:	22ff      	movs	r2, #255	; 0xff
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	2315      	movs	r3, #21
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	187a      	adds	r2, r7, r1
 800612c:	7812      	ldrb	r2, [r2, #0]
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a72      	ldr	r2, [pc, #456]	; (80062fc <dir_find+0x208>)
 8006134:	2101      	movs	r1, #1
 8006136:	4249      	negs	r1, r1
 8006138:	5299      	strh	r1, [r3, r2]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	58d0      	ldr	r0, [r2, r3]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	2382      	movs	r3, #130	; 0x82
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	58d3      	ldr	r3, [r2, r3]
 800614a:	2517      	movs	r5, #23
 800614c:	197c      	adds	r4, r7, r5
 800614e:	0019      	movs	r1, r3
 8006150:	f7fe fe4c 	bl	8004dec <move_window>
 8006154:	0003      	movs	r3, r0
 8006156:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8006158:	197b      	adds	r3, r7, r5
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d000      	beq.n	8006162 <dir_find+0x6e>
 8006160:	e0bf      	b.n	80062e2 <dir_find+0x1ee>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a66      	ldr	r2, [pc, #408]	; (8006300 <dir_find+0x20c>)
 8006166:	589b      	ldr	r3, [r3, r2]
 8006168:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800616a:	2116      	movs	r1, #22
 800616c:	187b      	adds	r3, r7, r1
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	7812      	ldrb	r2, [r2, #0]
 8006172:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006174:	187b      	adds	r3, r7, r1
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <dir_find+0x92>
 800617c:	2317      	movs	r3, #23
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	2204      	movs	r2, #4
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	e0b2      	b.n	80062ec <dir_find+0x1f8>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	330b      	adds	r3, #11
 800618a:	781a      	ldrb	r2, [r3, #0]
 800618c:	230f      	movs	r3, #15
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	213f      	movs	r1, #63	; 0x3f
 8006192:	400a      	ands	r2, r1
 8006194:	701a      	strb	r2, [r3, #0]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006196:	2316      	movs	r3, #22
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2be5      	cmp	r3, #229	; 0xe5
 800619e:	d00a      	beq.n	80061b6 <dir_find+0xc2>
 80061a0:	230f      	movs	r3, #15
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2208      	movs	r2, #8
 80061a8:	4013      	ands	r3, r2
 80061aa:	d00e      	beq.n	80061ca <dir_find+0xd6>
 80061ac:	230f      	movs	r3, #15
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b0f      	cmp	r3, #15
 80061b4:	d009      	beq.n	80061ca <dir_find+0xd6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80061b6:	2315      	movs	r3, #21
 80061b8:	18fb      	adds	r3, r7, r3
 80061ba:	22ff      	movs	r2, #255	; 0xff
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a4e      	ldr	r2, [pc, #312]	; (80062fc <dir_find+0x208>)
 80061c2:	2101      	movs	r1, #1
 80061c4:	4249      	negs	r1, r1
 80061c6:	5299      	strh	r1, [r3, r2]
 80061c8:	e07c      	b.n	80062c4 <dir_find+0x1d0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80061ca:	230f      	movs	r3, #15
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b0f      	cmp	r3, #15
 80061d2:	d149      	bne.n	8006268 <dir_find+0x174>
				if (dp->lfn) {
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	2384      	movs	r3, #132	; 0x84
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	58d3      	ldr	r3, [r2, r3]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d100      	bne.n	80061e2 <dir_find+0xee>
 80061e0:	e070      	b.n	80062c4 <dir_find+0x1d0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80061e2:	2316      	movs	r3, #22
 80061e4:	18fb      	adds	r3, r7, r3
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2240      	movs	r2, #64	; 0x40
 80061ea:	4013      	ands	r3, r2
 80061ec:	d016      	beq.n	800621c <dir_find+0x128>
						sum = dir[LDIR_Chksum];
 80061ee:	2314      	movs	r3, #20
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	7b52      	ldrb	r2, [r2, #13]
 80061f6:	701a      	strb	r2, [r3, #0]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80061f8:	2016      	movs	r0, #22
 80061fa:	183b      	adds	r3, r7, r0
 80061fc:	183a      	adds	r2, r7, r0
 80061fe:	7812      	ldrb	r2, [r2, #0]
 8006200:	2140      	movs	r1, #64	; 0x40
 8006202:	438a      	bics	r2, r1
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	2315      	movs	r3, #21
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	183a      	adds	r2, r7, r0
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	701a      	strb	r2, [r3, #0]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a3c      	ldr	r2, [pc, #240]	; (8006304 <dir_find+0x210>)
 8006214:	5a99      	ldrh	r1, [r3, r2]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a38      	ldr	r2, [pc, #224]	; (80062fc <dir_find+0x208>)
 800621a:	5299      	strh	r1, [r3, r2]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800621c:	2316      	movs	r3, #22
 800621e:	18fa      	adds	r2, r7, r3
 8006220:	2315      	movs	r3, #21
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	7812      	ldrb	r2, [r2, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d118      	bne.n	800625e <dir_find+0x16a>
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	330d      	adds	r3, #13
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2214      	movs	r2, #20
 8006234:	18ba      	adds	r2, r7, r2
 8006236:	7812      	ldrb	r2, [r2, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d110      	bne.n	800625e <dir_find+0x16a>
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	2384      	movs	r3, #132	; 0x84
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	58d3      	ldr	r3, [r2, r3]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	0011      	movs	r1, r2
 8006248:	0018      	movs	r0, r3
 800624a:	f7ff fd91 	bl	8005d70 <cmp_lfn>
 800624e:	1e03      	subs	r3, r0, #0
 8006250:	d005      	beq.n	800625e <dir_find+0x16a>
 8006252:	2315      	movs	r3, #21
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	3b01      	subs	r3, #1
 800625a:	b2da      	uxtb	r2, r3
 800625c:	e000      	b.n	8006260 <dir_find+0x16c>
 800625e:	22ff      	movs	r2, #255	; 0xff
 8006260:	2315      	movs	r3, #21
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e02d      	b.n	80062c4 <dir_find+0x1d0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006268:	2315      	movs	r3, #21
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <dir_find+0x194>
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	0018      	movs	r0, r3
 8006276:	f7ff ff17 	bl	80060a8 <sum_sfn>
 800627a:	0003      	movs	r3, r0
 800627c:	001a      	movs	r2, r3
 800627e:	2314      	movs	r3, #20
 8006280:	18fb      	adds	r3, r7, r3
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	4293      	cmp	r3, r2
 8006286:	d02e      	beq.n	80062e6 <dir_find+0x1f2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	2383      	movs	r3, #131	; 0x83
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	58d3      	ldr	r3, [r2, r3]
 8006290:	330b      	adds	r3, #11
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	001a      	movs	r2, r3
 8006296:	2301      	movs	r3, #1
 8006298:	4013      	ands	r3, r2
 800629a:	d10a      	bne.n	80062b2 <dir_find+0x1be>
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	2383      	movs	r3, #131	; 0x83
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	58d1      	ldr	r1, [r2, r3]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	220b      	movs	r2, #11
 80062a8:	0018      	movs	r0, r3
 80062aa:	f7fe fb45 	bl	8004938 <mem_cmp>
 80062ae:	1e03      	subs	r3, r0, #0
 80062b0:	d01b      	beq.n	80062ea <dir_find+0x1f6>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80062b2:	2315      	movs	r3, #21
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	22ff      	movs	r2, #255	; 0xff
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a0f      	ldr	r2, [pc, #60]	; (80062fc <dir_find+0x208>)
 80062be:	2101      	movs	r1, #1
 80062c0:	4249      	negs	r1, r1
 80062c2:	5299      	strh	r1, [r3, r2]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80062c4:	2517      	movs	r5, #23
 80062c6:	197c      	adds	r4, r7, r5
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2100      	movs	r1, #0
 80062cc:	0018      	movs	r0, r3
 80062ce:	f7ff fb5f 	bl	8005990 <dir_next>
 80062d2:	0003      	movs	r3, r0
 80062d4:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80062d6:	197b      	adds	r3, r7, r5
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d100      	bne.n	80062e0 <dir_find+0x1ec>
 80062de:	e72c      	b.n	800613a <dir_find+0x46>
 80062e0:	e004      	b.n	80062ec <dir_find+0x1f8>
		if (res != FR_OK) break;
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	e002      	b.n	80062ec <dir_find+0x1f8>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	e000      	b.n	80062ec <dir_find+0x1f8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80062ea:	46c0      	nop			; (mov r8, r8)

	return res;
 80062ec:	2317      	movs	r3, #23
 80062ee:	18fb      	adds	r3, r7, r3
 80062f0:	781b      	ldrb	r3, [r3, #0]
}
 80062f2:	0018      	movs	r0, r3
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b006      	add	sp, #24
 80062f8:	bdb0      	pop	{r4, r5, r7, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	00000424 	.word	0x00000424
 8006300:	00000414 	.word	0x00000414
 8006304:	00000406 	.word	0x00000406

08006308 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006308:	b5b0      	push	{r4, r5, r7, lr}
 800630a:	b08c      	sub	sp, #48	; 0x30
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	2383      	movs	r3, #131	; 0x83
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	58d3      	ldr	r3, [r2, r3]
 8006318:	623b      	str	r3, [r7, #32]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	2384      	movs	r3, #132	; 0x84
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	58d3      	ldr	r3, [r2, r3]
 8006322:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006324:	6a39      	ldr	r1, [r7, #32]
 8006326:	240c      	movs	r4, #12
 8006328:	193b      	adds	r3, r7, r4
 800632a:	220c      	movs	r2, #12
 800632c:	0018      	movs	r0, r3
 800632e:	f7fe facf 	bl	80048d0 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006332:	193b      	adds	r3, r7, r4
 8006334:	7adb      	ldrb	r3, [r3, #11]
 8006336:	001a      	movs	r2, r3
 8006338:	2301      	movs	r3, #1
 800633a:	4013      	ands	r3, r2
 800633c:	d03f      	beq.n	80063be <dir_register+0xb6>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	330b      	adds	r3, #11
 8006342:	2200      	movs	r2, #0
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	2384      	movs	r3, #132	; 0x84
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	2100      	movs	r1, #0
 800634e:	50d1      	str	r1, [r2, r3]
		for (n = 1; n < 100; n++) {
 8006350:	2301      	movs	r3, #1
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
 8006354:	e015      	b.n	8006382 <dir_register+0x7a>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	210c      	movs	r1, #12
 800635c:	1879      	adds	r1, r7, r1
 800635e:	6a38      	ldr	r0, [r7, #32]
 8006360:	f7ff fe0c 	bl	8005f7c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006364:	252f      	movs	r5, #47	; 0x2f
 8006366:	197c      	adds	r4, r7, r5
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	0018      	movs	r0, r3
 800636c:	f7ff fec2 	bl	80060f4 <dir_find>
 8006370:	0003      	movs	r3, r0
 8006372:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006374:	197b      	adds	r3, r7, r5
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <dir_register+0x82>
		for (n = 1; n < 100; n++) {
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	3301      	adds	r3, #1
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	2b63      	cmp	r3, #99	; 0x63
 8006386:	d9e6      	bls.n	8006356 <dir_register+0x4e>
 8006388:	e000      	b.n	800638c <dir_register+0x84>
			if (res != FR_OK) break;
 800638a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	2b64      	cmp	r3, #100	; 0x64
 8006390:	d101      	bne.n	8006396 <dir_register+0x8e>
 8006392:	2307      	movs	r3, #7
 8006394:	e0e4      	b.n	8006560 <dir_register+0x258>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006396:	232f      	movs	r3, #47	; 0x2f
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b04      	cmp	r3, #4
 800639e:	d003      	beq.n	80063a8 <dir_register+0xa0>
 80063a0:	232f      	movs	r3, #47	; 0x2f
 80063a2:	18fb      	adds	r3, r7, r3
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	e0db      	b.n	8006560 <dir_register+0x258>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	330b      	adds	r3, #11
 80063ac:	220c      	movs	r2, #12
 80063ae:	18ba      	adds	r2, r7, r2
 80063b0:	7ad2      	ldrb	r2, [r2, #11]
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	2384      	movs	r3, #132	; 0x84
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	69f9      	ldr	r1, [r7, #28]
 80063bc:	50d1      	str	r1, [r2, r3]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80063be:	230c      	movs	r3, #12
 80063c0:	18fb      	adds	r3, r7, r3
 80063c2:	7adb      	ldrb	r3, [r3, #11]
 80063c4:	001a      	movs	r2, r3
 80063c6:	2302      	movs	r3, #2
 80063c8:	4013      	ands	r3, r2
 80063ca:	d015      	beq.n	80063f8 <dir_register+0xf0>
		for (n = 0; lfn[n]; n++) ;
 80063cc:	2300      	movs	r3, #0
 80063ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d0:	e002      	b.n	80063d8 <dir_register+0xd0>
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	3301      	adds	r3, #1
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	18d3      	adds	r3, r2, r3
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1f5      	bne.n	80063d2 <dir_register+0xca>
		nent = (n + 25) / 13;
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	3319      	adds	r3, #25
 80063ea:	210d      	movs	r1, #13
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7f9 fe93 	bl	8000118 <__udivsi3>
 80063f2:	0003      	movs	r3, r0
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
 80063f6:	e001      	b.n	80063fc <dir_register+0xf4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80063f8:	2301      	movs	r3, #1
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80063fc:	252f      	movs	r5, #47	; 0x2f
 80063fe:	197c      	adds	r4, r7, r5
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	0011      	movs	r1, r2
 8006406:	0018      	movs	r0, r3
 8006408:	f7ff fc02 	bl	8005c10 <dir_alloc>
 800640c:	0003      	movs	r3, r0
 800640e:	7023      	strb	r3, [r4, #0]

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006410:	197b      	adds	r3, r7, r5
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d160      	bne.n	80064da <dir_register+0x1d2>
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	3b01      	subs	r3, #1
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d05a      	beq.n	80064da <dir_register+0x1d2>
		res = dir_sdi(dp, dp->index - nent);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a50      	ldr	r2, [pc, #320]	; (8006568 <dir_register+0x260>)
 8006428:	5a9b      	ldrh	r3, [r3, r2]
 800642a:	001a      	movs	r2, r3
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	1ad2      	subs	r2, r2, r3
 8006430:	252f      	movs	r5, #47	; 0x2f
 8006432:	197c      	adds	r4, r7, r5
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	0011      	movs	r1, r2
 8006438:	0018      	movs	r0, r3
 800643a:	f7ff f9d7 	bl	80057ec <dir_sdi>
 800643e:	0003      	movs	r3, r0
 8006440:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8006442:	197b      	adds	r3, r7, r5
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d147      	bne.n	80064da <dir_register+0x1d2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	2383      	movs	r3, #131	; 0x83
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	58d3      	ldr	r3, [r2, r3]
 8006452:	221b      	movs	r2, #27
 8006454:	18bc      	adds	r4, r7, r2
 8006456:	0018      	movs	r0, r3
 8006458:	f7ff fe26 	bl	80060a8 <sum_sfn>
 800645c:	0003      	movs	r3, r0
 800645e:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	2380      	movs	r3, #128	; 0x80
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	58d0      	ldr	r0, [r2, r3]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	2382      	movs	r3, #130	; 0x82
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	58d3      	ldr	r3, [r2, r3]
 8006470:	252f      	movs	r5, #47	; 0x2f
 8006472:	197c      	adds	r4, r7, r5
 8006474:	0019      	movs	r1, r3
 8006476:	f7fe fcb9 	bl	8004dec <move_window>
 800647a:	0003      	movs	r3, r0
 800647c:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 800647e:	197b      	adds	r3, r7, r5
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d128      	bne.n	80064d8 <dir_register+0x1d0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	2384      	movs	r3, #132	; 0x84
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	58d0      	ldr	r0, [r2, r3]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a36      	ldr	r2, [pc, #216]	; (800656c <dir_register+0x264>)
 8006492:	5899      	ldr	r1, [r3, r2]
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	b2da      	uxtb	r2, r3
 8006498:	231b      	movs	r3, #27
 800649a:	18fb      	adds	r3, r7, r3
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	f7ff fce7 	bl	8005e70 <fit_lfn>
				dp->fs->wflag = 1;
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	2380      	movs	r3, #128	; 0x80
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	58d3      	ldr	r3, [r2, r3]
 80064aa:	4a31      	ldr	r2, [pc, #196]	; (8006570 <dir_register+0x268>)
 80064ac:	2101      	movs	r1, #1
 80064ae:	5499      	strb	r1, [r3, r2]
				res = dir_next(dp, 0);	/* Next entry */
 80064b0:	252f      	movs	r5, #47	; 0x2f
 80064b2:	197c      	adds	r4, r7, r5
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2100      	movs	r1, #0
 80064b8:	0018      	movs	r0, r3
 80064ba:	f7ff fa69 	bl	8005990 <dir_next>
 80064be:	0003      	movs	r3, r0
 80064c0:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 80064c2:	197b      	adds	r3, r7, r5
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d107      	bne.n	80064da <dir_register+0x1d2>
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	3b01      	subs	r3, #1
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1c4      	bne.n	8006460 <dir_register+0x158>
 80064d6:	e000      	b.n	80064da <dir_register+0x1d2>
				if (res != FR_OK) break;
 80064d8:	46c0      	nop			; (mov r8, r8)
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80064da:	232f      	movs	r3, #47	; 0x2f
 80064dc:	18fb      	adds	r3, r7, r3
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d13a      	bne.n	800655a <dir_register+0x252>
		res = move_window(dp->fs, dp->sect);
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	2380      	movs	r3, #128	; 0x80
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	58d0      	ldr	r0, [r2, r3]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	2382      	movs	r3, #130	; 0x82
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	58d3      	ldr	r3, [r2, r3]
 80064f4:	252f      	movs	r5, #47	; 0x2f
 80064f6:	197c      	adds	r4, r7, r5
 80064f8:	0019      	movs	r1, r3
 80064fa:	f7fe fc77 	bl	8004dec <move_window>
 80064fe:	0003      	movs	r3, r0
 8006500:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8006502:	197b      	adds	r3, r7, r5
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d127      	bne.n	800655a <dir_register+0x252>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a17      	ldr	r2, [pc, #92]	; (800656c <dir_register+0x264>)
 800650e:	589b      	ldr	r3, [r3, r2]
 8006510:	2220      	movs	r2, #32
 8006512:	2100      	movs	r1, #0
 8006514:	0018      	movs	r0, r3
 8006516:	f7fe f9f7 	bl	8004908 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a13      	ldr	r2, [pc, #76]	; (800656c <dir_register+0x264>)
 800651e:	5898      	ldr	r0, [r3, r2]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	2383      	movs	r3, #131	; 0x83
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	58d3      	ldr	r3, [r2, r3]
 8006528:	220b      	movs	r2, #11
 800652a:	0019      	movs	r1, r3
 800652c:	f7fe f9d0 	bl	80048d0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	2383      	movs	r3, #131	; 0x83
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	58d3      	ldr	r3, [r2, r3]
 8006538:	330b      	adds	r3, #11
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	490b      	ldr	r1, [pc, #44]	; (800656c <dir_register+0x264>)
 8006540:	585b      	ldr	r3, [r3, r1]
 8006542:	330c      	adds	r3, #12
 8006544:	2118      	movs	r1, #24
 8006546:	400a      	ands	r2, r1
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	58d3      	ldr	r3, [r2, r3]
 8006554:	4a06      	ldr	r2, [pc, #24]	; (8006570 <dir_register+0x268>)
 8006556:	2101      	movs	r1, #1
 8006558:	5499      	strb	r1, [r3, r2]
		}
	}

	return res;
 800655a:	232f      	movs	r3, #47	; 0x2f
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	781b      	ldrb	r3, [r3, #0]
}
 8006560:	0018      	movs	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	b00c      	add	sp, #48	; 0x30
 8006566:	bdb0      	pop	{r4, r5, r7, pc}
 8006568:	00000406 	.word	0x00000406
 800656c:	00000414 	.word	0x00000414
 8006570:	00000404 	.word	0x00000404

08006574 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006574:	b5b0      	push	{r4, r5, r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	e002      	b.n	800658c <create_name+0x18>
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	3301      	adds	r3, #1
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b2f      	cmp	r3, #47	; 0x2f
 8006592:	d0f8      	beq.n	8006586 <create_name+0x12>
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b5c      	cmp	r3, #92	; 0x5c
 800659a:	d0f4      	beq.n	8006586 <create_name+0x12>
	lfn = dp->lfn;
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	2384      	movs	r3, #132	; 0x84
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	58d3      	ldr	r3, [r2, r3]
 80065a4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	61ba      	str	r2, [r7, #24]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	18d3      	adds	r3, r2, r3
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	2124      	movs	r1, #36	; 0x24
 80065bc:	187b      	adds	r3, r7, r1
 80065be:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80065c0:	187b      	adds	r3, r7, r1
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	2b1f      	cmp	r3, #31
 80065c6:	d940      	bls.n	800664a <create_name+0xd6>
 80065c8:	2324      	movs	r3, #36	; 0x24
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	2b2f      	cmp	r3, #47	; 0x2f
 80065d0:	d03b      	beq.n	800664a <create_name+0xd6>
 80065d2:	2324      	movs	r3, #36	; 0x24
 80065d4:	18fb      	adds	r3, r7, r3
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	2b5c      	cmp	r3, #92	; 0x5c
 80065da:	d036      	beq.n	800664a <create_name+0xd6>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2bfe      	cmp	r3, #254	; 0xfe
 80065e0:	d901      	bls.n	80065e6 <create_name+0x72>
			return FR_INVALID_NAME;
 80065e2:	2306      	movs	r3, #6
 80065e4:	e1d4      	b.n	8006990 <create_name+0x41c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80065e6:	2524      	movs	r5, #36	; 0x24
 80065e8:	197b      	adds	r3, r7, r5
 80065ea:	197a      	adds	r2, r7, r5
 80065ec:	8812      	ldrh	r2, [r2, #0]
 80065ee:	21ff      	movs	r1, #255	; 0xff
 80065f0:	400a      	ands	r2, r1
 80065f2:	801a      	strh	r2, [r3, #0]
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80065f4:	197c      	adds	r4, r7, r5
 80065f6:	197b      	adds	r3, r7, r5
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	2101      	movs	r1, #1
 80065fc:	0018      	movs	r0, r3
 80065fe:	f002 f8f5 	bl	80087ec <ff_convert>
 8006602:	0003      	movs	r3, r0
 8006604:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006606:	197b      	adds	r3, r7, r5
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <create_name+0x9e>
 800660e:	2306      	movs	r3, #6
 8006610:	e1be      	b.n	8006990 <create_name+0x41c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006612:	2324      	movs	r3, #36	; 0x24
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	2b7f      	cmp	r3, #127	; 0x7f
 800661a:	d80b      	bhi.n	8006634 <create_name+0xc0>
 800661c:	2324      	movs	r3, #36	; 0x24
 800661e:	18fb      	adds	r3, r7, r3
 8006620:	881a      	ldrh	r2, [r3, #0]
 8006622:	4bab      	ldr	r3, [pc, #684]	; (80068d0 <create_name+0x35c>)
 8006624:	0011      	movs	r1, r2
 8006626:	0018      	movs	r0, r3
 8006628:	f7fe f9ab 	bl	8004982 <chk_chr>
 800662c:	1e03      	subs	r3, r0, #0
 800662e:	d001      	beq.n	8006634 <create_name+0xc0>
			return FR_INVALID_NAME;
 8006630:	2306      	movs	r3, #6
 8006632:	e1ad      	b.n	8006990 <create_name+0x41c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	617a      	str	r2, [r7, #20]
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	18d3      	adds	r3, r2, r3
 8006640:	2224      	movs	r2, #36	; 0x24
 8006642:	18ba      	adds	r2, r7, r2
 8006644:	8812      	ldrh	r2, [r2, #0]
 8006646:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006648:	e7b1      	b.n	80065ae <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	18d2      	adds	r2, r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006654:	2324      	movs	r3, #36	; 0x24
 8006656:	18fb      	adds	r3, r7, r3
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	2b1f      	cmp	r3, #31
 800665c:	d801      	bhi.n	8006662 <create_name+0xee>
 800665e:	2204      	movs	r2, #4
 8006660:	e000      	b.n	8006664 <create_name+0xf0>
 8006662:	2200      	movs	r2, #0
 8006664:	2326      	movs	r3, #38	; 0x26
 8006666:	18fb      	adds	r3, r7, r3
 8006668:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800666a:	e016      	b.n	800669a <create_name+0x126>
		w = lfn[di - 1];
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	4a99      	ldr	r2, [pc, #612]	; (80068d4 <create_name+0x360>)
 8006670:	4694      	mov	ip, r2
 8006672:	4463      	add	r3, ip
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	18d2      	adds	r2, r2, r3
 800667a:	2124      	movs	r1, #36	; 0x24
 800667c:	187b      	adds	r3, r7, r1
 800667e:	8812      	ldrh	r2, [r2, #0]
 8006680:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8006682:	187b      	adds	r3, r7, r1
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	2b20      	cmp	r3, #32
 8006688:	d004      	beq.n	8006694 <create_name+0x120>
 800668a:	2324      	movs	r3, #36	; 0x24
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	2b2e      	cmp	r3, #46	; 0x2e
 8006692:	d106      	bne.n	80066a2 <create_name+0x12e>
		di--;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3b01      	subs	r3, #1
 8006698:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e5      	bne.n	800666c <create_name+0xf8>
 80066a0:	e000      	b.n	80066a4 <create_name+0x130>
		if (w != ' ' && w != '.') break;
 80066a2:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <create_name+0x13a>
 80066aa:	2306      	movs	r3, #6
 80066ac:	e170      	b.n	8006990 <create_name+0x41c>

	lfn[di] = 0;						/* LFN is created */
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	18d3      	adds	r3, r2, r3
 80066b6:	2200      	movs	r2, #0
 80066b8:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	2383      	movs	r3, #131	; 0x83
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	58d3      	ldr	r3, [r2, r3]
 80066c2:	220b      	movs	r2, #11
 80066c4:	2120      	movs	r1, #32
 80066c6:	0018      	movs	r0, r3
 80066c8:	f7fe f91e 	bl	8004908 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80066cc:	2300      	movs	r3, #0
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e002      	b.n	80066d8 <create_name+0x164>
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	3301      	adds	r3, #1
 80066d6:	61bb      	str	r3, [r7, #24]
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	18d3      	adds	r3, r2, r3
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	2b20      	cmp	r3, #32
 80066e4:	d0f5      	beq.n	80066d2 <create_name+0x15e>
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	18d3      	adds	r3, r2, r3
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	2b2e      	cmp	r3, #46	; 0x2e
 80066f2:	d0ee      	beq.n	80066d2 <create_name+0x15e>
	if (si) cf |= NS_LOSS | NS_LFN;
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <create_name+0x19c>
 80066fa:	2226      	movs	r2, #38	; 0x26
 80066fc:	18bb      	adds	r3, r7, r2
 80066fe:	18ba      	adds	r2, r7, r2
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	2103      	movs	r1, #3
 8006704:	430a      	orrs	r2, r1
 8006706:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006708:	e002      	b.n	8006710 <create_name+0x19c>
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	3b01      	subs	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <create_name+0x1b6>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	4a6e      	ldr	r2, [pc, #440]	; (80068d4 <create_name+0x360>)
 800671a:	4694      	mov	ip, r2
 800671c:	4463      	add	r3, ip
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	18d3      	adds	r3, r2, r3
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	2b2e      	cmp	r3, #46	; 0x2e
 8006728:	d1ef      	bne.n	800670a <create_name+0x196>

	b = i = 0; ni = 8;
 800672a:	2300      	movs	r3, #0
 800672c:	623b      	str	r3, [r7, #32]
 800672e:	2327      	movs	r3, #39	; 0x27
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	2308      	movs	r3, #8
 8006738:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	61ba      	str	r2, [r7, #24]
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	18d2      	adds	r2, r2, r3
 8006746:	2124      	movs	r1, #36	; 0x24
 8006748:	187b      	adds	r3, r7, r1
 800674a:	8812      	ldrh	r2, [r2, #0]
 800674c:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 800674e:	187b      	adds	r3, r7, r1
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d100      	bne.n	8006758 <create_name+0x1e4>
 8006756:	e0b9      	b.n	80068cc <create_name+0x358>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006758:	2324      	movs	r3, #36	; 0x24
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	2b20      	cmp	r3, #32
 8006760:	d008      	beq.n	8006774 <create_name+0x200>
 8006762:	2324      	movs	r3, #36	; 0x24
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	2b2e      	cmp	r3, #46	; 0x2e
 800676a:	d10b      	bne.n	8006784 <create_name+0x210>
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	429a      	cmp	r2, r3
 8006772:	d007      	beq.n	8006784 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 8006774:	2226      	movs	r2, #38	; 0x26
 8006776:	18bb      	adds	r3, r7, r2
 8006778:	18ba      	adds	r2, r7, r2
 800677a:	7812      	ldrb	r2, [r2, #0]
 800677c:	2103      	movs	r1, #3
 800677e:	430a      	orrs	r2, r1
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	e0a2      	b.n	80068ca <create_name+0x356>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006784:	6a3a      	ldr	r2, [r7, #32]
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	429a      	cmp	r2, r3
 800678a:	d203      	bcs.n	8006794 <create_name+0x220>
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	429a      	cmp	r2, r3
 8006792:	d127      	bne.n	80067e4 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b0b      	cmp	r3, #11
 8006798:	d107      	bne.n	80067aa <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 800679a:	2226      	movs	r2, #38	; 0x26
 800679c:	18bb      	adds	r3, r7, r2
 800679e:	18ba      	adds	r2, r7, r2
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	2103      	movs	r1, #3
 80067a4:	430a      	orrs	r2, r1
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e09b      	b.n	80068e2 <create_name+0x36e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d006      	beq.n	80067c0 <create_name+0x24c>
 80067b2:	2226      	movs	r2, #38	; 0x26
 80067b4:	18bb      	adds	r3, r7, r2
 80067b6:	18ba      	adds	r2, r7, r2
 80067b8:	7812      	ldrb	r2, [r2, #0]
 80067ba:	2103      	movs	r1, #3
 80067bc:	430a      	orrs	r2, r1
 80067be:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d900      	bls.n	80067ca <create_name+0x256>
 80067c8:	e08a      	b.n	80068e0 <create_name+0x36c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	2308      	movs	r3, #8
 80067d0:	623b      	str	r3, [r7, #32]
 80067d2:	230b      	movs	r3, #11
 80067d4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80067d6:	2227      	movs	r2, #39	; 0x27
 80067d8:	18bb      	adds	r3, r7, r2
 80067da:	18ba      	adds	r2, r7, r2
 80067dc:	7812      	ldrb	r2, [r2, #0]
 80067de:	0092      	lsls	r2, r2, #2
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	e072      	b.n	80068ca <create_name+0x356>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80067e4:	2324      	movs	r3, #36	; 0x24
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	2b7f      	cmp	r3, #127	; 0x7f
 80067ec:	d91c      	bls.n	8006828 <create_name+0x2b4>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80067ee:	2524      	movs	r5, #36	; 0x24
 80067f0:	197c      	adds	r4, r7, r5
 80067f2:	197b      	adds	r3, r7, r5
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	2100      	movs	r1, #0
 80067f8:	0018      	movs	r0, r3
 80067fa:	f001 fff7 	bl	80087ec <ff_convert>
 80067fe:	0003      	movs	r3, r0
 8006800:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006802:	197b      	adds	r3, r7, r5
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <create_name+0x2a6>
 800680a:	2124      	movs	r1, #36	; 0x24
 800680c:	187b      	adds	r3, r7, r1
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	3b80      	subs	r3, #128	; 0x80
 8006812:	4a31      	ldr	r2, [pc, #196]	; (80068d8 <create_name+0x364>)
 8006814:	5cd2      	ldrb	r2, [r2, r3]
 8006816:	187b      	adds	r3, r7, r1
 8006818:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800681a:	2226      	movs	r2, #38	; 0x26
 800681c:	18bb      	adds	r3, r7, r2
 800681e:	18ba      	adds	r2, r7, r2
 8006820:	7812      	ldrb	r2, [r2, #0]
 8006822:	2102      	movs	r1, #2
 8006824:	430a      	orrs	r2, r1
 8006826:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006828:	2324      	movs	r3, #36	; 0x24
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <create_name+0x2d2>
 8006832:	2324      	movs	r3, #36	; 0x24
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	881a      	ldrh	r2, [r3, #0]
 8006838:	4b28      	ldr	r3, [pc, #160]	; (80068dc <create_name+0x368>)
 800683a:	0011      	movs	r1, r2
 800683c:	0018      	movs	r0, r3
 800683e:	f7fe f8a0 	bl	8004982 <chk_chr>
 8006842:	1e03      	subs	r3, r0, #0
 8006844:	d00b      	beq.n	800685e <create_name+0x2ea>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006846:	2324      	movs	r3, #36	; 0x24
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	225f      	movs	r2, #95	; 0x5f
 800684c:	801a      	strh	r2, [r3, #0]
 800684e:	2226      	movs	r2, #38	; 0x26
 8006850:	18bb      	adds	r3, r7, r2
 8006852:	18ba      	adds	r2, r7, r2
 8006854:	7812      	ldrb	r2, [r2, #0]
 8006856:	2103      	movs	r1, #3
 8006858:	430a      	orrs	r2, r1
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	e028      	b.n	80068b0 <create_name+0x33c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800685e:	2324      	movs	r3, #36	; 0x24
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d90c      	bls.n	8006882 <create_name+0x30e>
 8006868:	2324      	movs	r3, #36	; 0x24
 800686a:	18fb      	adds	r3, r7, r3
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	2b5a      	cmp	r3, #90	; 0x5a
 8006870:	d807      	bhi.n	8006882 <create_name+0x30e>
					b |= 2;
 8006872:	2227      	movs	r2, #39	; 0x27
 8006874:	18bb      	adds	r3, r7, r2
 8006876:	18ba      	adds	r2, r7, r2
 8006878:	7812      	ldrb	r2, [r2, #0]
 800687a:	2102      	movs	r1, #2
 800687c:	430a      	orrs	r2, r1
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	e016      	b.n	80068b0 <create_name+0x33c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006882:	2324      	movs	r3, #36	; 0x24
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	2b60      	cmp	r3, #96	; 0x60
 800688a:	d911      	bls.n	80068b0 <create_name+0x33c>
 800688c:	2324      	movs	r3, #36	; 0x24
 800688e:	18fb      	adds	r3, r7, r3
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	2b7a      	cmp	r3, #122	; 0x7a
 8006894:	d80c      	bhi.n	80068b0 <create_name+0x33c>
						b |= 1; w -= 0x20;
 8006896:	2227      	movs	r2, #39	; 0x27
 8006898:	18bb      	adds	r3, r7, r2
 800689a:	18ba      	adds	r2, r7, r2
 800689c:	7812      	ldrb	r2, [r2, #0]
 800689e:	2101      	movs	r1, #1
 80068a0:	430a      	orrs	r2, r1
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	2224      	movs	r2, #36	; 0x24
 80068a6:	18bb      	adds	r3, r7, r2
 80068a8:	18ba      	adds	r2, r7, r2
 80068aa:	8812      	ldrh	r2, [r2, #0]
 80068ac:	3a20      	subs	r2, #32
 80068ae:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	2383      	movs	r3, #131	; 0x83
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	58d2      	ldr	r2, [r2, r3]
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	6239      	str	r1, [r7, #32]
 80068be:	18d3      	adds	r3, r2, r3
 80068c0:	2224      	movs	r2, #36	; 0x24
 80068c2:	18ba      	adds	r2, r7, r2
 80068c4:	8812      	ldrh	r2, [r2, #0]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80068ca:	e736      	b.n	800673a <create_name+0x1c6>
		if (!w) break;					/* Break on end of the LFN */
 80068cc:	46c0      	nop			; (mov r8, r8)
 80068ce:	e008      	b.n	80068e2 <create_name+0x36e>
 80068d0:	08009260 	.word	0x08009260
 80068d4:	7fffffff 	.word	0x7fffffff
 80068d8:	08009338 	.word	0x08009338
 80068dc:	0800926c 	.word	0x0800926c
			if (si > di) break;			/* No extension */
 80068e0:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	2383      	movs	r3, #131	; 0x83
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	58d3      	ldr	r3, [r2, r3]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2be5      	cmp	r3, #229	; 0xe5
 80068ee:	d105      	bne.n	80068fc <create_name+0x388>
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	2383      	movs	r3, #131	; 0x83
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	58d3      	ldr	r3, [r2, r3]
 80068f8:	2205      	movs	r2, #5
 80068fa:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d105      	bne.n	800690e <create_name+0x39a>
 8006902:	2227      	movs	r2, #39	; 0x27
 8006904:	18bb      	adds	r3, r7, r2
 8006906:	18ba      	adds	r2, r7, r2
 8006908:	7812      	ldrb	r2, [r2, #0]
 800690a:	0092      	lsls	r2, r2, #2
 800690c:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800690e:	2327      	movs	r3, #39	; 0x27
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	220c      	movs	r2, #12
 8006916:	4013      	ands	r3, r2
 8006918:	2b0c      	cmp	r3, #12
 800691a:	d006      	beq.n	800692a <create_name+0x3b6>
 800691c:	2327      	movs	r3, #39	; 0x27
 800691e:	18fb      	adds	r3, r7, r3
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2203      	movs	r2, #3
 8006924:	4013      	ands	r3, r2
 8006926:	2b03      	cmp	r3, #3
 8006928:	d106      	bne.n	8006938 <create_name+0x3c4>
		cf |= NS_LFN;
 800692a:	2226      	movs	r2, #38	; 0x26
 800692c:	18bb      	adds	r3, r7, r2
 800692e:	18ba      	adds	r2, r7, r2
 8006930:	7812      	ldrb	r2, [r2, #0]
 8006932:	2102      	movs	r1, #2
 8006934:	430a      	orrs	r2, r1
 8006936:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006938:	2326      	movs	r3, #38	; 0x26
 800693a:	18fb      	adds	r3, r7, r3
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2202      	movs	r2, #2
 8006940:	4013      	ands	r3, r2
 8006942:	d11b      	bne.n	800697c <create_name+0x408>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006944:	2327      	movs	r3, #39	; 0x27
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2203      	movs	r2, #3
 800694c:	4013      	ands	r3, r2
 800694e:	2b01      	cmp	r3, #1
 8006950:	d106      	bne.n	8006960 <create_name+0x3ec>
 8006952:	2226      	movs	r2, #38	; 0x26
 8006954:	18bb      	adds	r3, r7, r2
 8006956:	18ba      	adds	r2, r7, r2
 8006958:	7812      	ldrb	r2, [r2, #0]
 800695a:	2110      	movs	r1, #16
 800695c:	430a      	orrs	r2, r1
 800695e:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006960:	2327      	movs	r3, #39	; 0x27
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	220c      	movs	r2, #12
 8006968:	4013      	ands	r3, r2
 800696a:	2b04      	cmp	r3, #4
 800696c:	d106      	bne.n	800697c <create_name+0x408>
 800696e:	2226      	movs	r2, #38	; 0x26
 8006970:	18bb      	adds	r3, r7, r2
 8006972:	18ba      	adds	r2, r7, r2
 8006974:	7812      	ldrb	r2, [r2, #0]
 8006976:	2108      	movs	r1, #8
 8006978:	430a      	orrs	r2, r1
 800697a:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	2383      	movs	r3, #131	; 0x83
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	58d3      	ldr	r3, [r2, r3]
 8006984:	330b      	adds	r3, #11
 8006986:	2226      	movs	r2, #38	; 0x26
 8006988:	18ba      	adds	r2, r7, r2
 800698a:	7812      	ldrb	r2, [r2, #0]
 800698c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800698e:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006990:	0018      	movs	r0, r3
 8006992:	46bd      	mov	sp, r7
 8006994:	b00a      	add	sp, #40	; 0x28
 8006996:	bdb0      	pop	{r4, r5, r7, pc}

08006998 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006998:	b5b0      	push	{r4, r5, r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b2f      	cmp	r3, #47	; 0x2f
 80069a8:	d003      	beq.n	80069b2 <follow_path+0x1a>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b5c      	cmp	r3, #92	; 0x5c
 80069b0:	d102      	bne.n	80069b8 <follow_path+0x20>
		path++;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	2381      	movs	r3, #129	; 0x81
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	2100      	movs	r1, #0
 80069c0:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b1f      	cmp	r3, #31
 80069c8:	d80d      	bhi.n	80069e6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80069ca:	230f      	movs	r3, #15
 80069cc:	18fc      	adds	r4, r7, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2100      	movs	r1, #0
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7fe ff0a 	bl	80057ec <dir_sdi>
 80069d8:	0003      	movs	r3, r0
 80069da:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a33      	ldr	r2, [pc, #204]	; (8006aac <follow_path+0x114>)
 80069e0:	2100      	movs	r1, #0
 80069e2:	5099      	str	r1, [r3, r2]
 80069e4:	e05b      	b.n	8006a9e <follow_path+0x106>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80069e6:	250f      	movs	r5, #15
 80069e8:	197c      	adds	r4, r7, r5
 80069ea:	003a      	movs	r2, r7
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	0011      	movs	r1, r2
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7ff fdbf 	bl	8006574 <create_name>
 80069f6:	0003      	movs	r3, r0
 80069f8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80069fa:	197b      	adds	r3, r7, r5
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d148      	bne.n	8006a94 <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006a02:	250f      	movs	r5, #15
 8006a04:	197c      	adds	r4, r7, r5
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7ff fb73 	bl	80060f4 <dir_find>
 8006a0e:	0003      	movs	r3, r0
 8006a10:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	2383      	movs	r3, #131	; 0x83
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	58d2      	ldr	r2, [r2, r3]
 8006a1a:	230e      	movs	r3, #14
 8006a1c:	18fb      	adds	r3, r7, r3
 8006a1e:	7ad2      	ldrb	r2, [r2, #11]
 8006a20:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8006a22:	197b      	adds	r3, r7, r5
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00f      	beq.n	8006a4a <follow_path+0xb2>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006a2a:	230f      	movs	r3, #15
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d131      	bne.n	8006a98 <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006a34:	230e      	movs	r3, #14
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d12b      	bne.n	8006a98 <follow_path+0x100>
 8006a40:	230f      	movs	r3, #15
 8006a42:	18fb      	adds	r3, r7, r3
 8006a44:	2205      	movs	r2, #5
 8006a46:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8006a48:	e026      	b.n	8006a98 <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a4a:	230e      	movs	r3, #14
 8006a4c:	18fb      	adds	r3, r7, r3
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	2204      	movs	r2, #4
 8006a52:	4013      	ands	r3, r2
 8006a54:	d122      	bne.n	8006a9c <follow_path+0x104>
			dir = dp->dir;						/* Follow the sub-directory */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a14      	ldr	r2, [pc, #80]	; (8006aac <follow_path+0x114>)
 8006a5a:	589b      	ldr	r3, [r3, r2]
 8006a5c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	330b      	adds	r3, #11
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	001a      	movs	r2, r3
 8006a66:	2310      	movs	r3, #16
 8006a68:	4013      	ands	r3, r2
 8006a6a:	d104      	bne.n	8006a76 <follow_path+0xde>
				res = FR_NO_PATH; break;
 8006a6c:	230f      	movs	r3, #15
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	2205      	movs	r2, #5
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	e013      	b.n	8006a9e <follow_path+0x106>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	58d3      	ldr	r3, [r2, r3]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	0011      	movs	r1, r2
 8006a82:	0018      	movs	r0, r3
 8006a84:	f7ff f922 	bl	8005ccc <ld_clust>
 8006a88:	0001      	movs	r1, r0
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	2381      	movs	r3, #129	; 0x81
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a92:	e7a8      	b.n	80069e6 <follow_path+0x4e>
			if (res != FR_OK) break;
 8006a94:	46c0      	nop			; (mov r8, r8)
 8006a96:	e002      	b.n	8006a9e <follow_path+0x106>
				break;
 8006a98:	46c0      	nop			; (mov r8, r8)
 8006a9a:	e000      	b.n	8006a9e <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a9c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8006a9e:	230f      	movs	r3, #15
 8006aa0:	18fb      	adds	r3, r7, r3
 8006aa2:	781b      	ldrb	r3, [r3, #0]
}
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b004      	add	sp, #16
 8006aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8006aac:	00000414 	.word	0x00000414

08006ab0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	425b      	negs	r3, r3
 8006abc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d031      	beq.n	8006b2a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	e002      	b.n	8006ad4 <get_ldnumber+0x24>
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b1f      	cmp	r3, #31
 8006ada:	d903      	bls.n	8006ae4 <get_ldnumber+0x34>
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b3a      	cmp	r3, #58	; 0x3a
 8006ae2:	d1f4      	bne.n	8006ace <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b3a      	cmp	r3, #58	; 0x3a
 8006aea:	d11c      	bne.n	8006b26 <get_ldnumber+0x76>
			tp = *path;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	60fa      	str	r2, [r7, #12]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	3b30      	subs	r3, #48	; 0x30
 8006afc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b09      	cmp	r3, #9
 8006b02:	d80e      	bhi.n	8006b22 <get_ldnumber+0x72>
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d10a      	bne.n	8006b22 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d107      	bne.n	8006b22 <get_ldnumber+0x72>
					vol = (int)i;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	e002      	b.n	8006b2c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006b26:	2300      	movs	r3, #0
 8006b28:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006b2a:	693b      	ldr	r3, [r7, #16]
}
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b006      	add	sp, #24
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a30      	ldr	r2, [pc, #192]	; (8006c04 <check_fs+0xd0>)
 8006b42:	2100      	movs	r1, #0
 8006b44:	5499      	strb	r1, [r3, r2]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	492f      	ldr	r1, [pc, #188]	; (8006c08 <check_fs+0xd4>)
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	4252      	negs	r2, r2
 8006b4e:	505a      	str	r2, [r3, r1]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	0011      	movs	r1, r2
 8006b56:	0018      	movs	r0, r3
 8006b58:	f7fe f948 	bl	8004dec <move_window>
 8006b5c:	1e03      	subs	r3, r0, #0
 8006b5e:	d001      	beq.n	8006b64 <check_fs+0x30>
		return 3;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e04b      	b.n	8006bfc <check_fs+0xc8>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	33ff      	adds	r3, #255	; 0xff
 8006b68:	33ff      	adds	r3, #255	; 0xff
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	b21a      	sxth	r2, r3
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	23ff      	movs	r3, #255	; 0xff
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	5ccb      	ldrb	r3, [r1, r3]
 8006b7a:	b21b      	sxth	r3, r3
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	b21b      	sxth	r3, r3
 8006b80:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <check_fs+0xd8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d001      	beq.n	8006b8a <check_fs+0x56>
		return 2;
 8006b86:	2302      	movs	r3, #2
 8006b88:	e038      	b.n	8006bfc <check_fs+0xc8>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3336      	adds	r3, #54	; 0x36
 8006b8e:	3303      	adds	r3, #3
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	061a      	lsls	r2, r3, #24
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3336      	adds	r3, #54	; 0x36
 8006b98:	3302      	adds	r3, #2
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	041b      	lsls	r3, r3, #16
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	3236      	adds	r2, #54	; 0x36
 8006ba4:	3201      	adds	r2, #1
 8006ba6:	7812      	ldrb	r2, [r2, #0]
 8006ba8:	0212      	lsls	r2, r2, #8
 8006baa:	4313      	orrs	r3, r2
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	2136      	movs	r1, #54	; 0x36
 8006bb0:	5c52      	ldrb	r2, [r2, r1]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	021b      	lsls	r3, r3, #8
 8006bb6:	0a1b      	lsrs	r3, r3, #8
 8006bb8:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <check_fs+0xdc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d101      	bne.n	8006bc2 <check_fs+0x8e>
		return 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e01c      	b.n	8006bfc <check_fs+0xc8>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3352      	adds	r3, #82	; 0x52
 8006bc6:	3303      	adds	r3, #3
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	061a      	lsls	r2, r3, #24
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3352      	adds	r3, #82	; 0x52
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	041b      	lsls	r3, r3, #16
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	3252      	adds	r2, #82	; 0x52
 8006bdc:	3201      	adds	r2, #1
 8006bde:	7812      	ldrb	r2, [r2, #0]
 8006be0:	0212      	lsls	r2, r2, #8
 8006be2:	4313      	orrs	r3, r2
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	2152      	movs	r1, #82	; 0x52
 8006be8:	5c52      	ldrb	r2, [r2, r1]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	4a07      	ldr	r2, [pc, #28]	; (8006c10 <check_fs+0xdc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d101      	bne.n	8006bfa <check_fs+0xc6>
		return 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e000      	b.n	8006bfc <check_fs+0xc8>

	return 1;
 8006bfa:	2301      	movs	r3, #1
}
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b002      	add	sp, #8
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	00000404 	.word	0x00000404
 8006c08:	0000042c 	.word	0x0000042c
 8006c0c:	ffffaa55 	.word	0xffffaa55
 8006c10:	00544146 	.word	0x00544146

08006c14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006c14:	b5b0      	push	{r4, r5, r7, lr}
 8006c16:	b096      	sub	sp, #88	; 0x58
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	1dfb      	adds	r3, r7, #7
 8006c20:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f7ff ff40 	bl	8006ab0 <get_ldnumber>
 8006c30:	0003      	movs	r3, r0
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	da01      	bge.n	8006c3e <find_volume+0x2a>
 8006c3a:	230b      	movs	r3, #11
 8006c3c:	e31f      	b.n	800727e <find_volume+0x66a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006c3e:	4bcf      	ldr	r3, [pc, #828]	; (8006f7c <find_volume+0x368>)
 8006c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c42:	0092      	lsls	r2, r2, #2
 8006c44:	58d3      	ldr	r3, [r2, r3]
 8006c46:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <find_volume+0x3e>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	e315      	b.n	800727e <find_volume+0x66a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c56:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c5a:	2380      	movs	r3, #128	; 0x80
 8006c5c:	00db      	lsls	r3, r3, #3
 8006c5e:	5cd3      	ldrb	r3, [r2, r3]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01c      	beq.n	8006c9e <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	4ac6      	ldr	r2, [pc, #792]	; (8006f80 <find_volume+0x36c>)
 8006c68:	5c9b      	ldrb	r3, [r3, r2]
 8006c6a:	2537      	movs	r5, #55	; 0x37
 8006c6c:	197c      	adds	r4, r7, r5
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f7fd fd62 	bl	8004738 <disk_status>
 8006c74:	0003      	movs	r3, r0
 8006c76:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006c78:	197b      	adds	r3, r7, r5
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d10d      	bne.n	8006c9e <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006c82:	1dfb      	adds	r3, r7, #7
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d007      	beq.n	8006c9a <find_volume+0x86>
 8006c8a:	2337      	movs	r3, #55	; 0x37
 8006c8c:	18fb      	adds	r3, r7, r3
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2204      	movs	r2, #4
 8006c92:	4013      	ands	r3, r2
 8006c94:	d001      	beq.n	8006c9a <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 8006c96:	230a      	movs	r3, #10
 8006c98:	e2f1      	b.n	800727e <find_volume+0x66a>
			return FR_OK;				/* The file system object is valid */
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e2ef      	b.n	800727e <find_volume+0x66a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ca0:	2380      	movs	r3, #128	; 0x80
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006caa:	b2d9      	uxtb	r1, r3
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	4ab4      	ldr	r2, [pc, #720]	; (8006f80 <find_volume+0x36c>)
 8006cb0:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	4ab2      	ldr	r2, [pc, #712]	; (8006f80 <find_volume+0x36c>)
 8006cb6:	5c9b      	ldrb	r3, [r3, r2]
 8006cb8:	2537      	movs	r5, #55	; 0x37
 8006cba:	197c      	adds	r4, r7, r5
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	f7fd fd5d 	bl	800477c <disk_initialize>
 8006cc2:	0003      	movs	r3, r0
 8006cc4:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006cc6:	197b      	adds	r3, r7, r5
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4013      	ands	r3, r2
 8006cce:	d001      	beq.n	8006cd4 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e2d4      	b.n	800727e <find_volume+0x66a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006cd4:	1dfb      	adds	r3, r7, #7
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d007      	beq.n	8006cec <find_volume+0xd8>
 8006cdc:	2337      	movs	r3, #55	; 0x37
 8006cde:	18fb      	adds	r3, r7, r3
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d001      	beq.n	8006cec <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 8006ce8:	230a      	movs	r3, #10
 8006cea:	e2c8      	b.n	800727e <find_volume+0x66a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	4aa4      	ldr	r2, [pc, #656]	; (8006f80 <find_volume+0x36c>)
 8006cf0:	5c98      	ldrb	r0, [r3, r2]
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	4aa3      	ldr	r2, [pc, #652]	; (8006f84 <find_volume+0x370>)
 8006cf6:	4694      	mov	ip, r2
 8006cf8:	4463      	add	r3, ip
 8006cfa:	001a      	movs	r2, r3
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	f7fd fdbf 	bl	8004880 <disk_ioctl>
 8006d02:	1e03      	subs	r3, r0, #0
 8006d04:	d10c      	bne.n	8006d20 <find_volume+0x10c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	4a9e      	ldr	r2, [pc, #632]	; (8006f84 <find_volume+0x370>)
 8006d0a:	5a9b      	ldrh	r3, [r3, r2]
 8006d0c:	4a9e      	ldr	r2, [pc, #632]	; (8006f88 <find_volume+0x374>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d906      	bls.n	8006d20 <find_volume+0x10c>
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	4a9b      	ldr	r2, [pc, #620]	; (8006f84 <find_volume+0x370>)
 8006d16:	5a9a      	ldrh	r2, [r3, r2]
 8006d18:	2380      	movs	r3, #128	; 0x80
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d901      	bls.n	8006d24 <find_volume+0x110>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e2ac      	b.n	800727e <find_volume+0x66a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006d28:	2557      	movs	r5, #87	; 0x57
 8006d2a:	197c      	adds	r4, r7, r5
 8006d2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	0011      	movs	r1, r2
 8006d32:	0018      	movs	r0, r3
 8006d34:	f7ff fefe 	bl	8006b34 <check_fs>
 8006d38:	0003      	movs	r3, r0
 8006d3a:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006d3c:	197b      	adds	r3, r7, r5
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d155      	bne.n	8006df0 <find_volume+0x1dc>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006d44:	2300      	movs	r3, #0
 8006d46:	643b      	str	r3, [r7, #64]	; 0x40
 8006d48:	e027      	b.n	8006d9a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	33bf      	adds	r3, #191	; 0xbf
 8006d52:	33ff      	adds	r3, #255	; 0xff
 8006d54:	18d3      	adds	r3, r2, r3
 8006d56:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d012      	beq.n	8006d88 <find_volume+0x174>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	330b      	adds	r3, #11
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	061a      	lsls	r2, r3, #24
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	330a      	adds	r3, #10
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	041b      	lsls	r3, r3, #16
 8006d72:	4313      	orrs	r3, r2
 8006d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d76:	3209      	adds	r2, #9
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	0212      	lsls	r2, r2, #8
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d80:	3208      	adds	r2, #8
 8006d82:	7812      	ldrb	r2, [r2, #0]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	e000      	b.n	8006d8a <find_volume+0x176>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2214      	movs	r2, #20
 8006d8c:	18ba      	adds	r2, r7, r2
 8006d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d90:	0089      	lsls	r1, r1, #2
 8006d92:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d96:	3301      	adds	r3, #1
 8006d98:	643b      	str	r3, [r7, #64]	; 0x40
 8006d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d9d4      	bls.n	8006d4a <find_volume+0x136>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006da0:	2300      	movs	r3, #0
 8006da2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <find_volume+0x19c>
 8006daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dac:	3b01      	subs	r3, #1
 8006dae:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006db0:	2314      	movs	r3, #20
 8006db2:	18fb      	adds	r3, r7, r3
 8006db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006db6:	0092      	lsls	r2, r2, #2
 8006db8:	58d3      	ldr	r3, [r2, r3]
 8006dba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d008      	beq.n	8006dd4 <find_volume+0x1c0>
 8006dc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	0011      	movs	r1, r2
 8006dc8:	0018      	movs	r0, r3
 8006dca:	f7ff feb3 	bl	8006b34 <check_fs>
 8006dce:	0003      	movs	r3, r0
 8006dd0:	001a      	movs	r2, r3
 8006dd2:	e000      	b.n	8006dd6 <find_volume+0x1c2>
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	2157      	movs	r1, #87	; 0x57
 8006dd8:	187b      	adds	r3, r7, r1
 8006dda:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006ddc:	187b      	adds	r3, r7, r1
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <find_volume+0x1dc>
 8006de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de6:	3301      	adds	r3, #1
 8006de8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d9df      	bls.n	8006db0 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006df0:	2357      	movs	r3, #87	; 0x57
 8006df2:	18fb      	adds	r3, r7, r3
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d101      	bne.n	8006dfe <find_volume+0x1ea>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e23f      	b.n	800727e <find_volume+0x66a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006dfe:	2357      	movs	r3, #87	; 0x57
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <find_volume+0x1f8>
 8006e08:	230d      	movs	r3, #13
 8006e0a:	e238      	b.n	800727e <find_volume+0x66a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	7b1b      	ldrb	r3, [r3, #12]
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	b21a      	sxth	r2, r3
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	7adb      	ldrb	r3, [r3, #11]
 8006e18:	b21b      	sxth	r3, r3
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	b21b      	sxth	r3, r3
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	4958      	ldr	r1, [pc, #352]	; (8006f84 <find_volume+0x370>)
 8006e24:	5a5b      	ldrh	r3, [r3, r1]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d001      	beq.n	8006e2e <find_volume+0x21a>
		return FR_NO_FILESYSTEM;
 8006e2a:	230d      	movs	r3, #13
 8006e2c:	e227      	b.n	800727e <find_volume+0x66a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	7ddb      	ldrb	r3, [r3, #23]
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	b21a      	sxth	r2, r3
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	7d9b      	ldrb	r3, [r3, #22]
 8006e3a:	b21b      	sxth	r3, r3
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	b21b      	sxth	r3, r3
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d112      	bne.n	8006e70 <find_volume+0x25c>
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	2227      	movs	r2, #39	; 0x27
 8006e4e:	5c9b      	ldrb	r3, [r3, r2]
 8006e50:	061a      	lsls	r2, r3, #24
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	2126      	movs	r1, #38	; 0x26
 8006e56:	5c5b      	ldrb	r3, [r3, r1]
 8006e58:	041b      	lsls	r3, r3, #16
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e5e:	2125      	movs	r1, #37	; 0x25
 8006e60:	5c52      	ldrb	r2, [r2, r1]
 8006e62:	0212      	lsls	r2, r2, #8
 8006e64:	4313      	orrs	r3, r2
 8006e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e68:	2124      	movs	r1, #36	; 0x24
 8006e6a:	5c52      	ldrb	r2, [r2, r1]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e72:	2383      	movs	r3, #131	; 0x83
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e78:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	7c19      	ldrb	r1, [r3, #16]
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	4a42      	ldr	r2, [pc, #264]	; (8006f8c <find_volume+0x378>)
 8006e82:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e86:	4a41      	ldr	r2, [pc, #260]	; (8006f8c <find_volume+0x378>)
 8006e88:	5c9b      	ldrb	r3, [r3, r2]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d006      	beq.n	8006e9c <find_volume+0x288>
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	4a3e      	ldr	r2, [pc, #248]	; (8006f8c <find_volume+0x378>)
 8006e92:	5c9b      	ldrb	r3, [r3, r2]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d001      	beq.n	8006e9c <find_volume+0x288>
		return FR_NO_FILESYSTEM;
 8006e98:	230d      	movs	r3, #13
 8006e9a:	e1f0      	b.n	800727e <find_volume+0x66a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	4a3b      	ldr	r2, [pc, #236]	; (8006f8c <find_volume+0x378>)
 8006ea0:	5c9b      	ldrb	r3, [r3, r2]
 8006ea2:	001a      	movs	r2, r3
 8006ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea6:	4353      	muls	r3, r2
 8006ea8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	7b59      	ldrb	r1, [r3, #13]
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	4a37      	ldr	r2, [pc, #220]	; (8006f90 <find_volume+0x37c>)
 8006eb2:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	4a36      	ldr	r2, [pc, #216]	; (8006f90 <find_volume+0x37c>)
 8006eb8:	5c9b      	ldrb	r3, [r3, r2]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <find_volume+0x2be>
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	4a33      	ldr	r2, [pc, #204]	; (8006f90 <find_volume+0x37c>)
 8006ec2:	5c9b      	ldrb	r3, [r3, r2]
 8006ec4:	0019      	movs	r1, r3
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	4a31      	ldr	r2, [pc, #196]	; (8006f90 <find_volume+0x37c>)
 8006eca:	5c9b      	ldrb	r3, [r3, r2]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	400b      	ands	r3, r1
 8006ed0:	d001      	beq.n	8006ed6 <find_volume+0x2c2>
		return FR_NO_FILESYSTEM;
 8006ed2:	230d      	movs	r3, #13
 8006ed4:	e1d3      	b.n	800727e <find_volume+0x66a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	7c9b      	ldrb	r3, [r3, #18]
 8006eda:	021b      	lsls	r3, r3, #8
 8006edc:	b21a      	sxth	r2, r3
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	7c5b      	ldrb	r3, [r3, #17]
 8006ee2:	b21b      	sxth	r3, r3
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	b21b      	sxth	r3, r3
 8006ee8:	b299      	uxth	r1, r3
 8006eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eec:	2381      	movs	r3, #129	; 0x81
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ef4:	2381      	movs	r3, #129	; 0x81
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	5ad0      	ldrh	r0, [r2, r3]
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	4a21      	ldr	r2, [pc, #132]	; (8006f84 <find_volume+0x370>)
 8006efe:	5a9b      	ldrh	r3, [r3, r2]
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	0019      	movs	r1, r3
 8006f06:	f7f9 f98d 	bl	8000224 <__aeabi_uidivmod>
 8006f0a:	000b      	movs	r3, r1
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <find_volume+0x302>
		return FR_NO_FILESYSTEM;
 8006f12:	230d      	movs	r3, #13
 8006f14:	e1b3      	b.n	800727e <find_volume+0x66a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	7d1b      	ldrb	r3, [r3, #20]
 8006f1a:	021b      	lsls	r3, r3, #8
 8006f1c:	b21a      	sxth	r2, r3
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	7cdb      	ldrb	r3, [r3, #19]
 8006f22:	b21b      	sxth	r3, r3
 8006f24:	4313      	orrs	r3, r2
 8006f26:	b21b      	sxth	r3, r3
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d112      	bne.n	8006f58 <find_volume+0x344>
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	2223      	movs	r2, #35	; 0x23
 8006f36:	5c9b      	ldrb	r3, [r3, r2]
 8006f38:	061a      	lsls	r2, r3, #24
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	2122      	movs	r1, #34	; 0x22
 8006f3e:	5c5b      	ldrb	r3, [r3, r1]
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	4313      	orrs	r3, r2
 8006f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f46:	2121      	movs	r1, #33	; 0x21
 8006f48:	5c52      	ldrb	r2, [r2, r1]
 8006f4a:	0212      	lsls	r2, r2, #8
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f50:	2120      	movs	r1, #32
 8006f52:	5c52      	ldrb	r2, [r2, r1]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	7bdb      	ldrb	r3, [r3, #15]
 8006f5c:	021b      	lsls	r3, r3, #8
 8006f5e:	b21a      	sxth	r2, r3
 8006f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f62:	7b9b      	ldrb	r3, [r3, #14]
 8006f64:	b21b      	sxth	r3, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	b21a      	sxth	r2, r3
 8006f6a:	212e      	movs	r1, #46	; 0x2e
 8006f6c:	187b      	adds	r3, r7, r1
 8006f6e:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006f70:	187b      	adds	r3, r7, r1
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10d      	bne.n	8006f94 <find_volume+0x380>
 8006f78:	230d      	movs	r3, #13
 8006f7a:	e180      	b.n	800727e <find_volume+0x66a>
 8006f7c:	200000ac 	.word	0x200000ac
 8006f80:	00000401 	.word	0x00000401
 8006f84:	0000040a 	.word	0x0000040a
 8006f88:	000001ff 	.word	0x000001ff
 8006f8c:	00000403 	.word	0x00000403
 8006f90:	00000402 	.word	0x00000402

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006f94:	232e      	movs	r3, #46	; 0x2e
 8006f96:	18fb      	adds	r3, r7, r3
 8006f98:	881a      	ldrh	r2, [r3, #0]
 8006f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9c:	18d4      	adds	r4, r2, r3
 8006f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fa0:	2381      	movs	r3, #129	; 0x81
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	5ad0      	ldrh	r0, [r2, r3]
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	4ab7      	ldr	r2, [pc, #732]	; (8007288 <find_volume+0x674>)
 8006faa:	5a9b      	ldrh	r3, [r3, r2]
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	0019      	movs	r1, r3
 8006fb2:	f7f9 f8b1 	bl	8000118 <__udivsi3>
 8006fb6:	0003      	movs	r3, r0
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	18e3      	adds	r3, r4, r3
 8006fbc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d201      	bcs.n	8006fca <find_volume+0x3b6>
 8006fc6:	230d      	movs	r3, #13
 8006fc8:	e159      	b.n	800727e <find_volume+0x66a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	1ad0      	subs	r0, r2, r3
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	4aae      	ldr	r2, [pc, #696]	; (800728c <find_volume+0x678>)
 8006fd4:	5c9b      	ldrb	r3, [r3, r2]
 8006fd6:	0019      	movs	r1, r3
 8006fd8:	f7f9 f89e 	bl	8000118 <__udivsi3>
 8006fdc:	0003      	movs	r3, r0
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <find_volume+0x3d6>
 8006fe6:	230d      	movs	r3, #13
 8006fe8:	e149      	b.n	800727e <find_volume+0x66a>
	fmt = FS_FAT12;
 8006fea:	2357      	movs	r3, #87	; 0x57
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	2201      	movs	r2, #1
 8006ff0:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	4aa6      	ldr	r2, [pc, #664]	; (8007290 <find_volume+0x67c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d903      	bls.n	8007002 <find_volume+0x3ee>
 8006ffa:	2357      	movs	r3, #87	; 0x57
 8006ffc:	18fb      	adds	r3, r7, r3
 8006ffe:	2202      	movs	r2, #2
 8007000:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	4aa3      	ldr	r2, [pc, #652]	; (8007294 <find_volume+0x680>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d903      	bls.n	8007012 <find_volume+0x3fe>
 800700a:	2357      	movs	r3, #87	; 0x57
 800700c:	18fb      	adds	r3, r7, r3
 800700e:	2203      	movs	r2, #3
 8007010:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	1c9a      	adds	r2, r3, #2
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	499f      	ldr	r1, [pc, #636]	; (8007298 <find_volume+0x684>)
 800701a:	505a      	str	r2, [r3, r1]
	fs->volbase = bsect;								/* Volume start sector */
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	499f      	ldr	r1, [pc, #636]	; (800729c <find_volume+0x688>)
 8007020:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007022:	505a      	str	r2, [r3, r1]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007024:	232e      	movs	r3, #46	; 0x2e
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	881a      	ldrh	r2, [r3, #0]
 800702a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800702c:	18d1      	adds	r1, r2, r3
 800702e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007030:	2384      	movs	r3, #132	; 0x84
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8007036:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	18d1      	adds	r1, r2, r3
 800703c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800703e:	2385      	movs	r3, #133	; 0x85
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 8007044:	2357      	movs	r3, #87	; 0x57
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	2b03      	cmp	r3, #3
 800704c:	d122      	bne.n	8007094 <find_volume+0x480>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800704e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007050:	2381      	movs	r3, #129	; 0x81
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	5ad3      	ldrh	r3, [r2, r3]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <find_volume+0x44a>
 800705a:	230d      	movs	r3, #13
 800705c:	e10f      	b.n	800727e <find_volume+0x66a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007060:	222f      	movs	r2, #47	; 0x2f
 8007062:	5c9b      	ldrb	r3, [r3, r2]
 8007064:	061a      	lsls	r2, r3, #24
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	212e      	movs	r1, #46	; 0x2e
 800706a:	5c5b      	ldrb	r3, [r3, r1]
 800706c:	041b      	lsls	r3, r3, #16
 800706e:	4313      	orrs	r3, r2
 8007070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007072:	212d      	movs	r1, #45	; 0x2d
 8007074:	5c52      	ldrb	r2, [r2, r1]
 8007076:	0212      	lsls	r2, r2, #8
 8007078:	4313      	orrs	r3, r2
 800707a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800707c:	212c      	movs	r1, #44	; 0x2c
 800707e:	5c52      	ldrb	r2, [r2, r1]
 8007080:	431a      	orrs	r2, r3
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	4986      	ldr	r1, [pc, #536]	; (80072a0 <find_volume+0x68c>)
 8007086:	505a      	str	r2, [r3, r1]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	4a83      	ldr	r2, [pc, #524]	; (8007298 <find_volume+0x684>)
 800708c:	589b      	ldr	r3, [r3, r2]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	647b      	str	r3, [r7, #68]	; 0x44
 8007092:	e028      	b.n	80070e6 <find_volume+0x4d2>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007096:	2381      	movs	r3, #129	; 0x81
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	5ad3      	ldrh	r3, [r2, r3]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <find_volume+0x490>
 80070a0:	230d      	movs	r3, #13
 80070a2:	e0ec      	b.n	800727e <find_volume+0x66a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80070a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070a6:	2384      	movs	r3, #132	; 0x84
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	58d2      	ldr	r2, [r2, r3]
 80070ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ae:	18d2      	adds	r2, r2, r3
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	497b      	ldr	r1, [pc, #492]	; (80072a0 <find_volume+0x68c>)
 80070b4:	505a      	str	r2, [r3, r1]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80070b6:	2357      	movs	r3, #87	; 0x57
 80070b8:	18fb      	adds	r3, r7, r3
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d104      	bne.n	80070ca <find_volume+0x4b6>
 80070c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c2:	4a75      	ldr	r2, [pc, #468]	; (8007298 <find_volume+0x684>)
 80070c4:	589b      	ldr	r3, [r3, r2]
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	e00c      	b.n	80070e4 <find_volume+0x4d0>
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	4a72      	ldr	r2, [pc, #456]	; (8007298 <find_volume+0x684>)
 80070ce:	589a      	ldr	r2, [r3, r2]
 80070d0:	0013      	movs	r3, r2
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	189b      	adds	r3, r3, r2
 80070d6:	085a      	lsrs	r2, r3, #1
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	496f      	ldr	r1, [pc, #444]	; (8007298 <find_volume+0x684>)
 80070dc:	585b      	ldr	r3, [r3, r1]
 80070de:	2101      	movs	r1, #1
 80070e0:	400b      	ands	r3, r1
 80070e2:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80070e4:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80070e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070e8:	2383      	movs	r3, #131	; 0x83
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	58d4      	ldr	r4, [r2, r3]
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	4a65      	ldr	r2, [pc, #404]	; (8007288 <find_volume+0x674>)
 80070f2:	5a9b      	ldrh	r3, [r3, r2]
 80070f4:	001a      	movs	r2, r3
 80070f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f8:	18d3      	adds	r3, r2, r3
 80070fa:	1e58      	subs	r0, r3, #1
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	4a62      	ldr	r2, [pc, #392]	; (8007288 <find_volume+0x674>)
 8007100:	5a9b      	ldrh	r3, [r3, r2]
 8007102:	0019      	movs	r1, r3
 8007104:	f7f9 f808 	bl	8000118 <__udivsi3>
 8007108:	0003      	movs	r3, r0
 800710a:	429c      	cmp	r4, r3
 800710c:	d201      	bcs.n	8007112 <find_volume+0x4fe>
		return FR_NO_FILESYSTEM;
 800710e:	230d      	movs	r3, #13
 8007110:	e0b5      	b.n	800727e <find_volume+0x66a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007114:	2382      	movs	r3, #130	; 0x82
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	2101      	movs	r1, #1
 800711a:	4249      	negs	r1, r1
 800711c:	50d1      	str	r1, [r2, r3]
 800711e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007120:	2382      	movs	r3, #130	; 0x82
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	58d2      	ldr	r2, [r2, r3]
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	495e      	ldr	r1, [pc, #376]	; (80072a4 <find_volume+0x690>)
 800712a:	505a      	str	r2, [r3, r1]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	4a5e      	ldr	r2, [pc, #376]	; (80072a8 <find_volume+0x694>)
 8007130:	2180      	movs	r1, #128	; 0x80
 8007132:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007134:	2357      	movs	r3, #87	; 0x57
 8007136:	18fb      	adds	r3, r7, r3
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b03      	cmp	r3, #3
 800713c:	d000      	beq.n	8007140 <find_volume+0x52c>
 800713e:	e087      	b.n	8007250 <find_volume+0x63c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	2231      	movs	r2, #49	; 0x31
 8007144:	5c9b      	ldrb	r3, [r3, r2]
 8007146:	021b      	lsls	r3, r3, #8
 8007148:	b21a      	sxth	r2, r3
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	2130      	movs	r1, #48	; 0x30
 800714e:	5c5b      	ldrb	r3, [r3, r1]
 8007150:	b21b      	sxth	r3, r3
 8007152:	4313      	orrs	r3, r2
 8007154:	b21b      	sxth	r3, r3
 8007156:	2b01      	cmp	r3, #1
 8007158:	d000      	beq.n	800715c <find_volume+0x548>
 800715a:	e079      	b.n	8007250 <find_volume+0x63c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800715c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	0011      	movs	r1, r2
 8007164:	0018      	movs	r0, r3
 8007166:	f7fd fe41 	bl	8004dec <move_window>
 800716a:	1e03      	subs	r3, r0, #0
 800716c:	d170      	bne.n	8007250 <find_volume+0x63c>
	{
		fs->fsi_flag = 0;
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	4a4d      	ldr	r2, [pc, #308]	; (80072a8 <find_volume+0x694>)
 8007172:	2100      	movs	r1, #0
 8007174:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	4a4c      	ldr	r2, [pc, #304]	; (80072ac <find_volume+0x698>)
 800717a:	5c9b      	ldrb	r3, [r3, r2]
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	b21a      	sxth	r2, r3
 8007180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007182:	23ff      	movs	r3, #255	; 0xff
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	5ccb      	ldrb	r3, [r1, r3]
 8007188:	b21b      	sxth	r3, r3
 800718a:	4313      	orrs	r3, r2
 800718c:	b21b      	sxth	r3, r3
 800718e:	4a48      	ldr	r2, [pc, #288]	; (80072b0 <find_volume+0x69c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d15d      	bne.n	8007250 <find_volume+0x63c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	78db      	ldrb	r3, [r3, #3]
 8007198:	061a      	lsls	r2, r3, #24
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	789b      	ldrb	r3, [r3, #2]
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	4313      	orrs	r3, r2
 80071a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a4:	7852      	ldrb	r2, [r2, #1]
 80071a6:	0212      	lsls	r2, r2, #8
 80071a8:	4313      	orrs	r3, r2
 80071aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ac:	7812      	ldrb	r2, [r2, #0]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	4a40      	ldr	r2, [pc, #256]	; (80072b4 <find_volume+0x6a0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d14c      	bne.n	8007250 <find_volume+0x63c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80071b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071b8:	23e8      	movs	r3, #232	; 0xe8
 80071ba:	33ff      	adds	r3, #255	; 0xff
 80071bc:	5cd3      	ldrb	r3, [r2, r3]
 80071be:	061a      	lsls	r2, r3, #24
 80071c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071c2:	23f3      	movs	r3, #243	; 0xf3
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	5ccb      	ldrb	r3, [r1, r3]
 80071c8:	041b      	lsls	r3, r3, #16
 80071ca:	4313      	orrs	r3, r2
 80071cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071ce:	22e6      	movs	r2, #230	; 0xe6
 80071d0:	32ff      	adds	r2, #255	; 0xff
 80071d2:	5c8a      	ldrb	r2, [r1, r2]
 80071d4:	0212      	lsls	r2, r2, #8
 80071d6:	4313      	orrs	r3, r2
 80071d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071da:	22f2      	movs	r2, #242	; 0xf2
 80071dc:	0052      	lsls	r2, r2, #1
 80071de:	5c8a      	ldrb	r2, [r1, r2]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	4a35      	ldr	r2, [pc, #212]	; (80072b8 <find_volume+0x6a4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d133      	bne.n	8007250 <find_volume+0x63c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80071e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ea:	23ec      	movs	r3, #236	; 0xec
 80071ec:	33ff      	adds	r3, #255	; 0xff
 80071ee:	5cd3      	ldrb	r3, [r2, r3]
 80071f0:	061a      	lsls	r2, r3, #24
 80071f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071f4:	23f5      	movs	r3, #245	; 0xf5
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	5ccb      	ldrb	r3, [r1, r3]
 80071fa:	041b      	lsls	r3, r3, #16
 80071fc:	4313      	orrs	r3, r2
 80071fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007200:	22ea      	movs	r2, #234	; 0xea
 8007202:	32ff      	adds	r2, #255	; 0xff
 8007204:	5c8a      	ldrb	r2, [r1, r2]
 8007206:	0212      	lsls	r2, r2, #8
 8007208:	4313      	orrs	r3, r2
 800720a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800720c:	22f4      	movs	r2, #244	; 0xf4
 800720e:	0052      	lsls	r2, r2, #1
 8007210:	5c8a      	ldrb	r2, [r1, r2]
 8007212:	4313      	orrs	r3, r2
 8007214:	0019      	movs	r1, r3
 8007216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007218:	2382      	movs	r3, #130	; 0x82
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800721e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007220:	23f0      	movs	r3, #240	; 0xf0
 8007222:	33ff      	adds	r3, #255	; 0xff
 8007224:	5cd3      	ldrb	r3, [r2, r3]
 8007226:	061a      	lsls	r2, r3, #24
 8007228:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800722a:	23f7      	movs	r3, #247	; 0xf7
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	5ccb      	ldrb	r3, [r1, r3]
 8007230:	041b      	lsls	r3, r3, #16
 8007232:	4313      	orrs	r3, r2
 8007234:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007236:	22ee      	movs	r2, #238	; 0xee
 8007238:	32ff      	adds	r2, #255	; 0xff
 800723a:	5c8a      	ldrb	r2, [r1, r2]
 800723c:	0212      	lsls	r2, r2, #8
 800723e:	4313      	orrs	r3, r2
 8007240:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007242:	22f6      	movs	r2, #246	; 0xf6
 8007244:	0052      	lsls	r2, r2, #1
 8007246:	5c8a      	ldrb	r2, [r1, r2]
 8007248:	431a      	orrs	r2, r3
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	4915      	ldr	r1, [pc, #84]	; (80072a4 <find_volume+0x690>)
 800724e:	505a      	str	r2, [r3, r1]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007252:	2357      	movs	r3, #87	; 0x57
 8007254:	18f9      	adds	r1, r7, r3
 8007256:	2380      	movs	r3, #128	; 0x80
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	7809      	ldrb	r1, [r1, #0]
 800725c:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 800725e:	4b17      	ldr	r3, [pc, #92]	; (80072bc <find_volume+0x6a8>)
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	3301      	adds	r3, #1
 8007264:	b29a      	uxth	r2, r3
 8007266:	4b15      	ldr	r3, [pc, #84]	; (80072bc <find_volume+0x6a8>)
 8007268:	801a      	strh	r2, [r3, #0]
 800726a:	4b14      	ldr	r3, [pc, #80]	; (80072bc <find_volume+0x6a8>)
 800726c:	8819      	ldrh	r1, [r3, #0]
 800726e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007270:	4a13      	ldr	r2, [pc, #76]	; (80072c0 <find_volume+0x6ac>)
 8007272:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	0018      	movs	r0, r3
 8007278:	f7fd fd38 	bl	8004cec <clear_lock>
#endif

	return FR_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	0018      	movs	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	b016      	add	sp, #88	; 0x58
 8007284:	bdb0      	pop	{r4, r5, r7, pc}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	0000040a 	.word	0x0000040a
 800728c:	00000402 	.word	0x00000402
 8007290:	00000ff5 	.word	0x00000ff5
 8007294:	0000fff5 	.word	0x0000fff5
 8007298:	00000414 	.word	0x00000414
 800729c:	0000041c 	.word	0x0000041c
 80072a0:	00000424 	.word	0x00000424
 80072a4:	0000040c 	.word	0x0000040c
 80072a8:	00000405 	.word	0x00000405
 80072ac:	000001ff 	.word	0x000001ff
 80072b0:	ffffaa55 	.word	0xffffaa55
 80072b4:	41615252 	.word	0x41615252
 80072b8:	61417272 	.word	0x61417272
 80072bc:	200000b0 	.word	0x200000b0
 80072c0:	00000406 	.word	0x00000406

080072c4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d027      	beq.n	8007326 <validate+0x62>
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	2380      	movs	r3, #128	; 0x80
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	58d3      	ldr	r3, [r2, r3]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d021      	beq.n	8007326 <validate+0x62>
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	2380      	movs	r3, #128	; 0x80
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	58d2      	ldr	r2, [r2, r3]
 80072ea:	2380      	movs	r3, #128	; 0x80
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	5cd3      	ldrb	r3, [r2, r3]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d018      	beq.n	8007326 <validate+0x62>
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	2380      	movs	r3, #128	; 0x80
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	58d3      	ldr	r3, [r2, r3]
 80072fc:	4a0d      	ldr	r2, [pc, #52]	; (8007334 <validate+0x70>)
 80072fe:	5a9a      	ldrh	r2, [r3, r2]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	490d      	ldr	r1, [pc, #52]	; (8007338 <validate+0x74>)
 8007304:	5a5b      	ldrh	r3, [r3, r1]
 8007306:	429a      	cmp	r2, r3
 8007308:	d10d      	bne.n	8007326 <validate+0x62>
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	2380      	movs	r3, #128	; 0x80
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	58d3      	ldr	r3, [r2, r3]
 8007312:	4a0a      	ldr	r2, [pc, #40]	; (800733c <validate+0x78>)
 8007314:	5c9b      	ldrb	r3, [r3, r2]
 8007316:	0018      	movs	r0, r3
 8007318:	f7fd fa0e 	bl	8004738 <disk_status>
 800731c:	0003      	movs	r3, r0
 800731e:	001a      	movs	r2, r3
 8007320:	2301      	movs	r3, #1
 8007322:	4013      	ands	r3, r2
 8007324:	d001      	beq.n	800732a <validate+0x66>
		return FR_INVALID_OBJECT;
 8007326:	2309      	movs	r3, #9
 8007328:	e000      	b.n	800732c <validate+0x68>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	0018      	movs	r0, r3
 800732e:	46bd      	mov	sp, r7
 8007330:	b004      	add	sp, #16
 8007332:	bd80      	pop	{r7, pc}
 8007334:	00000406 	.word	0x00000406
 8007338:	00000404 	.word	0x00000404
 800733c:	00000401 	.word	0x00000401

08007340 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007340:	b5b0      	push	{r4, r5, r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	1dfb      	adds	r3, r7, #7
 800734c:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007352:	2310      	movs	r3, #16
 8007354:	18fb      	adds	r3, r7, r3
 8007356:	0018      	movs	r0, r3
 8007358:	f7ff fbaa 	bl	8006ab0 <get_ldnumber>
 800735c:	0003      	movs	r3, r0
 800735e:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	2b00      	cmp	r3, #0
 8007364:	da01      	bge.n	800736a <f_mount+0x2a>
 8007366:	230b      	movs	r3, #11
 8007368:	e034      	b.n	80073d4 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800736a:	4b1c      	ldr	r3, [pc, #112]	; (80073dc <f_mount+0x9c>)
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	0092      	lsls	r2, r2, #2
 8007370:	58d3      	ldr	r3, [r2, r3]
 8007372:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d008      	beq.n	800738c <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	0018      	movs	r0, r3
 800737e:	f7fd fcb5 	bl	8004cec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	2380      	movs	r3, #128	; 0x80
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	2100      	movs	r1, #0
 800738a:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	2380      	movs	r3, #128	; 0x80
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	2100      	movs	r1, #0
 800739a:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800739c:	68f9      	ldr	r1, [r7, #12]
 800739e:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <f_mount+0x9c>)
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	0092      	lsls	r2, r2, #2
 80073a4:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <f_mount+0x74>
 80073ac:	1dfb      	adds	r3, r7, #7
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d001      	beq.n	80073b8 <f_mount+0x78>
 80073b4:	2300      	movs	r3, #0
 80073b6:	e00d      	b.n	80073d4 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80073b8:	2517      	movs	r5, #23
 80073ba:	197c      	adds	r4, r7, r5
 80073bc:	2308      	movs	r3, #8
 80073be:	18f9      	adds	r1, r7, r3
 80073c0:	230c      	movs	r3, #12
 80073c2:	18fb      	adds	r3, r7, r3
 80073c4:	2200      	movs	r2, #0
 80073c6:	0018      	movs	r0, r3
 80073c8:	f7ff fc24 	bl	8006c14 <find_volume>
 80073cc:	0003      	movs	r3, r0
 80073ce:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80073d0:	197b      	adds	r3, r7, r5
 80073d2:	781b      	ldrb	r3, [r3, #0]
}
 80073d4:	0018      	movs	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b008      	add	sp, #32
 80073da:	bdb0      	pop	{r4, r5, r7, pc}
 80073dc:	200000ac 	.word	0x200000ac

080073e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80073e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073e2:	4ce2      	ldr	r4, [pc, #904]	; (800776c <f_open+0x38c>)
 80073e4:	44a5      	add	sp, r4
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	60f8      	str	r0, [r7, #12]
 80073ea:	60b9      	str	r1, [r7, #8]
 80073ec:	4be0      	ldr	r3, [pc, #896]	; (8007770 <f_open+0x390>)
 80073ee:	218b      	movs	r1, #139	; 0x8b
 80073f0:	00c9      	lsls	r1, r1, #3
 80073f2:	468c      	mov	ip, r1
 80073f4:	44bc      	add	ip, r7
 80073f6:	4463      	add	r3, ip
 80073f8:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <f_open+0x24>
 8007400:	2309      	movs	r3, #9
 8007402:	e29c      	b.n	800793e <f_open+0x55e>
	fp->fs = 0;			/* Clear file object */
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	2100      	movs	r1, #0
 800740c:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800740e:	4bd8      	ldr	r3, [pc, #864]	; (8007770 <f_open+0x390>)
 8007410:	228b      	movs	r2, #139	; 0x8b
 8007412:	00d2      	lsls	r2, r2, #3
 8007414:	4694      	mov	ip, r2
 8007416:	44bc      	add	ip, r7
 8007418:	4463      	add	r3, ip
 800741a:	4ad5      	ldr	r2, [pc, #852]	; (8007770 <f_open+0x390>)
 800741c:	218b      	movs	r1, #139	; 0x8b
 800741e:	00c9      	lsls	r1, r1, #3
 8007420:	468c      	mov	ip, r1
 8007422:	44bc      	add	ip, r7
 8007424:	4462      	add	r2, ip
 8007426:	7812      	ldrb	r2, [r2, #0]
 8007428:	211f      	movs	r1, #31
 800742a:	400a      	ands	r2, r1
 800742c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800742e:	4bd0      	ldr	r3, [pc, #832]	; (8007770 <f_open+0x390>)
 8007430:	228b      	movs	r2, #139	; 0x8b
 8007432:	00d2      	lsls	r2, r2, #3
 8007434:	4694      	mov	ip, r2
 8007436:	44bc      	add	ip, r7
 8007438:	4463      	add	r3, ip
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2201      	movs	r2, #1
 800743e:	4393      	bics	r3, r2
 8007440:	b2da      	uxtb	r2, r3
 8007442:	4dcc      	ldr	r5, [pc, #816]	; (8007774 <f_open+0x394>)
 8007444:	197c      	adds	r4, r7, r5
 8007446:	2308      	movs	r3, #8
 8007448:	18f9      	adds	r1, r7, r3
 800744a:	2320      	movs	r3, #32
 800744c:	18fb      	adds	r3, r7, r3
 800744e:	2080      	movs	r0, #128	; 0x80
 8007450:	00c0      	lsls	r0, r0, #3
 8007452:	4684      	mov	ip, r0
 8007454:	4463      	add	r3, ip
 8007456:	0018      	movs	r0, r3
 8007458:	f7ff fbdc 	bl	8006c14 <find_volume>
 800745c:	0003      	movs	r3, r0
 800745e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007460:	197b      	adds	r3, r7, r5
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d000      	beq.n	800746a <f_open+0x8a>
 8007468:	e266      	b.n	8007938 <f_open+0x558>
		INIT_BUF(dj);
 800746a:	4bc3      	ldr	r3, [pc, #780]	; (8007778 <f_open+0x398>)
 800746c:	208b      	movs	r0, #139	; 0x8b
 800746e:	00c0      	lsls	r0, r0, #3
 8007470:	183a      	adds	r2, r7, r0
 8007472:	18d2      	adds	r2, r2, r3
 8007474:	2383      	movs	r3, #131	; 0x83
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	2114      	movs	r1, #20
 800747a:	1879      	adds	r1, r7, r1
 800747c:	50d1      	str	r1, [r2, r3]
 800747e:	4bbe      	ldr	r3, [pc, #760]	; (8007778 <f_open+0x398>)
 8007480:	183a      	adds	r2, r7, r0
 8007482:	18d2      	adds	r2, r2, r3
 8007484:	2384      	movs	r3, #132	; 0x84
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	49bc      	ldr	r1, [pc, #752]	; (800777c <f_open+0x39c>)
 800748a:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	4db9      	ldr	r5, [pc, #740]	; (8007774 <f_open+0x394>)
 8007490:	197c      	adds	r4, r7, r5
 8007492:	2320      	movs	r3, #32
 8007494:	18fb      	adds	r3, r7, r3
 8007496:	0011      	movs	r1, r2
 8007498:	0018      	movs	r0, r3
 800749a:	f7ff fa7d 	bl	8006998 <follow_path>
 800749e:	0003      	movs	r3, r0
 80074a0:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 80074a2:	4bb5      	ldr	r3, [pc, #724]	; (8007778 <f_open+0x398>)
 80074a4:	228b      	movs	r2, #139	; 0x8b
 80074a6:	00d2      	lsls	r2, r2, #3
 80074a8:	4694      	mov	ip, r2
 80074aa:	44bc      	add	ip, r7
 80074ac:	4463      	add	r3, ip
 80074ae:	4ab4      	ldr	r2, [pc, #720]	; (8007780 <f_open+0x3a0>)
 80074b0:	589b      	ldr	r3, [r3, r2]
 80074b2:	228a      	movs	r2, #138	; 0x8a
 80074b4:	00d2      	lsls	r2, r2, #3
 80074b6:	18ba      	adds	r2, r7, r2
 80074b8:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80074ba:	197b      	adds	r3, r7, r5
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d121      	bne.n	8007506 <f_open+0x126>
			if (!dir)	/* Default directory itself */
 80074c2:	238a      	movs	r3, #138	; 0x8a
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d104      	bne.n	80074d8 <f_open+0xf8>
				res = FR_INVALID_NAME;
 80074ce:	4ba9      	ldr	r3, [pc, #676]	; (8007774 <f_open+0x394>)
 80074d0:	18fb      	adds	r3, r7, r3
 80074d2:	2206      	movs	r2, #6
 80074d4:	701a      	strb	r2, [r3, #0]
 80074d6:	e016      	b.n	8007506 <f_open+0x126>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80074d8:	4ba5      	ldr	r3, [pc, #660]	; (8007770 <f_open+0x390>)
 80074da:	228b      	movs	r2, #139	; 0x8b
 80074dc:	00d2      	lsls	r2, r2, #3
 80074de:	4694      	mov	ip, r2
 80074e0:	44bc      	add	ip, r7
 80074e2:	4463      	add	r3, ip
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2201      	movs	r2, #1
 80074e8:	4393      	bics	r3, r2
 80074ea:	1e5a      	subs	r2, r3, #1
 80074ec:	4193      	sbcs	r3, r2
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	001a      	movs	r2, r3
 80074f2:	4ba0      	ldr	r3, [pc, #640]	; (8007774 <f_open+0x394>)
 80074f4:	18fc      	adds	r4, r7, r3
 80074f6:	2320      	movs	r3, #32
 80074f8:	18fb      	adds	r3, r7, r3
 80074fa:	0011      	movs	r1, r2
 80074fc:	0018      	movs	r0, r3
 80074fe:	f7fd fa59 	bl	80049b4 <chk_lock>
 8007502:	0003      	movs	r3, r0
 8007504:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007506:	4b9a      	ldr	r3, [pc, #616]	; (8007770 <f_open+0x390>)
 8007508:	228b      	movs	r2, #139	; 0x8b
 800750a:	00d2      	lsls	r2, r2, #3
 800750c:	4694      	mov	ip, r2
 800750e:	44bc      	add	ip, r7
 8007510:	4463      	add	r3, ip
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	221c      	movs	r2, #28
 8007516:	4013      	ands	r3, r2
 8007518:	d100      	bne.n	800751c <f_open+0x13c>
 800751a:	e113      	b.n	8007744 <f_open+0x364>
			if (res != FR_OK) {					/* No file, create new */
 800751c:	4b95      	ldr	r3, [pc, #596]	; (8007774 <f_open+0x394>)
 800751e:	18fb      	adds	r3, r7, r3
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d031      	beq.n	800758a <f_open+0x1aa>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007526:	4b93      	ldr	r3, [pc, #588]	; (8007774 <f_open+0x394>)
 8007528:	18fb      	adds	r3, r7, r3
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b04      	cmp	r3, #4
 800752e:	d10f      	bne.n	8007550 <f_open+0x170>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007530:	f7fd faae 	bl	8004a90 <enq_lock>
 8007534:	1e03      	subs	r3, r0, #0
 8007536:	d007      	beq.n	8007548 <f_open+0x168>
 8007538:	2320      	movs	r3, #32
 800753a:	18fb      	adds	r3, r7, r3
 800753c:	0018      	movs	r0, r3
 800753e:	f7fe fee3 	bl	8006308 <dir_register>
 8007542:	0003      	movs	r3, r0
 8007544:	001a      	movs	r2, r3
 8007546:	e000      	b.n	800754a <f_open+0x16a>
 8007548:	2212      	movs	r2, #18
 800754a:	4b8a      	ldr	r3, [pc, #552]	; (8007774 <f_open+0x394>)
 800754c:	18fb      	adds	r3, r7, r3
 800754e:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007550:	4b87      	ldr	r3, [pc, #540]	; (8007770 <f_open+0x390>)
 8007552:	228b      	movs	r2, #139	; 0x8b
 8007554:	00d2      	lsls	r2, r2, #3
 8007556:	4694      	mov	ip, r2
 8007558:	44bc      	add	ip, r7
 800755a:	4463      	add	r3, ip
 800755c:	4a84      	ldr	r2, [pc, #528]	; (8007770 <f_open+0x390>)
 800755e:	218b      	movs	r1, #139	; 0x8b
 8007560:	00c9      	lsls	r1, r1, #3
 8007562:	468c      	mov	ip, r1
 8007564:	44bc      	add	ip, r7
 8007566:	4462      	add	r2, ip
 8007568:	7812      	ldrb	r2, [r2, #0]
 800756a:	2108      	movs	r1, #8
 800756c:	430a      	orrs	r2, r1
 800756e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007570:	4b81      	ldr	r3, [pc, #516]	; (8007778 <f_open+0x398>)
 8007572:	228b      	movs	r2, #139	; 0x8b
 8007574:	00d2      	lsls	r2, r2, #3
 8007576:	4694      	mov	ip, r2
 8007578:	44bc      	add	ip, r7
 800757a:	4463      	add	r3, ip
 800757c:	4a80      	ldr	r2, [pc, #512]	; (8007780 <f_open+0x3a0>)
 800757e:	589b      	ldr	r3, [r3, r2]
 8007580:	228a      	movs	r2, #138	; 0x8a
 8007582:	00d2      	lsls	r2, r2, #3
 8007584:	18ba      	adds	r2, r7, r2
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	e01c      	b.n	80075c4 <f_open+0x1e4>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800758a:	238a      	movs	r3, #138	; 0x8a
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	18fb      	adds	r3, r7, r3
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	330b      	adds	r3, #11
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	001a      	movs	r2, r3
 8007598:	2311      	movs	r3, #17
 800759a:	4013      	ands	r3, r2
 800759c:	d004      	beq.n	80075a8 <f_open+0x1c8>
					res = FR_DENIED;
 800759e:	4b75      	ldr	r3, [pc, #468]	; (8007774 <f_open+0x394>)
 80075a0:	18fb      	adds	r3, r7, r3
 80075a2:	2207      	movs	r2, #7
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	e00d      	b.n	80075c4 <f_open+0x1e4>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80075a8:	4b71      	ldr	r3, [pc, #452]	; (8007770 <f_open+0x390>)
 80075aa:	228b      	movs	r2, #139	; 0x8b
 80075ac:	00d2      	lsls	r2, r2, #3
 80075ae:	4694      	mov	ip, r2
 80075b0:	44bc      	add	ip, r7
 80075b2:	4463      	add	r3, ip
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2204      	movs	r2, #4
 80075b8:	4013      	ands	r3, r2
 80075ba:	d003      	beq.n	80075c4 <f_open+0x1e4>
						res = FR_EXIST;
 80075bc:	4b6d      	ldr	r3, [pc, #436]	; (8007774 <f_open+0x394>)
 80075be:	18fb      	adds	r3, r7, r3
 80075c0:	2208      	movs	r2, #8
 80075c2:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80075c4:	4b6b      	ldr	r3, [pc, #428]	; (8007774 <f_open+0x394>)
 80075c6:	18fb      	adds	r3, r7, r3
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d000      	beq.n	80075d0 <f_open+0x1f0>
 80075ce:	e0f9      	b.n	80077c4 <f_open+0x3e4>
 80075d0:	4b67      	ldr	r3, [pc, #412]	; (8007770 <f_open+0x390>)
 80075d2:	228b      	movs	r2, #139	; 0x8b
 80075d4:	00d2      	lsls	r2, r2, #3
 80075d6:	4694      	mov	ip, r2
 80075d8:	44bc      	add	ip, r7
 80075da:	4463      	add	r3, ip
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2208      	movs	r2, #8
 80075e0:	4013      	ands	r3, r2
 80075e2:	d100      	bne.n	80075e6 <f_open+0x206>
 80075e4:	e0ee      	b.n	80077c4 <f_open+0x3e4>
				dw = GET_FATTIME();				/* Created time */
 80075e6:	f7fd f839 	bl	800465c <get_fattime>
 80075ea:	0003      	movs	r3, r0
 80075ec:	4865      	ldr	r0, [pc, #404]	; (8007784 <f_open+0x3a4>)
 80075ee:	183a      	adds	r2, r7, r0
 80075f0:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80075f2:	218a      	movs	r1, #138	; 0x8a
 80075f4:	00c9      	lsls	r1, r1, #3
 80075f6:	187b      	adds	r3, r7, r1
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	330e      	adds	r3, #14
 80075fc:	183a      	adds	r2, r7, r0
 80075fe:	6812      	ldr	r2, [r2, #0]
 8007600:	b2d2      	uxtb	r2, r2
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	183b      	adds	r3, r7, r0
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	b29b      	uxth	r3, r3
 800760a:	0a1b      	lsrs	r3, r3, #8
 800760c:	b29a      	uxth	r2, r3
 800760e:	187b      	adds	r3, r7, r1
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330f      	adds	r3, #15
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	701a      	strb	r2, [r3, #0]
 8007618:	183b      	adds	r3, r7, r0
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	0c1a      	lsrs	r2, r3, #16
 800761e:	187b      	adds	r3, r7, r1
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3310      	adds	r3, #16
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	183b      	adds	r3, r7, r0
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	0e1a      	lsrs	r2, r3, #24
 800762e:	187b      	adds	r3, r7, r1
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3311      	adds	r3, #17
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007638:	187b      	adds	r3, r7, r1
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	330b      	adds	r3, #11
 800763e:	2200      	movs	r2, #0
 8007640:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007642:	187b      	adds	r3, r7, r1
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	331c      	adds	r3, #28
 8007648:	2200      	movs	r2, #0
 800764a:	701a      	strb	r2, [r3, #0]
 800764c:	187b      	adds	r3, r7, r1
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	331d      	adds	r3, #29
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	187b      	adds	r3, r7, r1
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	331e      	adds	r3, #30
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	187b      	adds	r3, r7, r1
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	331f      	adds	r3, #31
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800766a:	4b43      	ldr	r3, [pc, #268]	; (8007778 <f_open+0x398>)
 800766c:	258b      	movs	r5, #139	; 0x8b
 800766e:	00ed      	lsls	r5, r5, #3
 8007670:	197a      	adds	r2, r7, r5
 8007672:	18d2      	adds	r2, r2, r3
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	58d3      	ldr	r3, [r2, r3]
 800767a:	000c      	movs	r4, r1
 800767c:	187a      	adds	r2, r7, r1
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	0011      	movs	r1, r2
 8007682:	0018      	movs	r0, r3
 8007684:	f7fe fb22 	bl	8005ccc <ld_clust>
 8007688:	0003      	movs	r3, r0
 800768a:	2689      	movs	r6, #137	; 0x89
 800768c:	00f6      	lsls	r6, r6, #3
 800768e:	19ba      	adds	r2, r7, r6
 8007690:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007692:	0021      	movs	r1, r4
 8007694:	187b      	adds	r3, r7, r1
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2100      	movs	r1, #0
 800769a:	0018      	movs	r0, r3
 800769c:	f7fe fb43 	bl	8005d26 <st_clust>
				dj.fs->wflag = 1;
 80076a0:	4b35      	ldr	r3, [pc, #212]	; (8007778 <f_open+0x398>)
 80076a2:	197a      	adds	r2, r7, r5
 80076a4:	18d2      	adds	r2, r2, r3
 80076a6:	2380      	movs	r3, #128	; 0x80
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	58d3      	ldr	r3, [r2, r3]
 80076ac:	4a36      	ldr	r2, [pc, #216]	; (8007788 <f_open+0x3a8>)
 80076ae:	2101      	movs	r1, #1
 80076b0:	5499      	strb	r1, [r3, r2]
				if (cl) {						/* Remove the cluster chain if exist */
 80076b2:	19bb      	adds	r3, r7, r6
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d100      	bne.n	80076bc <f_open+0x2dc>
 80076ba:	e083      	b.n	80077c4 <f_open+0x3e4>
					dw = dj.fs->winsect;
 80076bc:	4b2e      	ldr	r3, [pc, #184]	; (8007778 <f_open+0x398>)
 80076be:	218b      	movs	r1, #139	; 0x8b
 80076c0:	00c9      	lsls	r1, r1, #3
 80076c2:	187a      	adds	r2, r7, r1
 80076c4:	18d2      	adds	r2, r2, r3
 80076c6:	2380      	movs	r3, #128	; 0x80
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	58d3      	ldr	r3, [r2, r3]
 80076cc:	4a2f      	ldr	r2, [pc, #188]	; (800778c <f_open+0x3ac>)
 80076ce:	589b      	ldr	r3, [r3, r2]
 80076d0:	4a2c      	ldr	r2, [pc, #176]	; (8007784 <f_open+0x3a4>)
 80076d2:	18ba      	adds	r2, r7, r2
 80076d4:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80076d6:	4b28      	ldr	r3, [pc, #160]	; (8007778 <f_open+0x398>)
 80076d8:	187a      	adds	r2, r7, r1
 80076da:	18d2      	adds	r2, r2, r3
 80076dc:	2380      	movs	r3, #128	; 0x80
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	58d3      	ldr	r3, [r2, r3]
 80076e2:	4d24      	ldr	r5, [pc, #144]	; (8007774 <f_open+0x394>)
 80076e4:	197c      	adds	r4, r7, r5
 80076e6:	2289      	movs	r2, #137	; 0x89
 80076e8:	00d2      	lsls	r2, r2, #3
 80076ea:	18ba      	adds	r2, r7, r2
 80076ec:	6812      	ldr	r2, [r2, #0]
 80076ee:	0011      	movs	r1, r2
 80076f0:	0018      	movs	r0, r3
 80076f2:	f7fd ff0f 	bl	8005514 <remove_chain>
 80076f6:	0003      	movs	r3, r0
 80076f8:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 80076fa:	197b      	adds	r3, r7, r5
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d160      	bne.n	80077c4 <f_open+0x3e4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007702:	4b1d      	ldr	r3, [pc, #116]	; (8007778 <f_open+0x398>)
 8007704:	208b      	movs	r0, #139	; 0x8b
 8007706:	00c0      	lsls	r0, r0, #3
 8007708:	183a      	adds	r2, r7, r0
 800770a:	18d2      	adds	r2, r2, r3
 800770c:	2380      	movs	r3, #128	; 0x80
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	58d3      	ldr	r3, [r2, r3]
 8007712:	2289      	movs	r2, #137	; 0x89
 8007714:	00d2      	lsls	r2, r2, #3
 8007716:	18ba      	adds	r2, r7, r2
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	3a01      	subs	r2, #1
 800771c:	491c      	ldr	r1, [pc, #112]	; (8007790 <f_open+0x3b0>)
 800771e:	505a      	str	r2, [r3, r1]
						res = move_window(dj.fs, dw);
 8007720:	4b15      	ldr	r3, [pc, #84]	; (8007778 <f_open+0x398>)
 8007722:	183a      	adds	r2, r7, r0
 8007724:	18d2      	adds	r2, r2, r3
 8007726:	2380      	movs	r3, #128	; 0x80
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	58d3      	ldr	r3, [r2, r3]
 800772c:	4a11      	ldr	r2, [pc, #68]	; (8007774 <f_open+0x394>)
 800772e:	18bc      	adds	r4, r7, r2
 8007730:	4a14      	ldr	r2, [pc, #80]	; (8007784 <f_open+0x3a4>)
 8007732:	18ba      	adds	r2, r7, r2
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	0011      	movs	r1, r2
 8007738:	0018      	movs	r0, r3
 800773a:	f7fd fb57 	bl	8004dec <move_window>
 800773e:	0003      	movs	r3, r0
 8007740:	7023      	strb	r3, [r4, #0]
 8007742:	e03f      	b.n	80077c4 <f_open+0x3e4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007744:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <f_open+0x394>)
 8007746:	18fb      	adds	r3, r7, r3
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d13a      	bne.n	80077c4 <f_open+0x3e4>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800774e:	238a      	movs	r3, #138	; 0x8a
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	18fb      	adds	r3, r7, r3
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330b      	adds	r3, #11
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	001a      	movs	r2, r3
 800775c:	2310      	movs	r3, #16
 800775e:	4013      	ands	r3, r2
 8007760:	d018      	beq.n	8007794 <f_open+0x3b4>
					res = FR_NO_FILE;
 8007762:	4b04      	ldr	r3, [pc, #16]	; (8007774 <f_open+0x394>)
 8007764:	18fb      	adds	r3, r7, r3
 8007766:	2204      	movs	r2, #4
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	e02b      	b.n	80077c4 <f_open+0x3e4>
 800776c:	fffffba4 	.word	0xfffffba4
 8007770:	fffffbaf 	.word	0xfffffbaf
 8007774:	00000457 	.word	0x00000457
 8007778:	fffffbc8 	.word	0xfffffbc8
 800777c:	200000cc 	.word	0x200000cc
 8007780:	00000414 	.word	0x00000414
 8007784:	0000044c 	.word	0x0000044c
 8007788:	00000404 	.word	0x00000404
 800778c:	0000042c 	.word	0x0000042c
 8007790:	0000040c 	.word	0x0000040c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007794:	4b6c      	ldr	r3, [pc, #432]	; (8007948 <f_open+0x568>)
 8007796:	228b      	movs	r2, #139	; 0x8b
 8007798:	00d2      	lsls	r2, r2, #3
 800779a:	4694      	mov	ip, r2
 800779c:	44bc      	add	ip, r7
 800779e:	4463      	add	r3, ip
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	2202      	movs	r2, #2
 80077a4:	4013      	ands	r3, r2
 80077a6:	d00d      	beq.n	80077c4 <f_open+0x3e4>
 80077a8:	238a      	movs	r3, #138	; 0x8a
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	18fb      	adds	r3, r7, r3
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330b      	adds	r3, #11
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	001a      	movs	r2, r3
 80077b6:	2301      	movs	r3, #1
 80077b8:	4013      	ands	r3, r2
 80077ba:	d003      	beq.n	80077c4 <f_open+0x3e4>
						res = FR_DENIED;
 80077bc:	4b63      	ldr	r3, [pc, #396]	; (800794c <f_open+0x56c>)
 80077be:	18fb      	adds	r3, r7, r3
 80077c0:	2207      	movs	r2, #7
 80077c2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 80077c4:	4b61      	ldr	r3, [pc, #388]	; (800794c <f_open+0x56c>)
 80077c6:	18fb      	adds	r3, r7, r3
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d150      	bne.n	8007870 <f_open+0x490>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80077ce:	4b5e      	ldr	r3, [pc, #376]	; (8007948 <f_open+0x568>)
 80077d0:	228b      	movs	r2, #139	; 0x8b
 80077d2:	00d2      	lsls	r2, r2, #3
 80077d4:	4694      	mov	ip, r2
 80077d6:	44bc      	add	ip, r7
 80077d8:	4463      	add	r3, ip
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2208      	movs	r2, #8
 80077de:	4013      	ands	r3, r2
 80077e0:	d00f      	beq.n	8007802 <f_open+0x422>
				mode |= FA__WRITTEN;
 80077e2:	4b59      	ldr	r3, [pc, #356]	; (8007948 <f_open+0x568>)
 80077e4:	228b      	movs	r2, #139	; 0x8b
 80077e6:	00d2      	lsls	r2, r2, #3
 80077e8:	4694      	mov	ip, r2
 80077ea:	44bc      	add	ip, r7
 80077ec:	4463      	add	r3, ip
 80077ee:	4a56      	ldr	r2, [pc, #344]	; (8007948 <f_open+0x568>)
 80077f0:	218b      	movs	r1, #139	; 0x8b
 80077f2:	00c9      	lsls	r1, r1, #3
 80077f4:	468c      	mov	ip, r1
 80077f6:	44bc      	add	ip, r7
 80077f8:	4462      	add	r2, ip
 80077fa:	7812      	ldrb	r2, [r2, #0]
 80077fc:	2120      	movs	r1, #32
 80077fe:	430a      	orrs	r2, r1
 8007800:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007802:	4b53      	ldr	r3, [pc, #332]	; (8007950 <f_open+0x570>)
 8007804:	228b      	movs	r2, #139	; 0x8b
 8007806:	00d2      	lsls	r2, r2, #3
 8007808:	18ba      	adds	r2, r7, r2
 800780a:	18d2      	adds	r2, r2, r3
 800780c:	2380      	movs	r3, #128	; 0x80
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	58d3      	ldr	r3, [r2, r3]
 8007812:	4a50      	ldr	r2, [pc, #320]	; (8007954 <f_open+0x574>)
 8007814:	589a      	ldr	r2, [r3, r2]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	494f      	ldr	r1, [pc, #316]	; (8007958 <f_open+0x578>)
 800781a:	505a      	str	r2, [r3, r1]
			fp->dir_ptr = dir;
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	2384      	movs	r3, #132	; 0x84
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	218a      	movs	r1, #138	; 0x8a
 8007824:	00c9      	lsls	r1, r1, #3
 8007826:	1879      	adds	r1, r7, r1
 8007828:	6809      	ldr	r1, [r1, #0]
 800782a:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800782c:	4b46      	ldr	r3, [pc, #280]	; (8007948 <f_open+0x568>)
 800782e:	228b      	movs	r2, #139	; 0x8b
 8007830:	00d2      	lsls	r2, r2, #3
 8007832:	4694      	mov	ip, r2
 8007834:	44bc      	add	ip, r7
 8007836:	4463      	add	r3, ip
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2201      	movs	r2, #1
 800783c:	4393      	bics	r3, r2
 800783e:	1e5a      	subs	r2, r3, #1
 8007840:	4193      	sbcs	r3, r2
 8007842:	b2db      	uxtb	r3, r3
 8007844:	001a      	movs	r2, r3
 8007846:	2320      	movs	r3, #32
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	0011      	movs	r1, r2
 800784c:	0018      	movs	r0, r3
 800784e:	f7fd f93f 	bl	8004ad0 <inc_lock>
 8007852:	0001      	movs	r1, r0
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	2385      	movs	r3, #133	; 0x85
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	2385      	movs	r3, #133	; 0x85
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	58d3      	ldr	r3, [r2, r3]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <f_open+0x490>
 8007868:	4b38      	ldr	r3, [pc, #224]	; (800794c <f_open+0x56c>)
 800786a:	18fb      	adds	r3, r7, r3
 800786c:	2202      	movs	r2, #2
 800786e:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007870:	4b36      	ldr	r3, [pc, #216]	; (800794c <f_open+0x56c>)
 8007872:	18fb      	adds	r3, r7, r3
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d15e      	bne.n	8007938 <f_open+0x558>
			fp->flag = mode;					/* File access mode */
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4a32      	ldr	r2, [pc, #200]	; (8007948 <f_open+0x568>)
 800787e:	218b      	movs	r1, #139	; 0x8b
 8007880:	00c9      	lsls	r1, r1, #3
 8007882:	468c      	mov	ip, r1
 8007884:	44bc      	add	ip, r7
 8007886:	4462      	add	r2, ip
 8007888:	4934      	ldr	r1, [pc, #208]	; (800795c <f_open+0x57c>)
 800788a:	7812      	ldrb	r2, [r2, #0]
 800788c:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4a33      	ldr	r2, [pc, #204]	; (8007960 <f_open+0x580>)
 8007892:	2100      	movs	r1, #0
 8007894:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007896:	4b2e      	ldr	r3, [pc, #184]	; (8007950 <f_open+0x570>)
 8007898:	258b      	movs	r5, #139	; 0x8b
 800789a:	00ed      	lsls	r5, r5, #3
 800789c:	197a      	adds	r2, r7, r5
 800789e:	18d2      	adds	r2, r2, r3
 80078a0:	2380      	movs	r3, #128	; 0x80
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	58d3      	ldr	r3, [r2, r3]
 80078a6:	218a      	movs	r1, #138	; 0x8a
 80078a8:	00c9      	lsls	r1, r1, #3
 80078aa:	000c      	movs	r4, r1
 80078ac:	187a      	adds	r2, r7, r1
 80078ae:	6812      	ldr	r2, [r2, #0]
 80078b0:	0011      	movs	r1, r2
 80078b2:	0018      	movs	r0, r3
 80078b4:	f7fe fa0a 	bl	8005ccc <ld_clust>
 80078b8:	0001      	movs	r1, r0
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	2382      	movs	r3, #130	; 0x82
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80078c2:	0021      	movs	r1, r4
 80078c4:	187b      	adds	r3, r7, r1
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	331f      	adds	r3, #31
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	061a      	lsls	r2, r3, #24
 80078ce:	187b      	adds	r3, r7, r1
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	331e      	adds	r3, #30
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	041b      	lsls	r3, r3, #16
 80078d8:	4313      	orrs	r3, r2
 80078da:	187a      	adds	r2, r7, r1
 80078dc:	6812      	ldr	r2, [r2, #0]
 80078de:	321d      	adds	r2, #29
 80078e0:	7812      	ldrb	r2, [r2, #0]
 80078e2:	0212      	lsls	r2, r2, #8
 80078e4:	4313      	orrs	r3, r2
 80078e6:	187a      	adds	r2, r7, r1
 80078e8:	6812      	ldr	r2, [r2, #0]
 80078ea:	321c      	adds	r2, #28
 80078ec:	7812      	ldrb	r2, [r2, #0]
 80078ee:	431a      	orrs	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	491c      	ldr	r1, [pc, #112]	; (8007964 <f_open+0x584>)
 80078f4:	505a      	str	r2, [r3, r1]
			fp->fptr = 0;						/* File pointer */
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	2381      	movs	r3, #129	; 0x81
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	2100      	movs	r1, #0
 80078fe:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	2383      	movs	r3, #131	; 0x83
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	2100      	movs	r1, #0
 8007908:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4a16      	ldr	r2, [pc, #88]	; (8007968 <f_open+0x588>)
 800790e:	2100      	movs	r1, #0
 8007910:	5099      	str	r1, [r3, r2]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007912:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <f_open+0x570>)
 8007914:	197a      	adds	r2, r7, r5
 8007916:	18d2      	adds	r2, r2, r3
 8007918:	2380      	movs	r3, #128	; 0x80
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	58d1      	ldr	r1, [r2, r3]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	2380      	movs	r3, #128	; 0x80
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	58d3      	ldr	r3, [r2, r3]
 800792e:	4a0b      	ldr	r2, [pc, #44]	; (800795c <f_open+0x57c>)
 8007930:	5a99      	ldrh	r1, [r3, r2]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	4a0d      	ldr	r2, [pc, #52]	; (800796c <f_open+0x58c>)
 8007936:	5299      	strh	r1, [r3, r2]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <f_open+0x56c>)
 800793a:	18fb      	adds	r3, r7, r3
 800793c:	781b      	ldrb	r3, [r3, #0]
}
 800793e:	0018      	movs	r0, r3
 8007940:	46bd      	mov	sp, r7
 8007942:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <f_open+0x590>)
 8007944:	449d      	add	sp, r3
 8007946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007948:	fffffbaf 	.word	0xfffffbaf
 800794c:	00000457 	.word	0x00000457
 8007950:	fffffbc8 	.word	0xfffffbc8
 8007954:	0000042c 	.word	0x0000042c
 8007958:	0000041c 	.word	0x0000041c
 800795c:	00000406 	.word	0x00000406
 8007960:	00000407 	.word	0x00000407
 8007964:	0000040c 	.word	0x0000040c
 8007968:	00000424 	.word	0x00000424
 800796c:	00000404 	.word	0x00000404
 8007970:	0000045c 	.word	0x0000045c

08007974 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007974:	b5b0      	push	{r4, r5, r7, lr}
 8007976:	b08c      	sub	sp, #48	; 0x30
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800798c:	251f      	movs	r5, #31
 800798e:	197c      	adds	r4, r7, r5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	0018      	movs	r0, r3
 8007994:	f7ff fc96 	bl	80072c4 <validate>
 8007998:	0003      	movs	r3, r0
 800799a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800799c:	197b      	adds	r3, r7, r5
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <f_read+0x38>
 80079a4:	231f      	movs	r3, #31
 80079a6:	18fb      	adds	r3, r7, r3
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	e1c0      	b.n	8007d2e <f_read+0x3ba>
	if (fp->err)								/* Check error */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4aad      	ldr	r2, [pc, #692]	; (8007c64 <f_read+0x2f0>)
 80079b0:	5c9b      	ldrb	r3, [r3, r2]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <f_read+0x4a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	4aaa      	ldr	r2, [pc, #680]	; (8007c64 <f_read+0x2f0>)
 80079ba:	5c9b      	ldrb	r3, [r3, r2]
 80079bc:	e1b7      	b.n	8007d2e <f_read+0x3ba>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4aa9      	ldr	r2, [pc, #676]	; (8007c68 <f_read+0x2f4>)
 80079c2:	5c9b      	ldrb	r3, [r3, r2]
 80079c4:	001a      	movs	r2, r3
 80079c6:	2301      	movs	r3, #1
 80079c8:	4013      	ands	r3, r2
 80079ca:	d101      	bne.n	80079d0 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80079cc:	2307      	movs	r3, #7
 80079ce:	e1ae      	b.n	8007d2e <f_read+0x3ba>
	remain = fp->fsize - fp->fptr;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4aa6      	ldr	r2, [pc, #664]	; (8007c6c <f_read+0x2f8>)
 80079d4:	589a      	ldr	r2, [r3, r2]
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	2381      	movs	r3, #129	; 0x81
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	58cb      	ldr	r3, [r1, r3]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d800      	bhi.n	80079ec <f_read+0x78>
 80079ea:	e19b      	b.n	8007d24 <f_read+0x3b0>
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80079f0:	e198      	b.n	8007d24 <f_read+0x3b0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	2381      	movs	r3, #129	; 0x81
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	58d0      	ldr	r0, [r2, r3]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	2380      	movs	r3, #128	; 0x80
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	58d3      	ldr	r3, [r2, r3]
 8007a02:	4a9b      	ldr	r2, [pc, #620]	; (8007c70 <f_read+0x2fc>)
 8007a04:	5a9b      	ldrh	r3, [r3, r2]
 8007a06:	0019      	movs	r1, r3
 8007a08:	f7f8 fc0c 	bl	8000224 <__aeabi_uidivmod>
 8007a0c:	1e0b      	subs	r3, r1, #0
 8007a0e:	d000      	beq.n	8007a12 <f_read+0x9e>
 8007a10:	e13d      	b.n	8007c8e <f_read+0x31a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	2381      	movs	r3, #129	; 0x81
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	58d0      	ldr	r0, [r2, r3]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	2380      	movs	r3, #128	; 0x80
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	58d3      	ldr	r3, [r2, r3]
 8007a22:	4a93      	ldr	r2, [pc, #588]	; (8007c70 <f_read+0x2fc>)
 8007a24:	5a9b      	ldrh	r3, [r3, r2]
 8007a26:	0019      	movs	r1, r3
 8007a28:	f7f8 fb76 	bl	8000118 <__udivsi3>
 8007a2c:	0003      	movs	r3, r0
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	68f9      	ldr	r1, [r7, #12]
 8007a32:	2380      	movs	r3, #128	; 0x80
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	58cb      	ldr	r3, [r1, r3]
 8007a38:	498e      	ldr	r1, [pc, #568]	; (8007c74 <f_read+0x300>)
 8007a3a:	5c5b      	ldrb	r3, [r3, r1]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b2d9      	uxtb	r1, r3
 8007a40:	2017      	movs	r0, #23
 8007a42:	183b      	adds	r3, r7, r0
 8007a44:	400a      	ands	r2, r1
 8007a46:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
 8007a48:	183b      	adds	r3, r7, r0
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d13e      	bne.n	8007ace <f_read+0x15a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	2381      	movs	r3, #129	; 0x81
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	58d3      	ldr	r3, [r2, r3]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d105      	bne.n	8007a68 <f_read+0xf4>
					clst = fp->sclust;			/* Follow from the origin */
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	2382      	movs	r3, #130	; 0x82
 8007a60:	00db      	lsls	r3, r3, #3
 8007a62:	58d3      	ldr	r3, [r2, r3]
 8007a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a66:	e01c      	b.n	8007aa2 <f_read+0x12e>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4a83      	ldr	r2, [pc, #524]	; (8007c78 <f_read+0x304>)
 8007a6c:	589b      	ldr	r3, [r3, r2]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <f_read+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	2381      	movs	r3, #129	; 0x81
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	58d2      	ldr	r2, [r2, r3]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	0011      	movs	r1, r2
 8007a7e:	0018      	movs	r0, r3
 8007a80:	f7fd fe6e 	bl	8005760 <clmt_clust>
 8007a84:	0003      	movs	r3, r0
 8007a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a88:	e00b      	b.n	8007aa2 <f_read+0x12e>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	2380      	movs	r3, #128	; 0x80
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	58d0      	ldr	r0, [r2, r3]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4a79      	ldr	r2, [pc, #484]	; (8007c7c <f_read+0x308>)
 8007a96:	589b      	ldr	r3, [r3, r2]
 8007a98:	0019      	movs	r1, r3
 8007a9a:	f7fd fadd 	bl	8005058 <get_fat>
 8007a9e:	0003      	movs	r3, r0
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d805      	bhi.n	8007ab4 <f_read+0x140>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4a6e      	ldr	r2, [pc, #440]	; (8007c64 <f_read+0x2f0>)
 8007aac:	2102      	movs	r1, #2
 8007aae:	5499      	strb	r1, [r3, r2]
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e13c      	b.n	8007d2e <f_read+0x3ba>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	d105      	bne.n	8007ac6 <f_read+0x152>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4a69      	ldr	r2, [pc, #420]	; (8007c64 <f_read+0x2f0>)
 8007abe:	2101      	movs	r1, #1
 8007ac0:	5499      	strb	r1, [r3, r2]
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e133      	b.n	8007d2e <f_read+0x3ba>
				fp->clust = clst;				/* Update current cluster */
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	496c      	ldr	r1, [pc, #432]	; (8007c7c <f_read+0x308>)
 8007aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007acc:	505a      	str	r2, [r3, r1]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	2380      	movs	r3, #128	; 0x80
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	58d0      	ldr	r0, [r2, r3]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4a68      	ldr	r2, [pc, #416]	; (8007c7c <f_read+0x308>)
 8007ada:	589b      	ldr	r3, [r3, r2]
 8007adc:	0019      	movs	r1, r3
 8007ade:	f7fd fa97 	bl	8005010 <clust2sect>
 8007ae2:	0003      	movs	r3, r0
 8007ae4:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d105      	bne.n	8007af8 <f_read+0x184>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4a5d      	ldr	r2, [pc, #372]	; (8007c64 <f_read+0x2f0>)
 8007af0:	2102      	movs	r1, #2
 8007af2:	5499      	strb	r1, [r3, r2]
 8007af4:	2302      	movs	r3, #2
 8007af6:	e11a      	b.n	8007d2e <f_read+0x3ba>
			sect += csect;
 8007af8:	2317      	movs	r3, #23
 8007afa:	18fb      	adds	r3, r7, r3
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	18d3      	adds	r3, r2, r3
 8007b02:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	2380      	movs	r3, #128	; 0x80
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	58d3      	ldr	r3, [r2, r3]
 8007b0c:	4a58      	ldr	r2, [pc, #352]	; (8007c70 <f_read+0x2fc>)
 8007b0e:	5a9b      	ldrh	r3, [r3, r2]
 8007b10:	0019      	movs	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7f8 fb00 	bl	8000118 <__udivsi3>
 8007b18:	0003      	movs	r3, r0
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d05f      	beq.n	8007be2 <f_read+0x26e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007b22:	2317      	movs	r3, #23
 8007b24:	18fb      	adds	r3, r7, r3
 8007b26:	781a      	ldrb	r2, [r3, #0]
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	18d3      	adds	r3, r2, r3
 8007b2c:	68f9      	ldr	r1, [r7, #12]
 8007b2e:	2280      	movs	r2, #128	; 0x80
 8007b30:	00d2      	lsls	r2, r2, #3
 8007b32:	588a      	ldr	r2, [r1, r2]
 8007b34:	494f      	ldr	r1, [pc, #316]	; (8007c74 <f_read+0x300>)
 8007b36:	5c52      	ldrb	r2, [r2, r1]
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d90b      	bls.n	8007b54 <f_read+0x1e0>
					cc = fp->fs->csize - csect;
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	2380      	movs	r3, #128	; 0x80
 8007b40:	00db      	lsls	r3, r3, #3
 8007b42:	58d3      	ldr	r3, [r2, r3]
 8007b44:	4a4b      	ldr	r2, [pc, #300]	; (8007c74 <f_read+0x300>)
 8007b46:	5c9b      	ldrb	r3, [r3, r2]
 8007b48:	001a      	movs	r2, r3
 8007b4a:	2317      	movs	r3, #23
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	2380      	movs	r3, #128	; 0x80
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	58d3      	ldr	r3, [r2, r3]
 8007b5c:	4a48      	ldr	r2, [pc, #288]	; (8007c80 <f_read+0x30c>)
 8007b5e:	5c98      	ldrb	r0, [r3, r2]
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	6a39      	ldr	r1, [r7, #32]
 8007b66:	f7fc fe3b 	bl	80047e0 <disk_read>
 8007b6a:	1e03      	subs	r3, r0, #0
 8007b6c:	d005      	beq.n	8007b7a <f_read+0x206>
					ABORT(fp->fs, FR_DISK_ERR);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	4a3c      	ldr	r2, [pc, #240]	; (8007c64 <f_read+0x2f0>)
 8007b72:	2101      	movs	r1, #1
 8007b74:	5499      	strb	r1, [r3, r2]
 8007b76:	2301      	movs	r3, #1
 8007b78:	e0d9      	b.n	8007d2e <f_read+0x3ba>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4a3a      	ldr	r2, [pc, #232]	; (8007c68 <f_read+0x2f4>)
 8007b7e:	5c9b      	ldrb	r3, [r3, r2]
 8007b80:	001a      	movs	r2, r3
 8007b82:	2340      	movs	r3, #64	; 0x40
 8007b84:	4013      	ands	r3, r2
 8007b86:	d021      	beq.n	8007bcc <f_read+0x258>
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	2383      	movs	r3, #131	; 0x83
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	58d2      	ldr	r2, [r2, r3]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d918      	bls.n	8007bcc <f_read+0x258>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	2383      	movs	r3, #131	; 0x83
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	58d2      	ldr	r2, [r2, r3]
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	68f9      	ldr	r1, [r7, #12]
 8007ba8:	2280      	movs	r2, #128	; 0x80
 8007baa:	00d2      	lsls	r2, r2, #3
 8007bac:	588a      	ldr	r2, [r1, r2]
 8007bae:	4930      	ldr	r1, [pc, #192]	; (8007c70 <f_read+0x2fc>)
 8007bb0:	5a52      	ldrh	r2, [r2, r1]
 8007bb2:	4353      	muls	r3, r2
 8007bb4:	6a3a      	ldr	r2, [r7, #32]
 8007bb6:	18d0      	adds	r0, r2, r3
 8007bb8:	68f9      	ldr	r1, [r7, #12]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	2380      	movs	r3, #128	; 0x80
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	58d3      	ldr	r3, [r2, r3]
 8007bc2:	4a2b      	ldr	r2, [pc, #172]	; (8007c70 <f_read+0x2fc>)
 8007bc4:	5a9b      	ldrh	r3, [r3, r2]
 8007bc6:	001a      	movs	r2, r3
 8007bc8:	f7fc fe82 	bl	80048d0 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	2380      	movs	r3, #128	; 0x80
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	58d3      	ldr	r3, [r2, r3]
 8007bd4:	4a26      	ldr	r2, [pc, #152]	; (8007c70 <f_read+0x2fc>)
 8007bd6:	5a9b      	ldrh	r3, [r3, r2]
 8007bd8:	001a      	movs	r2, r3
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	4353      	muls	r3, r2
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8007be0:	e088      	b.n	8007cf4 <f_read+0x380>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	2383      	movs	r3, #131	; 0x83
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	58d3      	ldr	r3, [r2, r3]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d049      	beq.n	8007c84 <f_read+0x310>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4a1d      	ldr	r2, [pc, #116]	; (8007c68 <f_read+0x2f4>)
 8007bf4:	5c9b      	ldrb	r3, [r3, r2]
 8007bf6:	001a      	movs	r2, r3
 8007bf8:	2340      	movs	r3, #64	; 0x40
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	d01e      	beq.n	8007c3c <f_read+0x2c8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	2380      	movs	r3, #128	; 0x80
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	58d3      	ldr	r3, [r2, r3]
 8007c06:	4a1e      	ldr	r2, [pc, #120]	; (8007c80 <f_read+0x30c>)
 8007c08:	5c98      	ldrb	r0, [r3, r2]
 8007c0a:	68f9      	ldr	r1, [r7, #12]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	2383      	movs	r3, #131	; 0x83
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	58d2      	ldr	r2, [r2, r3]
 8007c14:	2301      	movs	r3, #1
 8007c16:	f7fc fe0b 	bl	8004830 <disk_write>
 8007c1a:	1e03      	subs	r3, r0, #0
 8007c1c:	d005      	beq.n	8007c2a <f_read+0x2b6>
						ABORT(fp->fs, FR_DISK_ERR);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4a10      	ldr	r2, [pc, #64]	; (8007c64 <f_read+0x2f0>)
 8007c22:	2101      	movs	r1, #1
 8007c24:	5499      	strb	r1, [r3, r2]
 8007c26:	2301      	movs	r3, #1
 8007c28:	e081      	b.n	8007d2e <f_read+0x3ba>
					fp->flag &= ~FA__DIRTY;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4a0e      	ldr	r2, [pc, #56]	; (8007c68 <f_read+0x2f4>)
 8007c2e:	5c9b      	ldrb	r3, [r3, r2]
 8007c30:	2240      	movs	r2, #64	; 0x40
 8007c32:	4393      	bics	r3, r2
 8007c34:	b2d9      	uxtb	r1, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4a0b      	ldr	r2, [pc, #44]	; (8007c68 <f_read+0x2f4>)
 8007c3a:	5499      	strb	r1, [r3, r2]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	2380      	movs	r3, #128	; 0x80
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	58d3      	ldr	r3, [r2, r3]
 8007c44:	4a0e      	ldr	r2, [pc, #56]	; (8007c80 <f_read+0x30c>)
 8007c46:	5c98      	ldrb	r0, [r3, r2]
 8007c48:	68f9      	ldr	r1, [r7, #12]
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f7fc fdc7 	bl	80047e0 <disk_read>
 8007c52:	1e03      	subs	r3, r0, #0
 8007c54:	d016      	beq.n	8007c84 <f_read+0x310>
					ABORT(fp->fs, FR_DISK_ERR);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4a02      	ldr	r2, [pc, #8]	; (8007c64 <f_read+0x2f0>)
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	5499      	strb	r1, [r3, r2]
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e065      	b.n	8007d2e <f_read+0x3ba>
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	00000407 	.word	0x00000407
 8007c68:	00000406 	.word	0x00000406
 8007c6c:	0000040c 	.word	0x0000040c
 8007c70:	0000040a 	.word	0x0000040a
 8007c74:	00000402 	.word	0x00000402
 8007c78:	00000424 	.word	0x00000424
 8007c7c:	00000414 	.word	0x00000414
 8007c80:	00000401 	.word	0x00000401
			}
#endif
			fp->dsect = sect;
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	2383      	movs	r3, #131	; 0x83
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	6939      	ldr	r1, [r7, #16]
 8007c8c:	50d1      	str	r1, [r2, r3]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	2380      	movs	r3, #128	; 0x80
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	58d3      	ldr	r3, [r2, r3]
 8007c96:	4a28      	ldr	r2, [pc, #160]	; (8007d38 <f_read+0x3c4>)
 8007c98:	5a9b      	ldrh	r3, [r3, r2]
 8007c9a:	001c      	movs	r4, r3
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	2381      	movs	r3, #129	; 0x81
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	58d0      	ldr	r0, [r2, r3]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	2380      	movs	r3, #128	; 0x80
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	58d3      	ldr	r3, [r2, r3]
 8007cac:	4a22      	ldr	r2, [pc, #136]	; (8007d38 <f_read+0x3c4>)
 8007cae:	5a9b      	ldrh	r3, [r3, r2]
 8007cb0:	0019      	movs	r1, r3
 8007cb2:	f7f8 fab7 	bl	8000224 <__aeabi_uidivmod>
 8007cb6:	000b      	movs	r3, r1
 8007cb8:	1ae3      	subs	r3, r4, r3
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8007cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d901      	bls.n	8007cc8 <f_read+0x354>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	2381      	movs	r3, #129	; 0x81
 8007ccc:	00db      	lsls	r3, r3, #3
 8007cce:	58d0      	ldr	r0, [r2, r3]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	2380      	movs	r3, #128	; 0x80
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	58d3      	ldr	r3, [r2, r3]
 8007cd8:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <f_read+0x3c4>)
 8007cda:	5a9b      	ldrh	r3, [r3, r2]
 8007cdc:	0019      	movs	r1, r3
 8007cde:	f7f8 faa1 	bl	8000224 <__aeabi_uidivmod>
 8007ce2:	000b      	movs	r3, r1
 8007ce4:	001a      	movs	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	1899      	adds	r1, r3, r2
 8007cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	0018      	movs	r0, r3
 8007cf0:	f7fc fdee 	bl	80048d0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007cf4:	6a3a      	ldr	r2, [r7, #32]
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	18d3      	adds	r3, r2, r3
 8007cfa:	623b      	str	r3, [r7, #32]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	2381      	movs	r3, #129	; 0x81
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	58d2      	ldr	r2, [r2, r3]
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	18d1      	adds	r1, r2, r3
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	2381      	movs	r3, #129	; 0x81
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	50d1      	str	r1, [r2, r3]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	18d2      	adds	r2, r2, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d000      	beq.n	8007d2c <f_read+0x3b8>
 8007d2a:	e662      	b.n	80079f2 <f_read+0x7e>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	0018      	movs	r0, r3
 8007d30:	46bd      	mov	sp, r7
 8007d32:	b00c      	add	sp, #48	; 0x30
 8007d34:	bdb0      	pop	{r4, r5, r7, pc}
 8007d36:	46c0      	nop			; (mov r8, r8)
 8007d38:	0000040a 	.word	0x0000040a

08007d3c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007d3c:	b5b0      	push	{r4, r5, r7, lr}
 8007d3e:	b08a      	sub	sp, #40	; 0x28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2200      	movs	r2, #0
 8007d52:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007d54:	2517      	movs	r5, #23
 8007d56:	197c      	adds	r4, r7, r5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	f7ff fab2 	bl	80072c4 <validate>
 8007d60:	0003      	movs	r3, r0
 8007d62:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007d64:	197b      	adds	r3, r7, r5
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <f_write+0x38>
 8007d6c:	2317      	movs	r3, #23
 8007d6e:	18fb      	adds	r3, r7, r3
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	e20a      	b.n	800818a <f_write+0x44e>
	if (fp->err)							/* Check error */
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4ac0      	ldr	r2, [pc, #768]	; (8008078 <f_write+0x33c>)
 8007d78:	5c9b      	ldrb	r3, [r3, r2]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <f_write+0x4a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4abd      	ldr	r2, [pc, #756]	; (8008078 <f_write+0x33c>)
 8007d82:	5c9b      	ldrb	r3, [r3, r2]
 8007d84:	e201      	b.n	800818a <f_write+0x44e>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4abc      	ldr	r2, [pc, #752]	; (800807c <f_write+0x340>)
 8007d8a:	5c9b      	ldrb	r3, [r3, r2]
 8007d8c:	001a      	movs	r2, r3
 8007d8e:	2302      	movs	r3, #2
 8007d90:	4013      	ands	r3, r2
 8007d92:	d101      	bne.n	8007d98 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007d94:	2307      	movs	r3, #7
 8007d96:	e1f8      	b.n	800818a <f_write+0x44e>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	2381      	movs	r3, #129	; 0x81
 8007d9c:	00db      	lsls	r3, r3, #3
 8007d9e:	58d2      	ldr	r2, [r2, r3]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	18d2      	adds	r2, r2, r3
 8007da4:	68f9      	ldr	r1, [r7, #12]
 8007da6:	2381      	movs	r3, #129	; 0x81
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	58cb      	ldr	r3, [r1, r3]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d300      	bcc.n	8007db2 <f_write+0x76>
 8007db0:	e1cb      	b.n	800814a <f_write+0x40e>
 8007db2:	2300      	movs	r3, #0
 8007db4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007db6:	e1c8      	b.n	800814a <f_write+0x40e>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	2381      	movs	r3, #129	; 0x81
 8007dbc:	00db      	lsls	r3, r3, #3
 8007dbe:	58d0      	ldr	r0, [r2, r3]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	2380      	movs	r3, #128	; 0x80
 8007dc4:	00db      	lsls	r3, r3, #3
 8007dc6:	58d3      	ldr	r3, [r2, r3]
 8007dc8:	4aad      	ldr	r2, [pc, #692]	; (8008080 <f_write+0x344>)
 8007dca:	5a9b      	ldrh	r3, [r3, r2]
 8007dcc:	0019      	movs	r1, r3
 8007dce:	f7f8 fa29 	bl	8000224 <__aeabi_uidivmod>
 8007dd2:	1e0b      	subs	r3, r1, #0
 8007dd4:	d000      	beq.n	8007dd8 <f_write+0x9c>
 8007dd6:	e164      	b.n	80080a2 <f_write+0x366>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	2381      	movs	r3, #129	; 0x81
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	58d0      	ldr	r0, [r2, r3]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	2380      	movs	r3, #128	; 0x80
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	58d3      	ldr	r3, [r2, r3]
 8007de8:	4aa5      	ldr	r2, [pc, #660]	; (8008080 <f_write+0x344>)
 8007dea:	5a9b      	ldrh	r3, [r3, r2]
 8007dec:	0019      	movs	r1, r3
 8007dee:	f7f8 f993 	bl	8000118 <__udivsi3>
 8007df2:	0003      	movs	r3, r0
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	2380      	movs	r3, #128	; 0x80
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	58cb      	ldr	r3, [r1, r3]
 8007dfe:	49a1      	ldr	r1, [pc, #644]	; (8008084 <f_write+0x348>)
 8007e00:	5c5b      	ldrb	r3, [r3, r1]
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b2d9      	uxtb	r1, r3
 8007e06:	2016      	movs	r0, #22
 8007e08:	183b      	adds	r3, r7, r0
 8007e0a:	400a      	ands	r2, r1
 8007e0c:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 8007e0e:	183b      	adds	r3, r7, r0
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d15a      	bne.n	8007ecc <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	2381      	movs	r3, #129	; 0x81
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	58d3      	ldr	r3, [r2, r3]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d112      	bne.n	8007e48 <f_write+0x10c>
					clst = fp->sclust;		/* Follow from the origin */
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	2382      	movs	r3, #130	; 0x82
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	58d3      	ldr	r3, [r2, r3]
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d127      	bne.n	8007e82 <f_write+0x146>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	2380      	movs	r3, #128	; 0x80
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	58d3      	ldr	r3, [r2, r3]
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f7fd fbd9 	bl	80055f4 <create_chain>
 8007e42:	0003      	movs	r3, r0
 8007e44:	627b      	str	r3, [r7, #36]	; 0x24
 8007e46:	e01c      	b.n	8007e82 <f_write+0x146>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4a8f      	ldr	r2, [pc, #572]	; (8008088 <f_write+0x34c>)
 8007e4c:	589b      	ldr	r3, [r3, r2]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00b      	beq.n	8007e6a <f_write+0x12e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	2381      	movs	r3, #129	; 0x81
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	58d2      	ldr	r2, [r2, r3]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	0011      	movs	r1, r2
 8007e5e:	0018      	movs	r0, r3
 8007e60:	f7fd fc7e 	bl	8005760 <clmt_clust>
 8007e64:	0003      	movs	r3, r0
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
 8007e68:	e00b      	b.n	8007e82 <f_write+0x146>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	2380      	movs	r3, #128	; 0x80
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	58d0      	ldr	r0, [r2, r3]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4a85      	ldr	r2, [pc, #532]	; (800808c <f_write+0x350>)
 8007e76:	589b      	ldr	r3, [r3, r2]
 8007e78:	0019      	movs	r1, r3
 8007e7a:	f7fd fbbb 	bl	80055f4 <create_chain>
 8007e7e:	0003      	movs	r3, r0
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d100      	bne.n	8007e8a <f_write+0x14e>
 8007e88:	e164      	b.n	8008154 <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d105      	bne.n	8007e9c <f_write+0x160>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4a79      	ldr	r2, [pc, #484]	; (8008078 <f_write+0x33c>)
 8007e94:	2102      	movs	r1, #2
 8007e96:	5499      	strb	r1, [r3, r2]
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e176      	b.n	800818a <f_write+0x44e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	d105      	bne.n	8007eae <f_write+0x172>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4a74      	ldr	r2, [pc, #464]	; (8008078 <f_write+0x33c>)
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	5499      	strb	r1, [r3, r2]
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e16d      	b.n	800818a <f_write+0x44e>
				fp->clust = clst;			/* Update current cluster */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	4976      	ldr	r1, [pc, #472]	; (800808c <f_write+0x350>)
 8007eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb4:	505a      	str	r2, [r3, r1]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	2382      	movs	r3, #130	; 0x82
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	58d3      	ldr	r3, [r2, r3]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d104      	bne.n	8007ecc <f_write+0x190>
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	2382      	movs	r3, #130	; 0x82
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eca:	50d1      	str	r1, [r2, r3]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4a6b      	ldr	r2, [pc, #428]	; (800807c <f_write+0x340>)
 8007ed0:	5c9b      	ldrb	r3, [r3, r2]
 8007ed2:	001a      	movs	r2, r3
 8007ed4:	2340      	movs	r3, #64	; 0x40
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	d01e      	beq.n	8007f18 <f_write+0x1dc>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	2380      	movs	r3, #128	; 0x80
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	58d3      	ldr	r3, [r2, r3]
 8007ee2:	4a6b      	ldr	r2, [pc, #428]	; (8008090 <f_write+0x354>)
 8007ee4:	5c98      	ldrb	r0, [r3, r2]
 8007ee6:	68f9      	ldr	r1, [r7, #12]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	2383      	movs	r3, #131	; 0x83
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	58d2      	ldr	r2, [r2, r3]
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f7fc fc9d 	bl	8004830 <disk_write>
 8007ef6:	1e03      	subs	r3, r0, #0
 8007ef8:	d005      	beq.n	8007f06 <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4a5e      	ldr	r2, [pc, #376]	; (8008078 <f_write+0x33c>)
 8007efe:	2101      	movs	r1, #1
 8007f00:	5499      	strb	r1, [r3, r2]
 8007f02:	2301      	movs	r3, #1
 8007f04:	e141      	b.n	800818a <f_write+0x44e>
				fp->flag &= ~FA__DIRTY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4a5c      	ldr	r2, [pc, #368]	; (800807c <f_write+0x340>)
 8007f0a:	5c9b      	ldrb	r3, [r3, r2]
 8007f0c:	2240      	movs	r2, #64	; 0x40
 8007f0e:	4393      	bics	r3, r2
 8007f10:	b2d9      	uxtb	r1, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4a59      	ldr	r2, [pc, #356]	; (800807c <f_write+0x340>)
 8007f16:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	2380      	movs	r3, #128	; 0x80
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	58d0      	ldr	r0, [r2, r3]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4a5a      	ldr	r2, [pc, #360]	; (800808c <f_write+0x350>)
 8007f24:	589b      	ldr	r3, [r3, r2]
 8007f26:	0019      	movs	r1, r3
 8007f28:	f7fd f872 	bl	8005010 <clust2sect>
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d105      	bne.n	8007f42 <f_write+0x206>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4a4f      	ldr	r2, [pc, #316]	; (8008078 <f_write+0x33c>)
 8007f3a:	2102      	movs	r1, #2
 8007f3c:	5499      	strb	r1, [r3, r2]
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e123      	b.n	800818a <f_write+0x44e>
			sect += csect;
 8007f42:	2316      	movs	r3, #22
 8007f44:	18fb      	adds	r3, r7, r3
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	18d3      	adds	r3, r2, r3
 8007f4c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	2380      	movs	r3, #128	; 0x80
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	58d3      	ldr	r3, [r2, r3]
 8007f56:	4a4a      	ldr	r2, [pc, #296]	; (8008080 <f_write+0x344>)
 8007f58:	5a9b      	ldrh	r3, [r3, r2]
 8007f5a:	0019      	movs	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7f8 f8db 	bl	8000118 <__udivsi3>
 8007f62:	0003      	movs	r3, r0
 8007f64:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d061      	beq.n	8008030 <f_write+0x2f4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007f6c:	2316      	movs	r3, #22
 8007f6e:	18fb      	adds	r3, r7, r3
 8007f70:	781a      	ldrb	r2, [r3, #0]
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	18d3      	adds	r3, r2, r3
 8007f76:	68f9      	ldr	r1, [r7, #12]
 8007f78:	2280      	movs	r2, #128	; 0x80
 8007f7a:	00d2      	lsls	r2, r2, #3
 8007f7c:	588a      	ldr	r2, [r1, r2]
 8007f7e:	4941      	ldr	r1, [pc, #260]	; (8008084 <f_write+0x348>)
 8007f80:	5c52      	ldrb	r2, [r2, r1]
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d90b      	bls.n	8007f9e <f_write+0x262>
					cc = fp->fs->csize - csect;
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	2380      	movs	r3, #128	; 0x80
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	58d3      	ldr	r3, [r2, r3]
 8007f8e:	4a3d      	ldr	r2, [pc, #244]	; (8008084 <f_write+0x348>)
 8007f90:	5c9b      	ldrb	r3, [r3, r2]
 8007f92:	001a      	movs	r2, r3
 8007f94:	2316      	movs	r3, #22
 8007f96:	18fb      	adds	r3, r7, r3
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	2380      	movs	r3, #128	; 0x80
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	58d3      	ldr	r3, [r2, r3]
 8007fa6:	4a3a      	ldr	r2, [pc, #232]	; (8008090 <f_write+0x354>)
 8007fa8:	5c98      	ldrb	r0, [r3, r2]
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	69b9      	ldr	r1, [r7, #24]
 8007fb0:	f7fc fc3e 	bl	8004830 <disk_write>
 8007fb4:	1e03      	subs	r3, r0, #0
 8007fb6:	d005      	beq.n	8007fc4 <f_write+0x288>
					ABORT(fp->fs, FR_DISK_ERR);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4a2f      	ldr	r2, [pc, #188]	; (8008078 <f_write+0x33c>)
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	5499      	strb	r1, [r3, r2]
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e0e2      	b.n	800818a <f_write+0x44e>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	2383      	movs	r3, #131	; 0x83
 8007fc8:	00db      	lsls	r3, r3, #3
 8007fca:	58d2      	ldr	r2, [r2, r3]
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	69fa      	ldr	r2, [r7, #28]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d921      	bls.n	800801a <f_write+0x2de>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	2383      	movs	r3, #131	; 0x83
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	58d2      	ldr	r2, [r2, r3]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	68f9      	ldr	r1, [r7, #12]
 8007fe6:	2280      	movs	r2, #128	; 0x80
 8007fe8:	00d2      	lsls	r2, r2, #3
 8007fea:	588a      	ldr	r2, [r1, r2]
 8007fec:	4924      	ldr	r1, [pc, #144]	; (8008080 <f_write+0x344>)
 8007fee:	5a52      	ldrh	r2, [r2, r1]
 8007ff0:	4353      	muls	r3, r2
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	18d1      	adds	r1, r2, r3
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	2380      	movs	r3, #128	; 0x80
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	58d3      	ldr	r3, [r2, r3]
 8007ffe:	4a20      	ldr	r2, [pc, #128]	; (8008080 <f_write+0x344>)
 8008000:	5a9b      	ldrh	r3, [r3, r2]
 8008002:	001a      	movs	r2, r3
 8008004:	f7fc fc64 	bl	80048d0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4a1c      	ldr	r2, [pc, #112]	; (800807c <f_write+0x340>)
 800800c:	5c9b      	ldrb	r3, [r3, r2]
 800800e:	2240      	movs	r2, #64	; 0x40
 8008010:	4393      	bics	r3, r2
 8008012:	b2d9      	uxtb	r1, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4a19      	ldr	r2, [pc, #100]	; (800807c <f_write+0x340>)
 8008018:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	2380      	movs	r3, #128	; 0x80
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	58d3      	ldr	r3, [r2, r3]
 8008022:	4a17      	ldr	r2, [pc, #92]	; (8008080 <f_write+0x344>)
 8008024:	5a9b      	ldrh	r3, [r3, r2]
 8008026:	001a      	movs	r2, r3
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	4353      	muls	r3, r2
 800802c:	623b      	str	r3, [r7, #32]
				continue;
 800802e:	e074      	b.n	800811a <f_write+0x3de>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	2383      	movs	r3, #131	; 0x83
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	58d3      	ldr	r3, [r2, r3]
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	429a      	cmp	r2, r3
 800803c:	d02c      	beq.n	8008098 <f_write+0x35c>
				if (fp->fptr < fp->fsize &&
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	2381      	movs	r3, #129	; 0x81
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	58d2      	ldr	r2, [r2, r3]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4912      	ldr	r1, [pc, #72]	; (8008094 <f_write+0x358>)
 800804a:	585b      	ldr	r3, [r3, r1]
 800804c:	429a      	cmp	r2, r3
 800804e:	d223      	bcs.n	8008098 <f_write+0x35c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	2380      	movs	r3, #128	; 0x80
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	58d3      	ldr	r3, [r2, r3]
 8008058:	4a0d      	ldr	r2, [pc, #52]	; (8008090 <f_write+0x354>)
 800805a:	5c98      	ldrb	r0, [r3, r2]
 800805c:	68f9      	ldr	r1, [r7, #12]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	2301      	movs	r3, #1
 8008062:	f7fc fbbd 	bl	80047e0 <disk_read>
 8008066:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 8008068:	d016      	beq.n	8008098 <f_write+0x35c>
						ABORT(fp->fs, FR_DISK_ERR);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4a02      	ldr	r2, [pc, #8]	; (8008078 <f_write+0x33c>)
 800806e:	2101      	movs	r1, #1
 8008070:	5499      	strb	r1, [r3, r2]
 8008072:	2301      	movs	r3, #1
 8008074:	e089      	b.n	800818a <f_write+0x44e>
 8008076:	46c0      	nop			; (mov r8, r8)
 8008078:	00000407 	.word	0x00000407
 800807c:	00000406 	.word	0x00000406
 8008080:	0000040a 	.word	0x0000040a
 8008084:	00000402 	.word	0x00000402
 8008088:	00000424 	.word	0x00000424
 800808c:	00000414 	.word	0x00000414
 8008090:	00000401 	.word	0x00000401
 8008094:	0000040c 	.word	0x0000040c
			}
#endif
			fp->dsect = sect;
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	2383      	movs	r3, #131	; 0x83
 800809c:	00db      	lsls	r3, r3, #3
 800809e:	6939      	ldr	r1, [r7, #16]
 80080a0:	50d1      	str	r1, [r2, r3]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	2380      	movs	r3, #128	; 0x80
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	58d3      	ldr	r3, [r2, r3]
 80080aa:	4a3a      	ldr	r2, [pc, #232]	; (8008194 <f_write+0x458>)
 80080ac:	5a9b      	ldrh	r3, [r3, r2]
 80080ae:	001c      	movs	r4, r3
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	2381      	movs	r3, #129	; 0x81
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	58d0      	ldr	r0, [r2, r3]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	2380      	movs	r3, #128	; 0x80
 80080bc:	00db      	lsls	r3, r3, #3
 80080be:	58d3      	ldr	r3, [r2, r3]
 80080c0:	4a34      	ldr	r2, [pc, #208]	; (8008194 <f_write+0x458>)
 80080c2:	5a9b      	ldrh	r3, [r3, r2]
 80080c4:	0019      	movs	r1, r3
 80080c6:	f7f8 f8ad 	bl	8000224 <__aeabi_uidivmod>
 80080ca:	000b      	movs	r3, r1
 80080cc:	1ae3      	subs	r3, r4, r3
 80080ce:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80080d0:	6a3a      	ldr	r2, [r7, #32]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d901      	bls.n	80080dc <f_write+0x3a0>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	2381      	movs	r3, #129	; 0x81
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	58d0      	ldr	r0, [r2, r3]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	2380      	movs	r3, #128	; 0x80
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	58d3      	ldr	r3, [r2, r3]
 80080ec:	4a29      	ldr	r2, [pc, #164]	; (8008194 <f_write+0x458>)
 80080ee:	5a9b      	ldrh	r3, [r3, r2]
 80080f0:	0019      	movs	r1, r3
 80080f2:	f7f8 f897 	bl	8000224 <__aeabi_uidivmod>
 80080f6:	000b      	movs	r3, r1
 80080f8:	001a      	movs	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	189b      	adds	r3, r3, r2
 80080fe:	6a3a      	ldr	r2, [r7, #32]
 8008100:	69b9      	ldr	r1, [r7, #24]
 8008102:	0018      	movs	r0, r3
 8008104:	f7fc fbe4 	bl	80048d0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4a23      	ldr	r2, [pc, #140]	; (8008198 <f_write+0x45c>)
 800810c:	5c9b      	ldrb	r3, [r3, r2]
 800810e:	2240      	movs	r2, #64	; 0x40
 8008110:	4313      	orrs	r3, r2
 8008112:	b2d9      	uxtb	r1, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4a20      	ldr	r2, [pc, #128]	; (8008198 <f_write+0x45c>)
 8008118:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	18d3      	adds	r3, r2, r3
 8008120:	61bb      	str	r3, [r7, #24]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	2381      	movs	r3, #129	; 0x81
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	58d2      	ldr	r2, [r2, r3]
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	18d1      	adds	r1, r2, r3
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	2381      	movs	r3, #129	; 0x81
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	50d1      	str	r1, [r2, r3]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	18d2      	adds	r2, r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d000      	beq.n	8008152 <f_write+0x416>
 8008150:	e632      	b.n	8007db8 <f_write+0x7c>
 8008152:	e000      	b.n	8008156 <f_write+0x41a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008154:	46c0      	nop			; (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	2381      	movs	r3, #129	; 0x81
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	58d2      	ldr	r2, [r2, r3]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	490e      	ldr	r1, [pc, #56]	; (800819c <f_write+0x460>)
 8008162:	585b      	ldr	r3, [r3, r1]
 8008164:	429a      	cmp	r2, r3
 8008166:	d906      	bls.n	8008176 <f_write+0x43a>
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	2381      	movs	r3, #129	; 0x81
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	58d2      	ldr	r2, [r2, r3]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	490a      	ldr	r1, [pc, #40]	; (800819c <f_write+0x460>)
 8008174:	505a      	str	r2, [r3, r1]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4a07      	ldr	r2, [pc, #28]	; (8008198 <f_write+0x45c>)
 800817a:	5c9b      	ldrb	r3, [r3, r2]
 800817c:	2220      	movs	r2, #32
 800817e:	4313      	orrs	r3, r2
 8008180:	b2d9      	uxtb	r1, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4a04      	ldr	r2, [pc, #16]	; (8008198 <f_write+0x45c>)
 8008186:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 8008188:	2300      	movs	r3, #0
}
 800818a:	0018      	movs	r0, r3
 800818c:	46bd      	mov	sp, r7
 800818e:	b00a      	add	sp, #40	; 0x28
 8008190:	bdb0      	pop	{r4, r5, r7, pc}
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	0000040a 	.word	0x0000040a
 8008198:	00000406 	.word	0x00000406
 800819c:	0000040c 	.word	0x0000040c

080081a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80081a0:	b5b0      	push	{r4, r5, r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80081a8:	2517      	movs	r5, #23
 80081aa:	197c      	adds	r4, r7, r5
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	0018      	movs	r0, r3
 80081b0:	f7ff f888 	bl	80072c4 <validate>
 80081b4:	0003      	movs	r3, r0
 80081b6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80081b8:	197b      	adds	r3, r7, r5
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d000      	beq.n	80081c2 <f_sync+0x22>
 80081c0:	e0b3      	b.n	800832a <f_sync+0x18a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a5c      	ldr	r2, [pc, #368]	; (8008338 <f_sync+0x198>)
 80081c6:	5c9b      	ldrb	r3, [r3, r2]
 80081c8:	001a      	movs	r2, r3
 80081ca:	2320      	movs	r3, #32
 80081cc:	4013      	ands	r3, r2
 80081ce:	d100      	bne.n	80081d2 <f_sync+0x32>
 80081d0:	e0ab      	b.n	800832a <f_sync+0x18a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a58      	ldr	r2, [pc, #352]	; (8008338 <f_sync+0x198>)
 80081d6:	5c9b      	ldrb	r3, [r3, r2]
 80081d8:	001a      	movs	r2, r3
 80081da:	2340      	movs	r3, #64	; 0x40
 80081dc:	4013      	ands	r3, r2
 80081de:	d01a      	beq.n	8008216 <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	2380      	movs	r3, #128	; 0x80
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	58d3      	ldr	r3, [r2, r3]
 80081e8:	4a54      	ldr	r2, [pc, #336]	; (800833c <f_sync+0x19c>)
 80081ea:	5c98      	ldrb	r0, [r3, r2]
 80081ec:	6879      	ldr	r1, [r7, #4]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	2383      	movs	r3, #131	; 0x83
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	58d2      	ldr	r2, [r2, r3]
 80081f6:	2301      	movs	r3, #1
 80081f8:	f7fc fb1a 	bl	8004830 <disk_write>
 80081fc:	1e03      	subs	r3, r0, #0
 80081fe:	d001      	beq.n	8008204 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008200:	2301      	movs	r3, #1
 8008202:	e095      	b.n	8008330 <f_sync+0x190>
				fp->flag &= ~FA__DIRTY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a4c      	ldr	r2, [pc, #304]	; (8008338 <f_sync+0x198>)
 8008208:	5c9b      	ldrb	r3, [r3, r2]
 800820a:	2240      	movs	r2, #64	; 0x40
 800820c:	4393      	bics	r3, r2
 800820e:	b2d9      	uxtb	r1, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a49      	ldr	r2, [pc, #292]	; (8008338 <f_sync+0x198>)
 8008214:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	2380      	movs	r3, #128	; 0x80
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	58d0      	ldr	r0, [r2, r3]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a47      	ldr	r2, [pc, #284]	; (8008340 <f_sync+0x1a0>)
 8008222:	589b      	ldr	r3, [r3, r2]
 8008224:	2517      	movs	r5, #23
 8008226:	197c      	adds	r4, r7, r5
 8008228:	0019      	movs	r1, r3
 800822a:	f7fc fddf 	bl	8004dec <move_window>
 800822e:	0003      	movs	r3, r0
 8008230:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 8008232:	197b      	adds	r3, r7, r5
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d177      	bne.n	800832a <f_sync+0x18a>
				dir = fp->dir_ptr;
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	2384      	movs	r3, #132	; 0x84
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	58d3      	ldr	r3, [r2, r3]
 8008242:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	330b      	adds	r3, #11
 8008248:	781a      	ldrb	r2, [r3, #0]
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	330b      	adds	r3, #11
 800824e:	2120      	movs	r1, #32
 8008250:	430a      	orrs	r2, r1
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a3a      	ldr	r2, [pc, #232]	; (8008344 <f_sync+0x1a4>)
 800825a:	589a      	ldr	r2, [r3, r2]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	331c      	adds	r3, #28
 8008260:	b2d2      	uxtb	r2, r2
 8008262:	701a      	strb	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a37      	ldr	r2, [pc, #220]	; (8008344 <f_sync+0x1a4>)
 8008268:	589b      	ldr	r3, [r3, r2]
 800826a:	b29b      	uxth	r3, r3
 800826c:	0a1b      	lsrs	r3, r3, #8
 800826e:	b29a      	uxth	r2, r3
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	331d      	adds	r3, #29
 8008274:	b2d2      	uxtb	r2, r2
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a32      	ldr	r2, [pc, #200]	; (8008344 <f_sync+0x1a4>)
 800827c:	589b      	ldr	r3, [r3, r2]
 800827e:	0c1a      	lsrs	r2, r3, #16
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	331e      	adds	r3, #30
 8008284:	b2d2      	uxtb	r2, r2
 8008286:	701a      	strb	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a2e      	ldr	r2, [pc, #184]	; (8008344 <f_sync+0x1a4>)
 800828c:	589b      	ldr	r3, [r3, r2]
 800828e:	0e1a      	lsrs	r2, r3, #24
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	331f      	adds	r3, #31
 8008294:	b2d2      	uxtb	r2, r2
 8008296:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	2382      	movs	r3, #130	; 0x82
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	58d2      	ldr	r2, [r2, r3]
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	0011      	movs	r1, r2
 80082a4:	0018      	movs	r0, r3
 80082a6:	f7fd fd3e 	bl	8005d26 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80082aa:	f7fc f9d7 	bl	800465c <get_fattime>
 80082ae:	0003      	movs	r3, r0
 80082b0:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	3316      	adds	r3, #22
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	b2d2      	uxtb	r2, r2
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	0a1b      	lsrs	r3, r3, #8
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	3317      	adds	r3, #23
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	0c1a      	lsrs	r2, r3, #16
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	3318      	adds	r3, #24
 80082d4:	b2d2      	uxtb	r2, r2
 80082d6:	701a      	strb	r2, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	0e1a      	lsrs	r2, r3, #24
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	3319      	adds	r3, #25
 80082e0:	b2d2      	uxtb	r2, r2
 80082e2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	3312      	adds	r3, #18
 80082e8:	2200      	movs	r2, #0
 80082ea:	701a      	strb	r2, [r3, #0]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	3313      	adds	r3, #19
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a10      	ldr	r2, [pc, #64]	; (8008338 <f_sync+0x198>)
 80082f8:	5c9b      	ldrb	r3, [r3, r2]
 80082fa:	2220      	movs	r2, #32
 80082fc:	4393      	bics	r3, r2
 80082fe:	b2d9      	uxtb	r1, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a0d      	ldr	r2, [pc, #52]	; (8008338 <f_sync+0x198>)
 8008304:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	2380      	movs	r3, #128	; 0x80
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	58d3      	ldr	r3, [r2, r3]
 800830e:	4a0e      	ldr	r2, [pc, #56]	; (8008348 <f_sync+0x1a8>)
 8008310:	2101      	movs	r1, #1
 8008312:	5499      	strb	r1, [r3, r2]
				res = sync_fs(fp->fs);
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	2380      	movs	r3, #128	; 0x80
 8008318:	00db      	lsls	r3, r3, #3
 800831a:	58d3      	ldr	r3, [r2, r3]
 800831c:	2217      	movs	r2, #23
 800831e:	18bc      	adds	r4, r7, r2
 8008320:	0018      	movs	r0, r3
 8008322:	f7fc fd9f 	bl	8004e64 <sync_fs>
 8008326:	0003      	movs	r3, r0
 8008328:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800832a:	2317      	movs	r3, #23
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	781b      	ldrb	r3, [r3, #0]
}
 8008330:	0018      	movs	r0, r3
 8008332:	46bd      	mov	sp, r7
 8008334:	b006      	add	sp, #24
 8008336:	bdb0      	pop	{r4, r5, r7, pc}
 8008338:	00000406 	.word	0x00000406
 800833c:	00000401 	.word	0x00000401
 8008340:	0000041c 	.word	0x0000041c
 8008344:	0000040c 	.word	0x0000040c
 8008348:	00000404 	.word	0x00000404

0800834c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800834c:	b5b0      	push	{r4, r5, r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008354:	250f      	movs	r5, #15
 8008356:	197c      	adds	r4, r7, r5
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	0018      	movs	r0, r3
 800835c:	f7ff ff20 	bl	80081a0 <f_sync>
 8008360:	0003      	movs	r3, r0
 8008362:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8008364:	197b      	adds	r3, r7, r5
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d11f      	bne.n	80083ac <f_close+0x60>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800836c:	250f      	movs	r5, #15
 800836e:	197c      	adds	r4, r7, r5
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	0018      	movs	r0, r3
 8008374:	f7fe ffa6 	bl	80072c4 <validate>
 8008378:	0003      	movs	r3, r0
 800837a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800837c:	197b      	adds	r3, r7, r5
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d113      	bne.n	80083ac <f_close+0x60>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	2385      	movs	r3, #133	; 0x85
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	58d3      	ldr	r3, [r2, r3]
 800838c:	250f      	movs	r5, #15
 800838e:	197c      	adds	r4, r7, r5
 8008390:	0018      	movs	r0, r3
 8008392:	f7fc fc55 	bl	8004c40 <dec_lock>
 8008396:	0003      	movs	r3, r0
 8008398:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 800839a:	197b      	adds	r3, r7, r5
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d104      	bne.n	80083ac <f_close+0x60>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	2380      	movs	r3, #128	; 0x80
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	2100      	movs	r1, #0
 80083aa:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80083ac:	230f      	movs	r3, #15
 80083ae:	18fb      	adds	r3, r7, r3
 80083b0:	781b      	ldrb	r3, [r3, #0]
}
 80083b2:	0018      	movs	r0, r3
 80083b4:	46bd      	mov	sp, r7
 80083b6:	b004      	add	sp, #16
 80083b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080083bc <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80083bc:	b5b0      	push	{r4, r5, r7, lr}
 80083be:	b08e      	sub	sp, #56	; 0x38
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80083c8:	2537      	movs	r5, #55	; 0x37
 80083ca:	197c      	adds	r4, r7, r5
 80083cc:	230c      	movs	r3, #12
 80083ce:	18f9      	adds	r1, r7, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	0018      	movs	r0, r3
 80083d6:	f7fe fc1d 	bl	8006c14 <find_volume>
 80083da:	0003      	movs	r3, r0
 80083dc:	7023      	strb	r3, [r4, #0]
	fs = *fatfs;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80083e4:	197b      	adds	r3, r7, r5
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d000      	beq.n	80083ee <f_getfree+0x32>
 80083ec:	e0be      	b.n	800856c <f_getfree+0x1b0>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	2382      	movs	r3, #130	; 0x82
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	58d2      	ldr	r2, [r2, r3]
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	4960      	ldr	r1, [pc, #384]	; (800857c <f_getfree+0x1c0>)
 80083fa:	585b      	ldr	r3, [r3, r1]
 80083fc:	3b02      	subs	r3, #2
 80083fe:	429a      	cmp	r2, r3
 8008400:	d806      	bhi.n	8008410 <f_getfree+0x54>
			*nclst = fs->free_clust;
 8008402:	69fa      	ldr	r2, [r7, #28]
 8008404:	2382      	movs	r3, #130	; 0x82
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	58d2      	ldr	r2, [r2, r3]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e0ad      	b.n	800856c <f_getfree+0x1b0>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8008410:	201b      	movs	r0, #27
 8008412:	183b      	adds	r3, r7, r0
 8008414:	69f9      	ldr	r1, [r7, #28]
 8008416:	2280      	movs	r2, #128	; 0x80
 8008418:	00d2      	lsls	r2, r2, #3
 800841a:	5c8a      	ldrb	r2, [r1, r2]
 800841c:	701a      	strb	r2, [r3, #0]
			n = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8008422:	183b      	adds	r3, r7, r0
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d129      	bne.n	800847e <f_getfree+0xc2>
				clst = 2;
 800842a:	2302      	movs	r3, #2
 800842c:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800842e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	0011      	movs	r1, r2
 8008434:	0018      	movs	r0, r3
 8008436:	f7fc fe0f 	bl	8005058 <get_fat>
 800843a:	0003      	movs	r3, r0
 800843c:	617b      	str	r3, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	3301      	adds	r3, #1
 8008442:	d104      	bne.n	800844e <f_getfree+0x92>
 8008444:	2337      	movs	r3, #55	; 0x37
 8008446:	18fb      	adds	r3, r7, r3
 8008448:	2201      	movs	r2, #1
 800844a:	701a      	strb	r2, [r3, #0]
 800844c:	e07d      	b.n	800854a <f_getfree+0x18e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d104      	bne.n	800845e <f_getfree+0xa2>
 8008454:	2337      	movs	r3, #55	; 0x37
 8008456:	18fb      	adds	r3, r7, r3
 8008458:	2202      	movs	r2, #2
 800845a:	701a      	strb	r2, [r3, #0]
 800845c:	e075      	b.n	800854a <f_getfree+0x18e>
					if (stat == 0) n++;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d102      	bne.n	800846a <f_getfree+0xae>
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	3301      	adds	r3, #1
 8008468:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	3301      	adds	r3, #1
 800846e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4a42      	ldr	r2, [pc, #264]	; (800857c <f_getfree+0x1c0>)
 8008474:	589b      	ldr	r3, [r3, r2]
 8008476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008478:	429a      	cmp	r2, r3
 800847a:	d3d8      	bcc.n	800842e <f_getfree+0x72>
 800847c:	e065      	b.n	800854a <f_getfree+0x18e>
			} else {
				clst = fs->n_fatent;
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	4a3e      	ldr	r2, [pc, #248]	; (800857c <f_getfree+0x1c0>)
 8008482:	589b      	ldr	r3, [r3, r2]
 8008484:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8008486:	69fa      	ldr	r2, [r7, #28]
 8008488:	2384      	movs	r3, #132	; 0x84
 800848a:	00db      	lsls	r3, r3, #3
 800848c:	58d3      	ldr	r3, [r2, r3]
 800848e:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	627b      	str	r3, [r7, #36]	; 0x24
 8008494:	2300      	movs	r3, #0
 8008496:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	2b00      	cmp	r3, #0
 800849c:	d115      	bne.n	80084ca <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80084a4:	2537      	movs	r5, #55	; 0x37
 80084a6:	197c      	adds	r4, r7, r5
 80084a8:	69fa      	ldr	r2, [r7, #28]
 80084aa:	0019      	movs	r1, r3
 80084ac:	0010      	movs	r0, r2
 80084ae:	f7fc fc9d 	bl	8004dec <move_window>
 80084b2:	0003      	movs	r3, r0
 80084b4:	7023      	strb	r3, [r4, #0]
						if (res != FR_OK) break;
 80084b6:	197b      	adds	r3, r7, r5
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d144      	bne.n	8008548 <f_getfree+0x18c>
						p = fs->win.d8;
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	4a2e      	ldr	r2, [pc, #184]	; (8008580 <f_getfree+0x1c4>)
 80084c6:	5a9b      	ldrh	r3, [r3, r2]
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 80084ca:	231b      	movs	r3, #27
 80084cc:	18fb      	adds	r3, r7, r3
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d115      	bne.n	8008500 <f_getfree+0x144>
						if (LD_WORD(p) == 0) n++;
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	3301      	adds	r3, #1
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	b21a      	sxth	r2, r3
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	b21b      	sxth	r3, r3
 80084e4:	4313      	orrs	r3, r2
 80084e6:	b21b      	sxth	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d102      	bne.n	80084f2 <f_getfree+0x136>
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	3301      	adds	r3, #1
 80084f0:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	3302      	adds	r3, #2
 80084f6:	623b      	str	r3, [r7, #32]
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	3b02      	subs	r3, #2
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
 80084fe:	e01c      	b.n	800853a <f_getfree+0x17e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	3303      	adds	r3, #3
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	061a      	lsls	r2, r3, #24
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	3302      	adds	r3, #2
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	041b      	lsls	r3, r3, #16
 8008510:	4313      	orrs	r3, r2
 8008512:	6a3a      	ldr	r2, [r7, #32]
 8008514:	3201      	adds	r2, #1
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	0212      	lsls	r2, r2, #8
 800851a:	4313      	orrs	r3, r2
 800851c:	6a3a      	ldr	r2, [r7, #32]
 800851e:	7812      	ldrb	r2, [r2, #0]
 8008520:	4313      	orrs	r3, r2
 8008522:	011b      	lsls	r3, r3, #4
 8008524:	091b      	lsrs	r3, r3, #4
 8008526:	d102      	bne.n	800852e <f_getfree+0x172>
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	3301      	adds	r3, #1
 800852c:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	3304      	adds	r3, #4
 8008532:	623b      	str	r3, [r7, #32]
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	3b04      	subs	r3, #4
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853c:	3b01      	subs	r3, #1
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1a8      	bne.n	8008498 <f_getfree+0xdc>
 8008546:	e000      	b.n	800854a <f_getfree+0x18e>
						if (res != FR_OK) break;
 8008548:	46c0      	nop			; (mov r8, r8)
			}
			fs->free_clust = n;
 800854a:	69fa      	ldr	r2, [r7, #28]
 800854c:	2382      	movs	r3, #130	; 0x82
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008552:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <f_getfree+0x1c8>)
 8008558:	5c9b      	ldrb	r3, [r3, r2]
 800855a:	2201      	movs	r2, #1
 800855c:	4313      	orrs	r3, r2
 800855e:	b2d9      	uxtb	r1, r3
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4a08      	ldr	r2, [pc, #32]	; (8008584 <f_getfree+0x1c8>)
 8008564:	5499      	strb	r1, [r3, r2]
			*nclst = n;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800856a:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800856c:	2337      	movs	r3, #55	; 0x37
 800856e:	18fb      	adds	r3, r7, r3
 8008570:	781b      	ldrb	r3, [r3, #0]
}
 8008572:	0018      	movs	r0, r3
 8008574:	46bd      	mov	sp, r7
 8008576:	b00e      	add	sp, #56	; 0x38
 8008578:	bdb0      	pop	{r4, r5, r7, pc}
 800857a:	46c0      	nop			; (mov r8, r8)
 800857c:	00000414 	.word	0x00000414
 8008580:	0000040a 	.word	0x0000040a
 8008584:	00000405 	.word	0x00000405

08008588 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800859c:	e023      	b.n	80085e6 <f_gets+0x5e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800859e:	2310      	movs	r3, #16
 80085a0:	18fb      	adds	r3, r7, r3
 80085a2:	2214      	movs	r2, #20
 80085a4:	18b9      	adds	r1, r7, r2
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f7ff f9e3 	bl	8007974 <f_read>
		if (rc != 1) break;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d11e      	bne.n	80085f2 <f_gets+0x6a>
		c = s[0];
 80085b4:	2117      	movs	r1, #23
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	2214      	movs	r2, #20
 80085ba:	18ba      	adds	r2, r7, r2
 80085bc:	7812      	ldrb	r2, [r2, #0]
 80085be:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80085c0:	187b      	adds	r3, r7, r1
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2b0d      	cmp	r3, #13
 80085c6:	d100      	bne.n	80085ca <f_gets+0x42>
 80085c8:	e00d      	b.n	80085e6 <f_gets+0x5e>
		*p++ = c;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	61ba      	str	r2, [r7, #24]
 80085d0:	2117      	movs	r1, #23
 80085d2:	187a      	adds	r2, r7, r1
 80085d4:	7812      	ldrb	r2, [r2, #0]
 80085d6:	701a      	strb	r2, [r3, #0]
		n++;
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	3301      	adds	r3, #1
 80085dc:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80085de:	187b      	adds	r3, r7, r1
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	2b0a      	cmp	r3, #10
 80085e4:	d007      	beq.n	80085f6 <f_gets+0x6e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	dbd6      	blt.n	800859e <f_gets+0x16>
 80085f0:	e002      	b.n	80085f8 <f_gets+0x70>
		if (rc != 1) break;
 80085f2:	46c0      	nop			; (mov r8, r8)
 80085f4:	e000      	b.n	80085f8 <f_gets+0x70>
		if (c == '\n') break;		/* Break on EOL */
 80085f6:	46c0      	nop			; (mov r8, r8)
	}
	*p = 0;
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	2200      	movs	r2, #0
 80085fc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <f_gets+0x80>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	e000      	b.n	800860a <f_gets+0x82>
 8008608:	2300      	movs	r3, #0
}
 800860a:	0018      	movs	r0, r3
 800860c:	46bd      	mov	sp, r7
 800860e:	b008      	add	sp, #32
 8008610:	bd80      	pop	{r7, pc}

08008612 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	000a      	movs	r2, r1
 800861c:	1cfb      	adds	r3, r7, #3
 800861e:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8008620:	1cfb      	adds	r3, r7, #3
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b0a      	cmp	r3, #10
 8008626:	d104      	bne.n	8008632 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	210d      	movs	r1, #13
 800862c:	0018      	movs	r0, r3
 800862e:	f7ff fff0 	bl	8008612 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	db26      	blt.n	800868c <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	60fa      	str	r2, [r7, #12]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	18d3      	adds	r3, r2, r3
 8008648:	1cfa      	adds	r2, r7, #3
 800864a:	7812      	ldrb	r2, [r2, #0]
 800864c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b3c      	cmp	r3, #60	; 0x3c
 8008652:	dd12      	ble.n	800867a <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	330c      	adds	r3, #12
 800865c:	0019      	movs	r1, r3
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	2308      	movs	r3, #8
 8008662:	18fb      	adds	r3, r7, r3
 8008664:	f7ff fb6a 	bl	8007d3c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	429a      	cmp	r2, r3
 800866e:	d101      	bne.n	8008674 <putc_bfd+0x62>
 8008670:	2300      	movs	r3, #0
 8008672:	e001      	b.n	8008678 <putc_bfd+0x66>
 8008674:	2301      	movs	r3, #1
 8008676:	425b      	negs	r3, r3
 8008678:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	609a      	str	r2, [r3, #8]
 800868a:	e000      	b.n	800868e <putc_bfd+0x7c>
	if (i < 0) return;
 800868c:	46c0      	nop			; (mov r8, r8)
}
 800868e:	46bd      	mov	sp, r7
 8008690:	b004      	add	sp, #16
 8008692:	bd80      	pop	{r7, pc}

08008694 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008694:	b590      	push	{r4, r7, lr}
 8008696:	b097      	sub	sp, #92	; 0x5c
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800869e:	210c      	movs	r1, #12
 80086a0:	187b      	adds	r3, r7, r1
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	601a      	str	r2, [r3, #0]
	pb.nchr = pb.idx = 0;
 80086a6:	187b      	adds	r3, r7, r1
 80086a8:	2200      	movs	r2, #0
 80086aa:	605a      	str	r2, [r3, #4]
 80086ac:	187b      	adds	r3, r7, r1
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	187b      	adds	r3, r7, r1
 80086b2:	609a      	str	r2, [r3, #8]

	while (*str)			/* Put the string */
 80086b4:	e009      	b.n	80086ca <f_puts+0x36>
		putc_bfd(&pb, *str++);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	781a      	ldrb	r2, [r3, #0]
 80086be:	230c      	movs	r3, #12
 80086c0:	18fb      	adds	r3, r7, r3
 80086c2:	0011      	movs	r1, r2
 80086c4:	0018      	movs	r0, r3
 80086c6:	f7ff ffa4 	bl	8008612 <putc_bfd>
	while (*str)			/* Put the string */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1f1      	bne.n	80086b6 <f_puts+0x22>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80086d2:	230c      	movs	r3, #12
 80086d4:	18fb      	adds	r3, r7, r3
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	db1b      	blt.n	8008714 <f_puts+0x80>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80086dc:	210c      	movs	r1, #12
 80086de:	187b      	adds	r3, r7, r1
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	187b      	adds	r3, r7, r1
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	001c      	movs	r4, r3
 80086e8:	2308      	movs	r3, #8
 80086ea:	18fa      	adds	r2, r7, r3
 80086ec:	187b      	adds	r3, r7, r1
 80086ee:	330c      	adds	r3, #12
 80086f0:	0019      	movs	r1, r3
 80086f2:	0013      	movs	r3, r2
 80086f4:	0022      	movs	r2, r4
 80086f6:	f7ff fb21 	bl	8007d3c <f_write>
 80086fa:	1e03      	subs	r3, r0, #0
 80086fc:	d10a      	bne.n	8008714 <f_puts+0x80>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80086fe:	230c      	movs	r3, #12
 8008700:	18fb      	adds	r3, r7, r3
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	001a      	movs	r2, r3
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	429a      	cmp	r2, r3
 800870a:	d103      	bne.n	8008714 <f_puts+0x80>
 800870c:	230c      	movs	r3, #12
 800870e:	18fb      	adds	r3, r7, r3
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	e001      	b.n	8008718 <f_puts+0x84>
	return EOF;
 8008714:	2301      	movs	r3, #1
 8008716:	425b      	negs	r3, r3
}
 8008718:	0018      	movs	r0, r3
 800871a:	46bd      	mov	sp, r7
 800871c:	b017      	add	sp, #92	; 0x5c
 800871e:	bd90      	pop	{r4, r7, pc}

08008720 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	1dfb      	adds	r3, r7, #7
 800872c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800872e:	2317      	movs	r3, #23
 8008730:	18fb      	adds	r3, r7, r3
 8008732:	2201      	movs	r2, #1
 8008734:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8008736:	2316      	movs	r3, #22
 8008738:	18fb      	adds	r3, r7, r3
 800873a:	2200      	movs	r2, #0
 800873c:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 800873e:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <FATFS_LinkDriverEx+0xa8>)
 8008740:	7a5b      	ldrb	r3, [r3, #9]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b01      	cmp	r3, #1
 8008746:	d838      	bhi.n	80087ba <FATFS_LinkDriverEx+0x9a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008748:	4b1f      	ldr	r3, [pc, #124]	; (80087c8 <FATFS_LinkDriverEx+0xa8>)
 800874a:	7a5b      	ldrb	r3, [r3, #9]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	001a      	movs	r2, r3
 8008750:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <FATFS_LinkDriverEx+0xa8>)
 8008752:	2100      	movs	r1, #0
 8008754:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008756:	4b1c      	ldr	r3, [pc, #112]	; (80087c8 <FATFS_LinkDriverEx+0xa8>)
 8008758:	7a5b      	ldrb	r3, [r3, #9]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	4a1a      	ldr	r2, [pc, #104]	; (80087c8 <FATFS_LinkDriverEx+0xa8>)
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	18d3      	adds	r3, r2, r3
 8008762:	3304      	adds	r3, #4
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8008768:	4b17      	ldr	r3, [pc, #92]	; (80087c8 <FATFS_LinkDriverEx+0xa8>)
 800876a:	7a5b      	ldrb	r3, [r3, #9]
 800876c:	b2db      	uxtb	r3, r3
 800876e:	001a      	movs	r2, r3
 8008770:	4b15      	ldr	r3, [pc, #84]	; (80087c8 <FATFS_LinkDriverEx+0xa8>)
 8008772:	189b      	adds	r3, r3, r2
 8008774:	1dfa      	adds	r2, r7, #7
 8008776:	7812      	ldrb	r2, [r2, #0]
 8008778:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800877a:	4b13      	ldr	r3, [pc, #76]	; (80087c8 <FATFS_LinkDriverEx+0xa8>)
 800877c:	7a5b      	ldrb	r3, [r3, #9]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	b2d1      	uxtb	r1, r2
 8008784:	4a10      	ldr	r2, [pc, #64]	; (80087c8 <FATFS_LinkDriverEx+0xa8>)
 8008786:	7251      	strb	r1, [r2, #9]
 8008788:	2116      	movs	r1, #22
 800878a:	187a      	adds	r2, r7, r1
 800878c:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800878e:	187b      	adds	r3, r7, r1
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	3330      	adds	r3, #48	; 0x30
 8008794:	b2da      	uxtb	r2, r3
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	3301      	adds	r3, #1
 800879e:	223a      	movs	r2, #58	; 0x3a
 80087a0:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	3302      	adds	r3, #2
 80087a6:	222f      	movs	r2, #47	; 0x2f
 80087a8:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	3303      	adds	r3, #3
 80087ae:	2200      	movs	r2, #0
 80087b0:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80087b2:	2317      	movs	r3, #23
 80087b4:	18fb      	adds	r3, r7, r3
 80087b6:	2200      	movs	r2, #0
 80087b8:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80087ba:	2317      	movs	r3, #23
 80087bc:	18fb      	adds	r3, r7, r3
 80087be:	781b      	ldrb	r3, [r3, #0]
}
 80087c0:	0018      	movs	r0, r3
 80087c2:	46bd      	mov	sp, r7
 80087c4:	b006      	add	sp, #24
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	200002cc 	.word	0x200002cc

080087cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	0018      	movs	r0, r3
 80087de:	f7ff ff9f 	bl	8008720 <FATFS_LinkDriverEx>
 80087e2:	0003      	movs	r3, r0
}
 80087e4:	0018      	movs	r0, r3
 80087e6:	46bd      	mov	sp, r7
 80087e8:	b002      	add	sp, #8
 80087ea:	bd80      	pop	{r7, pc}

080087ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	0002      	movs	r2, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	1dbb      	adds	r3, r7, #6
 80087f8:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80087fa:	1dbb      	adds	r3, r7, #6
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008800:	d805      	bhi.n	800880e <ff_convert+0x22>
		c = chr;
 8008802:	230e      	movs	r3, #14
 8008804:	18fb      	adds	r3, r7, r3
 8008806:	1dba      	adds	r2, r7, #6
 8008808:	8812      	ldrh	r2, [r2, #0]
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	e038      	b.n	8008880 <ff_convert+0x94>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d010      	beq.n	8008836 <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008814:	1dbb      	adds	r3, r7, #6
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	2bff      	cmp	r3, #255	; 0xff
 800881a:	d807      	bhi.n	800882c <ff_convert+0x40>
 800881c:	1dbb      	adds	r3, r7, #6
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	3b80      	subs	r3, #128	; 0x80
 8008822:	001a      	movs	r2, r3
 8008824:	4b1a      	ldr	r3, [pc, #104]	; (8008890 <ff_convert+0xa4>)
 8008826:	0052      	lsls	r2, r2, #1
 8008828:	5ad2      	ldrh	r2, [r2, r3]
 800882a:	e000      	b.n	800882e <ff_convert+0x42>
 800882c:	2200      	movs	r2, #0
 800882e:	230e      	movs	r3, #14
 8008830:	18fb      	adds	r3, r7, r3
 8008832:	801a      	strh	r2, [r3, #0]
 8008834:	e024      	b.n	8008880 <ff_convert+0x94>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008836:	230e      	movs	r3, #14
 8008838:	18fb      	adds	r3, r7, r3
 800883a:	2200      	movs	r2, #0
 800883c:	801a      	strh	r2, [r3, #0]
 800883e:	e00f      	b.n	8008860 <ff_convert+0x74>
				if (chr == Tbl[c]) break;
 8008840:	230e      	movs	r3, #14
 8008842:	18fb      	adds	r3, r7, r3
 8008844:	881a      	ldrh	r2, [r3, #0]
 8008846:	4b12      	ldr	r3, [pc, #72]	; (8008890 <ff_convert+0xa4>)
 8008848:	0052      	lsls	r2, r2, #1
 800884a:	5ad3      	ldrh	r3, [r2, r3]
 800884c:	1dba      	adds	r2, r7, #6
 800884e:	8812      	ldrh	r2, [r2, #0]
 8008850:	429a      	cmp	r2, r3
 8008852:	d00b      	beq.n	800886c <ff_convert+0x80>
			for (c = 0; c < 0x80; c++) {
 8008854:	210e      	movs	r1, #14
 8008856:	187b      	adds	r3, r7, r1
 8008858:	881a      	ldrh	r2, [r3, #0]
 800885a:	187b      	adds	r3, r7, r1
 800885c:	3201      	adds	r2, #1
 800885e:	801a      	strh	r2, [r3, #0]
 8008860:	230e      	movs	r3, #14
 8008862:	18fb      	adds	r3, r7, r3
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	2b7f      	cmp	r3, #127	; 0x7f
 8008868:	d9ea      	bls.n	8008840 <ff_convert+0x54>
 800886a:	e000      	b.n	800886e <ff_convert+0x82>
				if (chr == Tbl[c]) break;
 800886c:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 800886e:	210e      	movs	r1, #14
 8008870:	187b      	adds	r3, r7, r1
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	3380      	adds	r3, #128	; 0x80
 8008876:	b29a      	uxth	r2, r3
 8008878:	187b      	adds	r3, r7, r1
 800887a:	21ff      	movs	r1, #255	; 0xff
 800887c:	400a      	ands	r2, r1
 800887e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 8008880:	230e      	movs	r3, #14
 8008882:	18fb      	adds	r3, r7, r3
 8008884:	881b      	ldrh	r3, [r3, #0]
}
 8008886:	0018      	movs	r0, r3
 8008888:	46bd      	mov	sp, r7
 800888a:	b004      	add	sp, #16
 800888c:	bd80      	pop	{r7, pc}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	080093c8 	.word	0x080093c8

08008894 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	0002      	movs	r2, r0
 800889c:	1dbb      	adds	r3, r7, #6
 800889e:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e002      	b.n	80088ac <ff_wtoupper+0x18>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3301      	adds	r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <ff_wtoupper+0x58>)
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	0052      	lsls	r2, r2, #1
 80088b2:	5ad3      	ldrh	r3, [r2, r3]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d007      	beq.n	80088c8 <ff_wtoupper+0x34>
 80088b8:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <ff_wtoupper+0x58>)
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	0052      	lsls	r2, r2, #1
 80088be:	5ad3      	ldrh	r3, [r2, r3]
 80088c0:	1dba      	adds	r2, r7, #6
 80088c2:	8812      	ldrh	r2, [r2, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d1ee      	bne.n	80088a6 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80088c8:	4b08      	ldr	r3, [pc, #32]	; (80088ec <ff_wtoupper+0x58>)
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	0052      	lsls	r2, r2, #1
 80088ce:	5ad3      	ldrh	r3, [r2, r3]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d004      	beq.n	80088de <ff_wtoupper+0x4a>
 80088d4:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <ff_wtoupper+0x5c>)
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	0052      	lsls	r2, r2, #1
 80088da:	5ad3      	ldrh	r3, [r2, r3]
 80088dc:	e001      	b.n	80088e2 <ff_wtoupper+0x4e>
 80088de:	1dbb      	adds	r3, r7, #6
 80088e0:	881b      	ldrh	r3, [r3, #0]
}
 80088e2:	0018      	movs	r0, r3
 80088e4:	46bd      	mov	sp, r7
 80088e6:	b004      	add	sp, #16
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	46c0      	nop			; (mov r8, r8)
 80088ec:	080094c8 	.word	0x080094c8
 80088f0:	080096a8 	.word	0x080096a8

080088f4 <__errno>:
 80088f4:	4b01      	ldr	r3, [pc, #4]	; (80088fc <__errno+0x8>)
 80088f6:	6818      	ldr	r0, [r3, #0]
 80088f8:	4770      	bx	lr
 80088fa:	46c0      	nop			; (mov r8, r8)
 80088fc:	20000024 	.word	0x20000024

08008900 <__libc_init_array>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	2600      	movs	r6, #0
 8008904:	4d0c      	ldr	r5, [pc, #48]	; (8008938 <__libc_init_array+0x38>)
 8008906:	4c0d      	ldr	r4, [pc, #52]	; (800893c <__libc_init_array+0x3c>)
 8008908:	1b64      	subs	r4, r4, r5
 800890a:	10a4      	asrs	r4, r4, #2
 800890c:	42a6      	cmp	r6, r4
 800890e:	d109      	bne.n	8008924 <__libc_init_array+0x24>
 8008910:	2600      	movs	r6, #0
 8008912:	f000 fc29 	bl	8009168 <_init>
 8008916:	4d0a      	ldr	r5, [pc, #40]	; (8008940 <__libc_init_array+0x40>)
 8008918:	4c0a      	ldr	r4, [pc, #40]	; (8008944 <__libc_init_array+0x44>)
 800891a:	1b64      	subs	r4, r4, r5
 800891c:	10a4      	asrs	r4, r4, #2
 800891e:	42a6      	cmp	r6, r4
 8008920:	d105      	bne.n	800892e <__libc_init_array+0x2e>
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	00b3      	lsls	r3, r6, #2
 8008926:	58eb      	ldr	r3, [r5, r3]
 8008928:	4798      	blx	r3
 800892a:	3601      	adds	r6, #1
 800892c:	e7ee      	b.n	800890c <__libc_init_array+0xc>
 800892e:	00b3      	lsls	r3, r6, #2
 8008930:	58eb      	ldr	r3, [r5, r3]
 8008932:	4798      	blx	r3
 8008934:	3601      	adds	r6, #1
 8008936:	e7f2      	b.n	800891e <__libc_init_array+0x1e>
 8008938:	080098bc 	.word	0x080098bc
 800893c:	080098bc 	.word	0x080098bc
 8008940:	080098bc 	.word	0x080098bc
 8008944:	080098c0 	.word	0x080098c0

08008948 <memset>:
 8008948:	0003      	movs	r3, r0
 800894a:	1812      	adds	r2, r2, r0
 800894c:	4293      	cmp	r3, r2
 800894e:	d100      	bne.n	8008952 <memset+0xa>
 8008950:	4770      	bx	lr
 8008952:	7019      	strb	r1, [r3, #0]
 8008954:	3301      	adds	r3, #1
 8008956:	e7f9      	b.n	800894c <memset+0x4>

08008958 <siprintf>:
 8008958:	b40e      	push	{r1, r2, r3}
 800895a:	b500      	push	{lr}
 800895c:	490b      	ldr	r1, [pc, #44]	; (800898c <siprintf+0x34>)
 800895e:	b09c      	sub	sp, #112	; 0x70
 8008960:	ab1d      	add	r3, sp, #116	; 0x74
 8008962:	9002      	str	r0, [sp, #8]
 8008964:	9006      	str	r0, [sp, #24]
 8008966:	9107      	str	r1, [sp, #28]
 8008968:	9104      	str	r1, [sp, #16]
 800896a:	4809      	ldr	r0, [pc, #36]	; (8008990 <siprintf+0x38>)
 800896c:	4909      	ldr	r1, [pc, #36]	; (8008994 <siprintf+0x3c>)
 800896e:	cb04      	ldmia	r3!, {r2}
 8008970:	9105      	str	r1, [sp, #20]
 8008972:	6800      	ldr	r0, [r0, #0]
 8008974:	a902      	add	r1, sp, #8
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	f000 f870 	bl	8008a5c <_svfiprintf_r>
 800897c:	2300      	movs	r3, #0
 800897e:	9a02      	ldr	r2, [sp, #8]
 8008980:	7013      	strb	r3, [r2, #0]
 8008982:	b01c      	add	sp, #112	; 0x70
 8008984:	bc08      	pop	{r3}
 8008986:	b003      	add	sp, #12
 8008988:	4718      	bx	r3
 800898a:	46c0      	nop			; (mov r8, r8)
 800898c:	7fffffff 	.word	0x7fffffff
 8008990:	20000024 	.word	0x20000024
 8008994:	ffff0208 	.word	0xffff0208

08008998 <__ssputs_r>:
 8008998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800899a:	688e      	ldr	r6, [r1, #8]
 800899c:	b085      	sub	sp, #20
 800899e:	0007      	movs	r7, r0
 80089a0:	000c      	movs	r4, r1
 80089a2:	9203      	str	r2, [sp, #12]
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	429e      	cmp	r6, r3
 80089a8:	d83c      	bhi.n	8008a24 <__ssputs_r+0x8c>
 80089aa:	2390      	movs	r3, #144	; 0x90
 80089ac:	898a      	ldrh	r2, [r1, #12]
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	421a      	tst	r2, r3
 80089b2:	d034      	beq.n	8008a1e <__ssputs_r+0x86>
 80089b4:	2503      	movs	r5, #3
 80089b6:	6909      	ldr	r1, [r1, #16]
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	1a5b      	subs	r3, r3, r1
 80089bc:	9302      	str	r3, [sp, #8]
 80089be:	6963      	ldr	r3, [r4, #20]
 80089c0:	9802      	ldr	r0, [sp, #8]
 80089c2:	435d      	muls	r5, r3
 80089c4:	0feb      	lsrs	r3, r5, #31
 80089c6:	195d      	adds	r5, r3, r5
 80089c8:	9b01      	ldr	r3, [sp, #4]
 80089ca:	106d      	asrs	r5, r5, #1
 80089cc:	3301      	adds	r3, #1
 80089ce:	181b      	adds	r3, r3, r0
 80089d0:	42ab      	cmp	r3, r5
 80089d2:	d900      	bls.n	80089d6 <__ssputs_r+0x3e>
 80089d4:	001d      	movs	r5, r3
 80089d6:	0553      	lsls	r3, r2, #21
 80089d8:	d532      	bpl.n	8008a40 <__ssputs_r+0xa8>
 80089da:	0029      	movs	r1, r5
 80089dc:	0038      	movs	r0, r7
 80089de:	f000 fb23 	bl	8009028 <_malloc_r>
 80089e2:	1e06      	subs	r6, r0, #0
 80089e4:	d109      	bne.n	80089fa <__ssputs_r+0x62>
 80089e6:	230c      	movs	r3, #12
 80089e8:	603b      	str	r3, [r7, #0]
 80089ea:	2340      	movs	r3, #64	; 0x40
 80089ec:	2001      	movs	r0, #1
 80089ee:	89a2      	ldrh	r2, [r4, #12]
 80089f0:	4240      	negs	r0, r0
 80089f2:	4313      	orrs	r3, r2
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	b005      	add	sp, #20
 80089f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089fa:	9a02      	ldr	r2, [sp, #8]
 80089fc:	6921      	ldr	r1, [r4, #16]
 80089fe:	f000 faac 	bl	8008f5a <memcpy>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	4a14      	ldr	r2, [pc, #80]	; (8008a58 <__ssputs_r+0xc0>)
 8008a06:	401a      	ands	r2, r3
 8008a08:	2380      	movs	r3, #128	; 0x80
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	9b02      	ldr	r3, [sp, #8]
 8008a10:	6126      	str	r6, [r4, #16]
 8008a12:	18f6      	adds	r6, r6, r3
 8008a14:	6026      	str	r6, [r4, #0]
 8008a16:	6165      	str	r5, [r4, #20]
 8008a18:	9e01      	ldr	r6, [sp, #4]
 8008a1a:	1aed      	subs	r5, r5, r3
 8008a1c:	60a5      	str	r5, [r4, #8]
 8008a1e:	9b01      	ldr	r3, [sp, #4]
 8008a20:	429e      	cmp	r6, r3
 8008a22:	d900      	bls.n	8008a26 <__ssputs_r+0x8e>
 8008a24:	9e01      	ldr	r6, [sp, #4]
 8008a26:	0032      	movs	r2, r6
 8008a28:	9903      	ldr	r1, [sp, #12]
 8008a2a:	6820      	ldr	r0, [r4, #0]
 8008a2c:	f000 fa9e 	bl	8008f6c <memmove>
 8008a30:	68a3      	ldr	r3, [r4, #8]
 8008a32:	2000      	movs	r0, #0
 8008a34:	1b9b      	subs	r3, r3, r6
 8008a36:	60a3      	str	r3, [r4, #8]
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	199e      	adds	r6, r3, r6
 8008a3c:	6026      	str	r6, [r4, #0]
 8008a3e:	e7da      	b.n	80089f6 <__ssputs_r+0x5e>
 8008a40:	002a      	movs	r2, r5
 8008a42:	0038      	movs	r0, r7
 8008a44:	f000 fb4e 	bl	80090e4 <_realloc_r>
 8008a48:	1e06      	subs	r6, r0, #0
 8008a4a:	d1e0      	bne.n	8008a0e <__ssputs_r+0x76>
 8008a4c:	6921      	ldr	r1, [r4, #16]
 8008a4e:	0038      	movs	r0, r7
 8008a50:	f000 faa0 	bl	8008f94 <_free_r>
 8008a54:	e7c7      	b.n	80089e6 <__ssputs_r+0x4e>
 8008a56:	46c0      	nop			; (mov r8, r8)
 8008a58:	fffffb7f 	.word	0xfffffb7f

08008a5c <_svfiprintf_r>:
 8008a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a5e:	b0a1      	sub	sp, #132	; 0x84
 8008a60:	9003      	str	r0, [sp, #12]
 8008a62:	001d      	movs	r5, r3
 8008a64:	898b      	ldrh	r3, [r1, #12]
 8008a66:	000f      	movs	r7, r1
 8008a68:	0016      	movs	r6, r2
 8008a6a:	061b      	lsls	r3, r3, #24
 8008a6c:	d511      	bpl.n	8008a92 <_svfiprintf_r+0x36>
 8008a6e:	690b      	ldr	r3, [r1, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10e      	bne.n	8008a92 <_svfiprintf_r+0x36>
 8008a74:	2140      	movs	r1, #64	; 0x40
 8008a76:	f000 fad7 	bl	8009028 <_malloc_r>
 8008a7a:	6038      	str	r0, [r7, #0]
 8008a7c:	6138      	str	r0, [r7, #16]
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d105      	bne.n	8008a8e <_svfiprintf_r+0x32>
 8008a82:	230c      	movs	r3, #12
 8008a84:	9a03      	ldr	r2, [sp, #12]
 8008a86:	3801      	subs	r0, #1
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	b021      	add	sp, #132	; 0x84
 8008a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a8e:	2340      	movs	r3, #64	; 0x40
 8008a90:	617b      	str	r3, [r7, #20]
 8008a92:	2300      	movs	r3, #0
 8008a94:	ac08      	add	r4, sp, #32
 8008a96:	6163      	str	r3, [r4, #20]
 8008a98:	3320      	adds	r3, #32
 8008a9a:	7663      	strb	r3, [r4, #25]
 8008a9c:	3310      	adds	r3, #16
 8008a9e:	76a3      	strb	r3, [r4, #26]
 8008aa0:	9507      	str	r5, [sp, #28]
 8008aa2:	0035      	movs	r5, r6
 8008aa4:	782b      	ldrb	r3, [r5, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <_svfiprintf_r+0x52>
 8008aaa:	2b25      	cmp	r3, #37	; 0x25
 8008aac:	d146      	bne.n	8008b3c <_svfiprintf_r+0xe0>
 8008aae:	1bab      	subs	r3, r5, r6
 8008ab0:	9305      	str	r3, [sp, #20]
 8008ab2:	d00c      	beq.n	8008ace <_svfiprintf_r+0x72>
 8008ab4:	0032      	movs	r2, r6
 8008ab6:	0039      	movs	r1, r7
 8008ab8:	9803      	ldr	r0, [sp, #12]
 8008aba:	f7ff ff6d 	bl	8008998 <__ssputs_r>
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	d100      	bne.n	8008ac4 <_svfiprintf_r+0x68>
 8008ac2:	e0ae      	b.n	8008c22 <_svfiprintf_r+0x1c6>
 8008ac4:	6962      	ldr	r2, [r4, #20]
 8008ac6:	9b05      	ldr	r3, [sp, #20]
 8008ac8:	4694      	mov	ip, r2
 8008aca:	4463      	add	r3, ip
 8008acc:	6163      	str	r3, [r4, #20]
 8008ace:	782b      	ldrb	r3, [r5, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d100      	bne.n	8008ad6 <_svfiprintf_r+0x7a>
 8008ad4:	e0a5      	b.n	8008c22 <_svfiprintf_r+0x1c6>
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4252      	negs	r2, r2
 8008adc:	6062      	str	r2, [r4, #4]
 8008ade:	a904      	add	r1, sp, #16
 8008ae0:	3254      	adds	r2, #84	; 0x54
 8008ae2:	1852      	adds	r2, r2, r1
 8008ae4:	1c6e      	adds	r6, r5, #1
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	60e3      	str	r3, [r4, #12]
 8008aea:	60a3      	str	r3, [r4, #8]
 8008aec:	7013      	strb	r3, [r2, #0]
 8008aee:	65a3      	str	r3, [r4, #88]	; 0x58
 8008af0:	7831      	ldrb	r1, [r6, #0]
 8008af2:	2205      	movs	r2, #5
 8008af4:	4853      	ldr	r0, [pc, #332]	; (8008c44 <_svfiprintf_r+0x1e8>)
 8008af6:	f000 fa25 	bl	8008f44 <memchr>
 8008afa:	1c75      	adds	r5, r6, #1
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d11f      	bne.n	8008b40 <_svfiprintf_r+0xe4>
 8008b00:	6822      	ldr	r2, [r4, #0]
 8008b02:	06d3      	lsls	r3, r2, #27
 8008b04:	d504      	bpl.n	8008b10 <_svfiprintf_r+0xb4>
 8008b06:	2353      	movs	r3, #83	; 0x53
 8008b08:	a904      	add	r1, sp, #16
 8008b0a:	185b      	adds	r3, r3, r1
 8008b0c:	2120      	movs	r1, #32
 8008b0e:	7019      	strb	r1, [r3, #0]
 8008b10:	0713      	lsls	r3, r2, #28
 8008b12:	d504      	bpl.n	8008b1e <_svfiprintf_r+0xc2>
 8008b14:	2353      	movs	r3, #83	; 0x53
 8008b16:	a904      	add	r1, sp, #16
 8008b18:	185b      	adds	r3, r3, r1
 8008b1a:	212b      	movs	r1, #43	; 0x2b
 8008b1c:	7019      	strb	r1, [r3, #0]
 8008b1e:	7833      	ldrb	r3, [r6, #0]
 8008b20:	2b2a      	cmp	r3, #42	; 0x2a
 8008b22:	d016      	beq.n	8008b52 <_svfiprintf_r+0xf6>
 8008b24:	0035      	movs	r5, r6
 8008b26:	2100      	movs	r1, #0
 8008b28:	200a      	movs	r0, #10
 8008b2a:	68e3      	ldr	r3, [r4, #12]
 8008b2c:	782a      	ldrb	r2, [r5, #0]
 8008b2e:	1c6e      	adds	r6, r5, #1
 8008b30:	3a30      	subs	r2, #48	; 0x30
 8008b32:	2a09      	cmp	r2, #9
 8008b34:	d94e      	bls.n	8008bd4 <_svfiprintf_r+0x178>
 8008b36:	2900      	cmp	r1, #0
 8008b38:	d018      	beq.n	8008b6c <_svfiprintf_r+0x110>
 8008b3a:	e010      	b.n	8008b5e <_svfiprintf_r+0x102>
 8008b3c:	3501      	adds	r5, #1
 8008b3e:	e7b1      	b.n	8008aa4 <_svfiprintf_r+0x48>
 8008b40:	4b40      	ldr	r3, [pc, #256]	; (8008c44 <_svfiprintf_r+0x1e8>)
 8008b42:	6822      	ldr	r2, [r4, #0]
 8008b44:	1ac0      	subs	r0, r0, r3
 8008b46:	2301      	movs	r3, #1
 8008b48:	4083      	lsls	r3, r0
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	002e      	movs	r6, r5
 8008b50:	e7ce      	b.n	8008af0 <_svfiprintf_r+0x94>
 8008b52:	9b07      	ldr	r3, [sp, #28]
 8008b54:	1d19      	adds	r1, r3, #4
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	9107      	str	r1, [sp, #28]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	db01      	blt.n	8008b62 <_svfiprintf_r+0x106>
 8008b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b60:	e004      	b.n	8008b6c <_svfiprintf_r+0x110>
 8008b62:	425b      	negs	r3, r3
 8008b64:	60e3      	str	r3, [r4, #12]
 8008b66:	2302      	movs	r3, #2
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	6023      	str	r3, [r4, #0]
 8008b6c:	782b      	ldrb	r3, [r5, #0]
 8008b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b70:	d10a      	bne.n	8008b88 <_svfiprintf_r+0x12c>
 8008b72:	786b      	ldrb	r3, [r5, #1]
 8008b74:	2b2a      	cmp	r3, #42	; 0x2a
 8008b76:	d135      	bne.n	8008be4 <_svfiprintf_r+0x188>
 8008b78:	9b07      	ldr	r3, [sp, #28]
 8008b7a:	3502      	adds	r5, #2
 8008b7c:	1d1a      	adds	r2, r3, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	9207      	str	r2, [sp, #28]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	db2b      	blt.n	8008bde <_svfiprintf_r+0x182>
 8008b86:	9309      	str	r3, [sp, #36]	; 0x24
 8008b88:	4e2f      	ldr	r6, [pc, #188]	; (8008c48 <_svfiprintf_r+0x1ec>)
 8008b8a:	7829      	ldrb	r1, [r5, #0]
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	0030      	movs	r0, r6
 8008b90:	f000 f9d8 	bl	8008f44 <memchr>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d006      	beq.n	8008ba6 <_svfiprintf_r+0x14a>
 8008b98:	2340      	movs	r3, #64	; 0x40
 8008b9a:	1b80      	subs	r0, r0, r6
 8008b9c:	4083      	lsls	r3, r0
 8008b9e:	6822      	ldr	r2, [r4, #0]
 8008ba0:	3501      	adds	r5, #1
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	7829      	ldrb	r1, [r5, #0]
 8008ba8:	2206      	movs	r2, #6
 8008baa:	4828      	ldr	r0, [pc, #160]	; (8008c4c <_svfiprintf_r+0x1f0>)
 8008bac:	1c6e      	adds	r6, r5, #1
 8008bae:	7621      	strb	r1, [r4, #24]
 8008bb0:	f000 f9c8 	bl	8008f44 <memchr>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d03c      	beq.n	8008c32 <_svfiprintf_r+0x1d6>
 8008bb8:	4b25      	ldr	r3, [pc, #148]	; (8008c50 <_svfiprintf_r+0x1f4>)
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d125      	bne.n	8008c0a <_svfiprintf_r+0x1ae>
 8008bbe:	2207      	movs	r2, #7
 8008bc0:	9b07      	ldr	r3, [sp, #28]
 8008bc2:	3307      	adds	r3, #7
 8008bc4:	4393      	bics	r3, r2
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	9307      	str	r3, [sp, #28]
 8008bca:	6963      	ldr	r3, [r4, #20]
 8008bcc:	9a04      	ldr	r2, [sp, #16]
 8008bce:	189b      	adds	r3, r3, r2
 8008bd0:	6163      	str	r3, [r4, #20]
 8008bd2:	e766      	b.n	8008aa2 <_svfiprintf_r+0x46>
 8008bd4:	4343      	muls	r3, r0
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	189b      	adds	r3, r3, r2
 8008bda:	0035      	movs	r5, r6
 8008bdc:	e7a6      	b.n	8008b2c <_svfiprintf_r+0xd0>
 8008bde:	2301      	movs	r3, #1
 8008be0:	425b      	negs	r3, r3
 8008be2:	e7d0      	b.n	8008b86 <_svfiprintf_r+0x12a>
 8008be4:	2300      	movs	r3, #0
 8008be6:	200a      	movs	r0, #10
 8008be8:	001a      	movs	r2, r3
 8008bea:	3501      	adds	r5, #1
 8008bec:	6063      	str	r3, [r4, #4]
 8008bee:	7829      	ldrb	r1, [r5, #0]
 8008bf0:	1c6e      	adds	r6, r5, #1
 8008bf2:	3930      	subs	r1, #48	; 0x30
 8008bf4:	2909      	cmp	r1, #9
 8008bf6:	d903      	bls.n	8008c00 <_svfiprintf_r+0x1a4>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0c5      	beq.n	8008b88 <_svfiprintf_r+0x12c>
 8008bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8008bfe:	e7c3      	b.n	8008b88 <_svfiprintf_r+0x12c>
 8008c00:	4342      	muls	r2, r0
 8008c02:	2301      	movs	r3, #1
 8008c04:	1852      	adds	r2, r2, r1
 8008c06:	0035      	movs	r5, r6
 8008c08:	e7f1      	b.n	8008bee <_svfiprintf_r+0x192>
 8008c0a:	ab07      	add	r3, sp, #28
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	003a      	movs	r2, r7
 8008c10:	4b10      	ldr	r3, [pc, #64]	; (8008c54 <_svfiprintf_r+0x1f8>)
 8008c12:	0021      	movs	r1, r4
 8008c14:	9803      	ldr	r0, [sp, #12]
 8008c16:	e000      	b.n	8008c1a <_svfiprintf_r+0x1be>
 8008c18:	bf00      	nop
 8008c1a:	9004      	str	r0, [sp, #16]
 8008c1c:	9b04      	ldr	r3, [sp, #16]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	d1d3      	bne.n	8008bca <_svfiprintf_r+0x16e>
 8008c22:	89bb      	ldrh	r3, [r7, #12]
 8008c24:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008c26:	065b      	lsls	r3, r3, #25
 8008c28:	d400      	bmi.n	8008c2c <_svfiprintf_r+0x1d0>
 8008c2a:	e72e      	b.n	8008a8a <_svfiprintf_r+0x2e>
 8008c2c:	2001      	movs	r0, #1
 8008c2e:	4240      	negs	r0, r0
 8008c30:	e72b      	b.n	8008a8a <_svfiprintf_r+0x2e>
 8008c32:	ab07      	add	r3, sp, #28
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	003a      	movs	r2, r7
 8008c38:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <_svfiprintf_r+0x1f8>)
 8008c3a:	0021      	movs	r1, r4
 8008c3c:	9803      	ldr	r0, [sp, #12]
 8008c3e:	f000 f879 	bl	8008d34 <_printf_i>
 8008c42:	e7ea      	b.n	8008c1a <_svfiprintf_r+0x1be>
 8008c44:	08009888 	.word	0x08009888
 8008c48:	0800988e 	.word	0x0800988e
 8008c4c:	08009892 	.word	0x08009892
 8008c50:	00000000 	.word	0x00000000
 8008c54:	08008999 	.word	0x08008999

08008c58 <_printf_common>:
 8008c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c5a:	0015      	movs	r5, r2
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	688a      	ldr	r2, [r1, #8]
 8008c60:	690b      	ldr	r3, [r1, #16]
 8008c62:	9000      	str	r0, [sp, #0]
 8008c64:	000c      	movs	r4, r1
 8008c66:	4293      	cmp	r3, r2
 8008c68:	da00      	bge.n	8008c6c <_printf_common+0x14>
 8008c6a:	0013      	movs	r3, r2
 8008c6c:	0022      	movs	r2, r4
 8008c6e:	602b      	str	r3, [r5, #0]
 8008c70:	3243      	adds	r2, #67	; 0x43
 8008c72:	7812      	ldrb	r2, [r2, #0]
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	d001      	beq.n	8008c7c <_printf_common+0x24>
 8008c78:	3301      	adds	r3, #1
 8008c7a:	602b      	str	r3, [r5, #0]
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	069b      	lsls	r3, r3, #26
 8008c80:	d502      	bpl.n	8008c88 <_printf_common+0x30>
 8008c82:	682b      	ldr	r3, [r5, #0]
 8008c84:	3302      	adds	r3, #2
 8008c86:	602b      	str	r3, [r5, #0]
 8008c88:	2706      	movs	r7, #6
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	401f      	ands	r7, r3
 8008c8e:	d027      	beq.n	8008ce0 <_printf_common+0x88>
 8008c90:	0023      	movs	r3, r4
 8008c92:	3343      	adds	r3, #67	; 0x43
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	1e5a      	subs	r2, r3, #1
 8008c98:	4193      	sbcs	r3, r2
 8008c9a:	6822      	ldr	r2, [r4, #0]
 8008c9c:	0692      	lsls	r2, r2, #26
 8008c9e:	d430      	bmi.n	8008d02 <_printf_common+0xaa>
 8008ca0:	0022      	movs	r2, r4
 8008ca2:	9901      	ldr	r1, [sp, #4]
 8008ca4:	3243      	adds	r2, #67	; 0x43
 8008ca6:	9800      	ldr	r0, [sp, #0]
 8008ca8:	9e08      	ldr	r6, [sp, #32]
 8008caa:	47b0      	blx	r6
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d025      	beq.n	8008cfc <_printf_common+0xa4>
 8008cb0:	2306      	movs	r3, #6
 8008cb2:	6820      	ldr	r0, [r4, #0]
 8008cb4:	682a      	ldr	r2, [r5, #0]
 8008cb6:	68e1      	ldr	r1, [r4, #12]
 8008cb8:	4003      	ands	r3, r0
 8008cba:	2500      	movs	r5, #0
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d103      	bne.n	8008cc8 <_printf_common+0x70>
 8008cc0:	1a8d      	subs	r5, r1, r2
 8008cc2:	43eb      	mvns	r3, r5
 8008cc4:	17db      	asrs	r3, r3, #31
 8008cc6:	401d      	ands	r5, r3
 8008cc8:	68a3      	ldr	r3, [r4, #8]
 8008cca:	6922      	ldr	r2, [r4, #16]
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	dd01      	ble.n	8008cd4 <_printf_common+0x7c>
 8008cd0:	1a9b      	subs	r3, r3, r2
 8008cd2:	18ed      	adds	r5, r5, r3
 8008cd4:	2700      	movs	r7, #0
 8008cd6:	42bd      	cmp	r5, r7
 8008cd8:	d120      	bne.n	8008d1c <_printf_common+0xc4>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e010      	b.n	8008d00 <_printf_common+0xa8>
 8008cde:	3701      	adds	r7, #1
 8008ce0:	68e3      	ldr	r3, [r4, #12]
 8008ce2:	682a      	ldr	r2, [r5, #0]
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	42bb      	cmp	r3, r7
 8008ce8:	ddd2      	ble.n	8008c90 <_printf_common+0x38>
 8008cea:	0022      	movs	r2, r4
 8008cec:	2301      	movs	r3, #1
 8008cee:	3219      	adds	r2, #25
 8008cf0:	9901      	ldr	r1, [sp, #4]
 8008cf2:	9800      	ldr	r0, [sp, #0]
 8008cf4:	9e08      	ldr	r6, [sp, #32]
 8008cf6:	47b0      	blx	r6
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d1f0      	bne.n	8008cde <_printf_common+0x86>
 8008cfc:	2001      	movs	r0, #1
 8008cfe:	4240      	negs	r0, r0
 8008d00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d02:	2030      	movs	r0, #48	; 0x30
 8008d04:	18e1      	adds	r1, r4, r3
 8008d06:	3143      	adds	r1, #67	; 0x43
 8008d08:	7008      	strb	r0, [r1, #0]
 8008d0a:	0021      	movs	r1, r4
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	3145      	adds	r1, #69	; 0x45
 8008d10:	7809      	ldrb	r1, [r1, #0]
 8008d12:	18a2      	adds	r2, r4, r2
 8008d14:	3243      	adds	r2, #67	; 0x43
 8008d16:	3302      	adds	r3, #2
 8008d18:	7011      	strb	r1, [r2, #0]
 8008d1a:	e7c1      	b.n	8008ca0 <_printf_common+0x48>
 8008d1c:	0022      	movs	r2, r4
 8008d1e:	2301      	movs	r3, #1
 8008d20:	321a      	adds	r2, #26
 8008d22:	9901      	ldr	r1, [sp, #4]
 8008d24:	9800      	ldr	r0, [sp, #0]
 8008d26:	9e08      	ldr	r6, [sp, #32]
 8008d28:	47b0      	blx	r6
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	d0e6      	beq.n	8008cfc <_printf_common+0xa4>
 8008d2e:	3701      	adds	r7, #1
 8008d30:	e7d1      	b.n	8008cd6 <_printf_common+0x7e>
	...

08008d34 <_printf_i>:
 8008d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d36:	b089      	sub	sp, #36	; 0x24
 8008d38:	9204      	str	r2, [sp, #16]
 8008d3a:	000a      	movs	r2, r1
 8008d3c:	3243      	adds	r2, #67	; 0x43
 8008d3e:	9305      	str	r3, [sp, #20]
 8008d40:	9003      	str	r0, [sp, #12]
 8008d42:	9202      	str	r2, [sp, #8]
 8008d44:	7e0a      	ldrb	r2, [r1, #24]
 8008d46:	000c      	movs	r4, r1
 8008d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d4a:	2a6e      	cmp	r2, #110	; 0x6e
 8008d4c:	d100      	bne.n	8008d50 <_printf_i+0x1c>
 8008d4e:	e086      	b.n	8008e5e <_printf_i+0x12a>
 8008d50:	d81f      	bhi.n	8008d92 <_printf_i+0x5e>
 8008d52:	2a63      	cmp	r2, #99	; 0x63
 8008d54:	d033      	beq.n	8008dbe <_printf_i+0x8a>
 8008d56:	d808      	bhi.n	8008d6a <_printf_i+0x36>
 8008d58:	2a00      	cmp	r2, #0
 8008d5a:	d100      	bne.n	8008d5e <_printf_i+0x2a>
 8008d5c:	e08c      	b.n	8008e78 <_printf_i+0x144>
 8008d5e:	2a58      	cmp	r2, #88	; 0x58
 8008d60:	d04d      	beq.n	8008dfe <_printf_i+0xca>
 8008d62:	0025      	movs	r5, r4
 8008d64:	3542      	adds	r5, #66	; 0x42
 8008d66:	702a      	strb	r2, [r5, #0]
 8008d68:	e030      	b.n	8008dcc <_printf_i+0x98>
 8008d6a:	2a64      	cmp	r2, #100	; 0x64
 8008d6c:	d001      	beq.n	8008d72 <_printf_i+0x3e>
 8008d6e:	2a69      	cmp	r2, #105	; 0x69
 8008d70:	d1f7      	bne.n	8008d62 <_printf_i+0x2e>
 8008d72:	6819      	ldr	r1, [r3, #0]
 8008d74:	6825      	ldr	r5, [r4, #0]
 8008d76:	1d0a      	adds	r2, r1, #4
 8008d78:	0628      	lsls	r0, r5, #24
 8008d7a:	d529      	bpl.n	8008dd0 <_printf_i+0x9c>
 8008d7c:	6808      	ldr	r0, [r1, #0]
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	2800      	cmp	r0, #0
 8008d82:	da03      	bge.n	8008d8c <_printf_i+0x58>
 8008d84:	232d      	movs	r3, #45	; 0x2d
 8008d86:	9a02      	ldr	r2, [sp, #8]
 8008d88:	4240      	negs	r0, r0
 8008d8a:	7013      	strb	r3, [r2, #0]
 8008d8c:	4e6b      	ldr	r6, [pc, #428]	; (8008f3c <_printf_i+0x208>)
 8008d8e:	270a      	movs	r7, #10
 8008d90:	e04f      	b.n	8008e32 <_printf_i+0xfe>
 8008d92:	2a73      	cmp	r2, #115	; 0x73
 8008d94:	d074      	beq.n	8008e80 <_printf_i+0x14c>
 8008d96:	d808      	bhi.n	8008daa <_printf_i+0x76>
 8008d98:	2a6f      	cmp	r2, #111	; 0x6f
 8008d9a:	d01f      	beq.n	8008ddc <_printf_i+0xa8>
 8008d9c:	2a70      	cmp	r2, #112	; 0x70
 8008d9e:	d1e0      	bne.n	8008d62 <_printf_i+0x2e>
 8008da0:	2220      	movs	r2, #32
 8008da2:	6809      	ldr	r1, [r1, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	6022      	str	r2, [r4, #0]
 8008da8:	e003      	b.n	8008db2 <_printf_i+0x7e>
 8008daa:	2a75      	cmp	r2, #117	; 0x75
 8008dac:	d016      	beq.n	8008ddc <_printf_i+0xa8>
 8008dae:	2a78      	cmp	r2, #120	; 0x78
 8008db0:	d1d7      	bne.n	8008d62 <_printf_i+0x2e>
 8008db2:	0022      	movs	r2, r4
 8008db4:	2178      	movs	r1, #120	; 0x78
 8008db6:	3245      	adds	r2, #69	; 0x45
 8008db8:	7011      	strb	r1, [r2, #0]
 8008dba:	4e61      	ldr	r6, [pc, #388]	; (8008f40 <_printf_i+0x20c>)
 8008dbc:	e022      	b.n	8008e04 <_printf_i+0xd0>
 8008dbe:	0025      	movs	r5, r4
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	3542      	adds	r5, #66	; 0x42
 8008dc4:	1d11      	adds	r1, r2, #4
 8008dc6:	6019      	str	r1, [r3, #0]
 8008dc8:	6813      	ldr	r3, [r2, #0]
 8008dca:	702b      	strb	r3, [r5, #0]
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e065      	b.n	8008e9c <_printf_i+0x168>
 8008dd0:	6808      	ldr	r0, [r1, #0]
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	0669      	lsls	r1, r5, #25
 8008dd6:	d5d3      	bpl.n	8008d80 <_printf_i+0x4c>
 8008dd8:	b200      	sxth	r0, r0
 8008dda:	e7d1      	b.n	8008d80 <_printf_i+0x4c>
 8008ddc:	6819      	ldr	r1, [r3, #0]
 8008dde:	6825      	ldr	r5, [r4, #0]
 8008de0:	1d08      	adds	r0, r1, #4
 8008de2:	6018      	str	r0, [r3, #0]
 8008de4:	6808      	ldr	r0, [r1, #0]
 8008de6:	062e      	lsls	r6, r5, #24
 8008de8:	d505      	bpl.n	8008df6 <_printf_i+0xc2>
 8008dea:	4e54      	ldr	r6, [pc, #336]	; (8008f3c <_printf_i+0x208>)
 8008dec:	2708      	movs	r7, #8
 8008dee:	2a6f      	cmp	r2, #111	; 0x6f
 8008df0:	d01b      	beq.n	8008e2a <_printf_i+0xf6>
 8008df2:	270a      	movs	r7, #10
 8008df4:	e019      	b.n	8008e2a <_printf_i+0xf6>
 8008df6:	066d      	lsls	r5, r5, #25
 8008df8:	d5f7      	bpl.n	8008dea <_printf_i+0xb6>
 8008dfa:	b280      	uxth	r0, r0
 8008dfc:	e7f5      	b.n	8008dea <_printf_i+0xb6>
 8008dfe:	3145      	adds	r1, #69	; 0x45
 8008e00:	4e4e      	ldr	r6, [pc, #312]	; (8008f3c <_printf_i+0x208>)
 8008e02:	700a      	strb	r2, [r1, #0]
 8008e04:	6818      	ldr	r0, [r3, #0]
 8008e06:	6822      	ldr	r2, [r4, #0]
 8008e08:	1d01      	adds	r1, r0, #4
 8008e0a:	6800      	ldr	r0, [r0, #0]
 8008e0c:	6019      	str	r1, [r3, #0]
 8008e0e:	0615      	lsls	r5, r2, #24
 8008e10:	d521      	bpl.n	8008e56 <_printf_i+0x122>
 8008e12:	07d3      	lsls	r3, r2, #31
 8008e14:	d502      	bpl.n	8008e1c <_printf_i+0xe8>
 8008e16:	2320      	movs	r3, #32
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	6022      	str	r2, [r4, #0]
 8008e1c:	2710      	movs	r7, #16
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d103      	bne.n	8008e2a <_printf_i+0xf6>
 8008e22:	2320      	movs	r3, #32
 8008e24:	6822      	ldr	r2, [r4, #0]
 8008e26:	439a      	bics	r2, r3
 8008e28:	6022      	str	r2, [r4, #0]
 8008e2a:	0023      	movs	r3, r4
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	3343      	adds	r3, #67	; 0x43
 8008e30:	701a      	strb	r2, [r3, #0]
 8008e32:	6863      	ldr	r3, [r4, #4]
 8008e34:	60a3      	str	r3, [r4, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	db58      	blt.n	8008eec <_printf_i+0x1b8>
 8008e3a:	2204      	movs	r2, #4
 8008e3c:	6821      	ldr	r1, [r4, #0]
 8008e3e:	4391      	bics	r1, r2
 8008e40:	6021      	str	r1, [r4, #0]
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d154      	bne.n	8008ef0 <_printf_i+0x1bc>
 8008e46:	9d02      	ldr	r5, [sp, #8]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d05a      	beq.n	8008f02 <_printf_i+0x1ce>
 8008e4c:	0025      	movs	r5, r4
 8008e4e:	7833      	ldrb	r3, [r6, #0]
 8008e50:	3542      	adds	r5, #66	; 0x42
 8008e52:	702b      	strb	r3, [r5, #0]
 8008e54:	e055      	b.n	8008f02 <_printf_i+0x1ce>
 8008e56:	0655      	lsls	r5, r2, #25
 8008e58:	d5db      	bpl.n	8008e12 <_printf_i+0xde>
 8008e5a:	b280      	uxth	r0, r0
 8008e5c:	e7d9      	b.n	8008e12 <_printf_i+0xde>
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	680d      	ldr	r5, [r1, #0]
 8008e62:	1d10      	adds	r0, r2, #4
 8008e64:	6949      	ldr	r1, [r1, #20]
 8008e66:	6018      	str	r0, [r3, #0]
 8008e68:	6813      	ldr	r3, [r2, #0]
 8008e6a:	062e      	lsls	r6, r5, #24
 8008e6c:	d501      	bpl.n	8008e72 <_printf_i+0x13e>
 8008e6e:	6019      	str	r1, [r3, #0]
 8008e70:	e002      	b.n	8008e78 <_printf_i+0x144>
 8008e72:	066d      	lsls	r5, r5, #25
 8008e74:	d5fb      	bpl.n	8008e6e <_printf_i+0x13a>
 8008e76:	8019      	strh	r1, [r3, #0]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	9d02      	ldr	r5, [sp, #8]
 8008e7c:	6123      	str	r3, [r4, #16]
 8008e7e:	e04f      	b.n	8008f20 <_printf_i+0x1ec>
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	1d11      	adds	r1, r2, #4
 8008e84:	6019      	str	r1, [r3, #0]
 8008e86:	6815      	ldr	r5, [r2, #0]
 8008e88:	2100      	movs	r1, #0
 8008e8a:	6862      	ldr	r2, [r4, #4]
 8008e8c:	0028      	movs	r0, r5
 8008e8e:	f000 f859 	bl	8008f44 <memchr>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d001      	beq.n	8008e9a <_printf_i+0x166>
 8008e96:	1b40      	subs	r0, r0, r5
 8008e98:	6060      	str	r0, [r4, #4]
 8008e9a:	6863      	ldr	r3, [r4, #4]
 8008e9c:	6123      	str	r3, [r4, #16]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9a02      	ldr	r2, [sp, #8]
 8008ea2:	7013      	strb	r3, [r2, #0]
 8008ea4:	e03c      	b.n	8008f20 <_printf_i+0x1ec>
 8008ea6:	6923      	ldr	r3, [r4, #16]
 8008ea8:	002a      	movs	r2, r5
 8008eaa:	9904      	ldr	r1, [sp, #16]
 8008eac:	9803      	ldr	r0, [sp, #12]
 8008eae:	9d05      	ldr	r5, [sp, #20]
 8008eb0:	47a8      	blx	r5
 8008eb2:	1c43      	adds	r3, r0, #1
 8008eb4:	d03e      	beq.n	8008f34 <_printf_i+0x200>
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	079b      	lsls	r3, r3, #30
 8008eba:	d415      	bmi.n	8008ee8 <_printf_i+0x1b4>
 8008ebc:	9b07      	ldr	r3, [sp, #28]
 8008ebe:	68e0      	ldr	r0, [r4, #12]
 8008ec0:	4298      	cmp	r0, r3
 8008ec2:	da39      	bge.n	8008f38 <_printf_i+0x204>
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	e037      	b.n	8008f38 <_printf_i+0x204>
 8008ec8:	0022      	movs	r2, r4
 8008eca:	2301      	movs	r3, #1
 8008ecc:	3219      	adds	r2, #25
 8008ece:	9904      	ldr	r1, [sp, #16]
 8008ed0:	9803      	ldr	r0, [sp, #12]
 8008ed2:	9e05      	ldr	r6, [sp, #20]
 8008ed4:	47b0      	blx	r6
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d02c      	beq.n	8008f34 <_printf_i+0x200>
 8008eda:	3501      	adds	r5, #1
 8008edc:	68e3      	ldr	r3, [r4, #12]
 8008ede:	9a07      	ldr	r2, [sp, #28]
 8008ee0:	1a9b      	subs	r3, r3, r2
 8008ee2:	42ab      	cmp	r3, r5
 8008ee4:	dcf0      	bgt.n	8008ec8 <_printf_i+0x194>
 8008ee6:	e7e9      	b.n	8008ebc <_printf_i+0x188>
 8008ee8:	2500      	movs	r5, #0
 8008eea:	e7f7      	b.n	8008edc <_printf_i+0x1a8>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d0ad      	beq.n	8008e4c <_printf_i+0x118>
 8008ef0:	9d02      	ldr	r5, [sp, #8]
 8008ef2:	0039      	movs	r1, r7
 8008ef4:	f7f7 f996 	bl	8000224 <__aeabi_uidivmod>
 8008ef8:	5c73      	ldrb	r3, [r6, r1]
 8008efa:	3d01      	subs	r5, #1
 8008efc:	702b      	strb	r3, [r5, #0]
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d1f7      	bne.n	8008ef2 <_printf_i+0x1be>
 8008f02:	2f08      	cmp	r7, #8
 8008f04:	d109      	bne.n	8008f1a <_printf_i+0x1e6>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	07db      	lsls	r3, r3, #31
 8008f0a:	d506      	bpl.n	8008f1a <_printf_i+0x1e6>
 8008f0c:	6863      	ldr	r3, [r4, #4]
 8008f0e:	6922      	ldr	r2, [r4, #16]
 8008f10:	4293      	cmp	r3, r2
 8008f12:	dc02      	bgt.n	8008f1a <_printf_i+0x1e6>
 8008f14:	2330      	movs	r3, #48	; 0x30
 8008f16:	3d01      	subs	r5, #1
 8008f18:	702b      	strb	r3, [r5, #0]
 8008f1a:	9b02      	ldr	r3, [sp, #8]
 8008f1c:	1b5b      	subs	r3, r3, r5
 8008f1e:	6123      	str	r3, [r4, #16]
 8008f20:	9b05      	ldr	r3, [sp, #20]
 8008f22:	aa07      	add	r2, sp, #28
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	0021      	movs	r1, r4
 8008f28:	9b04      	ldr	r3, [sp, #16]
 8008f2a:	9803      	ldr	r0, [sp, #12]
 8008f2c:	f7ff fe94 	bl	8008c58 <_printf_common>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d1b8      	bne.n	8008ea6 <_printf_i+0x172>
 8008f34:	2001      	movs	r0, #1
 8008f36:	4240      	negs	r0, r0
 8008f38:	b009      	add	sp, #36	; 0x24
 8008f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f3c:	08009899 	.word	0x08009899
 8008f40:	080098aa 	.word	0x080098aa

08008f44 <memchr>:
 8008f44:	b2c9      	uxtb	r1, r1
 8008f46:	1882      	adds	r2, r0, r2
 8008f48:	4290      	cmp	r0, r2
 8008f4a:	d101      	bne.n	8008f50 <memchr+0xc>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	4770      	bx	lr
 8008f50:	7803      	ldrb	r3, [r0, #0]
 8008f52:	428b      	cmp	r3, r1
 8008f54:	d0fb      	beq.n	8008f4e <memchr+0xa>
 8008f56:	3001      	adds	r0, #1
 8008f58:	e7f6      	b.n	8008f48 <memchr+0x4>

08008f5a <memcpy>:
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d100      	bne.n	8008f64 <memcpy+0xa>
 8008f62:	bd10      	pop	{r4, pc}
 8008f64:	5ccc      	ldrb	r4, [r1, r3]
 8008f66:	54c4      	strb	r4, [r0, r3]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	e7f8      	b.n	8008f5e <memcpy+0x4>

08008f6c <memmove>:
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	4288      	cmp	r0, r1
 8008f70:	d902      	bls.n	8008f78 <memmove+0xc>
 8008f72:	188b      	adds	r3, r1, r2
 8008f74:	4298      	cmp	r0, r3
 8008f76:	d303      	bcc.n	8008f80 <memmove+0x14>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	e007      	b.n	8008f8c <memmove+0x20>
 8008f7c:	5c8b      	ldrb	r3, [r1, r2]
 8008f7e:	5483      	strb	r3, [r0, r2]
 8008f80:	3a01      	subs	r2, #1
 8008f82:	d2fb      	bcs.n	8008f7c <memmove+0x10>
 8008f84:	bd10      	pop	{r4, pc}
 8008f86:	5ccc      	ldrb	r4, [r1, r3]
 8008f88:	54c4      	strb	r4, [r0, r3]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d1fa      	bne.n	8008f86 <memmove+0x1a>
 8008f90:	e7f8      	b.n	8008f84 <memmove+0x18>
	...

08008f94 <_free_r>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	0005      	movs	r5, r0
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	d010      	beq.n	8008fbe <_free_r+0x2a>
 8008f9c:	1f0c      	subs	r4, r1, #4
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	da00      	bge.n	8008fa6 <_free_r+0x12>
 8008fa4:	18e4      	adds	r4, r4, r3
 8008fa6:	0028      	movs	r0, r5
 8008fa8:	f000 f8d4 	bl	8009154 <__malloc_lock>
 8008fac:	4a1d      	ldr	r2, [pc, #116]	; (8009024 <_free_r+0x90>)
 8008fae:	6813      	ldr	r3, [r2, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d105      	bne.n	8008fc0 <_free_r+0x2c>
 8008fb4:	6063      	str	r3, [r4, #4]
 8008fb6:	6014      	str	r4, [r2, #0]
 8008fb8:	0028      	movs	r0, r5
 8008fba:	f000 f8cc 	bl	8009156 <__malloc_unlock>
 8008fbe:	bd70      	pop	{r4, r5, r6, pc}
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d909      	bls.n	8008fd8 <_free_r+0x44>
 8008fc4:	6821      	ldr	r1, [r4, #0]
 8008fc6:	1860      	adds	r0, r4, r1
 8008fc8:	4283      	cmp	r3, r0
 8008fca:	d1f3      	bne.n	8008fb4 <_free_r+0x20>
 8008fcc:	6818      	ldr	r0, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	1841      	adds	r1, r0, r1
 8008fd2:	6021      	str	r1, [r4, #0]
 8008fd4:	e7ee      	b.n	8008fb4 <_free_r+0x20>
 8008fd6:	0013      	movs	r3, r2
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	2a00      	cmp	r2, #0
 8008fdc:	d001      	beq.n	8008fe2 <_free_r+0x4e>
 8008fde:	42a2      	cmp	r2, r4
 8008fe0:	d9f9      	bls.n	8008fd6 <_free_r+0x42>
 8008fe2:	6819      	ldr	r1, [r3, #0]
 8008fe4:	1858      	adds	r0, r3, r1
 8008fe6:	42a0      	cmp	r0, r4
 8008fe8:	d10b      	bne.n	8009002 <_free_r+0x6e>
 8008fea:	6820      	ldr	r0, [r4, #0]
 8008fec:	1809      	adds	r1, r1, r0
 8008fee:	1858      	adds	r0, r3, r1
 8008ff0:	6019      	str	r1, [r3, #0]
 8008ff2:	4282      	cmp	r2, r0
 8008ff4:	d1e0      	bne.n	8008fb8 <_free_r+0x24>
 8008ff6:	6810      	ldr	r0, [r2, #0]
 8008ff8:	6852      	ldr	r2, [r2, #4]
 8008ffa:	1841      	adds	r1, r0, r1
 8008ffc:	6019      	str	r1, [r3, #0]
 8008ffe:	605a      	str	r2, [r3, #4]
 8009000:	e7da      	b.n	8008fb8 <_free_r+0x24>
 8009002:	42a0      	cmp	r0, r4
 8009004:	d902      	bls.n	800900c <_free_r+0x78>
 8009006:	230c      	movs	r3, #12
 8009008:	602b      	str	r3, [r5, #0]
 800900a:	e7d5      	b.n	8008fb8 <_free_r+0x24>
 800900c:	6821      	ldr	r1, [r4, #0]
 800900e:	1860      	adds	r0, r4, r1
 8009010:	4282      	cmp	r2, r0
 8009012:	d103      	bne.n	800901c <_free_r+0x88>
 8009014:	6810      	ldr	r0, [r2, #0]
 8009016:	6852      	ldr	r2, [r2, #4]
 8009018:	1841      	adds	r1, r0, r1
 800901a:	6021      	str	r1, [r4, #0]
 800901c:	6062      	str	r2, [r4, #4]
 800901e:	605c      	str	r4, [r3, #4]
 8009020:	e7ca      	b.n	8008fb8 <_free_r+0x24>
 8009022:	46c0      	nop			; (mov r8, r8)
 8009024:	200002d8 	.word	0x200002d8

08009028 <_malloc_r>:
 8009028:	2303      	movs	r3, #3
 800902a:	b570      	push	{r4, r5, r6, lr}
 800902c:	1ccd      	adds	r5, r1, #3
 800902e:	439d      	bics	r5, r3
 8009030:	3508      	adds	r5, #8
 8009032:	0006      	movs	r6, r0
 8009034:	2d0c      	cmp	r5, #12
 8009036:	d21e      	bcs.n	8009076 <_malloc_r+0x4e>
 8009038:	250c      	movs	r5, #12
 800903a:	42a9      	cmp	r1, r5
 800903c:	d81d      	bhi.n	800907a <_malloc_r+0x52>
 800903e:	0030      	movs	r0, r6
 8009040:	f000 f888 	bl	8009154 <__malloc_lock>
 8009044:	4a25      	ldr	r2, [pc, #148]	; (80090dc <_malloc_r+0xb4>)
 8009046:	6814      	ldr	r4, [r2, #0]
 8009048:	0021      	movs	r1, r4
 800904a:	2900      	cmp	r1, #0
 800904c:	d119      	bne.n	8009082 <_malloc_r+0x5a>
 800904e:	4c24      	ldr	r4, [pc, #144]	; (80090e0 <_malloc_r+0xb8>)
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d103      	bne.n	800905e <_malloc_r+0x36>
 8009056:	0030      	movs	r0, r6
 8009058:	f000 f86a 	bl	8009130 <_sbrk_r>
 800905c:	6020      	str	r0, [r4, #0]
 800905e:	0029      	movs	r1, r5
 8009060:	0030      	movs	r0, r6
 8009062:	f000 f865 	bl	8009130 <_sbrk_r>
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	d12b      	bne.n	80090c2 <_malloc_r+0x9a>
 800906a:	230c      	movs	r3, #12
 800906c:	0030      	movs	r0, r6
 800906e:	6033      	str	r3, [r6, #0]
 8009070:	f000 f871 	bl	8009156 <__malloc_unlock>
 8009074:	e003      	b.n	800907e <_malloc_r+0x56>
 8009076:	2d00      	cmp	r5, #0
 8009078:	dadf      	bge.n	800903a <_malloc_r+0x12>
 800907a:	230c      	movs	r3, #12
 800907c:	6033      	str	r3, [r6, #0]
 800907e:	2000      	movs	r0, #0
 8009080:	bd70      	pop	{r4, r5, r6, pc}
 8009082:	680b      	ldr	r3, [r1, #0]
 8009084:	1b5b      	subs	r3, r3, r5
 8009086:	d419      	bmi.n	80090bc <_malloc_r+0x94>
 8009088:	2b0b      	cmp	r3, #11
 800908a:	d903      	bls.n	8009094 <_malloc_r+0x6c>
 800908c:	600b      	str	r3, [r1, #0]
 800908e:	18cc      	adds	r4, r1, r3
 8009090:	6025      	str	r5, [r4, #0]
 8009092:	e003      	b.n	800909c <_malloc_r+0x74>
 8009094:	684b      	ldr	r3, [r1, #4]
 8009096:	428c      	cmp	r4, r1
 8009098:	d10d      	bne.n	80090b6 <_malloc_r+0x8e>
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	0030      	movs	r0, r6
 800909e:	f000 f85a 	bl	8009156 <__malloc_unlock>
 80090a2:	0020      	movs	r0, r4
 80090a4:	2207      	movs	r2, #7
 80090a6:	300b      	adds	r0, #11
 80090a8:	1d23      	adds	r3, r4, #4
 80090aa:	4390      	bics	r0, r2
 80090ac:	1ac3      	subs	r3, r0, r3
 80090ae:	d0e7      	beq.n	8009080 <_malloc_r+0x58>
 80090b0:	425a      	negs	r2, r3
 80090b2:	50e2      	str	r2, [r4, r3]
 80090b4:	e7e4      	b.n	8009080 <_malloc_r+0x58>
 80090b6:	6063      	str	r3, [r4, #4]
 80090b8:	000c      	movs	r4, r1
 80090ba:	e7ef      	b.n	800909c <_malloc_r+0x74>
 80090bc:	000c      	movs	r4, r1
 80090be:	6849      	ldr	r1, [r1, #4]
 80090c0:	e7c3      	b.n	800904a <_malloc_r+0x22>
 80090c2:	2303      	movs	r3, #3
 80090c4:	1cc4      	adds	r4, r0, #3
 80090c6:	439c      	bics	r4, r3
 80090c8:	42a0      	cmp	r0, r4
 80090ca:	d0e1      	beq.n	8009090 <_malloc_r+0x68>
 80090cc:	1a21      	subs	r1, r4, r0
 80090ce:	0030      	movs	r0, r6
 80090d0:	f000 f82e 	bl	8009130 <_sbrk_r>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d1db      	bne.n	8009090 <_malloc_r+0x68>
 80090d8:	e7c7      	b.n	800906a <_malloc_r+0x42>
 80090da:	46c0      	nop			; (mov r8, r8)
 80090dc:	200002d8 	.word	0x200002d8
 80090e0:	200002dc 	.word	0x200002dc

080090e4 <_realloc_r>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	0007      	movs	r7, r0
 80090e8:	000d      	movs	r5, r1
 80090ea:	0016      	movs	r6, r2
 80090ec:	2900      	cmp	r1, #0
 80090ee:	d105      	bne.n	80090fc <_realloc_r+0x18>
 80090f0:	0011      	movs	r1, r2
 80090f2:	f7ff ff99 	bl	8009028 <_malloc_r>
 80090f6:	0004      	movs	r4, r0
 80090f8:	0020      	movs	r0, r4
 80090fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090fc:	2a00      	cmp	r2, #0
 80090fe:	d103      	bne.n	8009108 <_realloc_r+0x24>
 8009100:	f7ff ff48 	bl	8008f94 <_free_r>
 8009104:	0034      	movs	r4, r6
 8009106:	e7f7      	b.n	80090f8 <_realloc_r+0x14>
 8009108:	f000 f826 	bl	8009158 <_malloc_usable_size_r>
 800910c:	002c      	movs	r4, r5
 800910e:	42b0      	cmp	r0, r6
 8009110:	d2f2      	bcs.n	80090f8 <_realloc_r+0x14>
 8009112:	0031      	movs	r1, r6
 8009114:	0038      	movs	r0, r7
 8009116:	f7ff ff87 	bl	8009028 <_malloc_r>
 800911a:	1e04      	subs	r4, r0, #0
 800911c:	d0ec      	beq.n	80090f8 <_realloc_r+0x14>
 800911e:	0029      	movs	r1, r5
 8009120:	0032      	movs	r2, r6
 8009122:	f7ff ff1a 	bl	8008f5a <memcpy>
 8009126:	0029      	movs	r1, r5
 8009128:	0038      	movs	r0, r7
 800912a:	f7ff ff33 	bl	8008f94 <_free_r>
 800912e:	e7e3      	b.n	80090f8 <_realloc_r+0x14>

08009130 <_sbrk_r>:
 8009130:	2300      	movs	r3, #0
 8009132:	b570      	push	{r4, r5, r6, lr}
 8009134:	4c06      	ldr	r4, [pc, #24]	; (8009150 <_sbrk_r+0x20>)
 8009136:	0005      	movs	r5, r0
 8009138:	0008      	movs	r0, r1
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	f7f9 f8a4 	bl	8002288 <_sbrk>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d103      	bne.n	800914c <_sbrk_r+0x1c>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d000      	beq.n	800914c <_sbrk_r+0x1c>
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	bd70      	pop	{r4, r5, r6, pc}
 800914e:	46c0      	nop			; (mov r8, r8)
 8009150:	200018a0 	.word	0x200018a0

08009154 <__malloc_lock>:
 8009154:	4770      	bx	lr

08009156 <__malloc_unlock>:
 8009156:	4770      	bx	lr

08009158 <_malloc_usable_size_r>:
 8009158:	1f0b      	subs	r3, r1, #4
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	1f18      	subs	r0, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	da01      	bge.n	8009166 <_malloc_usable_size_r+0xe>
 8009162:	580b      	ldr	r3, [r1, r0]
 8009164:	18c0      	adds	r0, r0, r3
 8009166:	4770      	bx	lr

08009168 <_init>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	46c0      	nop			; (mov r8, r8)
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr

08009174 <_fini>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917a:	bc08      	pop	{r3}
 800917c:	469e      	mov	lr, r3
 800917e:	4770      	bx	lr
